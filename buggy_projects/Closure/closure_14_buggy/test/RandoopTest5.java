
import junit.framework.*;

public class RandoopTest5 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test1"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    var0.setRenamePrefixNamespace("function (): {540092593}");
    var0.setGenerateExports(true);
    com.google.common.collect.Multimap var36 = null;
    var0.setCustomPasses(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test2"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    boolean var17 = var10.isExternExportsEnabled();
    var10.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var24 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make(var22, var24);
    int var26 = var25.getCharno();
    com.google.javascript.jscomp.CheckLevel var27 = var25.getDefaultLevel();
    var10.setReportUnknownTypes(var27);
    var0.setCheckUnreachableCode(var27);
    var0.setInlineGetters(true);
    var0.enableExternExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test3"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isFunctionPrototypeType();
    boolean var95 = var32.canBeCalled();
    java.lang.Iterable var96 = var32.getExtendedInterfaces();
    boolean var97 = var32.isNativeObjectType();
    boolean var98 = var32.isEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test4"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    java.util.List var17 = var16.getThrownTypes();
    java.lang.String var18 = var16.getDeprecationReason();
    java.lang.String var19 = var16.getReturnDescription();
    boolean var20 = var16.isImplicitCast();
    var1.setJSDocInfo(var16);
    boolean var22 = var1.hasChildren();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    int var26 = var24.getSourceOffset();
    com.google.javascript.rhino.Node var27 = var24.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    int var31 = var29.getSourceOffset();
    com.google.javascript.rhino.Node var32 = var29.cloneNode();
    var27.addChildrenToFront(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.Node var41 = var27.useSourceInfoFrom(var37);
    com.google.javascript.rhino.Node var42 = var1.copyInformationFromForTree(var41);
    int var43 = var1.getLineno();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2014/12/24 11:10"+ "'", var18.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test5"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    com.google.javascript.rhino.jstype.ObjectType var18 = var10.getTypeOfThis();
    com.google.javascript.rhino.jstype.ObjectType.Property var20 = var10.getSlot("function (): {540092593}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test6"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var0.setRemoveClosureAsserts(true);
    com.google.javascript.jscomp.CompilerOptions var22 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var23 = null;
    var22.setStripTypes(var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var26 = var25.getDirectedGraphNodes();
    java.util.List var27 = var25.getEdges();
    var22.setManageClosureDependencies(var27);
    var22.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var33 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var34 = var33.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var35 = new com.google.javascript.jscomp.ComposeWarningsGuard(var34);
    com.google.javascript.jscomp.JSError var36 = null;
    com.google.javascript.jscomp.CheckLevel var37 = var35.level(var36);
    var22.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var35);
    var22.setNameReferenceGraphPath("goog.exportSymbol");
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var45 = new com.google.javascript.jscomp.DiagnosticType[] { var44};
    com.google.javascript.jscomp.DiagnosticGroup var46 = new com.google.javascript.jscomp.DiagnosticGroup(var45);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var61 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make(var59, var61);
    int var63 = var62.getCharno();
    com.google.javascript.jscomp.CheckLevel var64 = var62.getDefaultLevel();
    var47.setReportUnknownTypes(var64);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var66 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var46, var64);
    var22.setReportMissingOverride(var64);
    var0.setBrokenClosureRequiresLevel(var64);
    var0.setCollapseVariableDeclarations(true);
    boolean var71 = var0.isExternExportsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test7"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var1 = var0.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.ErrorManager var3 = var0.getErrorManager();
    com.google.javascript.jscomp.LightweightMessageFormatter var4 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.languageMode();
    java.lang.String var6 = var5.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ECMASCRIPT3"+ "'", var6.equals("ECMASCRIPT3"));

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test8"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    java.lang.String var79 = var73.getDisplayName();
    boolean var80 = var73.matchesStringContext();
    com.google.javascript.rhino.Node var81 = var73.getRootNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test9"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("goog.abstractMethod", 'a');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test10"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineLocalVariables(false);
    var0.setDevirtualizePrototypeMethods(false);
    com.google.javascript.jscomp.CodingConvention var5 = var0.getCodingConvention();
    var0.setRemoveUnusedClassProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test11"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    java.util.Set var24 = var14.getParameterNames();
    java.lang.String var25 = var14.toString();
    java.lang.String var26 = var14.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "JSDocInfo"+ "'", var25.equals("JSDocInfo"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test12"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setMarkNoSideEffectCalls(false);
    var0.setLooseTypes(true);
    com.google.javascript.jscomp.MessageBundle var19 = null;
    var0.setMessageBundle(var19);
    var0.skipAllCompilerPasses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test13"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSTypeExpression var15 = var14.getTypedefType();
    boolean var16 = var14.shouldPreserveTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test14"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    var1.clearNamedTypes();
    com.google.javascript.rhino.jstype.ObjectType var36 = var1.createAnonymousObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test15"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newExpr(var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var0.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test16"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("2014/12/24 11:10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test17() {}
//   public void test17() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test17"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("InputId: ", "function (): {869482344}", var2);
// 
//   }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test18"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    java.util.List var3 = var0.getGraphvizNodes();
    java.lang.Object var4 = null;
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var18 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var17);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.jstype.StaticScope var41 = null;
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    var43.unregisterPropertyOnType("Unversioned directory", var45);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    boolean var49 = var43.canPropertyBeDefined(var47, "BANG");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.Node var52 = var43.createParameters(var51);
    com.google.javascript.rhino.jstype.JSType var53 = var40.evaluate(var41, var43);
    boolean var54 = var18.addVarArgs(var53);
    boolean var55 = var53.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var57.unregisterPropertyOnType("Unversioned directory", var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    boolean var63 = var57.canPropertyBeDefined(var61, "BANG");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType[] var65 = new com.google.javascript.rhino.jstype.JSType[] { var64};
    com.google.javascript.rhino.Node var66 = var57.createParameters(var65);
    com.google.javascript.rhino.jstype.FunctionType var67 = var6.createConstructorType(var53, var65);
    com.google.javascript.rhino.jstype.JSType var69 = var67.getPropertyType("");
    boolean var70 = var67.hasReferenceName();
    com.google.javascript.rhino.jstype.FunctionType var71 = var67.toMaybeFunctionType();
    com.google.javascript.rhino.JSDocInfoBuilder var73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var74 = var73.recordExpose();
    boolean var75 = var73.recordExterns();
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    boolean var82 = var79.isVarArgs();
    boolean var83 = var79.isArrayLit();
    com.google.javascript.rhino.Node var84 = var79.getNext();
    var73.markTypeNode(var79, 10, 100, 0, 0, false);
    boolean var91 = var79.hasChildren();
    com.google.javascript.rhino.Node var92 = var79.getFirstChild();
    boolean var93 = var71.equals((java.lang.Object)var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnect(var4, (java.lang.Object)var93);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test19"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     var0.setCheckCaja(false);
//     java.util.Set var10 = null;
//     var0.setReplaceStringsReservedStrings(var10);
//     var0.setReserveRawExports(false);
//     var0.setReserveRawExports(true);
//     var0.setAppNameStr("(InputId: )");
//     com.google.javascript.jscomp.DiagnosticGroup var18 = null;
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var20 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var18, var19);
//     java.lang.String var21 = var20.toString();
//     var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var20);
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "Unversioned directory");
//     com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var35 = var34.getNext();
//     com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
//     boolean var38 = var34.getBooleanProp(100);
//     int var39 = var34.getSideEffectFlags();
//     com.google.javascript.jscomp.CheckLevel var41 = null;
//     com.google.javascript.jscomp.DiagnosticType var43 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var41, "");
//     com.google.javascript.jscomp.CheckLevel var45 = null;
//     com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var45, "");
//     int var48 = var43.compareTo(var47);
//     com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var54 = var53.getNext();
//     boolean var55 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var53);
//     int var56 = var53.getLength();
//     com.google.javascript.rhino.Node var57 = null;
//     boolean var58 = var53.hasChild(var57);
//     com.google.javascript.rhino.Node var59 = var51.useSourceInfoIfMissingFromForTree(var53);
//     var53.setSourceFileForTesting("Unversioned directory");
//     boolean var62 = var53.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var63 = var53.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var67 = null;
//     java.util.logging.Logger var68 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var69 = new com.google.javascript.jscomp.LoggerErrorManager(var67, var68);
//     com.google.javascript.jscomp.Compiler var70 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var69);
//     com.google.javascript.jscomp.Scope var71 = var70.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var72 = null;
//     com.google.javascript.jscomp.NodeTraversal var73 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var70, var72);
//     com.google.javascript.jscomp.Scope var74 = var73.getScope();
//     com.google.javascript.rhino.Node var75 = null;
//     com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var80 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var78, var80);
//     com.google.javascript.jscomp.DiagnosticType var82 = var81.getType();
//     java.lang.String[] var84 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var85 = var73.makeError(var75, var82, var84);
//     com.google.javascript.jscomp.JSError var86 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var53, var66, var84);
//     com.google.javascript.jscomp.JSError var87 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var34, var43, var84);
//     com.google.javascript.jscomp.JSError var88 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", (-1), 100, var29, var84);
//     com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var91 = var90.isGetterDef();
//     boolean var92 = var90.isGetProp();
//     com.google.javascript.rhino.Node var93 = var90.getLastSibling();
//     var90.putBooleanProp(154, false);
//     boolean var97 = var88.equals((java.lang.Object)154);
//     com.google.javascript.jscomp.CheckLevel var98 = var20.level(var88);
// 
//   }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test20"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    int var5 = var3.getSourceOffset();
    com.google.javascript.rhino.Node var6 = var3.cloneNode();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    int var10 = var8.getSourceOffset();
    boolean var11 = var8.isAssignAdd();
    int var12 = var6.getIndexOfChild(var8);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.InputId var16 = var14.getInputId();
    com.google.javascript.rhino.Node var17 = var6.useSourceInfoFrom(var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isOptionalArg();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(0, var22, var27);
    boolean var29 = var27.isQualifiedName();
    com.google.javascript.rhino.Node var30 = var27.cloneNode();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(153, var6, var30, 153, 1);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var37 = var35.getBooleanProp((-1));
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.Node var44 = var41.removeFirstChild();
    com.google.javascript.rhino.Node var45 = var35.useSourceInfoFromForTree(var41);
    boolean var46 = var35.isVar();
    com.google.javascript.rhino.Node var47 = var30.srcrefTree(var35);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(100, var35, 10, 0);
    boolean var51 = var35.isTypeOf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test21() {}
//   public void test21() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test21"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     int var5 = var3.getNumLines();
// 
//   }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test22"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.JSModule var7 = var3.getModule();
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, "function (): {1852005172}", false);
// 
//   }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test23"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    java.lang.String var73 = var56.getDisplayName();
    com.google.javascript.rhino.Node var74 = var56.getSource();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.name("BANG");
    var74.addChildToFront(var76);
    com.google.javascript.rhino.jstype.StaticSourceFile var78 = var76.getStaticSourceFile();
    var76.removeProp(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var81 = var76.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var73.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test24"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    boolean var12 = var1.recordParameterDescription("LABEL_NAME hi!", "(LABEL_NAME hi!)");
    boolean var14 = var1.addAuthor("(LABEL_NAME hi!)");
    boolean var15 = var1.isJavaDispatch();
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var17.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    com.google.javascript.rhino.Node var29 = var24.getChildAtIndex(1);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.JSDocInfo var36 = var33.getJSDocInfo();
    com.google.javascript.rhino.Node var37 = var24.copyInformationFrom(var33);
    java.lang.Object var39 = null;
    var24.putProp(0, var39);
    com.google.javascript.rhino.JSTypeExpression var42 = new com.google.javascript.rhino.JSTypeExpression(var24, "()");
    com.google.javascript.rhino.JSTypeExpression var43 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var42);
    boolean var44 = var17.recordExtendedInterface(var42);
    boolean var45 = var1.recordBaseType(var42);
    boolean var46 = var1.recordConstructor();
    com.google.javascript.rhino.JSDocInfoBuilder var48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var49 = var48.recordExpose();
    boolean var50 = var48.recordExterns();
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    boolean var57 = var54.isVarArgs();
    boolean var58 = var54.isArrayLit();
    com.google.javascript.rhino.Node var59 = var54.getNext();
    var48.markTypeNode(var54, 10, 100, 0, 0, false);
    boolean var66 = var48.recordConsistentIdGenerator();
    com.google.javascript.rhino.JSDocInfoBuilder var68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var69 = var68.recordExpose();
    boolean var71 = var68.recordDeprecationReason("2014/12/24 11:10");
    boolean var72 = var68.recordConsistentIdGenerator();
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var76 = var74.getBooleanProp((-1));
    var74.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var80 = new com.google.javascript.rhino.JSTypeExpression(var74, "goog.abstractMethod");
    boolean var81 = var68.recordThrowType(var80);
    boolean var82 = var48.recordType(var80);
    boolean var83 = var1.recordEnumParameterType(var80);
    boolean var84 = var1.recordIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test25() {}
//   public void test25() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test25"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var6 = null;
//     var5.setStripTypes(var6);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var9 = var8.getDirectedGraphNodes();
//     java.util.List var10 = var8.getEdges();
//     var5.setManageClosureDependencies(var10);
//     var5.setDevirtualizePrototypeMethods(true);
//     var5.setInlineLocalVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var16 = var5.getTweakProcessing();
//     var5.setCollapseVariableDeclarations(false);
//     var5.setCommonJSModulePathPrefix("function (): {540092593}");
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var21 = var5.getLanguageIn();
//     java.lang.Class var22 = var21.getDeclaringClass();
//     java.lang.Class var23 = var21.getDeclaringClass();
//     java.util.Iterator var24 = var0.getNeighborNodesIterator((java.lang.Object)var23);
// 
//   }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test26"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.Node var63 = var62.getParametersNode();
    java.lang.Iterable var64 = var62.getOwnImplementedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType var65 = var62.getParentScope();
    java.util.List var66 = var62.getSubTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test27"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    java.util.Set var24 = var20.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSType var25 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    var27.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    boolean var41 = var37.isFor();
    boolean var42 = var37.isNumber();
    com.google.javascript.rhino.Node var43 = var37.getNext();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var50 = var47.isVarArgs();
    com.google.javascript.rhino.Node var52 = var47.getChildAtIndex(1);
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    com.google.javascript.rhino.JSDocInfo var59 = var56.getJSDocInfo();
    com.google.javascript.rhino.Node var60 = var47.copyInformationFrom(var56);
    java.lang.Object var62 = null;
    var47.putProp(0, var62);
    com.google.javascript.rhino.JSTypeExpression var65 = new com.google.javascript.rhino.JSTypeExpression(var47, "()");
    com.google.javascript.rhino.jstype.StaticScope var66 = null;
    com.google.javascript.rhino.ErrorReporter var67 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var67);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    var68.unregisterPropertyOnType("Unversioned directory", var70);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    boolean var74 = var68.canPropertyBeDefined(var72, "BANG");
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.Node var77 = var68.createParameters(var76);
    com.google.javascript.rhino.jstype.JSType var78 = var65.evaluate(var66, var68);
    com.google.javascript.rhino.jstype.JSType var79 = var78.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var80 = var79.dereference();
    boolean var81 = var79.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var82 = var27.createEnumType("STRING hi 0 [length: 2]\n", var37, var79);
    java.lang.String var83 = var82.getDisplayName();
    boolean var84 = var82.matchesStringContext();
    com.google.javascript.rhino.jstype.JSType var85 = var20.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var82);
    com.google.javascript.rhino.jstype.EnumType var86 = var82.toMaybeEnumType();
    boolean var87 = var82.hasAnyTemplate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var83.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test28"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.enableExternExports(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var12 = null;
    var0.setAliasTransformationHandler(var12);
    var0.setComputeFunctionSideEffects(false);
    var0.enableRuntimeTypeCheck("{proxy:{1743833346}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test29() {}
//   public void test29() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test29"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var13 = null;
//     var12.setResolveMode(var13);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var15 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var16 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = var20.getNext();
//     com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
//     boolean var23 = var20.isVarArgs();
//     com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
//     com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
//     java.lang.Object var35 = null;
//     var20.putProp(0, var35);
//     com.google.javascript.rhino.JSTypeExpression var38 = new com.google.javascript.rhino.JSTypeExpression(var20, "()");
//     com.google.javascript.rhino.jstype.StaticScope var39 = null;
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     var41.unregisterPropertyOnType("Unversioned directory", var43);
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
//     com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
//     com.google.javascript.rhino.jstype.JSType var51 = var38.evaluate(var39, var41);
//     com.google.javascript.rhino.jstype.JSType var52 = var51.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var53 = var52.dereference();
//     java.util.Collection var54 = var12.getDirectImplementors(var53);
//     com.google.javascript.rhino.jstype.JSType var55 = var53.getIndexType();
//     com.google.javascript.rhino.jstype.JSType var56 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var53);
//     com.google.javascript.rhino.jstype.JSType[] var57 = null;
//     com.google.javascript.rhino.jstype.JSType var58 = var1.createUnionType(var57);
// 
//   }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test30"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var6 = var5.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var13 = null;
//     var12.setStripTypes(var13);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var16 = var15.getDirectedGraphNodes();
//     java.util.List var17 = var15.getEdges();
//     var12.setManageClosureDependencies(var17);
//     boolean var19 = var12.isExternExportsEnabled();
//     var12.setCollapsePropertiesOnExternTypes(false);
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
//     var12.setAliasKeywords(true);
//     var12.setNameReferenceGraphPath("module$2014$12$24 11:10");
//     var12.setClosurePass(true);
//     var12.setTightenTypes(false);
//     com.google.javascript.jscomp.CodingConvention var31 = var12.getCodingConvention();
//     com.google.javascript.jscomp.CompilerOptions.Reach var32 = null;
//     var12.setInlineFunctions(var32);
// 
//   }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test31"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    java.util.List var17 = var16.getThrownTypes();
    java.lang.String var18 = var16.getDeprecationReason();
    java.lang.String var19 = var16.getReturnDescription();
    com.google.javascript.rhino.JSTypeExpression var20 = var16.getEnumParameterType();
    boolean var21 = var16.isNoAlias();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var0.getDirectedGraphNode((java.lang.Object)var21);
    com.google.javascript.jscomp.graph.SubGraph var23 = var0.newSubGraph();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isOptionalArg();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(0, var28, var33);
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    var35.setManageClosureDependencies(var40);
    boolean var42 = var35.isExternExportsEnabled();
    var35.setCheckCaja(false);
    java.util.Set var45 = null;
    var35.setReplaceStringsReservedStrings(var45);
    com.google.javascript.rhino.JSDocInfoBuilder var48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var49 = var48.recordExpose();
    boolean var51 = var48.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.InputId var58 = com.google.javascript.jscomp.NodeUtil.getInputId(var55);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var55.setJSType(var59);
    com.google.javascript.rhino.JSDocInfo var61 = var48.build(var55);
    java.lang.String var62 = var61.getFileOverview();
    java.util.Set var63 = var61.getModifies();
    var35.setReplaceStringsReservedStrings(var63);
    var35.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var69 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var71 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make(var69, var71);
    int var73 = var72.getCharno();
    com.google.javascript.jscomp.CheckLevel var74 = var72.getDefaultLevel();
    var35.setCheckGlobalThisLevel(var74);
    var35.setDevirtualizePrototypeMethods(false);
    var35.setExternExportsPath("function (): {1263056885}");
    java.lang.Object var80 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var34, (java.lang.Object)"function (): {1263056885}", var80);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2014/12/24 11:10"+ "'", var18.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test32"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.util.List var54 = var53.getThrownTypes();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isOr();
    var53.setAssociatedNode(var58);
    boolean var63 = var53.isNoSideEffects();
    java.util.List var64 = var53.getThrownTypes();
    var36.setPropertyJSDocInfo("ERROR", var53);
    java.lang.String var66 = var53.getLendsName();
    boolean var67 = var53.hasReturnType();
    com.google.javascript.rhino.JSDocInfo.Visibility var68 = var53.getVisibility();
    boolean var69 = var53.isExterns();
    java.lang.String var71 = var53.getDescriptionForParameter("LABEL_NAME hi!\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test33"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setRemoveUnusedPrototypePropertiesInExterns(false);
    var0.setProcessCommonJSModules(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test34"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var3 = var1.recordConstructor();
    boolean var4 = var1.recordOverride();
    boolean var6 = var1.recordDeprecationReason("(module$2014$12$24 11:10)");
    boolean var8 = var1.addReference("function (): {565834337}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test35"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
    com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var13 = null;
    var12.setStripTypes(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var16 = var15.getDirectedGraphNodes();
    java.util.List var17 = var15.getEdges();
    var12.setManageClosureDependencies(var17);
    boolean var19 = var12.isExternExportsEnabled();
    var12.setCollapsePropertiesOnExternTypes(false);
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
    var12.setAliasKeywords(true);
    var12.setNameReferenceGraphPath("module$2014$12$24 11:10");
    var12.setClosurePass(true);
    var12.setInlineVariables(true);
    com.google.javascript.jscomp.CheckLevel var33 = null;
    com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var33, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var36 = new com.google.javascript.jscomp.DiagnosticType[] { var35};
    com.google.javascript.jscomp.DiagnosticGroup var37 = new com.google.javascript.jscomp.DiagnosticGroup(var36);
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var39 = null;
    var38.setStripTypes(var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    var38.setManageClosureDependencies(var43);
    boolean var45 = var38.isExternExportsEnabled();
    var38.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var52 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var50, var52);
    int var54 = var53.getCharno();
    com.google.javascript.jscomp.CheckLevel var55 = var53.getDefaultLevel();
    var38.setReportUnknownTypes(var55);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var57 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var37, var55);
    java.lang.String var58 = var37.toString();
    com.google.javascript.jscomp.DiagnosticGroup[] var59 = new com.google.javascript.jscomp.DiagnosticGroup[] { var37};
    com.google.javascript.jscomp.DiagnosticGroup var60 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var59);
    com.google.javascript.jscomp.CheckLevel var61 = null;
    var12.setWarningLevel(var60, var61);
    var12.setProcessObjectPropertyString(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test36"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.clearNodeAnnotations();
    java.util.List var3 = var0.getGraphvizEdges();
    var0.pushEdgeAnnotations();
    java.lang.Object var5 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var6 = var0.createDirectedGraphNode(var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    com.google.javascript.rhino.Node var29 = var28.getRoot();
    com.google.javascript.rhino.Node var30 = var28.getRoot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var31 = var0.getWeight((java.lang.Object)var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test37"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    com.google.common.collect.ImmutableList var92 = var32.getTemplateTypeNames();
    boolean var93 = var32.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test38"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    var0.setCheckSuspiciousCode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test39"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setTightenTypes(false);
    var0.enableRuntimeTypeCheck("module$2014$12$24 11:10");
    com.google.javascript.jscomp.SourceMap.DetailLevel var14 = null;
    var0.setSourceMapDetailLevel(var14);
    var0.setManageClosureDependencies(false);
    java.util.Set var18 = null;
    var0.setStripTypes(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test40"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.JSDocInfo var10 = var7.getJSDocInfo();
    boolean var11 = var7.isSwitch();
    boolean var12 = var7.isSyntheticBlock();
    boolean var13 = var7.isNumber();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var14 = var0.getClassesDefinedByCall(var7);
    com.google.javascript.jscomp.ClosureCodingConvention var15 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var16 = null;
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isOr();
    java.lang.String var24 = var15.extractClassNameIfRequire(var16, var20);
    boolean var25 = var20.isScript();
    com.google.javascript.rhino.Node var26 = var20.getFirstChild();
    com.google.javascript.rhino.Node var27 = var20.removeFirstChild();
    boolean var28 = var27.isScript();
    com.google.javascript.jscomp.ClosureCodingConvention var29 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var31 = var29.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var32 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var29);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var35 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var37 = var35.isConstantKey("2014/12/24 11:10");
    java.util.Collection var38 = var35.getAssertionFunctions();
    java.lang.String var39 = var35.getAbstractMethodName();
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    boolean var47 = var44.isVarArgs();
    boolean var48 = var44.isOptionalArg();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(0, var44, var49);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var51 = var35.getClassesDefinedByCall(var44);
    com.google.javascript.jscomp.ClosureCodingConvention var52 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var54 = var52.isConstantKey("2014/12/24 11:10");
    java.util.Collection var55 = var52.getAssertionFunctions();
    boolean var57 = var52.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    boolean var64 = var61.isVarArgs();
    boolean var65 = var61.isOptionalArg();
    java.lang.String var69 = var61.toString(false, false, true);
    java.util.List var70 = var52.identifyTypeDeclarationCall(var61);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var71 = var35.getClassesDefinedByCall(var61);
    java.lang.String var72 = var32.extractClassNameIfRequire(var34, var61);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.returnNode();
    var73.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var76 = var34.srcref(var73);
    java.lang.String var77 = var0.extractClassNameIfProvide(var27, var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "goog.abstractMethod"+ "'", var39.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "BANG"+ "'", var69.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test41"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var70 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var31, "BANG");
    com.google.javascript.rhino.jstype.FunctionType var71 = var31.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.JSType var73 = var31.findPropertyType("Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test42"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setDefineToStringLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", "");
    var0.setComputeFunctionSideEffects(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test43"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isIf();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var11 = var10.siblings();
    var10.setCharno(1);
    int var14 = var10.getSourcePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.var(var1, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);

  }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test44"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     com.google.javascript.rhino.jstype.JSTypeNative var11 = null;
//     com.google.javascript.rhino.jstype.ObjectType var12 = var1.getNativeObjectType(var11);
// 
//   }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test45"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var39);
    var0.setLooseTypes(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test46"); }


    com.google.javascript.jscomp.JSModule var3 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var4 = var3.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var5 = new com.google.javascript.jscomp.ComposeWarningsGuard(var4);
    com.google.javascript.jscomp.DiagnosticGroup var6 = null;
    boolean var7 = var5.enables(var6);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var9, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var12 = new com.google.javascript.jscomp.DiagnosticType[] { var11};
    com.google.javascript.jscomp.DiagnosticGroup var13 = new com.google.javascript.jscomp.DiagnosticGroup(var12);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    boolean var21 = var14.isExternExportsEnabled();
    var14.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make(var26, var28);
    int var30 = var29.getCharno();
    com.google.javascript.jscomp.CheckLevel var31 = var29.getDefaultLevel();
    var14.setReportUnknownTypes(var31);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var33 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var13, var31);
    boolean var34 = var5.enables(var13);
    com.google.javascript.jscomp.JSModule var36 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var37 = var36.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var38 = new com.google.javascript.jscomp.ComposeWarningsGuard(var37);
    com.google.javascript.jscomp.DiagnosticGroup var39 = null;
    boolean var40 = var38.enables(var39);
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var45 = new com.google.javascript.jscomp.DiagnosticType[] { var44};
    com.google.javascript.jscomp.DiagnosticGroup var46 = new com.google.javascript.jscomp.DiagnosticGroup(var45);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var61 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make(var59, var61);
    int var63 = var62.getCharno();
    com.google.javascript.jscomp.CheckLevel var64 = var62.getDefaultLevel();
    var47.setReportUnknownTypes(var64);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var66 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var46, var64);
    boolean var67 = var38.enables(var46);
    boolean var68 = var5.enables(var46);
    com.google.javascript.jscomp.DiagnosticGroup[] var69 = new com.google.javascript.jscomp.DiagnosticGroup[] { var46};
    com.google.javascript.jscomp.DiagnosticGroup var70 = new com.google.javascript.jscomp.DiagnosticGroup("{proxy:{1241367186}}", var69);
    com.google.javascript.jscomp.DiagnosticGroup var71 = new com.google.javascript.jscomp.DiagnosticGroup("ERROR - (InputId: )\n", var69);
    com.google.javascript.jscomp.DiagnosticGroup var72 = new com.google.javascript.jscomp.DiagnosticGroup(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test47"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    boolean var65 = var63.removeProperty("{160498324}");
    com.google.javascript.rhino.jstype.ObjectType.Property var67 = var63.getSlot("");
    boolean var68 = var63.canBeCalled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);

  }

  public void test48() {}
//   public void test48() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test48"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
//     var1.setResolveMode(var2);
//     java.util.List var4 = null;
//     com.google.javascript.rhino.Node var5 = var1.createParameters(var4);
// 
//   }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test49"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    var0.disableRuntimeTypeCheck();
    var0.setAliasStringsBlacklist("module$ERROR");
    var0.setLineLengthThreshold(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test50"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
    var3.disableThreads();
    var3.rebuildInputsFromModules();
    java.lang.String var97 = var3.getAstDotGraph();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + ""+ "'", var97.equals(""));

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test51"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var17 = var0.getAliasTransformationHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test52() {}
//   public void test52() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test52"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var1 = var0.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.ErrorManager var3 = var0.getErrorManager();
//     com.google.javascript.jscomp.LightweightMessageFormatter var4 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.languageMode();
//     com.google.javascript.rhino.JSDocInfoBuilder var7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var8 = var7.recordExpose();
//     boolean var9 = var7.recordExterns();
//     com.google.javascript.rhino.JSTypeExpression var10 = null;
//     boolean var12 = var7.recordThrowDescription(var10, "()");
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var17 = var16.getNext();
//     com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
//     boolean var19 = var16.isVarArgs();
//     com.google.javascript.rhino.Node var21 = var16.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = var25.getNext();
//     com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
//     com.google.javascript.rhino.JSDocInfo var28 = var25.getJSDocInfo();
//     com.google.javascript.rhino.Node var29 = var16.copyInformationFrom(var25);
//     java.lang.Object var31 = null;
//     var16.putProp(0, var31);
//     com.google.javascript.rhino.JSTypeExpression var34 = new com.google.javascript.rhino.JSTypeExpression(var16, "()");
//     boolean var35 = var7.recordEnumParameterType(var34);
//     com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var39 = var38.recordExpose();
//     boolean var40 = var38.recordExterns();
//     com.google.javascript.rhino.JSTypeExpression var42 = null;
//     boolean var43 = var38.recordParameter("Unversioned directory", var42);
//     com.google.javascript.rhino.JSTypeExpression var44 = null;
//     boolean var46 = var38.recordThrowDescription(var44, "");
//     com.google.javascript.jscomp.SourceFile var51 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     var38.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var51, 0, 0);
//     var7.markName("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", (com.google.javascript.rhino.jstype.StaticSourceFile)var51, 0, 3);
//     var51.setOriginalPath("(hi)");
//     com.google.javascript.jscomp.JsAst var60 = new com.google.javascript.jscomp.JsAst(var51);
//     var0.replaceScript(var60);
// 
//   }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test53"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.block(var17);
    boolean var19 = var18.isFalse();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var21 = var20.cloneTree();
    com.google.javascript.rhino.Node var22 = var18.useSourceInfoFrom(var20);
    com.google.javascript.rhino.jstype.JSType var23 = var22.getJSType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test54"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    java.util.Collection var47 = var0.getAssertionFunctions();
    boolean var49 = var0.isSuperClassReference("{proxy:{1743833346}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test55() {}
//   public void test55() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test55"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var9 = null;
//     var8.setStripTypes(var9);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var12 = var11.getDirectedGraphNodes();
//     java.util.List var13 = var11.getEdges();
//     var8.setManageClosureDependencies(var13);
//     var0.setManageClosureDependencies(var13);
//     var0.setRemoveClosureAsserts(true);
//     var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
//     var0.setRemoveClosureAsserts(true);
//     var0.setInlineLocalFunctions(false);
//     java.util.List var25 = null;
//     var0.setReplaceStringsConfiguration("module$ERROR", var25);
// 
//   }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test56"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.String var22 = var21.toStringTree();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var30 = var26.getBooleanProp(100);
    int var31 = var26.getSideEffectFlags();
    boolean var32 = var26.isDefaultCase();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(1, var2, var21, var26);
    boolean var34 = var2.isParamList();
    boolean var35 = var2.isTrue();
    int var36 = var2.getSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var22.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test57"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    var1.forwardDeclareType("");
    boolean var5 = var1.shouldTolerateUndefinedValues();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    var7.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isFor();
    boolean var22 = var17.isNumber();
    com.google.javascript.rhino.Node var23 = var17.getNext();
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    boolean var30 = var27.isVarArgs();
    com.google.javascript.rhino.Node var32 = var27.getChildAtIndex(1);
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    com.google.javascript.rhino.JSDocInfo var39 = var36.getJSDocInfo();
    com.google.javascript.rhino.Node var40 = var27.copyInformationFrom(var36);
    java.lang.Object var42 = null;
    var27.putProp(0, var42);
    com.google.javascript.rhino.JSTypeExpression var45 = new com.google.javascript.rhino.JSTypeExpression(var27, "()");
    com.google.javascript.rhino.jstype.StaticScope var46 = null;
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    var48.unregisterPropertyOnType("Unversioned directory", var50);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    boolean var54 = var48.canPropertyBeDefined(var52, "BANG");
    com.google.javascript.rhino.jstype.JSType var55 = null;
    com.google.javascript.rhino.jstype.JSType[] var56 = new com.google.javascript.rhino.jstype.JSType[] { var55};
    com.google.javascript.rhino.Node var57 = var48.createParameters(var56);
    com.google.javascript.rhino.jstype.JSType var58 = var45.evaluate(var46, var48);
    com.google.javascript.rhino.jstype.JSType var59 = var58.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var60 = var59.dereference();
    boolean var61 = var59.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var62 = var7.createEnumType("STRING hi 0 [length: 2]\n", var17, var59);
    boolean var63 = var62.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    var65.unregisterPropertyOnType("Unversioned directory", var67);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.jscomp.JSModule var71 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var72 = var71.getDependencies();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.block(var72);
    com.google.javascript.rhino.jstype.FunctionType var74 = var65.createFunctionTypeWithVarArgs(var69, var72);
    boolean var75 = var74.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var76 = var62.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var74);
    boolean var78 = var62.isPropertyInExterns("goog.exportSymbol");
    boolean var79 = var62.isOrdinaryFunction();
    com.google.javascript.rhino.ErrorReporter var81 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var82 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var81);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var83 = null;
    var82.setResolveMode(var83);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var85 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var82);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var86 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var82);
    com.google.javascript.rhino.ErrorReporter var87 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var88 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var87);
    com.google.javascript.rhino.jstype.JSType var90 = null;
    var88.unregisterPropertyOnType("Unversioned directory", var90);
    com.google.javascript.rhino.jstype.JSType var92 = null;
    boolean var94 = var88.canPropertyBeDefined(var92, "BANG");
    com.google.javascript.rhino.jstype.JSType var95 = null;
    com.google.javascript.rhino.jstype.JSType[] var96 = new com.google.javascript.rhino.jstype.JSType[] { var95};
    com.google.javascript.rhino.Node var97 = var88.createParameters(var96);
    boolean var98 = var86.addRequiredParams(var96);
    com.google.javascript.rhino.jstype.FunctionType var99 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var62, false, var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test58"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isArrayLit();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var21 = var20.isGetterDef();
    var20.putIntProp((-1), 10);
    var14.addChildrenToFront(var20);
    boolean var26 = var14.isDec();
    var10.addChildToBack(var14);
    boolean var28 = var10.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var32 = var10.toString(true, false, false);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test59"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    boolean var7 = var0.isSuperClassReference("goog.abstractMethod");
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var11.setJSType(var12);
    boolean var14 = var11.isScript();
    com.google.javascript.rhino.Node var15 = var11.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var16 = var0.getDelegateRelationship(var11);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isArrayLit();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
    com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
    boolean var43 = var21.hasChild(var38);
    boolean var44 = var38.isNot();
    int var45 = var38.getChildCount();
    com.google.javascript.rhino.InputId var47 = new com.google.javascript.rhino.InputId("LABEL_NAME hi!");
    var38.setInputId(var47);
    boolean var49 = var38.isQualifiedName();
    java.lang.String var50 = var0.getSingletonGetterClassName(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test60"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    var1.forwardDeclareType("");
    java.lang.Iterable var6 = var1.getEachReferenceTypeWithProperty("INHERITED");
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    var8.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isVarArgs();
    boolean var22 = var18.isFor();
    boolean var23 = var18.isNumber();
    com.google.javascript.rhino.Node var24 = var18.getNext();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    com.google.javascript.rhino.Node var33 = var28.getChildAtIndex(1);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.JSDocInfo var40 = var37.getJSDocInfo();
    com.google.javascript.rhino.Node var41 = var28.copyInformationFrom(var37);
    java.lang.Object var43 = null;
    var28.putProp(0, var43);
    com.google.javascript.rhino.JSTypeExpression var46 = new com.google.javascript.rhino.JSTypeExpression(var28, "()");
    com.google.javascript.rhino.jstype.StaticScope var47 = null;
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var49.unregisterPropertyOnType("Unversioned directory", var51);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    boolean var55 = var49.canPropertyBeDefined(var53, "BANG");
    com.google.javascript.rhino.jstype.JSType var56 = null;
    com.google.javascript.rhino.jstype.JSType[] var57 = new com.google.javascript.rhino.jstype.JSType[] { var56};
    com.google.javascript.rhino.Node var58 = var49.createParameters(var57);
    com.google.javascript.rhino.jstype.JSType var59 = var46.evaluate(var47, var49);
    com.google.javascript.rhino.jstype.JSType var60 = var59.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var61 = var60.dereference();
    boolean var62 = var60.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var63 = var8.createEnumType("STRING hi 0 [length: 2]\n", var18, var60);
    com.google.javascript.rhino.JSDocInfo var64 = var63.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var65 = var63.getElementsType();
    boolean var66 = var65.isNominalType();
    java.lang.String var67 = var65.toString();
    com.google.javascript.rhino.jstype.JSType var69 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var65, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var67.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test61"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var8 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var7);
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    int var13 = var11.getSourceOffset();
    com.google.javascript.rhino.Node var14 = var11.removeFirstChild();
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    boolean var20 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var18);
    int var21 = var18.getLength();
    com.google.javascript.rhino.Node var22 = null;
    boolean var23 = var18.hasChild(var22);
    com.google.javascript.rhino.Node var24 = var16.useSourceInfoIfMissingFromForTree(var18);
    var18.setSourceFileForTesting("Unversioned directory");
    boolean var27 = var18.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var28 = var18.getStaticSourceFile();
    com.google.javascript.rhino.Node var29 = var11.srcref(var18);
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(10, var29);
    int var31 = var30.getCharno();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var32 = var0.getDelegateRelationship(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test62"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    var65.unregisterPropertyOnType("Unversioned directory", var67);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.jscomp.JSModule var71 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var72 = var71.getDependencies();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.block(var72);
    com.google.javascript.rhino.jstype.FunctionType var74 = var65.createFunctionTypeWithVarArgs(var69, var72);
    boolean var76 = var74.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var77 = var74.toMaybeEnumType();
    var1.unregisterPropertyOnType("module$2014$12$24 11:10", (com.google.javascript.rhino.jstype.JSType)var74);
    boolean var80 = var1.isForwardDeclaredType("CONTINUE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test63"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(100, 0, 100);
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = var3.isSetterDef();
    boolean var6 = var3.isOnlyModifiesThisCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test64"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("2014/12/24 11:10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(2014/12/24 11:10)"+ "'", var1.equals("(2014/12/24 11:10)"));

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test65"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getMeaning();
    boolean var18 = var14.hasBaseType();
    int var19 = var14.getImplementedInterfaceCount();
    int var20 = var14.getParameterCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test66"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("ERROR", "Unversioned directory: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test67"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
    var31.setSourceFileForTesting("null(null)");
    boolean var34 = var31.isDo();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var38.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var42 = var41.getAncestors();
    var31.addChildrenToFront(var41);
    int var44 = var31.getSourcePosition();
    com.google.javascript.rhino.Node var45 = var5.newOptionalParameterFromNode(var31);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    boolean var52 = var49.isVarArgs();
    com.google.javascript.rhino.Node var54 = var49.getChildAtIndex(1);
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    com.google.javascript.rhino.JSDocInfo var61 = var58.getJSDocInfo();
    com.google.javascript.rhino.Node var62 = var49.copyInformationFrom(var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.comma(var31, var58);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test68"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var45 = null;
    var44.setStripTypes(var45);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var48 = var47.getDirectedGraphNodes();
    java.util.List var49 = var47.getEdges();
    var44.setManageClosureDependencies(var49);
    boolean var51 = var44.isExternExportsEnabled();
    var44.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    var54.setDevirtualizePrototypeMethods(true);
    var54.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var66 = null;
    var65.setBrokenClosureRequiresLevel(var66);
    var65.setLocale("");
    var65.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var72 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var73 = null;
    var72.setStripTypes(var73);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var76 = var75.getDirectedGraphNodes();
    java.util.List var77 = var75.getEdges();
    var72.setManageClosureDependencies(var77);
    boolean var79 = var72.isExternExportsEnabled();
    var72.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var84 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var86 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var87 = com.google.javascript.jscomp.JSError.make(var84, var86);
    int var88 = var87.getCharno();
    com.google.javascript.jscomp.CheckLevel var89 = var87.getDefaultLevel();
    var72.setReportUnknownTypes(var89);
    var65.setBrokenClosureRequiresLevel(var89);
    var54.setCheckUnreachableCode(var89);
    var44.setCheckGlobalNamesLevel(var89);
    var27.setCheckGlobalThisLevel(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test69"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    java.lang.Object var42 = var27.clone();
    var27.setRemoveUnusedVars(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test70"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var5 = var4.hasOneChild();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    boolean var11 = var10.isArrayLit();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(0, var4, var9, var10, var15, 1, 100);
    int var23 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var0.useSourceInfoFromForTree(var15);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var28 = var26.getBooleanProp((-1));
    var26.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var31 = var24.copyInformationFrom(var26);
    com.google.javascript.jscomp.ClosureCodingConvention var32 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var34 = var32.isConstantKey("2014/12/24 11:10");
    java.util.Collection var35 = var32.getAssertionFunctions();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var39.setJSType(var40);
    boolean var42 = var39.isScript();
    com.google.javascript.rhino.Node var43 = var39.removeFirstChild();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var47 = var46.isGetterDef();
    boolean var48 = var46.isAdd();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var55 = var52.isVarArgs();
    com.google.javascript.rhino.Node var57 = var52.getChildAtIndex(1);
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    com.google.javascript.rhino.JSDocInfo var64 = var61.getJSDocInfo();
    com.google.javascript.rhino.Node var65 = var52.copyInformationFrom(var61);
    java.lang.String var66 = var65.toStringTree();
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    boolean var74 = var70.getBooleanProp(100);
    int var75 = var70.getSideEffectFlags();
    boolean var76 = var70.isDefaultCase();
    com.google.javascript.rhino.Node var77 = new com.google.javascript.rhino.Node(1, var46, var65, var70);
    java.lang.String var78 = var32.extractClassNameIfProvide(var39, var70);
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var81 = var80.isGetterDef();
    boolean var82 = var80.isNE();
    boolean var83 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var80);
    com.google.javascript.rhino.Node var84 = var39.clonePropsFrom(var80);
    var80.setType((-1));
    com.google.javascript.rhino.Node var87 = var80.cloneNode();
    boolean var88 = var26.isEquivalentTo(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var66.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test71"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var15 = var0.getAbstractMethodName();
    java.lang.String var16 = var0.getExportSymbolFunction();
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    boolean var23 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var21);
    int var24 = var21.getLength();
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var21.hasChild(var25);
    com.google.javascript.rhino.Node var27 = var19.useSourceInfoIfMissingFromForTree(var21);
    com.google.javascript.jscomp.CodingConvention.Bind var29 = var17.describeFunctionBind(var19, false);
    int var30 = var19.getSourcePosition();
    int var31 = var19.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    boolean var41 = var35.isBlock();
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    com.google.javascript.rhino.Node var50 = var45.getChildAtIndex(1);
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    com.google.javascript.rhino.JSDocInfo var57 = var54.getJSDocInfo();
    com.google.javascript.rhino.Node var58 = var45.copyInformationFrom(var54);
    com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var60 = null;
    var59.setStripTypes(var60);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var63 = var62.getDirectedGraphNodes();
    java.util.List var64 = var62.getEdges();
    var59.setManageClosureDependencies(var64);
    boolean var66 = var59.isExternExportsEnabled();
    var59.setCheckCaja(false);
    java.util.Set var69 = null;
    var59.setReplaceStringsReservedStrings(var69);
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    var59.setReplaceStringsReservedStrings(var87);
    var45.setDirectives(var87);
    com.google.javascript.rhino.Node var90 = var35.srcrefTree(var45);
    java.lang.String var91 = var0.extractClassNameIfProvide(var19, var45);
    boolean var92 = var45.isThrow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "goog.abstractMethod"+ "'", var15.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "goog.exportSymbol"+ "'", var16.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test72"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isOr();
    java.lang.String var11 = var2.extractClassNameIfRequire(var3, var7);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    boolean var34 = var33.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    java.util.List var38 = var35.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCheckCaja(false);
    java.util.Set var49 = null;
    var39.setReplaceStringsReservedStrings(var49);
    var39.setAliasAllStrings(true);
    var39.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var39.setPropertyInvalidationErrors(var67);
    var2.defineDelegateProxyPrototypeProperties(var13, (com.google.javascript.rhino.jstype.StaticScope)var33, var38, var67);
    boolean var70 = var33.canBeCalled();
    boolean var71 = var33.isRegexpType();
    boolean var72 = var1.equals((java.lang.Object)var33);
    boolean var74 = var33.hasOwnProperty("RETURN");
    java.lang.String var75 = var33.getNormalizedReferenceName();
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    var77.unregisterPropertyOnType("Unversioned directory", var79);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.jscomp.JSModule var83 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var84 = var83.getDependencies();
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.block(var84);
    com.google.javascript.rhino.jstype.FunctionType var86 = var77.createFunctionTypeWithVarArgs(var81, var84);
    boolean var87 = var86.hasCachedValues();
    var86.clearCachedValues();
    boolean var89 = var33.differsFrom((com.google.javascript.rhino.jstype.JSType)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test73"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    var14.setDeprecated(false);
    boolean var21 = var14.hasReturnType();
    com.google.javascript.rhino.Node var22 = var14.getAssociatedNode();
    java.lang.String var23 = var14.getBlockDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test74"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
    var1.sortInputsByDeps(var26);
    java.util.List var31 = var1.getDependencies();
    com.google.javascript.jscomp.SourceFile var35 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    int var37 = var35.getColumnOfOffset(10);
    var1.addFirst(var35);
    com.google.javascript.jscomp.JSModule var40 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var41 = var40.getDependencies();
    com.google.javascript.jscomp.SourceAst var42 = null;
    com.google.javascript.rhino.InputId var43 = null;
    com.google.javascript.jscomp.CompilerInput var45 = new com.google.javascript.jscomp.CompilerInput(var42, var43, true);
    com.google.javascript.jscomp.JSModule var46 = var45.getModule();
    var40.add(var45);
    com.google.javascript.jscomp.SourceFile var49 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var40.addFirst(var49);
    com.google.javascript.jscomp.Region var52 = var49.getRegion(100);
    var1.addFirst(var49);
    java.lang.String var54 = var1.toString();
    int var55 = var1.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "Unversioned directory"+ "'", var54.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test75"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    boolean var43 = var1.shouldParseDocumentation();
    com.google.javascript.jscomp.MessageFormatter var44 = null;
    java.util.logging.Logger var45 = null;
    com.google.javascript.jscomp.LoggerErrorManager var46 = new com.google.javascript.jscomp.LoggerErrorManager(var44, var45);
    com.google.javascript.jscomp.Compiler var47 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var46);
    com.google.javascript.jscomp.JSError[] var48 = var47.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var51 = var50.recordExpose();
    boolean var53 = var50.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.InputId var60 = com.google.javascript.jscomp.NodeUtil.getInputId(var57);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var57.setJSType(var61);
    com.google.javascript.rhino.JSDocInfo var63 = var50.build(var57);
    java.util.List var64 = var63.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var66 = var65.getDirectedGraphNodes();
    var65.clearNodeAnnotations();
    java.util.List var68 = var65.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var69 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var70 = null;
    var69.setStripTypes(var70);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var73 = var72.getDirectedGraphNodes();
    java.util.List var74 = var72.getEdges();
    var69.setManageClosureDependencies(var74);
    var69.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var69.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var81 = null;
    var69.setSourceMapDetailLevel(var81);
    com.google.javascript.jscomp.CodingConvention var83 = var69.getCodingConvention();
    var69.setMarkNoSideEffectCalls(false);
    var47.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var64, var68, var69);
    boolean var87 = var1.recordTemplateTypeNames(var64);
    boolean var88 = var1.recordNoSideEffects();
    boolean var89 = var1.recordNoAlias();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test76"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isOptionalArg();
    java.lang.String var11 = var3.toString(false, false, true);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    java.util.List var29 = var26.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var30 = var26.getType();
    boolean var31 = var26.containsDeclaration();
    var3.setJSDocInfo(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.not(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "BANG"+ "'", var11.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test77"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    com.google.common.collect.Multimap var9 = null;
    var0.setCustomPasses(var9);
    var0.setReserveRawExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test78"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    var1.forwardDeclareType("");
    com.google.javascript.jscomp.JSModule var6 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var7 = var6.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var8 = new com.google.javascript.jscomp.ComposeWarningsGuard(var7);
    com.google.javascript.jscomp.JSModule[] var9 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var7);
    var1.setTemplateTypeNames(var7);
    java.lang.Iterable var12 = var1.getEachReferenceTypeWithProperty("STRING hi 0 [length: 2]\n.<hi>");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test79"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.CodingConvention var11 = var0.getCodingConvention();
    var0.setAliasStringsBlacklist("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test80"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    java.lang.Iterable var13 = var10.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    var15.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    boolean var28 = var25.isVarArgs();
    boolean var29 = var25.isFor();
    boolean var30 = var25.isNumber();
    com.google.javascript.rhino.Node var31 = var25.getNext();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    boolean var38 = var35.isVarArgs();
    com.google.javascript.rhino.Node var40 = var35.getChildAtIndex(1);
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    com.google.javascript.rhino.JSDocInfo var47 = var44.getJSDocInfo();
    com.google.javascript.rhino.Node var48 = var35.copyInformationFrom(var44);
    java.lang.Object var50 = null;
    var35.putProp(0, var50);
    com.google.javascript.rhino.JSTypeExpression var53 = new com.google.javascript.rhino.JSTypeExpression(var35, "()");
    com.google.javascript.rhino.jstype.StaticScope var54 = null;
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    com.google.javascript.rhino.jstype.JSType var58 = null;
    var56.unregisterPropertyOnType("Unversioned directory", var58);
    com.google.javascript.rhino.jstype.JSType var60 = null;
    boolean var62 = var56.canPropertyBeDefined(var60, "BANG");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var63};
    com.google.javascript.rhino.Node var65 = var56.createParameters(var64);
    com.google.javascript.rhino.jstype.JSType var66 = var53.evaluate(var54, var56);
    com.google.javascript.rhino.jstype.JSType var67 = var66.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var68 = var67.dereference();
    boolean var69 = var67.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var70 = var15.createEnumType("STRING hi 0 [length: 2]\n", var25, var67);
    boolean var71 = var70.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    var73.unregisterPropertyOnType("Unversioned directory", var75);
    com.google.javascript.rhino.jstype.JSType var77 = null;
    com.google.javascript.jscomp.JSModule var79 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var80 = var79.getDependencies();
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.block(var80);
    com.google.javascript.rhino.jstype.FunctionType var82 = var73.createFunctionTypeWithVarArgs(var77, var80);
    boolean var83 = var82.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var84 = var70.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var82);
    boolean var85 = var82.isStringObjectType();
    com.google.javascript.rhino.jstype.JSType.TypePair var86 = var10.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var82);
    java.lang.String var87 = var10.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test81"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getMeaning();
    boolean var18 = var14.shouldPreserveTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test82"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.matchesNumberContext();
    boolean var66 = var62.hasImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test83() {}
//   public void test83() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test83"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getErrors();
//     com.google.javascript.jscomp.Scope var5 = var3.getTopScope();
//     com.google.javascript.jscomp.JSSourceFile var6 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var7 = new com.google.javascript.jscomp.JSSourceFile[] { var6};
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getProvides();
//     com.google.javascript.jscomp.CompilerInput var12 = var9.getByName("()");
//     com.google.javascript.jscomp.SourceAst var13 = null;
//     com.google.javascript.rhino.InputId var14 = null;
//     com.google.javascript.jscomp.CompilerInput var16 = new com.google.javascript.jscomp.CompilerInput(var13, var14, true);
//     com.google.javascript.jscomp.SourceAst var17 = var16.getAst();
//     var9.add(var16);
//     java.util.List var19 = var9.getDependencies();
//     com.google.javascript.jscomp.JSModule[] var20 = new com.google.javascript.jscomp.JSModule[] { var9};
//     com.google.javascript.jscomp.JSModuleGraph var21 = new com.google.javascript.jscomp.JSModuleGraph(var20);
//     com.google.javascript.jscomp.CompilerOptions var22 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var23 = null;
//     var22.setStripTypes(var23);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var26 = var25.getDirectedGraphNodes();
//     java.util.List var27 = var25.getEdges();
//     var22.setManageClosureDependencies(var27);
//     boolean var29 = var22.isExternExportsEnabled();
//     var22.setCheckCaja(false);
//     java.util.Set var32 = null;
//     var22.setReplaceStringsReservedStrings(var32);
//     com.google.javascript.rhino.JSDocInfoBuilder var35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var36 = var35.recordExpose();
//     boolean var38 = var35.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var43 = var42.getNext();
//     com.google.javascript.rhino.Node var44 = var40.srcrefTree(var42);
//     com.google.javascript.rhino.InputId var45 = com.google.javascript.jscomp.NodeUtil.getInputId(var42);
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     var42.setJSType(var46);
//     com.google.javascript.rhino.JSDocInfo var48 = var35.build(var42);
//     java.lang.String var49 = var48.getFileOverview();
//     java.util.Set var50 = var48.getModifies();
//     var22.setReplaceStringsReservedStrings(var50);
//     var22.setGroupVariableDeclarations(false);
//     var22.setInferTypes(true);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var58 = var57.getGraphvizEdges();
//     var22.setReplaceStringsConfiguration("hi!", var58);
//     var22.setRenamePrefix("BANG 0\n    STRING hi 0 [length: 2]\n");
//     var22.setOptimizeParameters(false);
//     com.google.javascript.jscomp.Result var64 = var3.compile(var7, var20, var22);
// 
//   }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test84"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.paramList(var19);
    var6.traverseRoots(var19);
    boolean var22 = var6.hasScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test85"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isConstant("LABEL_NAME hi!");
    com.google.javascript.rhino.Node var45 = null;
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    boolean var53 = var49.getBooleanProp(100);
    boolean var54 = var49.isRegExp();
    boolean var55 = var49.isName();
    java.lang.String var56 = var33.extractClassNameIfRequire(var45, var49);
    boolean var58 = var33.isPrivate("{proxy:{1241367186}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test86"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var0.setRemoveClosureAsserts(true);
    var0.setDefineToDoubleLiteral("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test87"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    var9.setSourceEncodedPositionForTree(0);
    boolean var13 = var9.isHook();
    boolean var14 = var9.isIf();
    var9.setIsSyntheticBlock(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test88"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    java.util.Set var14 = var10.getOwnPropertyNames();
    boolean var15 = var10.isEmptyType();
    java.lang.String var16 = var10.getDisplayName();
    java.lang.String var17 = var10.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test89"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    var0.setCommonJSModulePathPrefix("null(null)");
    var0.setPrettyPrint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test90"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setDefineToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var0.setDevirtualizePrototypeMethods(true);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test91"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.jscomp.VariableRenamingPolicy var12 = null;
    var0.setVariableRenaming(var12);
    var0.setCheckSymbols(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test92"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var14.setDeprecated(false);
    boolean var17 = var14.isHidden();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test93"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    int var15 = var8.getType();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    boolean var23 = var19.isExprResult();
    com.google.javascript.rhino.Node var24 = var19.cloneTree();
    boolean var25 = var8.isEquivalentToTyped(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 306);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test94"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setTightenTypes(false);
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var15 = new com.google.javascript.jscomp.ComposeWarningsGuard(var14);
    com.google.javascript.jscomp.Compiler var16 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var17 = var16.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var18 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var16);
    com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var23 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var24 = com.google.javascript.jscomp.JSError.make(var21, var23);
    int var25 = var24.getCharno();
    com.google.javascript.jscomp.CheckLevel var26 = var24.getDefaultLevel();
    java.lang.String var27 = var18.formatError(var24);
    com.google.javascript.jscomp.CheckLevel var28 = var15.level(var24);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var15);
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var33 = new com.google.javascript.jscomp.ComposeWarningsGuard(var32);
    com.google.javascript.jscomp.DiagnosticGroup var34 = null;
    boolean var35 = var33.enables(var34);
    com.google.javascript.jscomp.CheckLevel var37 = null;
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var37, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var40 = new com.google.javascript.jscomp.DiagnosticType[] { var39};
    com.google.javascript.jscomp.DiagnosticGroup var41 = new com.google.javascript.jscomp.DiagnosticGroup(var40);
    com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var43 = null;
    var42.setStripTypes(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var46 = var45.getDirectedGraphNodes();
    java.util.List var47 = var45.getEdges();
    var42.setManageClosureDependencies(var47);
    boolean var49 = var42.isExternExportsEnabled();
    var42.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var54 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var56 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make(var54, var56);
    int var58 = var57.getCharno();
    com.google.javascript.jscomp.CheckLevel var59 = var57.getDefaultLevel();
    var42.setReportUnknownTypes(var59);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var61 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var41, var59);
    boolean var62 = var33.enables(var41);
    boolean var63 = var15.enables(var41);
    com.google.javascript.jscomp.Compiler var64 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var65 = var64.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var66 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var64);
    com.google.javascript.jscomp.DiagnosticType var69 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var71 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make(var69, var71);
    int var73 = var72.getCharno();
    com.google.javascript.jscomp.CheckLevel var74 = var72.getDefaultLevel();
    java.lang.String var75 = var66.formatError(var72);
    int var76 = var72.getLineNumber();
    boolean var77 = var41.matches(var72);
    int var78 = var72.getNodeSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var27.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var75.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test95"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("function (): {1204057807}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test96"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    java.util.List var22 = var14.getThrownTypes();
    com.google.javascript.rhino.JSTypeExpression var23 = var14.getTypedefType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test97"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.FunctionType var64 = var58.getConstructor();
    com.google.javascript.rhino.jstype.JSType var66 = var58.findPropertyType("function (): {1292906510}");
    boolean var67 = var66.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test98"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.putIntProp(0, 100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.exprResult(var6);
    var6.setSourceEncodedPositionForTree(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test99"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var6.isGetterDef();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(100, var6, var11);
    com.google.javascript.rhino.JSDocInfoBuilder var18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var19 = var18.recordExpose();
    boolean var20 = var18.recordExterns();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    boolean var28 = var24.isArrayLit();
    com.google.javascript.rhino.Node var29 = var24.getNext();
    var18.markTypeNode(var24, 10, 100, 0, 0, false);
    boolean var36 = var24.isCall();
    var24.setLineno(2);
    boolean var39 = var24.isHook();
    boolean var40 = var24.isVarArgs();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var44 = var42.getBooleanProp((-1));
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    com.google.javascript.rhino.Node var51 = var48.removeFirstChild();
    com.google.javascript.rhino.Node var52 = var42.useSourceInfoFromForTree(var48);
    boolean var53 = var48.isDec();
    java.lang.String var57 = var48.toString(false, false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.function(var6, var24, var48);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "BANG"+ "'", var57.equals("BANG"));

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test100"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceAst var9 = var6.getSourceAst();
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var11.removeAll();
    java.lang.String var13 = var11.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setModule(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Unversioned directory"+ "'", var13.equals("Unversioned directory"));

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test101"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.Node var63 = var62.getParametersNode();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var64 = var62.getPossibleToBooleanOutcomes();
    java.util.List var65 = var62.getSubTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test102"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    java.lang.String var16 = var14.getDeprecationReason();
    boolean var17 = var14.isConsistentIdGenerator();
    com.google.javascript.rhino.Node var18 = var14.getAssociatedNode();
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.lang.String var34 = var33.getFileOverview();
    java.util.Set var35 = var33.getModifies();
    java.util.List var36 = var33.getImplementedInterfaces();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.block(var36);
    boolean var38 = var37.isFalse();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var40 = var39.cloneTree();
    com.google.javascript.rhino.Node var41 = var37.useSourceInfoFrom(var39);
    com.google.javascript.rhino.Node var42 = var18.copyInformationFromForTree(var37);
    var42.setVarArgs(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test103"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    boolean var60 = var58.canBeCalled();
    boolean var62 = var58.hasOwnProperty("STRING hi 0 [length: 2]\n");
    boolean var64 = var58.isPropertyTypeInferred("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test104() {}
//   public void test104() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test104"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     java.util.List var3 = var1.getRequires();
//     com.google.javascript.jscomp.SourceAst var4 = null;
//     com.google.javascript.rhino.InputId var5 = null;
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
//     com.google.javascript.jscomp.JSModule var8 = var7.getModule();
//     var1.addFirst(var7);
//     com.google.javascript.jscomp.CompilerInput var10 = null;
//     var1.remove(var10);
// 
//   }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test105"); }


    int var1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test106"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setNameAnonymousFunctionsOnly(false);
    var0.setSyntheticBlockStartMarker("function (): {175702431}");
    var0.resetWarningsGuard();
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var21 = null;
    var20.setStripTypes(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var24 = var23.getDirectedGraphNodes();
    java.util.List var25 = var23.getEdges();
    var20.setManageClosureDependencies(var25);
    var20.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var33 = new com.google.javascript.jscomp.ComposeWarningsGuard(var32);
    com.google.javascript.jscomp.JSError var34 = null;
    com.google.javascript.jscomp.CheckLevel var35 = var33.level(var34);
    var20.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var33);
    var20.setNameReferenceGraphPath("goog.exportSymbol");
    com.google.javascript.jscomp.CheckLevel var40 = null;
    com.google.javascript.jscomp.DiagnosticType var42 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var40, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var43 = new com.google.javascript.jscomp.DiagnosticType[] { var42};
    com.google.javascript.jscomp.DiagnosticGroup var44 = new com.google.javascript.jscomp.DiagnosticGroup(var43);
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var46 = null;
    var45.setStripTypes(var46);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    java.util.List var50 = var48.getEdges();
    var45.setManageClosureDependencies(var50);
    boolean var52 = var45.isExternExportsEnabled();
    var45.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var59 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make(var57, var59);
    int var61 = var60.getCharno();
    com.google.javascript.jscomp.CheckLevel var62 = var60.getDefaultLevel();
    var45.setReportUnknownTypes(var62);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var64 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var44, var62);
    var20.setReportMissingOverride(var62);
    var20.setInstrumentationTemplate("BANG");
    com.google.javascript.jscomp.CompilerOptions var68 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var69 = null;
    var68.setStripTypes(var69);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var72 = var71.getDirectedGraphNodes();
    java.util.List var73 = var71.getEdges();
    var68.setManageClosureDependencies(var73);
    var68.setDevirtualizePrototypeMethods(true);
    var68.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var79 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var80 = null;
    var79.setStripTypes(var80);
    byte[] var83 = new byte[] { (byte)100};
    var79.setInputPropertyMapSerialized(var83);
    var68.setInputVariableMapSerialized(var83);
    var20.setInputVariableMapSerialized(var83);
    var0.setInputVariableMapSerialized(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test107"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setRemoveUnusedLocalVars(true);
    var0.setCrossModuleCodeMotion(true);
    var0.setCollapseAnonymousFunctions(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test108"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", var1);
    com.google.javascript.jscomp.parsing.Config.LanguageMode var5 = null;
    java.util.Set var7 = null;
    com.google.javascript.jscomp.parsing.Config var8 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var5, true, var7);
    com.google.javascript.rhino.head.ErrorReporter var9 = null;
    java.util.logging.Logger var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.ParserRunner.parse((com.google.javascript.rhino.jstype.StaticSourceFile)var2, "", var8, var9, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test109"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.util.List var23 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var25 = var24.getDirectedGraphNodes();
    java.lang.Iterable var26 = var24.getDirectedGraphNodes();
    java.lang.Iterable var27 = var24.getDirectedGraphNodes();
    var24.pushNodeAnnotations();
    com.google.javascript.jscomp.SourceFile var31 = com.google.javascript.jscomp.SourceFile.fromCode("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n", "module$ERROR _ (InputId: )\n");
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    boolean var39 = var32.isExternExportsEnabled();
    var32.setCheckCaja(false);
    var32.setRemoveUnusedPrototypeProperties(true);
    var32.setCheckTypes(false);
    var32.setPropertyAffinity(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var48 = var0.isConnected((java.lang.Object)var24, (java.lang.Object)var31, (java.lang.Object)var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test110"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    java.lang.String var4 = var2.getLine((-1));
    boolean var5 = var2.isExtern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "()"+ "'", var4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test111"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var16.unregisterPropertyOnType("Unversioned directory", var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.block(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var16.createFunctionTypeWithVarArgs(var20, var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var28 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    boolean var64 = var28.addVarArgs(var63);
    boolean var65 = var63.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.FunctionType var77 = var16.createConstructorType(var63, var75);
    com.google.javascript.rhino.jstype.JSType var79 = var77.getPropertyType("");
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var82 = var10.defineSynthesizedProperty("BANG 0\n    STRING hi 0 [length: 2]\n", var79, var81);
    com.google.javascript.jscomp.CompilerOptions var84 = new com.google.javascript.jscomp.CompilerOptions();
    var84.setChainCalls(true);
    var84.setInlineLocalFunctions(false);
    var84.setDefineToStringLiteral("2014/12/24 11:10", "(LABEL_NAME hi!)");
    var81.putProp(2, (java.lang.Object)var84);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var93 = null;
    var84.setAnonymousFunctionNaming(var93);
    byte[] var97 = new byte[] { (byte)1, (byte)0};
    var84.setInputPropertyMapSerialized(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test112"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var9.isQualifiedName();
    com.google.javascript.rhino.Node var12 = var9.cloneNode();
    boolean var13 = var12.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test113"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    java.lang.String var33 = var15.getDisplayName();
    com.google.javascript.rhino.jstype.JSType var35 = var15.getRestrictedTypeGivenToBooleanOutcome(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var36 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var15);
    int var37 = var15.getMaxArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test114"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    boolean var1 = var0.isCatch();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newNumber(0.0d, 10, 0);
    com.google.javascript.rhino.JSDocInfoBuilder var7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var8 = var7.recordExpose();
    boolean var9 = var7.recordExterns();
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    boolean var17 = var13.isArrayLit();
    com.google.javascript.rhino.Node var18 = var13.getNext();
    var7.markTypeNode(var13, 10, 100, 0, 0, false);
    boolean var25 = var13.isCall();
    var13.setLineno(2);
    int var28 = var5.getIndexOfChild(var13);
    boolean var29 = var0.isEquivalentToTyped(var5);
    com.google.javascript.jscomp.SourceAst var30 = null;
    com.google.javascript.rhino.InputId var31 = null;
    com.google.javascript.jscomp.CompilerInput var33 = new com.google.javascript.jscomp.CompilerInput(var30, var31, true);
    com.google.javascript.jscomp.SourceAst var34 = var33.getAst();
    com.google.javascript.jscomp.JSModule var35 = null;
    var33.setModule(var35);
    com.google.javascript.jscomp.SourceAst var37 = var33.getSourceAst();
    com.google.javascript.jscomp.SourceAst var38 = var33.getSourceAst();
    com.google.javascript.jscomp.JSModule var40 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var41 = var40.getDependencies();
    com.google.javascript.jscomp.SourceAst var42 = null;
    com.google.javascript.rhino.InputId var43 = null;
    com.google.javascript.jscomp.CompilerInput var45 = new com.google.javascript.jscomp.CompilerInput(var42, var43, true);
    com.google.javascript.jscomp.JSModule var46 = var45.getModule();
    var40.add(var45);
    com.google.javascript.jscomp.SourceFile var49 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var40.addFirst(var49);
    java.util.Set var51 = var40.getAllDependencies();
    var40.removeAll();
    com.google.javascript.jscomp.SourceAst var53 = null;
    com.google.javascript.rhino.InputId var54 = null;
    com.google.javascript.jscomp.CompilerInput var56 = new com.google.javascript.jscomp.CompilerInput(var53, var54, true);
    com.google.javascript.jscomp.CompilerInput var59 = new com.google.javascript.jscomp.CompilerInput(var53, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var40.addFirst(var59);
    com.google.javascript.jscomp.SourceAst var61 = null;
    com.google.javascript.rhino.InputId var62 = null;
    com.google.javascript.jscomp.CompilerInput var64 = new com.google.javascript.jscomp.CompilerInput(var61, var62, true);
    com.google.javascript.jscomp.SourceAst var65 = var64.getAst();
    com.google.javascript.jscomp.JSModule var66 = null;
    var64.setModule(var66);
    var40.add(var64);
    var33.setModule(var40);
    com.google.javascript.jscomp.SourceFile var73 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    var40.add(var73);
    var5.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test115"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.InputId var2 = new com.google.javascript.rhino.InputId("");
//     com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var4 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = var8.getNext();
//     com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
//     boolean var11 = var8.isOr();
//     java.lang.String var12 = var3.extractClassNameIfRequire(var4, var8);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var14.unregisterPropertyOnType("Unversioned directory", var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var21 = var20.getDependencies();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.block(var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var14.createFunctionTypeWithVarArgs(var18, var21);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     var25.unregisterPropertyOnType("Unversioned directory", var27);
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var32 = var31.getDependencies();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.block(var32);
//     com.google.javascript.rhino.jstype.FunctionType var34 = var25.createFunctionTypeWithVarArgs(var29, var32);
//     boolean var35 = var34.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var37 = var36.getDirectedGraphNodes();
//     java.lang.Iterable var38 = var36.getDirectedGraphNodes();
//     java.util.List var39 = var36.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var41 = null;
//     var40.setStripTypes(var41);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var44 = var43.getDirectedGraphNodes();
//     java.util.List var45 = var43.getEdges();
//     var40.setManageClosureDependencies(var45);
//     boolean var47 = var40.isExternExportsEnabled();
//     var40.setCheckCaja(false);
//     java.util.Set var50 = null;
//     var40.setReplaceStringsReservedStrings(var50);
//     var40.setAliasAllStrings(true);
//     var40.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var57 = null;
//     var56.setStripTypes(var57);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var59 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var60 = var59.getDirectedGraphNodes();
//     java.util.List var61 = var59.getEdges();
//     var56.setManageClosureDependencies(var61);
//     boolean var63 = var56.isExternExportsEnabled();
//     var56.setCheckCaja(false);
//     var56.setGroupVariableDeclarations(true);
//     java.util.Map var68 = var56.getDefineReplacements();
//     var40.setPropertyInvalidationErrors(var68);
//     var3.defineDelegateProxyPrototypeProperties(var14, (com.google.javascript.rhino.jstype.StaticScope)var34, var39, var68);
//     boolean var71 = var34.canBeCalled();
//     boolean var72 = var34.isRegexpType();
//     boolean var73 = var2.equals((java.lang.Object)var34);
//     boolean var75 = var34.hasOwnProperty("RETURN");
//     java.lang.String var76 = var34.getNormalizedReferenceName();
//     com.google.javascript.rhino.Node var77 = var34.getRootNode();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var78 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var79 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var78);
//     boolean var80 = var79.hasVarArgs();
//     com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var83 = var82.isGetterDef();
//     boolean var84 = var82.isNE();
//     boolean var85 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var82);
//     var82.removeProp(0);
//     com.google.javascript.rhino.Node var88 = var79.newParameterFromNode(var82);
//     var34.setSource(var88);
//     com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.catchNode(var0, var88);
// 
//   }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test116"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    boolean var9 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var7);
    int var10 = var7.getLength();
    com.google.javascript.rhino.Node var11 = null;
    boolean var12 = var7.hasChild(var11);
    com.google.javascript.rhino.Node var13 = var5.useSourceInfoIfMissingFromForTree(var7);
    var7.setSourceFileForTesting("Unversioned directory");
    boolean var16 = var7.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var17 = var7.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var21 = null;
    java.util.logging.Logger var22 = null;
    com.google.javascript.jscomp.LoggerErrorManager var23 = new com.google.javascript.jscomp.LoggerErrorManager(var21, var22);
    com.google.javascript.jscomp.Compiler var24 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var23);
    com.google.javascript.jscomp.Scope var25 = var24.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var26 = null;
    com.google.javascript.jscomp.NodeTraversal var27 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var24, var26);
    com.google.javascript.jscomp.Scope var28 = var27.getScope();
    com.google.javascript.rhino.Node var29 = null;
    com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var34 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make(var32, var34);
    com.google.javascript.jscomp.DiagnosticType var36 = var35.getType();
    java.lang.String[] var38 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var39 = var27.makeError(var29, var36, var38);
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var7, var20, var38);
    com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make(var2, var38);
    com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var43 = null;
    var42.setStripTypes(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var45 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var46 = var45.getDirectedGraphNodes();
    java.util.List var47 = var45.getEdges();
    var42.setManageClosureDependencies(var47);
    boolean var49 = var42.isExternExportsEnabled();
    var42.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions var52 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var53 = null;
    var52.setStripTypes(var53);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var56 = var55.getDirectedGraphNodes();
    java.util.List var57 = var55.getEdges();
    var52.setManageClosureDependencies(var57);
    boolean var59 = var52.isExternExportsEnabled();
    var52.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var66 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var67 = com.google.javascript.jscomp.JSError.make(var64, var66);
    int var68 = var67.getCharno();
    com.google.javascript.jscomp.CheckLevel var69 = var67.getDefaultLevel();
    var52.setReportUnknownTypes(var69);
    var42.setCheckUnreachableCode(var69);
    com.google.javascript.jscomp.Compiler var72 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var73 = var72.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var74 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var72);
    com.google.javascript.jscomp.DiagnosticType var77 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var79 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make(var77, var79);
    int var81 = var80.getCharno();
    com.google.javascript.jscomp.CheckLevel var82 = var80.getDefaultLevel();
    java.lang.String var83 = var74.formatError(var80);
    var74.setColorize(true);
    java.lang.String var86 = var41.format(var69, (com.google.javascript.jscomp.MessageFormatter)var74);
    com.google.javascript.jscomp.DiagnosticType var89 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var91 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var92 = com.google.javascript.jscomp.JSError.make(var89, var91);
    com.google.javascript.jscomp.DiagnosticType var93 = var92.getType();
    java.lang.String var94 = var74.formatError(var92);
    java.util.logging.Logger var95 = null;
    com.google.javascript.jscomp.LoggerErrorManager var96 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var74, var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var83.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var86.equals("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var94.equals("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test117"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "Unversioned directory");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var0.getDirectedGraphNode((java.lang.Object)"hi!");
    java.util.Collection var9 = var0.getNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.util.List var25 = var24.getThrownTypes();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isOr();
    var24.setAssociatedNode(var29);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var34 = var0.getDirectedGraphNode((java.lang.Object)var24);
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var39 = null;
    var38.setBrokenClosureRequiresLevel(var39);
    var38.setLocale("");
    var38.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var46 = null;
    var45.setStripTypes(var46);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    java.util.List var50 = var48.getEdges();
    var45.setManageClosureDependencies(var50);
    boolean var52 = var45.isExternExportsEnabled();
    var45.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var59 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make(var57, var59);
    int var61 = var60.getCharno();
    com.google.javascript.jscomp.CheckLevel var62 = var60.getDefaultLevel();
    var45.setReportUnknownTypes(var62);
    var38.setBrokenClosureRequiresLevel(var62);
    com.google.javascript.jscomp.CheckLevel var66 = null;
    com.google.javascript.jscomp.DiagnosticType var68 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var66, "");
    com.google.javascript.jscomp.CheckLevel var70 = null;
    com.google.javascript.jscomp.DiagnosticType var72 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var70, "");
    int var73 = var68.compareTo(var72);
    com.google.javascript.jscomp.DiagnosticGroup var74 = com.google.javascript.jscomp.DiagnosticGroup.forType(var68);
    com.google.javascript.rhino.Node var76 = null;
    com.google.javascript.jscomp.CheckLevel var78 = null;
    com.google.javascript.jscomp.DiagnosticType var80 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var78, "");
    com.google.javascript.jscomp.CheckLevel var82 = null;
    com.google.javascript.jscomp.DiagnosticType var84 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var82, "");
    int var85 = var80.compareTo(var84);
    java.lang.String[] var87 = new java.lang.String[] { "(module$2014$12$24 11:10)"};
    com.google.javascript.jscomp.JSError var88 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", var76, var84, var87);
    com.google.javascript.jscomp.JSError var89 = com.google.javascript.jscomp.JSError.make("null(null)", 0, (-1), var62, var68, var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var90 = var0.getDirectedSuccNodes((java.lang.Object)var87);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test118"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    boolean var80 = var73.matchesNumberContext();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var85 = var83.getBooleanProp((-1));
    com.google.javascript.rhino.Node var87 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var89 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var90 = var89.getNext();
    com.google.javascript.rhino.Node var91 = var87.srcrefTree(var89);
    com.google.javascript.rhino.Node var92 = var89.removeFirstChild();
    com.google.javascript.rhino.Node var93 = var83.useSourceInfoFromForTree(var89);
    boolean var94 = var73.defineElement("", var89);
    java.lang.String var95 = var73.getDisplayName();
    com.google.javascript.rhino.jstype.JSType var97 = var73.findPropertyType("{413092455}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var95.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test119"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
    boolean var7 = var1.isForwardDeclaredType("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test120"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    com.google.javascript.rhino.jstype.JSType var62 = var58.autoboxesTo();
    boolean var64 = var58.hasProperty("function (): {1509650176}");
    boolean var65 = var58.matchesStringContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test121"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = var17.getNext();
//     com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
//     boolean var20 = var17.isVarArgs();
//     com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
//     com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
//     com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
//     java.lang.Object var32 = null;
//     var17.putProp(0, var32);
//     com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
//     com.google.javascript.rhino.jstype.StaticScope var36 = null;
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     var38.unregisterPropertyOnType("Unversioned directory", var40);
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
//     com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
//     com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
//     boolean var49 = var13.addVarArgs(var48);
//     boolean var50 = var48.isOrdinaryFunction();
//     boolean var51 = var48.isResolved();
//     boolean var53 = var1.canPropertyBeDefined(var48, "{proxy:{1612771089}}");
//     com.google.javascript.rhino.jstype.JSTypeNative var54 = null;
//     com.google.javascript.rhino.jstype.JSTypeNative[] var55 = new com.google.javascript.rhino.jstype.JSTypeNative[] { var54};
//     com.google.javascript.rhino.jstype.JSType var56 = var1.createUnionType(var55);
// 
//   }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test122"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    java.lang.String var4 = var2.getLine((-1));
    java.lang.String var5 = var2.getCode();
    java.io.Reader var6 = var2.getCodeReader();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "()"+ "'", var4.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "()"+ "'", var5.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test123"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var5 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var5);
    com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
    com.google.javascript.rhino.Node var8 = var3.getRoot();
    java.lang.String var9 = var3.getAstDotGraph();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test124"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.StaticScope var32 = null;
    com.google.javascript.rhino.jstype.JSType var33 = var24.resolve(var31, var32);
    com.google.javascript.rhino.jstype.JSType var34 = var24.getReturnType();
    com.google.javascript.rhino.jstype.ObjectType var35 = var24.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test125"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    var80.setOptimizeParameters(true);
    var80.setInlineLocalFunctions(true);
    var80.setCommonJSModulePathPrefix("Unversioned directory: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test126"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    com.google.common.collect.ImmutableList var16 = var14.getTemplateTypeNames();
    boolean var18 = var14.hasParameter("goog.global");
    var14.setLicense("(2014/12/24 11:10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test127"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.rhino.InputId var9 = var6.getInputId();
//     java.nio.charset.Charset var11 = null;
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("INHERITED", var11);
//     var6.setSourceFile(var12);
// 
//   }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test128"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    boolean var64 = var58.isNullable();
    boolean var65 = var58.isBooleanObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test129"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.paramList(var23);
    var0.setManageClosureDependencies(var23);
    var0.skipAllCompilerPasses();
    com.google.javascript.jscomp.ClosureCodingConvention var29 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var31 = var29.isConstantKey("2014/12/24 11:10");
    java.util.Collection var32 = var29.getAssertionFunctions();
    boolean var34 = var29.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isOptionalArg();
    java.lang.String var46 = var38.toString(false, false, true);
    java.util.List var47 = var29.identifyTypeDeclarationCall(var38);
    java.lang.String var48 = var29.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    int var52 = var50.getSourceOffset();
    com.google.javascript.rhino.Node var53 = var50.cloneNode();
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    int var57 = var55.getSourceOffset();
    com.google.javascript.rhino.Node var58 = var55.cloneNode();
    var53.addChildrenToFront(var58);
    com.google.javascript.jscomp.CodingConvention.Bind var61 = var29.describeFunctionBind(var53, true);
    com.google.javascript.jscomp.GoogleCodingConvention var62 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var29);
    boolean var64 = var62.isConstant("module$2014$12$24 11:10");
    boolean var67 = var62.isExported("Unversioned directory", false);
    boolean var69 = var62.isConstantKey("function (): {540092593}");
    boolean var71 = var62.isPrivate("LABEL_NAME hi!");
    boolean var74 = var62.isExported("module$2014$12$24 11:10", false);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var62);
    com.google.javascript.rhino.JSDocInfoBuilder var77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var78 = var77.recordExpose();
    boolean var80 = var77.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var82 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var85 = var84.getNext();
    com.google.javascript.rhino.Node var86 = var82.srcrefTree(var84);
    com.google.javascript.rhino.InputId var87 = com.google.javascript.jscomp.NodeUtil.getInputId(var84);
    com.google.javascript.rhino.jstype.JSType var88 = null;
    var84.setJSType(var88);
    com.google.javascript.rhino.JSDocInfo var90 = var77.build(var84);
    java.lang.String var91 = var90.getFileOverview();
    java.util.Set var92 = var90.getModifies();
    java.util.List var93 = var90.getImplementedInterfaces();
    com.google.javascript.rhino.Node var94 = com.google.javascript.rhino.IR.block(var93);
    boolean var95 = var94.isFalse();
    boolean var96 = var94.isHook();
    boolean var97 = var94.isDo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var98 = var62.isOptionalParameter(var94);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "BANG"+ "'", var46.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test130"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(0, "hi!");
    var7.setVarArgs(false);
    com.google.javascript.rhino.jstype.FunctionBuilder var10 = var4.withSourceNode(var7);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.block(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var12.createFunctionTypeWithVarArgs(var16, var19);
    boolean var22 = var21.hasCachedValues();
    java.util.Set var23 = var21.getPropertyNames();
    com.google.javascript.rhino.jstype.ParameterizedType var24 = var21.toMaybeParameterizedType();
    com.google.javascript.rhino.jstype.FunctionBuilder var25 = var10.copyFromOtherFunction(var21);
    java.lang.Iterable var26 = var21.getAllExtendedInterfaces();
    java.lang.Iterable var27 = var21.getAllExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test131"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    boolean var32 = var6.recordSuppressions(var31);
    var0.setAliasableStrings(var31);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var34 = var0.getLanguageIn();
    var0.setTweakToNumberLiteral("ERROR - (InputId: )\n", 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test132"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    com.google.javascript.jscomp.ClosureCodingConvention var39 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var41 = var39.isConstantKey("2014/12/24 11:10");
    java.util.Collection var42 = var39.getAssertionFunctions();
    boolean var44 = var39.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isOptionalArg();
    java.lang.String var56 = var48.toString(false, false, true);
    java.util.List var57 = var39.identifyTypeDeclarationCall(var48);
    java.lang.String var58 = var39.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    int var62 = var60.getSourceOffset();
    com.google.javascript.rhino.Node var63 = var60.cloneNode();
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    int var67 = var65.getSourceOffset();
    com.google.javascript.rhino.Node var68 = var65.cloneNode();
    var63.addChildrenToFront(var68);
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var39.describeFunctionBind(var63, true);
    com.google.javascript.rhino.Node var72 = var2.newOptionalParameterFromNode(var63);
    com.google.javascript.rhino.Node var73 = var2.build();
    boolean var74 = var73.isScript();
    boolean var75 = var73.isGetProp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "BANG"+ "'", var56.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test133"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var3 = var1.recordConstructor();
    boolean var4 = var1.recordNoTypeCheck();
    boolean var5 = var1.recordNoTypeCheck();
    boolean var6 = var1.recordExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test134"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var16.isFunction();
    boolean var18 = var16.isFalse();
    boolean var19 = var16.isWhile();
    boolean var20 = var16.isLabelName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test135"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.block(var17);
    boolean var19 = var18.isFalse();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var21 = var20.cloneTree();
    com.google.javascript.rhino.Node var22 = var18.useSourceInfoFrom(var20);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var18, "goog.abstractMethod");
    java.lang.Object var26 = var18.getProp(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test136"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    boolean var10 = var5.isScript();
    com.google.javascript.rhino.Node var11 = var5.getFirstChild();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    int var15 = var13.getSourceOffset();
    com.google.javascript.rhino.Node var16 = var13.cloneNode();
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var17 = var16.getJsDocBuilderForNode();
    com.google.javascript.rhino.Node var18 = var5.clonePropsFrom(var16);
    java.util.Set var19 = var18.getDirectives();
    java.lang.Object var21 = var18.getProp(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test137"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var10 = var3.getNext();
    boolean var11 = var3.isQualifiedName();
    com.google.javascript.rhino.Node.AncestorIterable var12 = var3.getAncestors();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test138"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
    var1.sortInputsByDeps(var26);
    java.util.List var31 = var1.getDependencies();
    com.google.javascript.jscomp.SourceFile var35 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    int var37 = var35.getColumnOfOffset(10);
    var1.addFirst(var35);
    com.google.javascript.jscomp.SourceFile var42 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var44 = var42.getLineOfOffset(2);
    java.lang.String var45 = var42.toString();
    var1.addFirst(var42);
    java.lang.String var47 = var42.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "goog.abstractMethod"+ "'", var45.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "()"+ "'", var47.equals("()"));

  }

  public void test139() {}
//   public void test139() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test139"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var2 = var1.recordExpose();
//     boolean var3 = var1.recordExterns();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = var7.getNext();
//     com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
//     boolean var10 = var7.isVarArgs();
//     boolean var11 = var7.isArrayLit();
//     com.google.javascript.rhino.Node var12 = var7.getNext();
//     var1.markTypeNode(var7, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     boolean var25 = var22.isVarArgs();
//     com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = var31.getNext();
//     com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
//     com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
//     com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
//     java.lang.Object var37 = null;
//     var22.putProp(0, var37);
//     com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
//     com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
//     boolean var42 = var1.recordBaseType(var40);
//     com.google.javascript.jscomp.MessageFormatter var43 = null;
//     java.util.logging.Logger var44 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
//     com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     var46.reportCodeChange();
//     java.lang.String var51 = var46.getSourceLine("Unversioned directory", 2);
// 
//   }

  public void test140() {}
//   public void test140() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test140"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var0.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
//     var0.setSourceMapDetailLevel(var12);
//     com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
//     var0.setMarkNoSideEffectCalls(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var17 = null;
//     var0.setInlineFunctions(var17);
// 
//   }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test141"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var15 = var13.recordExterns();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    boolean var23 = var19.isArrayLit();
    com.google.javascript.rhino.Node var24 = var19.getNext();
    var13.markTypeNode(var19, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var36 = null;
    boolean var37 = var32.recordParameter("Unversioned directory", var36);
    com.google.javascript.rhino.JSTypeExpression var38 = null;
    boolean var40 = var32.recordThrowDescription(var38, "");
    com.google.javascript.rhino.JSDocInfoBuilder var42 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var43 = var42.recordExpose();
    boolean var45 = var42.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.InputId var52 = com.google.javascript.jscomp.NodeUtil.getInputId(var49);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    var49.setJSType(var53);
    com.google.javascript.rhino.JSDocInfo var55 = var42.build(var49);
    java.lang.String var56 = var55.getFileOverview();
    java.util.Set var57 = var55.getModifies();
    boolean var58 = var32.recordSuppressions(var57);
    boolean var59 = var13.recordModifies(var57);
    var0.setStripNamePrefixes(var57);
    var0.setAliasExternals(true);
    var0.setExternExportsPath("{proxy:{599688852}}");
    var0.setLabelRenaming(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test142"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var10.hasImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test143"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var6 = null;
    var0.setAnonymousFunctionNaming(var6);
    var0.setDevirtualizePrototypeMethods(true);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test144"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.paramList(var23);
    var0.setManageClosureDependencies(var23);
    var0.skipAllCompilerPasses();
    var0.setAliasExternals(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test145"); }


    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "Unversioned directory");
    boolean var9 = var7.equals((java.lang.Object)"goog.abstractMethod");
    com.google.javascript.jscomp.DiagnosticType var15 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var17 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make(var15, var17);
    com.google.javascript.jscomp.DiagnosticType var19 = var18.getType();
    int var20 = var18.getNodeLength();
    com.google.javascript.jscomp.CheckLevel var21 = var18.getDefaultLevel();
    com.google.javascript.jscomp.DiagnosticType var24 = com.google.javascript.jscomp.DiagnosticType.warning("BANG 0 [source_file: Unversioned directory]\n", "WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var33 = var29.getBooleanProp(100);
    int var34 = var29.getSideEffectFlags();
    com.google.javascript.jscomp.CheckLevel var36 = null;
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var36, "");
    com.google.javascript.jscomp.CheckLevel var40 = null;
    com.google.javascript.jscomp.DiagnosticType var42 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var40, "");
    int var43 = var38.compareTo(var42);
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    boolean var50 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var48);
    int var51 = var48.getLength();
    com.google.javascript.rhino.Node var52 = null;
    boolean var53 = var48.hasChild(var52);
    com.google.javascript.rhino.Node var54 = var46.useSourceInfoIfMissingFromForTree(var48);
    var48.setSourceFileForTesting("Unversioned directory");
    boolean var57 = var48.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var58 = var48.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var61 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var62 = null;
    java.util.logging.Logger var63 = null;
    com.google.javascript.jscomp.LoggerErrorManager var64 = new com.google.javascript.jscomp.LoggerErrorManager(var62, var63);
    com.google.javascript.jscomp.Compiler var65 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var64);
    com.google.javascript.jscomp.Scope var66 = var65.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var67 = null;
    com.google.javascript.jscomp.NodeTraversal var68 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var65, var67);
    com.google.javascript.jscomp.Scope var69 = var68.getScope();
    com.google.javascript.rhino.Node var70 = null;
    com.google.javascript.jscomp.DiagnosticType var73 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var75 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var76 = com.google.javascript.jscomp.JSError.make(var73, var75);
    com.google.javascript.jscomp.DiagnosticType var77 = var76.getType();
    java.lang.String[] var79 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var80 = var68.makeError(var70, var77, var79);
    com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var48, var61, var79);
    com.google.javascript.jscomp.JSError var82 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var29, var38, var79);
    com.google.javascript.jscomp.JSError var83 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod: WARNING - \n", 2, 10, var21, var24, var79);
    com.google.javascript.jscomp.JSError var84 = com.google.javascript.jscomp.JSError.make("module$WARNING _ BANG 0\n    STRING hi 0 [length: 2]\n\n", 3, 2, var3, var7, var79);
    java.lang.String var85 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!: Unversioned directory"+ "'", var85.equals("hi!: Unversioned directory"));

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test146"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setInlineLocalFunctions(false);
    com.google.javascript.jscomp.SourceMap.DetailLevel var5 = null;
    var0.setSourceMapDetailLevel(var5);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test147"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
    boolean var12 = var7.isDec();
    java.lang.String var16 = var7.toString(false, false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = var7.detachFromParent();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "BANG"+ "'", var16.equals("BANG"));

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test148"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    com.google.javascript.rhino.jstype.JSType var29 = var24.getIndexType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var31 = var24.getTopMostDefiningType("hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test149"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("goog.abstractMethod", var1, "null(null)");
    com.google.javascript.jscomp.DiagnosticGroup var4 = com.google.javascript.jscomp.DiagnosticGroup.forType(var3);
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var9 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var10 = com.google.javascript.jscomp.JSError.make(var7, var9);
    int var11 = var10.getCharno();
    boolean var12 = var4.matches(var10);
    com.google.javascript.jscomp.DiagnosticGroup[] var13 = new com.google.javascript.jscomp.DiagnosticGroup[] { var4};
    com.google.javascript.jscomp.DiagnosticGroup var14 = new com.google.javascript.jscomp.DiagnosticGroup(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test150"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    com.google.javascript.rhino.jstype.ObjectType var81 = com.google.javascript.rhino.jstype.ObjectType.cast(var39);
    boolean var82 = var39.isUnknownType();
    boolean var83 = var39.isEnumType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test151() {}
//   public void test151() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test151"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)");
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.doNode(var0, var2);
// 
//   }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test152"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.cloneNode();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    boolean var10 = var7.isAssignAdd();
    int var11 = var5.getIndexOfChild(var7);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    com.google.javascript.rhino.Node var16 = var5.useSourceInfoFrom(var13);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(0, var21, var26);
    boolean var28 = var26.isQualifiedName();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(153, var5, var29, 153, 1);
    com.google.javascript.rhino.Node.AncestorIterable var33 = var29.getAncestors();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test153"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    var3.reportCodeChange();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var20 = var19.isGetterDef();
    boolean var21 = var19.isNE();
    boolean var22 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var19);
    var19.removeProp(0);
    com.google.javascript.rhino.Node var25 = var9.srcrefTree(var19);
    boolean var26 = var25.isVar();
    com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var3, var25, var27);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test154"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     java.util.List var3 = var1.getRequires();
//     com.google.javascript.jscomp.SourceAst var4 = null;
//     com.google.javascript.rhino.InputId var5 = null;
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
//     com.google.javascript.jscomp.JSModule var8 = var7.getModule();
//     var1.addFirst(var7);
//     com.google.javascript.jscomp.SourceAst var10 = var7.getAst();
//     var7.removeRequire("Unversioned directory: ");
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test155"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var8 = var6.getBooleanProp((-1));
    var6.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var12 = new com.google.javascript.rhino.JSTypeExpression(var6, "goog.abstractMethod");
    boolean var13 = var1.isPrototypeAlias(var6);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var17 = var15.getBooleanProp((-1));
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.Node var24 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var25 = var15.useSourceInfoFromForTree(var21);
    boolean var26 = var21.isDec();
    java.lang.String var30 = var21.toString(false, false, true);
    var6.addChildrenToFront(var21);
    boolean var32 = var6.isTypeOf();
    boolean var33 = var6.hasChildren();
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(1, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "BANG"+ "'", var30.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test156"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    boolean var17 = var13.isOptionalArg();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(0, var13, var18);
    var18.setSourceEncodedPositionForTree(0);
    com.google.javascript.rhino.Node var22 = var18.cloneNode();
    var1.markTypeNode(var22, 10, 1, 100, 2, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.throwNode(var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test157"); }


    com.google.javascript.rhino.jstype.JSType var1 = null;
    com.google.javascript.rhino.jstype.SimpleSlot var3 = new com.google.javascript.rhino.jstype.SimpleSlot("", var1, false);
    com.google.javascript.rhino.jstype.JSType var4 = var3.getType();
    boolean var5 = var3.isTypeInferred();
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    com.google.javascript.rhino.JSDocInfo var7 = var3.getJSDocInfo();
    boolean var8 = var3.isTypeInferred();
    com.google.javascript.rhino.JSDocInfo var9 = var3.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test158"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.lang.String var3 = var0.getAbstractMethodName();
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.rhino.jstype.FunctionType var5 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var6 = null;
    var0.applySubclassRelationship(var4, var5, var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.JSDocInfo var14 = var11.getJSDocInfo();
    boolean var15 = var11.isWhile();
    boolean var16 = var11.isOnlyModifiesThisCall();
    com.google.javascript.jscomp.CodingConvention.Bind var18 = var0.describeFunctionBind(var11, false);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    boolean var28 = var24.isOptionalArg();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(0, var24, var29);
    boolean var31 = var29.isQualifiedName();
    com.google.javascript.rhino.Node var32 = var29.cloneNode();
    java.lang.String var33 = var32.toString();
    com.google.javascript.jscomp.CodingConvention.Bind var35 = var0.describeFunctionBind(var32, true);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "goog.exportProperty");
    boolean var38 = var37.isNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.abstractMethod"+ "'", var3.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "RETURN"+ "'", var33.equals("RETURN"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test159"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    boolean var7 = var0.isSuperClassReference("goog.abstractMethod");
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var11.setJSType(var12);
    boolean var14 = var11.isScript();
    com.google.javascript.rhino.Node var15 = var11.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var16 = var0.getDelegateRelationship(var11);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.jscomp.GoogleCodingConvention var18 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var19 = var18.getExportSymbolFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "goog.exportSymbol"+ "'", var19.equals("goog.exportSymbol"));

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test160"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    boolean var58 = var56.isFunctionPrototypeType();
    com.google.javascript.rhino.Node var59 = var56.getSource();
    java.util.Set var60 = var56.getElements();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test161"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("goog.global", '#');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test162"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isValidEnumKey("module$BANG 0 [source_file: Unversioned directory]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test163"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setFoldConstants(false);
    com.google.javascript.jscomp.MessageFormatter var7 = null;
    java.util.logging.Logger var8 = null;
    com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
    int var10 = var9.getWarningCount();
    int var11 = var9.getErrorCount();
    com.google.javascript.jscomp.JSError[] var12 = var9.getWarnings();
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var9);
    var0.setRuntimeTypeCheck(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test164"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    int var15 = var9.getLength();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.Node var22 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var23 = var9.useSourceInfoFromForTree(var19);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var24 = var19.getJsDocBuilderForNode();
    boolean var25 = var19.isIf();
    boolean var26 = var19.isIf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test165"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.removeFirstChild();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    boolean var10 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var8);
    int var11 = var8.getLength();
    com.google.javascript.rhino.Node var12 = null;
    boolean var13 = var8.hasChild(var12);
    com.google.javascript.rhino.Node var14 = var6.useSourceInfoIfMissingFromForTree(var8);
    var8.setSourceFileForTesting("Unversioned directory");
    boolean var17 = var8.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var18 = var8.getStaticSourceFile();
    com.google.javascript.rhino.Node var19 = var1.srcref(var8);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    com.google.javascript.rhino.Node var29 = var24.getChildAtIndex(1);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.JSDocInfo var36 = var33.getJSDocInfo();
    com.google.javascript.rhino.Node var37 = var24.copyInformationFrom(var33);
    java.lang.Object var39 = null;
    var24.putProp(0, var39);
    com.google.javascript.rhino.JSTypeExpression var42 = new com.google.javascript.rhino.JSTypeExpression(var24, "()");
    com.google.javascript.rhino.jstype.StaticScope var43 = null;
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    var45.unregisterPropertyOnType("Unversioned directory", var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    boolean var51 = var45.canPropertyBeDefined(var49, "BANG");
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.Node var54 = var45.createParameters(var53);
    com.google.javascript.rhino.jstype.JSType var55 = var42.evaluate(var43, var45);
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var58 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var57);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    boolean var65 = var62.isVarArgs();
    com.google.javascript.rhino.Node var67 = var62.getChildAtIndex(1);
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.JSDocInfo var74 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var75 = var62.copyInformationFrom(var71);
    java.lang.Object var77 = null;
    var62.putProp(0, var77);
    com.google.javascript.rhino.JSTypeExpression var80 = new com.google.javascript.rhino.JSTypeExpression(var62, "()");
    com.google.javascript.rhino.jstype.StaticScope var81 = null;
    com.google.javascript.rhino.ErrorReporter var82 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var82);
    com.google.javascript.rhino.jstype.JSType var85 = null;
    var83.unregisterPropertyOnType("Unversioned directory", var85);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    boolean var89 = var83.canPropertyBeDefined(var87, "BANG");
    com.google.javascript.rhino.jstype.JSType var90 = null;
    com.google.javascript.rhino.jstype.JSType[] var91 = new com.google.javascript.rhino.jstype.JSType[] { var90};
    com.google.javascript.rhino.Node var92 = var83.createParameters(var91);
    com.google.javascript.rhino.jstype.JSType var93 = var80.evaluate(var81, var83);
    boolean var94 = var58.addVarArgs(var93);
    com.google.javascript.rhino.jstype.JSType var95 = var55.getLeastSupertype(var93);
    boolean var96 = var95.isObject();
    boolean var97 = var95.isNoType();
    boolean var98 = var95.isRegexpType();
    var1.putProp(0, (java.lang.Object)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test166() {}
//   public void test166() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test166"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.SourceAst var5 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var6 = var3.getAst();
//     java.lang.String var7 = var3.getCode();
// 
//   }

  public void test167() {}
//   public void test167() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test167"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     boolean var22 = var20.isExtern();
//     com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
//     java.lang.String var24 = var20.toString();
//     boolean var25 = var20.isExtern();
//     com.google.javascript.jscomp.JSModule var26 = var20.getModule();
//     com.google.javascript.jscomp.CompilerInput var27 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var20);
// 
//   }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test168"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    java.lang.String var7 = var6.toString();
    com.google.javascript.jscomp.SourceAst var8 = var6.getSourceAst();
    java.lang.String var9 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.abstractMethod"+ "'", var7.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "goog.abstractMethod"+ "'", var9.equals("goog.abstractMethod"));

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test169"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    var24.resetForTypeCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test170"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    boolean var81 = var39.isParameterizedType();
    com.google.javascript.rhino.jstype.EnumElementType var82 = var39.toMaybeEnumElementType();
    boolean var83 = var39.isGlobalThisType();
    boolean var84 = var39.isRegexpType();
    java.lang.String var85 = var39.toAnnotationString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi"+ "'", var85.equals("hi"));

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test171"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.InputId var47 = var38.getInputId();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var51 = var48.copyInformationFrom(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.catchNode(var38, var51);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test172"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineLocalVariables(false);
    var0.setDevirtualizePrototypeMethods(false);
    com.google.javascript.jscomp.CodingConvention var5 = var0.getCodingConvention();
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var7 = null;
    var6.setStripTypes(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    java.util.List var11 = var9.getEdges();
    var6.setManageClosureDependencies(var11);
    boolean var13 = var6.isExternExportsEnabled();
    var6.setCollapsePropertiesOnExternTypes(false);
    var6.setProtectHiddenSideEffects(true);
    var6.setLineLengthThreshold((-19));
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var21 = null;
    var20.setStripTypes(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var24 = var23.getDirectedGraphNodes();
    java.util.List var25 = var23.getEdges();
    var20.setManageClosureDependencies(var25);
    var20.setDevirtualizePrototypeMethods(true);
    var20.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var31 = var20.getTweakProcessing();
    var20.setCollapseVariableDeclarations(false);
    var20.setCommonJSModulePathPrefix("function (): {540092593}");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var36 = var20.getLanguageIn();
    var6.setLanguageIn(var36);
    var0.setLanguageOut(var36);
    var0.setCollapseProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test173"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    var1.removeAll();
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    var1.addDependency(var12);
    com.google.javascript.jscomp.CompilerInput var16 = var1.getByName("function (): {2142004661}");
    int var17 = var1.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test174"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isArrayLit();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var21 = var20.isGetterDef();
    var20.putIntProp((-1), 10);
    var14.addChildrenToFront(var20);
    boolean var26 = var14.isDec();
    var10.addChildToBack(var14);
    boolean var28 = var14.isWith();
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    int var33 = var31.getSourceOffset();
    com.google.javascript.rhino.Node var34 = var31.removeFirstChild();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    boolean var40 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var38);
    int var41 = var38.getLength();
    com.google.javascript.rhino.Node var42 = null;
    boolean var43 = var38.hasChild(var42);
    com.google.javascript.rhino.Node var44 = var36.useSourceInfoIfMissingFromForTree(var38);
    var38.setSourceFileForTesting("Unversioned directory");
    boolean var47 = var38.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var48 = var38.getStaticSourceFile();
    com.google.javascript.rhino.Node var49 = var31.srcref(var38);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(10, var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.tryCatch(var14, var49);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test175"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var36 = null;
    boolean var37 = var32.recordParameter("Unversioned directory", var36);
    com.google.javascript.rhino.JSTypeExpression var38 = null;
    boolean var40 = var32.recordThrowDescription(var38, "");
    com.google.javascript.jscomp.SourceFile var45 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var32.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var45, 0, 0);
    var1.markName("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", (com.google.javascript.rhino.jstype.StaticSourceFile)var45, 0, 3);
    var45.setOriginalPath("(hi)");
    com.google.javascript.jscomp.JsAst var54 = new com.google.javascript.jscomp.JsAst(var45);
    com.google.javascript.jscomp.SourceFile var56 = com.google.javascript.jscomp.SourceFile.fromFile("InputId: ");
    com.google.javascript.jscomp.Region var58 = var56.getRegion(10);
    var56.setOriginalPath("(module$2014$12$24 11:10)");
    var56.clearCachedSource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var54.setSourceFile(var56);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test176"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var11 = var0.getTweakProcessing();
    var0.setConvertToDottedProperties(false);
    var0.setRenamePrefix("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test177"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    com.google.javascript.jscomp.SourceAst var7 = var6.getAst();
    java.lang.String var8 = var6.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "()"+ "'", var8.equals("()"));

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test178"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    boolean var10 = var5.isScript();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isArrayLit();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var22 = var21.isGetterDef();
    var21.putIntProp((-1), 10);
    var15.addChildrenToFront(var21);
    int var27 = var21.getLength();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.Node var34 = var31.removeFirstChild();
    com.google.javascript.rhino.Node var35 = var21.useSourceInfoFromForTree(var31);
    boolean var36 = var21.isDebugger();
    var21.setType(0);
    var5.putProp(2, (java.lang.Object)var21);
    boolean var40 = var5.isNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test179"); }


    java.lang.String var1 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("function (): {140836661}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$function (): {140836661}"+ "'", var1.equals("module$function (): {140836661}"));

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test180"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.thisNode();
    int var1 = var0.getLineno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.block(var0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test181"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var18 = var16.recordExterns();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isArrayLit();
    com.google.javascript.rhino.Node var27 = var22.getNext();
    var16.markTypeNode(var22, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    com.google.javascript.rhino.JSTypeExpression var56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var55);
    boolean var57 = var16.recordBaseType(var55);
    boolean var58 = var1.recordTypedef(var55);
    boolean var59 = var1.isDescriptionRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test182"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var35 = null;
    var34.setResolveMode(var35);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var37 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var34);
    boolean var39 = var0.isSuperClassReference("BANG");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test183"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var20.isNot();
    int var27 = var20.getChildCount();
    com.google.javascript.rhino.Node.AncestorIterable var28 = var20.getAncestors();
    boolean var29 = var20.isAssign();
    java.lang.Iterable var30 = var20.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test184"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    com.google.javascript.rhino.Node var12 = var7.getChildAtIndex(1);
    java.util.Collection var13 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.tryFinally(var3, var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test185"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
    com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var13 = null;
    var12.setStripTypes(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var16 = var15.getDirectedGraphNodes();
    java.util.List var17 = var15.getEdges();
    var12.setManageClosureDependencies(var17);
    boolean var19 = var12.isExternExportsEnabled();
    var12.setCollapsePropertiesOnExternTypes(false);
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
    var12.setAliasKeywords(true);
    var12.setNameReferenceGraphPath("module$2014$12$24 11:10");
    var12.setClosurePass(true);
    var12.setPreferLineBreakAtEndOfFile(true);
    var12.setOptimizeParameters(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test186"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    var0.setMarkNoSideEffectCalls(false);
    var0.setRenamePrefix("");
    var0.setFlowSensitiveInlineVariables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test187"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    boolean var5 = var1.recordIdGenerator();
    com.google.javascript.rhino.JSDocInfoBuilder var7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var8 = var7.recordExpose();
    boolean var9 = var7.recordExterns();
    boolean var10 = var7.recordNoShadow();
    boolean var12 = var7.recordReturnDescription("()");
    boolean var14 = var7.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var18 = var17.recordExpose();
    boolean var19 = var17.recordExterns();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isArrayLit();
    com.google.javascript.rhino.Node var28 = var23.getNext();
    var17.markTypeNode(var23, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.JSTypeExpression var57 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var56);
    boolean var58 = var17.recordBaseType(var56);
    com.google.javascript.jscomp.MessageFormatter var59 = null;
    java.util.logging.Logger var60 = null;
    com.google.javascript.jscomp.LoggerErrorManager var61 = new com.google.javascript.jscomp.LoggerErrorManager(var59, var60);
    com.google.javascript.jscomp.Compiler var62 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var61);
    boolean var63 = var56.equals((java.lang.Object)var62);
    boolean var64 = var7.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var56);
    boolean var65 = var1.recordThrowType(var56);
    boolean var67 = var1.recordMeaning("function (): {565834337}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test188"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.cloneNode();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    boolean var10 = var7.isAssignAdd();
    int var11 = var5.getIndexOfChild(var7);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    com.google.javascript.rhino.Node var16 = var5.useSourceInfoFrom(var13);
    int var17 = var5.getChildCount();
    com.google.javascript.rhino.Node[] var18 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node((-1), var18);
    com.google.javascript.jscomp.ClosureCodingConvention var20 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var22 = var20.isConstantKey("2014/12/24 11:10");
    java.util.Collection var23 = var20.getIndirectlyDeclaredProperties();
    boolean var25 = var20.isConstantKey("{proxy:{165630172}}");
    com.google.javascript.jscomp.ClosureCodingConvention var26 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var28 = var26.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var29 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var26);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var32 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var34 = var32.isConstantKey("2014/12/24 11:10");
    java.util.Collection var35 = var32.getAssertionFunctions();
    java.lang.String var36 = var32.getAbstractMethodName();
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    boolean var45 = var41.isOptionalArg();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(0, var41, var46);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var48 = var32.getClassesDefinedByCall(var41);
    com.google.javascript.jscomp.ClosureCodingConvention var49 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var51 = var49.isConstantKey("2014/12/24 11:10");
    java.util.Collection var52 = var49.getAssertionFunctions();
    boolean var54 = var49.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    boolean var62 = var58.isOptionalArg();
    java.lang.String var66 = var58.toString(false, false, true);
    java.util.List var67 = var49.identifyTypeDeclarationCall(var58);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var68 = var32.getClassesDefinedByCall(var58);
    java.lang.String var69 = var29.extractClassNameIfRequire(var31, var58);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var72 = var71.isGetterDef();
    boolean var73 = var71.isGetProp();
    com.google.javascript.rhino.Node var74 = var71.getLastSibling();
    com.google.javascript.jscomp.CodingConvention.Bind var76 = var29.describeFunctionBind(var74, true);
    com.google.javascript.jscomp.CodingConvention.Bind var78 = var20.describeFunctionBind(var74, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.assign(var19, var74);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "goog.abstractMethod"+ "'", var36.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "BANG"+ "'", var66.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test189"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setRemoveUnusedVars(false);
    var0.setTweakToNumberLiteral("hi!", 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test190"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setDefineToBooleanLiteral("BANG", false);
    var0.setInlineGetters(false);
    boolean var17 = var0.isExternExportsEnabled();
    java.util.Map var18 = var0.getTweakReplacements();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test191"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("function (): {944163309}", var1);
// 
//   }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test192"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    var21.removeProp(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test193"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    boolean var24 = var14.isNoSideEffects();
    java.util.List var25 = var14.getThrownTypes();
    java.lang.String var26 = var14.getDeprecationReason();
    int var27 = var14.getParameterCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "2014/12/24 11:10"+ "'", var26.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test194() {}
//   public void test194() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test194"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.MessageFormatter var9 = null;
//     java.util.logging.Logger var10 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
//     com.google.javascript.jscomp.Scope var13 = var12.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
//     com.google.javascript.jscomp.NodeTraversal var15 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var12, var14);
//     var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var12);
//     java.lang.String var17 = var6.getName();
// 
//   }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test195"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var20 = var14.hasTypedefType();
    boolean var21 = var14.isExpose();
    boolean var22 = var14.hasType();
    java.util.Set var23 = var14.getSuppressions();
    boolean var24 = var14.isDeprecated();
    boolean var25 = var14.hasModifies();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test196"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setSyntheticBlockEndMarker("goog.abstractMethod");
    var0.setShadowVariables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test197"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    var3.parse();
    com.google.javascript.jscomp.JSError[] var76 = var3.getMessages();
    var3.normalize();
    boolean var78 = var3.acceptEcmaScript5();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test198"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isConstructor();
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    java.util.List var88 = var85.getImplementedInterfaces();
    var31.setImplementedInterfaces(var88);
    com.google.javascript.jscomp.ComposeWarningsGuard var90 = new com.google.javascript.jscomp.ComposeWarningsGuard(var88);
    com.google.javascript.jscomp.deps.SortedDependencies var91 = new com.google.javascript.jscomp.deps.SortedDependencies(var88);
    java.util.List var92 = var91.getSortedList();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.paramList(var92);
    boolean var94 = var93.isNoSideEffectsCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test199"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = var14.getVisibility();
    int var21 = var20.ordinal();
    java.lang.Class var22 = var20.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "{proxy:{1743833346}}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test200"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    boolean var2 = var1.hasVarArgs();
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    com.google.javascript.rhino.JSDocInfo var9 = var6.getJSDocInfo();
    boolean var10 = var6.isWhile();
    boolean var11 = var6.isOnlyModifiesThisCall();
    boolean var12 = var6.isParamList();
    com.google.javascript.rhino.Node var13 = var1.newOptionalParameterFromNode(var6);
    com.google.javascript.rhino.Node var14 = var13.getParent();
    java.util.Collection var15 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test201"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var46.unregisterPropertyOnType("Unversioned directory", var48);
    var46.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var52 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var46);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var54 = var53.cloneTree();
    boolean var55 = var53.isVar();
    boolean var56 = var53.isAssignAdd();
    com.google.javascript.jscomp.type.FlowScope var57 = null;
    com.google.javascript.jscomp.type.FlowScope var59 = var52.getPreciserScopeKnowingConditionOutcome(var53, var57, false);
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var60 = var52.getFirst();
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var61 = var52.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test202"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = var14.getVisibility();
    int var21 = var20.ordinal();
    java.lang.Class var22 = var20.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var24 = java.lang.Enum.<java.lang.Enum>valueOf(var22, "{413092455}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test203"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    com.google.javascript.jscomp.MessageFormatter var13 = null;
    java.util.logging.Logger var14 = null;
    com.google.javascript.jscomp.LoggerErrorManager var15 = new com.google.javascript.jscomp.LoggerErrorManager(var13, var14);
    com.google.javascript.jscomp.Compiler var16 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var15);
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var15);
    int var18 = var15.getWarningCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test204"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    var4.unregisterPropertyOnType("Unversioned directory", var6);
    var4.identifyNonNullableName("2014/12/24 11:10");
    var4.clearTemplateTypeNames();
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var12 = null;
    var11.setStripTypes(var12);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var15 = var14.getDirectedGraphNodes();
    java.util.List var16 = var14.getEdges();
    var11.setManageClosureDependencies(var16);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.script(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.paramList(var16);
    com.google.javascript.rhino.Node var20 = var4.createParameters(var16);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var4.canPropertyBeDefined(var21, "function (): ?");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var0.getDirectedGraphNode((java.lang.Object)var4);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var37 = var35.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var38 = var35.toMaybeEnumType();
    boolean var39 = var35.isNumber();
    java.lang.Iterable var40 = var35.getImplementedInterfaces();
    boolean var42 = var4.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType)var35, "module$ERROR _ (InputId: )\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test205"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.FunctionType var64 = var58.getConstructor();
    boolean var66 = var58.isPropertyTypeDeclared("ERROR");
    com.google.javascript.rhino.jstype.JSType var67 = var58.autoboxesTo();
    boolean var68 = var58.isNominalType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test206"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    java.util.Set var69 = var31.getPropertyNames();
    com.google.javascript.rhino.jstype.ParameterizedType var70 = com.google.javascript.rhino.jstype.JSType.toMaybeParameterizedType((com.google.javascript.rhino.jstype.JSType)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test207"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.String var28 = var10.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var29 = var10.getJSDocInfo();
    boolean var30 = var10.isRecordType();
    boolean var31 = var10.isUnknownType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test208"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    var0.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var26 = var25.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    com.google.javascript.jscomp.JSError var28 = null;
    com.google.javascript.jscomp.CheckLevel var29 = var27.level(var28);
    var14.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var35 = null;
    var34.setStripTypes(var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.util.List var39 = var37.getEdges();
    var34.setManageClosureDependencies(var39);
    var34.setDevirtualizePrototypeMethods(true);
    var34.setCollapsePropertiesOnExternTypes(false);
    var34.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    com.google.javascript.rhino.JSDocInfoBuilder var60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var61 = var60.recordExpose();
    boolean var63 = var60.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.InputId var70 = com.google.javascript.jscomp.NodeUtil.getInputId(var67);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var67.setJSType(var71);
    com.google.javascript.rhino.JSDocInfo var73 = var60.build(var67);
    java.lang.String var74 = var73.getFileOverview();
    java.util.Set var75 = var73.getModifies();
    var47.setReplaceStringsReservedStrings(var75);
    var47.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var81 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var83 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var84 = com.google.javascript.jscomp.JSError.make(var81, var83);
    int var85 = var84.getCharno();
    com.google.javascript.jscomp.CheckLevel var86 = var84.getDefaultLevel();
    var47.setCheckGlobalThisLevel(var86);
    var34.setCheckMissingGetCssNameLevel(var86);
    var0.setCheckProvides(var86);
    var0.setProcessCommonJSModules(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test209"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    java.lang.Iterable var17 = var10.getOwnImplementedInterfaces();
    java.lang.String var18 = var10.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test210"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.JSDocInfo var7 = var4.getJSDocInfo();
    boolean var8 = var4.isSwitch();
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var11 = var9.isConstantKey("2014/12/24 11:10");
    java.util.Collection var12 = var9.getAssertionFunctions();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var16.setJSType(var17);
    boolean var19 = var16.isScript();
    com.google.javascript.rhino.Node var20 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var24 = var23.isGetterDef();
    boolean var25 = var23.isAdd();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
    com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
    java.lang.String var43 = var42.toStringTree();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var51 = var47.getBooleanProp(100);
    int var52 = var47.getSideEffectFlags();
    boolean var53 = var47.isDefaultCase();
    com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(1, var23, var42, var47);
    java.lang.String var55 = var9.extractClassNameIfProvide(var16, var47);
    java.lang.String var56 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var16);
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    boolean var63 = var58.isString();
    boolean var64 = var58.isNE();
    java.lang.String var65 = com.google.javascript.jscomp.NodeUtil.getSourceName(var58);
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    int var69 = var67.getSourceOffset();
    com.google.javascript.rhino.Node var73 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    int var78 = var73.getIndexOfChild(var77);
    int var79 = var67.getIndexOfChild(var73);
    com.google.javascript.rhino.Node var80 = new com.google.javascript.rhino.Node(100, var4, var16, var58, var73);
    boolean var81 = var73.isAdd();
    boolean var82 = var73.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var43.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test211"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    boolean var49 = var1.recordDescription("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.JSDocInfoBuilder var51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var54 = var51.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.JSTypeExpression var77 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var76);
    boolean var78 = var51.recordExtendedInterface(var76);
    com.google.javascript.jscomp.SourceFile var81 = new com.google.javascript.jscomp.SourceFile("()");
    var51.markName("module$2014$12$24 11:10", (com.google.javascript.rhino.jstype.StaticSourceFile)var81, 1, 1);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var88 = var86.getBooleanProp((-1));
    var86.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var92 = new com.google.javascript.rhino.JSTypeExpression(var86, "goog.abstractMethod");
    boolean var93 = var51.recordEnumParameterType(var92);
    boolean var94 = var1.recordThrowType(var92);
    boolean var95 = var1.recordHiddenness();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test212"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    boolean var9 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var7);
    int var10 = var7.getLength();
    boolean var11 = var7.isInstanceOf();
    boolean var12 = var7.isName();
    com.google.javascript.jscomp.ClosureCodingConvention var13 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var14 = null;
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isOr();
    java.lang.String var22 = var13.extractClassNameIfRequire(var14, var18);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getDependencies();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.block(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var35.createFunctionTypeWithVarArgs(var39, var42);
    boolean var45 = var44.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.lang.Iterable var48 = var46.getDirectedGraphNodes();
    java.util.List var49 = var46.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var54 = var53.getDirectedGraphNodes();
    java.util.List var55 = var53.getEdges();
    var50.setManageClosureDependencies(var55);
    boolean var57 = var50.isExternExportsEnabled();
    var50.setCheckCaja(false);
    java.util.Set var60 = null;
    var50.setReplaceStringsReservedStrings(var60);
    var50.setAliasAllStrings(true);
    var50.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var70 = var69.getDirectedGraphNodes();
    java.util.List var71 = var69.getEdges();
    var66.setManageClosureDependencies(var71);
    boolean var73 = var66.isExternExportsEnabled();
    var66.setCheckCaja(false);
    var66.setGroupVariableDeclarations(true);
    java.util.Map var78 = var66.getDefineReplacements();
    var50.setPropertyInvalidationErrors(var78);
    var13.defineDelegateProxyPrototypeProperties(var24, (com.google.javascript.rhino.jstype.StaticScope)var44, var49, var78);
    boolean var81 = var44.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var44, "BANG");
    com.google.javascript.rhino.jstype.FunctionType var84 = var44.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.ObjectType var85 = var1.createObjectType("()", var7, (com.google.javascript.rhino.jstype.ObjectType)var44);
    com.google.javascript.rhino.ErrorReporter var86 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var87 = var1.getErrorReporter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test213"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     com.google.javascript.rhino.JSDocInfo var8 = var5.getJSDocInfo();
//     boolean var9 = var5.isSwitch();
//     boolean var10 = var5.isSyntheticBlock();
//     boolean var11 = var5.isNumber();
//     boolean var12 = var5.isRegExp();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
//     var16.removeProp(0);
//     boolean var19 = var16.isReturn();
//     var1.process(var5, var16);
// 
//   }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test214"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("CONTINUE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test215() {}
//   public void test215() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test215"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
//     com.google.javascript.jscomp.Result var8 = var3.getResult();
//     com.google.javascript.jscomp.JSError[] var9 = var3.getErrors();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var10 = var3.getReverseAbstractInterpreter();
// 
//   }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test216"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isPrivate("");
    boolean var46 = var33.isValidEnumKey("");
    java.lang.String var47 = var33.getGlobalObject();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var51 = var48.copyInformationFrom(var50);
    com.google.javascript.rhino.Node var53 = var50.getAncestor(1);
    com.google.javascript.jscomp.CodingConvention.Bind var55 = var33.describeFunctionBind(var50, true);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    var59.removeProp(0);
    boolean var62 = var59.isArrayLit();
    var59.removeProp(1);
    boolean var65 = var50.hasChild(var59);
    boolean var66 = var59.isAnd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "goog.global"+ "'", var47.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test217"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    var2.setDevirtualizePrototypeMethods(true);
    var2.setCollapsePropertiesOnExternTypes(false);
    var2.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    boolean var22 = var15.isExternExportsEnabled();
    var15.setCheckCaja(false);
    java.util.Set var25 = null;
    var15.setReplaceStringsReservedStrings(var25);
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var31 = var28.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    com.google.javascript.rhino.JSDocInfo var41 = var28.build(var35);
    java.lang.String var42 = var41.getFileOverview();
    java.util.Set var43 = var41.getModifies();
    var15.setReplaceStringsReservedStrings(var43);
    var15.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var51 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make(var49, var51);
    int var53 = var52.getCharno();
    com.google.javascript.jscomp.CheckLevel var54 = var52.getDefaultLevel();
    var15.setCheckGlobalThisLevel(var54);
    var2.setCheckMissingGetCssNameLevel(var54);
    com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("STRING hi 0 [length: 2]\n", "RETURN");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    boolean var66 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var64);
    int var67 = var64.getLength();
    com.google.javascript.rhino.Node var68 = null;
    boolean var69 = var64.hasChild(var68);
    com.google.javascript.rhino.Node var70 = var62.useSourceInfoIfMissingFromForTree(var64);
    var64.setSourceFileForTesting("Unversioned directory");
    boolean var73 = var64.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var74 = var64.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var77 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var78 = null;
    java.util.logging.Logger var79 = null;
    com.google.javascript.jscomp.LoggerErrorManager var80 = new com.google.javascript.jscomp.LoggerErrorManager(var78, var79);
    com.google.javascript.jscomp.Compiler var81 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var80);
    com.google.javascript.jscomp.Scope var82 = var81.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var83 = null;
    com.google.javascript.jscomp.NodeTraversal var84 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var81, var83);
    com.google.javascript.jscomp.Scope var85 = var84.getScope();
    com.google.javascript.rhino.Node var86 = null;
    com.google.javascript.jscomp.DiagnosticType var89 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var91 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var92 = com.google.javascript.jscomp.JSError.make(var89, var91);
    com.google.javascript.jscomp.DiagnosticType var93 = var92.getType();
    java.lang.String[] var95 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var96 = var84.makeError(var86, var93, var95);
    com.google.javascript.jscomp.JSError var97 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var64, var77, var95);
    com.google.javascript.jscomp.JSError var98 = com.google.javascript.jscomp.JSError.make("", var1, var54, var59, var95);
    java.lang.String var99 = var59.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "STRING hi 0 [length: 2]\n: RETURN"+ "'", var99.equals("STRING hi 0 [length: 2]\n: RETURN"));

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test218"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    var31.clearResolved();
    boolean var71 = var31.isReturnTypeInferred();
    boolean var72 = var31.canBeCalled();
    boolean var73 = var31.isNullable();
    com.google.javascript.rhino.jstype.ObjectType var74 = var31.getPrototype();
    com.google.javascript.rhino.jstype.ObjectType var75 = var31.getPrototype();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var76 = var31.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test219"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isCase();
    java.lang.Iterable var9 = var1.siblings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test220"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.ErrorReporter var75 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var75);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    var76.unregisterPropertyOnType("Unversioned directory", var78);
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.jscomp.JSModule var82 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var83 = var82.getDependencies();
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.block(var83);
    com.google.javascript.rhino.jstype.FunctionType var85 = var76.createFunctionTypeWithVarArgs(var80, var83);
    boolean var86 = var85.hasAnyTemplateInternal();
    java.lang.Iterable var87 = var85.getAllExtendedInterfaces();
    boolean var88 = var85.isEmptyType();
    java.util.Set var89 = var85.getOwnPropertyNames();
    var57.setAliasableStrings(var89);
    java.util.Map var91 = null;
    var57.setTweakReplacements(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test221() {}
//   public void test221() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test221"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     var5.removeAll();
//     var1.addDependency(var5);
//     java.util.List var8 = var1.getInputs();
//     com.google.javascript.jscomp.SourceAst var9 = null;
//     com.google.javascript.rhino.InputId var10 = null;
//     com.google.javascript.jscomp.CompilerInput var12 = new com.google.javascript.jscomp.CompilerInput(var9, var10, true);
//     com.google.javascript.jscomp.SourceAst var13 = var12.getAst();
//     com.google.javascript.jscomp.JSModule var14 = null;
//     var12.setModule(var14);
//     var1.add(var12);
//     java.lang.String var17 = var12.toString();
// 
//   }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test222"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setSyntheticBlockEndMarker("RETURN");
    var0.setShadowVariables(true);
    var0.setPropertyAffinity(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test223"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    java.util.List var19 = var14.getImplementedInterfaces();
    boolean var20 = var14.hasEnumParameterType();
    int var21 = var14.getImplementedInterfaceCount();
    java.lang.String var22 = var14.getLendsName();
    boolean var23 = var14.isDeprecated();
    var14.setDeprecated(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test224"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    boolean var9 = var6.isAssignAdd();
    int var10 = var4.getIndexOfChild(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.InputId var14 = var12.getInputId();
    com.google.javascript.rhino.Node var15 = var4.useSourceInfoFrom(var12);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    var16.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var19 = var16.cloneNode();
    boolean var20 = var16.isGetProp();
    com.google.javascript.rhino.Node var21 = var15.copyInformationFromForTree(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.pos(var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test225"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.jscomp.MessageFormatter var5 = null;
    java.util.logging.Logger var6 = null;
    com.google.javascript.jscomp.LoggerErrorManager var7 = new com.google.javascript.jscomp.LoggerErrorManager(var5, var6);
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var7);
    com.google.javascript.jscomp.Scope var9 = var8.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
    com.google.javascript.jscomp.NodeTraversal var11 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var8, var10);
    com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var13 = null;
    var12.setStripTypes(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var16 = var15.getDirectedGraphNodes();
    java.util.List var17 = var15.getEdges();
    var12.setManageClosureDependencies(var17);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.script(var17);
    var11.traverseRoots(var17);
    com.google.javascript.rhino.Node var21 = var11.getEnclosingFunction();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var25 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    boolean var32 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var30);
    int var33 = var30.getLength();
    com.google.javascript.rhino.Node var34 = null;
    boolean var35 = var30.hasChild(var34);
    com.google.javascript.rhino.Node var36 = var28.useSourceInfoIfMissingFromForTree(var30);
    var30.setSourceFileForTesting("Unversioned directory");
    boolean var39 = var30.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var40 = var30.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var43 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var44 = null;
    java.util.logging.Logger var45 = null;
    com.google.javascript.jscomp.LoggerErrorManager var46 = new com.google.javascript.jscomp.LoggerErrorManager(var44, var45);
    com.google.javascript.jscomp.Compiler var47 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var46);
    com.google.javascript.jscomp.Scope var48 = var47.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var49 = null;
    com.google.javascript.jscomp.NodeTraversal var50 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var47, var49);
    com.google.javascript.jscomp.Scope var51 = var50.getScope();
    com.google.javascript.rhino.Node var52 = null;
    com.google.javascript.jscomp.DiagnosticType var55 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var57 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make(var55, var57);
    com.google.javascript.jscomp.DiagnosticType var59 = var58.getType();
    java.lang.String[] var61 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var62 = var50.makeError(var52, var59, var61);
    com.google.javascript.jscomp.JSError var63 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var30, var43, var61);
    var11.report(var22, var25, var61);
    com.google.javascript.jscomp.DiagnosticType[] var65 = new com.google.javascript.jscomp.DiagnosticType[] { var25};
    com.google.javascript.jscomp.DiagnosticGroup var66 = new com.google.javascript.jscomp.DiagnosticGroup(var65);
    com.google.javascript.jscomp.CheckLevel var67 = null;
    var0.setWarningLevel(var66, var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test226"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setGroupVariableDeclarations(true);
    com.google.javascript.jscomp.ClosureCodingConvention var12 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var14 = var12.isConstantKey("2014/12/24 11:10");
    java.util.Collection var15 = var12.getAssertionFunctions();
    boolean var17 = var12.isConstant("Unversioned directory");
    boolean var19 = var12.isSuperClassReference("goog.abstractMethod");
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var23.setJSType(var24);
    boolean var26 = var23.isScript();
    com.google.javascript.rhino.Node var27 = var23.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var28 = var12.getDelegateRelationship(var23);
    com.google.javascript.jscomp.ClosureCodingConvention var29 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var12);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var29);
    var0.setProcessCommonJSModules(false);
    var0.setDebugFunctionSideEffectsPath("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test227"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    boolean var4 = var1.isSyntheticBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test228"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var2 = var1.isGetterDef();
//     boolean var3 = var1.isNE();
//     boolean var4 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
//     var1.removeProp(0);
//     com.google.javascript.rhino.Node[] var7 = null;
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.newNode(var1, var7);
// 
//   }

  public void test229() {}
//   public void test229() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test229"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var1 = var0.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.LightweightMessageFormatter var3 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0, var4);
//     com.google.javascript.jscomp.DiagnosticType var8 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var13 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make(var11, var13);
//     com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var8, var13);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newNumber(0.0d);
//     boolean var18 = var15.equals((java.lang.Object)var17);
//     com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var20 = null;
//     var19.setStripTypes(var20);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var23 = var22.getDirectedGraphNodes();
//     java.util.List var24 = var22.getEdges();
//     var19.setManageClosureDependencies(var24);
//     boolean var26 = var19.isExternExportsEnabled();
//     var19.setCollapsePropertiesOnExternTypes(false);
//     var19.setTransformAMDToCJSModules(false);
//     var19.setInlineConstantVars(true);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var33 = var19.getLanguageIn();
//     com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var35 = null;
//     var34.setStripTypes(var35);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var38 = var37.getDirectedGraphNodes();
//     java.util.List var39 = var37.getEdges();
//     var34.setManageClosureDependencies(var39);
//     var34.setDevirtualizePrototypeMethods(true);
//     var34.setInlineLocalVariables(false);
//     com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.CheckLevel var46 = null;
//     var45.setBrokenClosureRequiresLevel(var46);
//     var45.setLocale("");
//     var45.setLineBreak(false);
//     com.google.javascript.jscomp.CompilerOptions var52 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var53 = null;
//     var52.setStripTypes(var53);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var56 = var55.getDirectedGraphNodes();
//     java.util.List var57 = var55.getEdges();
//     var52.setManageClosureDependencies(var57);
//     boolean var59 = var52.isExternExportsEnabled();
//     var52.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var66 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var67 = com.google.javascript.jscomp.JSError.make(var64, var66);
//     int var68 = var67.getCharno();
//     com.google.javascript.jscomp.CheckLevel var69 = var67.getDefaultLevel();
//     var52.setReportUnknownTypes(var69);
//     var45.setBrokenClosureRequiresLevel(var69);
//     var34.setCheckUnreachableCode(var69);
//     var19.setReportUnknownTypes(var69);
//     com.google.javascript.jscomp.Compiler var74 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var75 = var74.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var76 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var74);
//     com.google.javascript.jscomp.ErrorManager var77 = var74.getErrorManager();
//     com.google.javascript.jscomp.LightweightMessageFormatter var78 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var74);
//     java.lang.String var79 = var15.format(var69, (com.google.javascript.jscomp.MessageFormatter)var78);
//     java.lang.String var80 = var5.formatWarning(var15);
// 
//   }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test230"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var11.shouldTolerateUndefinedValues();
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var69 = null;
    var11.setResolveMode(var69);
    boolean var72 = var11.hasNamespace("STRING hi 0 [length: 2]\n.<hi>");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test231() {}
//   public void test231() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test231"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var4 = var3.getNext();
//     int var5 = var3.getSourceOffset();
//     com.google.javascript.rhino.Node var6 = var3.cloneNode();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = var8.getNext();
//     int var10 = var8.getSourceOffset();
//     boolean var11 = var8.isAssignAdd();
//     int var12 = var6.getIndexOfChild(var8);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = var14.getNext();
//     com.google.javascript.rhino.InputId var16 = var14.getInputId();
//     com.google.javascript.rhino.Node var17 = var6.useSourceInfoFrom(var14);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     boolean var25 = var22.isVarArgs();
//     boolean var26 = var22.isOptionalArg();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(0, var22, var27);
//     boolean var29 = var27.isQualifiedName();
//     com.google.javascript.rhino.Node var30 = var27.cloneNode();
//     com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(153, var6, var30, 153, 1);
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var37 = var35.getBooleanProp((-1));
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var42 = var41.getNext();
//     com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
//     com.google.javascript.rhino.Node var44 = var41.removeFirstChild();
//     com.google.javascript.rhino.Node var45 = var35.useSourceInfoFromForTree(var41);
//     boolean var46 = var35.isVar();
//     com.google.javascript.rhino.Node var47 = var30.srcrefTree(var35);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.var(var0, var35);
// 
//   }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test232"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    boolean var35 = var21.isVoid();
    com.google.javascript.rhino.Node var36 = var5.newParameterFromNode(var21);
    boolean var37 = var21.isOptionalArg();
    boolean var38 = var21.isDelProp();
    java.lang.String var39 = var21.getQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test233"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    java.lang.Iterable var72 = var31.getAllExtendedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType var73 = var31.getParentScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test234"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var31 = var24.getPossibleToBooleanOutcomes();
    com.google.javascript.rhino.JSDocInfo var32 = var24.getJSDocInfo();
    var24.clearCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test235"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    java.util.Set var9 = var1.getThisAndAllDependencies();
    java.util.List var10 = var1.getProvides();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.script(var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test236"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    com.google.javascript.rhino.jstype.ObjectType var81 = com.google.javascript.rhino.jstype.ObjectType.cast(var39);
    java.lang.Object var82 = null;
    boolean var83 = var81.equals(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test237() {}
//   public void test237() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test237"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "Unversioned directory");
//     com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = var18.getNext();
//     com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
//     boolean var22 = var18.getBooleanProp(100);
//     int var23 = var18.getSideEffectFlags();
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var25, "");
//     com.google.javascript.jscomp.CheckLevel var29 = null;
//     com.google.javascript.jscomp.DiagnosticType var31 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var29, "");
//     int var32 = var27.compareTo(var31);
//     com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = var37.getNext();
//     boolean var39 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var37);
//     int var40 = var37.getLength();
//     com.google.javascript.rhino.Node var41 = null;
//     boolean var42 = var37.hasChild(var41);
//     com.google.javascript.rhino.Node var43 = var35.useSourceInfoIfMissingFromForTree(var37);
//     var37.setSourceFileForTesting("Unversioned directory");
//     boolean var46 = var37.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var47 = var37.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var51 = null;
//     java.util.logging.Logger var52 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var53 = new com.google.javascript.jscomp.LoggerErrorManager(var51, var52);
//     com.google.javascript.jscomp.Compiler var54 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var53);
//     com.google.javascript.jscomp.Scope var55 = var54.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var56 = null;
//     com.google.javascript.jscomp.NodeTraversal var57 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var54, var56);
//     com.google.javascript.jscomp.Scope var58 = var57.getScope();
//     com.google.javascript.rhino.Node var59 = null;
//     com.google.javascript.jscomp.DiagnosticType var62 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var64 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var65 = com.google.javascript.jscomp.JSError.make(var62, var64);
//     com.google.javascript.jscomp.DiagnosticType var66 = var65.getType();
//     java.lang.String[] var68 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var69 = var57.makeError(var59, var66, var68);
//     com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var37, var50, var68);
//     com.google.javascript.jscomp.JSError var71 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var18, var27, var68);
//     com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", (-1), 100, var13, var68);
//     com.google.javascript.jscomp.CheckLevel var73 = var3.getErrorLevel(var72);
// 
//   }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test238"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.Node var10 = var1.createParameters(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    com.google.javascript.rhino.Node var20 = var15.getChildAtIndex(1);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.JSDocInfo var27 = var24.getJSDocInfo();
    com.google.javascript.rhino.Node var28 = var15.copyInformationFrom(var24);
    java.lang.Object var30 = null;
    var15.putProp(0, var30);
    com.google.javascript.rhino.JSTypeExpression var33 = new com.google.javascript.rhino.JSTypeExpression(var15, "()");
    com.google.javascript.rhino.jstype.StaticScope var34 = null;
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    var36.unregisterPropertyOnType("Unversioned directory", var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    boolean var42 = var36.canPropertyBeDefined(var40, "BANG");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.Node var45 = var36.createParameters(var44);
    com.google.javascript.rhino.jstype.JSType var46 = var33.evaluate(var34, var36);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var49 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var48);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
    java.lang.Object var68 = null;
    var53.putProp(0, var68);
    com.google.javascript.rhino.JSTypeExpression var71 = new com.google.javascript.rhino.JSTypeExpression(var53, "()");
    com.google.javascript.rhino.jstype.StaticScope var72 = null;
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    boolean var80 = var74.canPropertyBeDefined(var78, "BANG");
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.Node var83 = var74.createParameters(var82);
    com.google.javascript.rhino.jstype.JSType var84 = var71.evaluate(var72, var74);
    boolean var85 = var49.addVarArgs(var84);
    com.google.javascript.rhino.jstype.JSType var86 = var46.getLeastSupertype(var84);
    boolean var87 = var86.isNullType();
    boolean var88 = var1.declareType("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n", var86);
    boolean var89 = var1.shouldTolerateUndefinedValues();
    boolean var90 = var1.shouldTolerateUndefinedValues();
    java.lang.Iterable var92 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.jstype.ObjectType var93 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.JSType var98 = var1.createNamedType("(InputId: )", "hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n", 100, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test239"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var19 = var14.getDescriptionForParameter("");
    boolean var20 = var14.hasEnumParameterType();
    java.lang.String var21 = var14.getDescription();
    boolean var22 = var14.isConstant();
    java.util.List var23 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    boolean var38 = var34.isOptionalArg();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var42 = var40.getBooleanProp((-1));
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.Node var49 = var46.removeFirstChild();
    com.google.javascript.rhino.Node var50 = var40.useSourceInfoFromForTree(var46);
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    com.google.javascript.rhino.InputId var57 = com.google.javascript.jscomp.NodeUtil.getInputId(var54);
    com.google.javascript.rhino.jstype.JSType var58 = null;
    var54.setJSType(var58);
    boolean var60 = var54.isBlock();
    com.google.javascript.rhino.Node var61 = var54.getParent();
    boolean var62 = var54.isBreak();
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    com.google.javascript.rhino.InputId var66 = var64.getInputId();
    boolean var67 = var64.isGetProp();
    com.google.javascript.rhino.Node var68 = var54.clonePropsFrom(var64);
    com.google.javascript.rhino.Node var69 = new com.google.javascript.rhino.Node(0, var34, var40, var64);
    com.google.javascript.rhino.Node var70 = var27.useSourceInfoFromForTree(var34);
    var14.setAssociatedNode(var27);
    var27.setSourceFileForTesting("module$2014$12$24 11:10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test240"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    java.util.Set var38 = var36.getOwnPropertyNames();
    boolean var39 = var36.isFunctionPrototypeType();
    boolean var40 = var36.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test241"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var5 = var4.recordExpose();
    boolean var7 = var4.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.InputId var14 = com.google.javascript.jscomp.NodeUtil.getInputId(var11);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var11.setJSType(var15);
    com.google.javascript.rhino.JSDocInfo var17 = var4.build(var11);
    java.lang.String var18 = var17.getFileOverview();
    java.util.Set var19 = var17.getModifies();
    java.util.List var20 = var17.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var21 = var17.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var0.createDirectedGraphNode((java.lang.Object)var17);
    boolean var23 = var0.isDirected();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var26 = var24.hasNode((java.lang.Object)1);
    java.util.List var27 = var24.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var29 = var28.getNodes();
    com.google.javascript.rhino.jstype.TernaryValue var31 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(154);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var32 = var28.createDirectedGraphNode((java.lang.Object)var31);
    java.util.List var33 = var24.getDirectedPredNodes(var32);
    java.util.List var34 = var0.getDirectedPredNodes(var32);
    boolean var35 = var0.isDirected();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test242"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(10, "BANG 0\n    STRING hi 0 [length: 2]\n", 1, 100);
    java.util.Set var5 = var4.getDirectives();
    boolean var7 = var4.getBooleanProp((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test243"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newString("function (): {140836661}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test244"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var21.setJSType(var22);
    boolean var24 = var21.isScript();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var29 = var28.isGetterDef();
    boolean var30 = var28.isAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.String var48 = var47.toStringTree();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var56 = var52.getBooleanProp(100);
    int var57 = var52.getSideEffectFlags();
    boolean var58 = var52.isDefaultCase();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(1, var28, var47, var52);
    java.lang.String var60 = var14.extractClassNameIfProvide(var21, var52);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var66 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var67 = com.google.javascript.jscomp.JSError.make(var64, var66);
    com.google.javascript.jscomp.DiagnosticType var68 = var67.getType();
    int var69 = var67.getNodeLength();
    com.google.javascript.jscomp.CheckLevel var70 = var67.getDefaultLevel();
    com.google.javascript.jscomp.CheckLevel var71 = var67.getDefaultLevel();
    var0.setCheckGlobalNamesLevel(var71);
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = var77.getNext();
    com.google.javascript.rhino.Node var79 = var75.srcrefTree(var77);
    boolean var80 = var77.isVarArgs();
    boolean var81 = var77.isOptionalArg();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(0, var77, var82);
    var82.setSourceEncodedPositionForTree(0);
    com.google.javascript.rhino.Node var86 = var82.cloneNode();
    boolean var87 = var82.isNumber();
    var82.setOptionalArg(false);
    boolean var90 = var71.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var48.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test245"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    int var15 = var9.getLength();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.Node var22 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var23 = var9.useSourceInfoFromForTree(var19);
    boolean var24 = var9.isDebugger();
    var9.setQuotedString();
    boolean var26 = var9.isHook();
    var9.setLength(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test246"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    java.lang.Object var3 = var1.getProp(153);
    boolean var4 = var1.isFromExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test247() {}
//   public void test247() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test247"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.block();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = var7.getNext();
//     com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
//     boolean var10 = var7.isVarArgs();
//     boolean var11 = var7.isArrayLit();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var14 = var13.isGetterDef();
//     var13.putIntProp((-1), 10);
//     var7.addChildrenToFront(var13);
//     int var19 = var13.getLength();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var24 = var23.getNext();
//     com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
//     com.google.javascript.rhino.Node var26 = var23.removeFirstChild();
//     com.google.javascript.rhino.Node var27 = var13.useSourceInfoFromForTree(var23);
//     var23.putIntProp(0, 3);
//     com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node((-1), var3, var23, 1, (-19));
//     com.google.javascript.rhino.jstype.StaticSourceFile var34 = var33.getStaticSourceFile();
//     var1.validateRoot(var33);
// 
//   }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test248"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var5 = var4.hasOneChild();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    boolean var11 = var10.isArrayLit();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(0, var4, var9, var10, var15, 1, 100);
    com.google.javascript.rhino.Node var23 = var10.getLastSibling();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var24 = com.google.javascript.rhino.ScriptRuntime.getMessage1("", (java.lang.Object)var10);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test249"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    java.util.Collection var33 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var36 = null;
    var35.setResolveMode(var36);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var38 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var35);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var39 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var35);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.unregisterPropertyOnType("Unversioned directory", var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
    boolean var51 = var39.addRequiredParams(var49);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    boolean var58 = var55.isVarArgs();
    com.google.javascript.rhino.Node var60 = var55.getChildAtIndex(1);
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    com.google.javascript.rhino.Node var66 = var62.srcrefTree(var64);
    com.google.javascript.rhino.JSDocInfo var67 = var64.getJSDocInfo();
    com.google.javascript.rhino.Node var68 = var55.copyInformationFrom(var64);
    boolean var69 = var55.isVoid();
    com.google.javascript.rhino.Node var70 = var39.newParameterFromNode(var55);
    java.util.List var71 = var0.identifyTypeDeclarationCall(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var72 = var55.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test250"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    boolean var14 = var10.isOptionalArg();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var18 = var16.getBooleanProp((-1));
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = var22.removeFirstChild();
    com.google.javascript.rhino.Node var26 = var16.useSourceInfoFromForTree(var22);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.InputId var33 = com.google.javascript.jscomp.NodeUtil.getInputId(var30);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var30.setJSType(var34);
    boolean var36 = var30.isBlock();
    com.google.javascript.rhino.Node var37 = var30.getParent();
    boolean var38 = var30.isBreak();
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.InputId var42 = var40.getInputId();
    boolean var43 = var40.isGetProp();
    com.google.javascript.rhino.Node var44 = var30.clonePropsFrom(var40);
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(0, var10, var16, var40);
    com.google.javascript.rhino.Node var46 = var3.useSourceInfoFromForTree(var10);
    com.google.javascript.rhino.JSDocInfo var47 = var3.getJSDocInfo();
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    int var51 = var49.getSourceOffset();
    com.google.javascript.rhino.Node var52 = var49.cloneNode();
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    int var56 = var54.getSourceOffset();
    com.google.javascript.rhino.Node var57 = var54.cloneNode();
    var52.addChildrenToFront(var57);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.InputId var65 = com.google.javascript.jscomp.NodeUtil.getInputId(var62);
    com.google.javascript.rhino.Node var66 = var52.useSourceInfoFrom(var62);
    com.google.javascript.rhino.JSDocInfoBuilder var68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var69 = var68.recordExpose();
    boolean var71 = var68.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    com.google.javascript.rhino.InputId var78 = com.google.javascript.jscomp.NodeUtil.getInputId(var75);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    var75.setJSType(var79);
    com.google.javascript.rhino.JSDocInfo var81 = var68.build(var75);
    java.util.Collection var82 = var81.getAuthors();
    java.util.Set var83 = var81.getModifies();
    var52.setDirectives(var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.ifNode(var3, var52);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test251"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var1.removeAll();
    java.lang.String var3 = var1.toString();
    java.util.Set var4 = var1.getThisAndAllDependencies();
    com.google.javascript.jscomp.JSModule var6 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var7 = var6.getProvides();
    java.util.Set var8 = var6.getThisAndAllDependencies();
    var6.clearAsts();
    var1.addDependency(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Unversioned directory"+ "'", var3.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test252"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "(LABEL_NAME hi!)", 0, (-1));
    int var5 = var4.getSourcePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test253"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    boolean var10 = var0.isDirected();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test254"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    int var15 = var9.getLength();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.Node var22 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var23 = var9.useSourceInfoFromForTree(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.block(var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test255"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
//     var6.traverseRoots(var12);
//     boolean var16 = var6.hasScope();
//     int var17 = var6.getLineNumber();
//     boolean var18 = var6.hasScope();
//     com.google.javascript.jscomp.Compiler var19 = var6.getCompiler();
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var22 = null;
//     var21.setResolveMode(var22);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var21);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var25 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var21);
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     var27.unregisterPropertyOnType("Unversioned directory", var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
//     boolean var37 = var25.addRequiredParams(var35);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var42 = var41.getNext();
//     com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
//     boolean var44 = var41.isVarArgs();
//     boolean var45 = var41.isOptionalArg();
//     java.lang.String var49 = var41.toString(false, false, true);
//     com.google.javascript.rhino.Node var50 = var25.newOptionalParameterFromNode(var41);
//     com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
//     int var59 = var54.getIndexOfChild(var58);
//     boolean var60 = var58.isBlock();
//     com.google.javascript.rhino.Node var61 = var25.newParameterFromNode(var58);
//     com.google.javascript.jscomp.SourceFile var64 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
//     java.lang.String var66 = var64.getLine((-1));
//     java.lang.String var67 = var64.getCode();
//     var61.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var64);
//     com.google.javascript.jscomp.JSModule var70 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var71 = var70.getDependencies();
//     com.google.javascript.jscomp.SourceAst var72 = null;
//     com.google.javascript.rhino.InputId var73 = null;
//     com.google.javascript.jscomp.CompilerInput var75 = new com.google.javascript.jscomp.CompilerInput(var72, var73, true);
//     com.google.javascript.jscomp.JSModule var76 = var75.getModule();
//     var70.add(var75);
//     com.google.javascript.jscomp.SourceFile var79 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var70.addFirst(var79);
//     com.google.javascript.jscomp.CompilerOptions var81 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var82 = null;
//     var81.setStripTypes(var82);
//     var81.setAliasKeywords(false);
//     com.google.javascript.jscomp.Result var86 = var19.compile(var64, var79, var81);
// 
//   }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test256"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var7 = var5.getBooleanProp((-1));
    var5.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var11 = new com.google.javascript.rhino.JSTypeExpression(var5, "goog.abstractMethod");
    boolean var12 = var0.isPrototypeAlias(var5);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "");
    java.util.Collection var15 = var0.getAssertionFunctions();
    java.lang.String var16 = var0.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "goog.global"+ "'", var16.equals("goog.global"));

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test257"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var82 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var82);
    com.google.javascript.rhino.jstype.JSType var85 = null;
    var83.unregisterPropertyOnType("Unversioned directory", var85);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    com.google.javascript.jscomp.JSModule var89 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var90 = var89.getDependencies();
    com.google.javascript.rhino.Node var91 = com.google.javascript.rhino.IR.block(var90);
    com.google.javascript.rhino.jstype.FunctionType var92 = var83.createFunctionTypeWithVarArgs(var87, var90);
    boolean var94 = var92.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.ObjectType var95 = var1.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var92);
    int var96 = var92.getExtendedInterfacesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test258"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.jscomp.GoogleCodingConvention var20 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var25 = var24.hasOneChild();
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
    boolean var31 = var30.isArrayLit();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    boolean var38 = var35.isVarArgs();
    boolean var39 = var35.isOptionalArg();
    com.google.javascript.rhino.Node var42 = new com.google.javascript.rhino.Node(0, var24, var29, var30, var35, 1, 100);
    java.lang.String var43 = var30.getQualifiedName();
    boolean var44 = var30.isHook();
    int var45 = var30.getSourceOffset();
    var30.removeProp(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var48 = var20.isInlinableFunction(var30);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test259"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    java.lang.String var4 = var0.getAbstractMethodName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var9, var14);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var9);
    boolean var19 = var0.isExported("2014/12/24 11:10", false);
    boolean var21 = var0.isConstant("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.abstractMethod"+ "'", var4.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test260"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.JSError[] var5 = var3.getErrors();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.JSDocInfo var14 = var11.getJSDocInfo();
    boolean var15 = var11.isSwitch();
    boolean var16 = var11.isIf();
    com.google.javascript.rhino.Node[] var17 = new com.google.javascript.rhino.Node[] { var11};
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(0, var17, 3, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var6, var17);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test261"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    boolean var10 = var1.recordNoSideEffects();
    boolean var12 = var1.recordBlockDescription("STRING hi 0 [length: 2]\n.<hi>");
    boolean var13 = var1.recordConstancy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test262"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var0.setRemoveClosureAsserts(true);
    var0.setReplaceIdGenerators(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test263"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isNE();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var2);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var8 = var7.siblings();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isArrayLit();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    boolean var34 = var12.hasChild(var29);
    boolean var35 = var29.isNot();
    int var36 = var29.getChildCount();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, var2, var7, var29, 153, 10);
    boolean var40 = var7.isNew();
    int var41 = var7.getLength();
    boolean var42 = var7.hasChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test264"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setAmbiguateProperties(true);
    var0.setGroupVariableDeclarations(true);
    var0.setFlowSensitiveInlineVariables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test265() {}
//   public void test265() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test265"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     java.util.List var3 = var1.getRequires();
//     com.google.javascript.jscomp.SourceAst var4 = null;
//     com.google.javascript.rhino.InputId var5 = null;
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
//     com.google.javascript.jscomp.JSModule var8 = var7.getModule();
//     var1.addFirst(var7);
//     com.google.javascript.jscomp.SourceAst var10 = var7.getAst();
//     var7.clearAst();
// 
//   }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test266"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setCommonJSModulePathPrefix("Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test267"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordPreserveTry();
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var14.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.JSTypeExpression var40 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var39);
    boolean var41 = var14.recordExtendedInterface(var39);
    boolean var42 = var11.recordExtendedInterface(var39);
    boolean var43 = var1.recordThisType(var39);
    var1.markAnnotation("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", 306, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test268"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    java.lang.String var73 = var56.getDisplayName();
    com.google.javascript.rhino.Node var74 = var56.getSource();
    java.util.Set var75 = var74.getDirectives();
    boolean var76 = var74.isNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var73.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test269"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isNE();
    java.lang.String var5 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    com.google.javascript.rhino.Node var6 = var1.cloneTree();
    boolean var7 = var1.isIn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test270"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var3 = var0.copyInformationFrom(var2);
    java.lang.String var4 = var0.toStringTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "FALSE\n"+ "'", var4.equals("FALSE\n"));

  }

  public void test271() {}
//   public void test271() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test271"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var3 = null;
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var8, "");
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var12, "");
//     int var15 = var10.compareTo(var14);
//     com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var24 = var23.getNext();
//     boolean var25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var23);
//     int var26 = var23.getLength();
//     com.google.javascript.rhino.Node var27 = null;
//     boolean var28 = var23.hasChild(var27);
//     com.google.javascript.rhino.Node var29 = var21.useSourceInfoIfMissingFromForTree(var23);
//     var23.setSourceFileForTesting("Unversioned directory");
//     boolean var32 = var23.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var33 = var23.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var37 = null;
//     java.util.logging.Logger var38 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var39 = new com.google.javascript.jscomp.LoggerErrorManager(var37, var38);
//     com.google.javascript.jscomp.Compiler var40 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var39);
//     com.google.javascript.jscomp.Scope var41 = var40.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var42 = null;
//     com.google.javascript.jscomp.NodeTraversal var43 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var40, var42);
//     com.google.javascript.jscomp.Scope var44 = var43.getScope();
//     com.google.javascript.rhino.Node var45 = null;
//     com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var50 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make(var48, var50);
//     com.google.javascript.jscomp.DiagnosticType var52 = var51.getType();
//     java.lang.String[] var54 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var55 = var43.makeError(var45, var52, var54);
//     com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var23, var36, var54);
//     com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make(var18, var54);
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("hi", 10, (-1), var14, var54);
//     com.google.javascript.jscomp.MessageFormatter var59 = null;
//     java.util.logging.Logger var60 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var61 = new com.google.javascript.jscomp.LoggerErrorManager(var59, var60);
//     com.google.javascript.jscomp.Compiler var62 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var61);
//     com.google.javascript.jscomp.Scope var63 = var62.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var64 = null;
//     com.google.javascript.jscomp.NodeTraversal var65 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var62, var64);
//     com.google.javascript.jscomp.Scope var66 = var65.getScope();
//     com.google.javascript.rhino.Node var67 = null;
//     com.google.javascript.jscomp.DiagnosticType var70 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var72 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make(var70, var72);
//     com.google.javascript.jscomp.DiagnosticType var74 = var73.getType();
//     java.lang.String[] var76 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var77 = var65.makeError(var67, var74, var76);
//     com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var14, var76);
//     com.google.javascript.jscomp.JSError var79 = com.google.javascript.jscomp.JSError.make("function (): {869482344}", 153, 2, var3, var76);
// 
//   }

  public void test272() {}
//   public void test272() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test272"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setNameAnonymousFunctionsOnly(false);
//     com.google.javascript.jscomp.CheckLevel var9 = null;
//     var0.setCheckGlobalThisLevel(var9);
//     var0.disableRuntimeTypeCheck();
//     boolean var12 = var0.isExternExportsEnabled();
//     com.google.javascript.jscomp.DependencyOptions var13 = null;
//     var0.setDependencyOptions(var13);
// 
//   }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test273"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var9 = var1.addAuthor("module$ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test274"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isNE();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var2);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var8 = var7.siblings();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isArrayLit();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    boolean var34 = var12.hasChild(var29);
    boolean var35 = var29.isNot();
    int var36 = var29.getChildCount();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, var2, var7, var29, 153, 10);
    boolean var40 = var2.hasChildren();
    boolean var41 = var2.isCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test275"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    var0.disableRuntimeTypeCheck();
    var0.setSmartNameRemoval(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test276"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.JSModule[] var4 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var2);
    com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var7 = var6.getDirectedGraphNodes();
    java.lang.Iterable var8 = var6.getDirectedGraphNodes();
    java.util.List var9 = var6.getGraphvizNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    boolean var26 = var24.hasType();
    java.util.List var27 = var24.getThrownTypes();
    java.util.List var28 = var5.manageDependencies(var9, var27);
    com.google.javascript.jscomp.JSModuleGraph var29 = new com.google.javascript.jscomp.JSModuleGraph(var27);
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    var31.removeAll();
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var35.removeAll();
    var31.addDependency(var35);
    java.util.List var38 = var31.getInputs();
    java.lang.String var39 = var31.getName();
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getProvides();
    com.google.javascript.jscomp.CompilerInput var44 = var41.getByName("()");
    com.google.javascript.jscomp.SourceAst var45 = null;
    com.google.javascript.rhino.InputId var46 = null;
    com.google.javascript.jscomp.CompilerInput var48 = new com.google.javascript.jscomp.CompilerInput(var45, var46, true);
    com.google.javascript.jscomp.SourceAst var49 = var48.getAst();
    var41.add(var48);
    boolean var51 = var29.dependsOn(var31, var41);
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getProvides();
    java.util.List var55 = var53.getRequires();
    com.google.javascript.jscomp.SourceAst var56 = null;
    com.google.javascript.rhino.InputId var57 = null;
    com.google.javascript.jscomp.CompilerInput var59 = new com.google.javascript.jscomp.CompilerInput(var56, var57, true);
    com.google.javascript.jscomp.JSModule var60 = var59.getModule();
    var53.addFirst(var59);
    var53.removeAll();
    java.util.Set var63 = var53.getAllDependencies();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.JSModule var64 = var29.getDeepestCommonDependencyInclusive((java.util.Collection)var63);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Unversioned directory"+ "'", var39.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test277"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordMeaning("Unversioned directory");
    boolean var5 = var1.recordExport();
    boolean var7 = var1.recordDescription("BANG 0");
    boolean var8 = var1.recordConstancy();
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var12 = var10.recordExterns();
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    boolean var19 = var16.isVarArgs();
    boolean var20 = var16.isArrayLit();
    com.google.javascript.rhino.Node var21 = var16.getNext();
    var10.markTypeNode(var16, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    boolean var34 = var31.isVarArgs();
    com.google.javascript.rhino.Node var36 = var31.getChildAtIndex(1);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.JSDocInfo var43 = var40.getJSDocInfo();
    com.google.javascript.rhino.Node var44 = var31.copyInformationFrom(var40);
    java.lang.Object var46 = null;
    var31.putProp(0, var46);
    com.google.javascript.rhino.JSTypeExpression var49 = new com.google.javascript.rhino.JSTypeExpression(var31, "()");
    com.google.javascript.rhino.JSTypeExpression var50 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var49);
    boolean var51 = var10.recordBaseType(var49);
    boolean var52 = var10.shouldParseDocumentation();
    com.google.javascript.rhino.JSDocInfoBuilder var54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var55 = var54.recordExpose();
    boolean var57 = var54.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    com.google.javascript.rhino.InputId var64 = com.google.javascript.jscomp.NodeUtil.getInputId(var61);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var61.setJSType(var65);
    com.google.javascript.rhino.JSDocInfo var67 = var54.build(var61);
    java.util.Collection var68 = var67.getAuthors();
    java.util.Set var69 = var67.getModifies();
    boolean var70 = var10.recordModifies(var69);
    boolean var71 = var1.recordModifies(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test278() {}
//   public void test278() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test278"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var1 = var0.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var7 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make(var5, var7);
//     int var9 = var8.getCharno();
//     com.google.javascript.jscomp.CheckLevel var10 = var8.getDefaultLevel();
//     java.lang.String var11 = var2.formatError(var8);
//     int var12 = var8.getLineNumber();
//     java.lang.String var13 = var8.toString();
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.Compiler var15 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var16 = var15.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var17 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var15);
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var22 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make(var20, var22);
//     int var24 = var23.getCharno();
//     com.google.javascript.jscomp.CheckLevel var25 = var23.getDefaultLevel();
//     java.lang.String var26 = var17.formatError(var23);
//     com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var31 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make(var29, var31);
//     java.lang.String var33 = var17.formatWarning(var32);
//     java.lang.String var34 = var8.format(var14, (com.google.javascript.jscomp.MessageFormatter)var17);
// 
//   }

  public void test279() {}
//   public void test279() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test279"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     var3.rebuildInputsFromModules();
// 
//   }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test280"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    boolean var24 = var20.isSwitch();
    boolean var25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var20);
    boolean var26 = var20.isFalse();
    var20.removeProp(1);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("function (): {869482344}");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.function(var12, var20, var30);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test281"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    boolean var62 = var35.canBeCalled();
    java.lang.String var63 = var35.toAnnotationString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "function (): ?"+ "'", var63.equals("function (): ?"));

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test282"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "BANG 0");
    boolean var11 = var1.recordVersion("module$");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test283"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("RETURN");
    boolean var2 = var1.isSyntheticBlock();
    boolean var3 = var1.isTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test284"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    boolean var51 = var48.isNullable();
    boolean var52 = var48.matchesNumberContext();
    boolean var53 = var10.differsFrom(var48);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    com.google.javascript.rhino.jstype.JSType var90 = var89.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var91 = var90.dereference();
    boolean var92 = var91.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var93 = var91.getParameterType();
    boolean var95 = var91.hasOwnProperty("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var96 = var10.resolve(var54, (com.google.javascript.rhino.jstype.StaticScope)var91);
    boolean var97 = var91.isUnknownType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test285"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    java.lang.Iterable var36 = var24.getTypesWithProperty("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    com.google.javascript.rhino.Node var45 = var40.getChildAtIndex(1);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.JSDocInfo var52 = var49.getJSDocInfo();
    com.google.javascript.rhino.Node var53 = var40.copyInformationFrom(var49);
    java.lang.Object var55 = null;
    var40.putProp(0, var55);
    com.google.javascript.rhino.JSTypeExpression var58 = new com.google.javascript.rhino.JSTypeExpression(var40, "()");
    com.google.javascript.rhino.jstype.StaticScope var59 = null;
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var61.unregisterPropertyOnType("Unversioned directory", var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    boolean var67 = var61.canPropertyBeDefined(var65, "BANG");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.Node var70 = var61.createParameters(var69);
    com.google.javascript.rhino.jstype.JSType var71 = var58.evaluate(var59, var61);
    com.google.javascript.rhino.jstype.JSType var72 = var71.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.JSType var73 = var24.createDefaultObjectUnion(var72);
    boolean var74 = var73.isEnumType();
    boolean var75 = var73.isEnumType();
    boolean var76 = var73.isInstanceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test286"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    var1.clearTemplateTypeNames();
    var1.forwardDeclareType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test287"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    com.google.javascript.rhino.Node var5 = var3.getAncestor(10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isArrayLit();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var16 = var15.isGetterDef();
    var15.putIntProp((-1), 10);
    var9.addChildrenToFront(var15);
    int var21 = var15.getLength();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.Node var28 = var25.removeFirstChild();
    com.google.javascript.rhino.Node var29 = var15.useSourceInfoFromForTree(var25);
    boolean var30 = var15.isDebugger();
    com.google.javascript.rhino.Node var31 = var15.removeFirstChild();
    com.google.javascript.rhino.Node var32 = var3.srcrefTree(var15);
    var32.setSourceFileForTesting("BANG 0");
    boolean var35 = var32.isWith();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test288"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.FunctionBuilder var91 = new com.google.javascript.rhino.jstype.FunctionBuilder(var24);
    com.google.javascript.rhino.jstype.FunctionBuilder var93 = var91.setIsConstructor(false);
    com.google.javascript.rhino.Node var94 = com.google.javascript.rhino.IR.nullNode();
    boolean var95 = var94.isHook();
    com.google.javascript.rhino.jstype.FunctionBuilder var96 = var93.withParamsNode(var94);
    boolean var97 = var94.isParamList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test289"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.setQuotedString();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.NodeUtil.newExpr(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var14 = var13.hasOneChild();
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.returnNode();
    boolean var20 = var19.isArrayLit();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    boolean var28 = var24.isOptionalArg();
    com.google.javascript.rhino.Node var31 = new com.google.javascript.rhino.Node(0, var13, var18, var19, var24, 1, 100);
    int var32 = var24.getSourceOffset();
    com.google.javascript.rhino.Node var33 = var9.useSourceInfoFromForTree(var24);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var37 = var35.getBooleanProp((-1));
    var35.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var40 = var33.copyInformationFrom(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.assign(var8, var40);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test290"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    int var7 = var5.getSourceOffset();
    boolean var8 = var5.isAssign();
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    boolean var17 = var13.isOptionalArg();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var21 = var19.getBooleanProp((-1));
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.Node var28 = var25.removeFirstChild();
    com.google.javascript.rhino.Node var29 = var19.useSourceInfoFromForTree(var25);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    boolean var39 = var33.isBlock();
    com.google.javascript.rhino.Node var40 = var33.getParent();
    boolean var41 = var33.isBreak();
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.InputId var45 = var43.getInputId();
    boolean var46 = var43.isGetProp();
    com.google.javascript.rhino.Node var47 = var33.clonePropsFrom(var43);
    com.google.javascript.rhino.Node var48 = new com.google.javascript.rhino.Node(0, var13, var19, var43);
    com.google.javascript.jscomp.ClosureCodingConvention var49 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var51 = var49.isConstantKey("2014/12/24 11:10");
    java.util.Collection var52 = var49.getAssertionFunctions();
    com.google.javascript.rhino.Node var56 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var56.setJSType(var57);
    boolean var59 = var56.isScript();
    com.google.javascript.rhino.Node var60 = var56.removeFirstChild();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var64 = var63.isGetterDef();
    boolean var65 = var63.isAdd();
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = var69.getNext();
    com.google.javascript.rhino.Node var71 = var67.srcrefTree(var69);
    boolean var72 = var69.isVarArgs();
    com.google.javascript.rhino.Node var74 = var69.getChildAtIndex(1);
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = var78.getNext();
    com.google.javascript.rhino.Node var80 = var76.srcrefTree(var78);
    com.google.javascript.rhino.JSDocInfo var81 = var78.getJSDocInfo();
    com.google.javascript.rhino.Node var82 = var69.copyInformationFrom(var78);
    java.lang.String var83 = var82.toStringTree();
    com.google.javascript.rhino.Node var85 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var87 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var88 = var87.getNext();
    com.google.javascript.rhino.Node var89 = var85.srcrefTree(var87);
    boolean var91 = var87.getBooleanProp(100);
    int var92 = var87.getSideEffectFlags();
    boolean var93 = var87.isDefaultCase();
    com.google.javascript.rhino.Node var94 = new com.google.javascript.rhino.Node(1, var63, var82, var87);
    java.lang.String var95 = var49.extractClassNameIfProvide(var56, var87);
    com.google.javascript.rhino.Node var96 = var87.cloneNode();
    com.google.javascript.rhino.Node var97 = var48.copyInformationFrom(var87);
    com.google.javascript.rhino.Node var98 = var5.copyInformationFrom(var97);
    boolean var99 = var0.isOptionalParameter(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var83.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test291"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    int var5 = var3.getSourceOffset();
    com.google.javascript.rhino.Node var6 = var3.cloneNode();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    int var10 = var8.getSourceOffset();
    boolean var11 = var8.isAssignAdd();
    int var12 = var6.getIndexOfChild(var8);
    com.google.javascript.rhino.Node var13 = var0.clonePropsFrom(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test292"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var16 = var14.getType();
    java.util.Set var17 = var14.getSuppressions();
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    java.lang.String var19 = var14.getMeaning();
    boolean var20 = var14.isDefine();
    boolean var21 = var14.isConstructor();
    int var22 = var14.getParameterCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test293"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.JSDocInfo var7 = var4.getJSDocInfo();
    boolean var8 = var4.isSwitch();
    boolean var9 = var4.isIf();
    com.google.javascript.rhino.Node[] var10 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(0, var10, 3, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test294"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    com.google.javascript.rhino.Node var17 = var12.getChildAtIndex(1);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.JSDocInfo var24 = var21.getJSDocInfo();
    com.google.javascript.rhino.Node var25 = var12.copyInformationFrom(var21);
    java.lang.Object var27 = null;
    var12.putProp(0, var27);
    com.google.javascript.rhino.JSTypeExpression var30 = new com.google.javascript.rhino.JSTypeExpression(var12, "()");
    com.google.javascript.rhino.jstype.StaticScope var31 = null;
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.unregisterPropertyOnType("Unversioned directory", var35);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    boolean var39 = var33.canPropertyBeDefined(var37, "BANG");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.Node var42 = var33.createParameters(var41);
    com.google.javascript.rhino.jstype.JSType var43 = var30.evaluate(var31, var33);
    boolean var44 = var1.recordBaseType(var30);
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isArrayLit();
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    boolean var59 = var56.isVarArgs();
    com.google.javascript.rhino.Node var61 = var56.getChildAtIndex(1);
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    com.google.javascript.rhino.JSDocInfo var68 = var65.getJSDocInfo();
    com.google.javascript.rhino.Node var69 = var56.copyInformationFrom(var65);
    boolean var70 = var48.hasChild(var65);
    boolean var71 = var65.isNot();
    int var72 = var65.getChildCount();
    com.google.javascript.rhino.Node var73 = var65.removeChildren();
    boolean var74 = var30.equals((java.lang.Object)var65);
    com.google.javascript.rhino.JSTypeExpression var75 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test295"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    int var62 = var58.getPropertiesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2147483647);

  }

  public void test296() {}
//   public void test296() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test296"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var3 = null;
//     var2.setStripTypes(var3);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var6 = var5.getDirectedGraphNodes();
//     java.util.List var7 = var5.getEdges();
//     var2.setManageClosureDependencies(var7);
//     com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var11 = var10.recordExpose();
//     boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = var17.getNext();
//     com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
//     com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     var17.setJSType(var21);
//     com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
//     java.lang.String var24 = var23.getFileOverview();
//     java.util.Set var25 = var23.getModifies();
//     java.util.List var26 = var23.getImplementedInterfaces();
//     com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var28 = null;
//     var27.setStripTypes(var28);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var31 = var30.getDirectedGraphNodes();
//     java.util.List var32 = var30.getEdges();
//     var27.setManageClosureDependencies(var32);
//     var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var27.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
//     var27.setSourceMapDetailLevel(var39);
//     var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
//     com.google.javascript.jscomp.deps.SortedDependencies var42 = new com.google.javascript.jscomp.deps.SortedDependencies(var7);
//     com.google.javascript.jscomp.deps.DependencyInfo var44 = var42.maybeGetInputProviding("function (): {1204057807}");
//     java.util.List var45 = null;
//     java.util.List var46 = var42.getSortedDependenciesOf(var45);
// 
//   }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test297"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    com.google.javascript.rhino.jstype.ObjectType.Property var29 = var10.getSlot("(hi)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test298"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var1.markText("(InputId: )", 100, 1, 3, 1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var14 = var12.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var15 = null;
    boolean var17 = var12.recordThrowDescription(var15, "()");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    boolean var40 = var12.recordEnumParameterType(var39);
    boolean var41 = var1.recordImplementedInterface(var39);
    com.google.javascript.jscomp.ClosureCodingConvention var42 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var44 = var42.isConstantKey("2014/12/24 11:10");
    java.util.Collection var45 = var42.getAssertionFunctions();
    com.google.javascript.rhino.Node var49 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    var49.setJSType(var50);
    boolean var52 = var49.isScript();
    com.google.javascript.rhino.Node var53 = var49.removeFirstChild();
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var57 = var56.isGetterDef();
    boolean var58 = var56.isAdd();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    boolean var65 = var62.isVarArgs();
    com.google.javascript.rhino.Node var67 = var62.getChildAtIndex(1);
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.JSDocInfo var74 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var75 = var62.copyInformationFrom(var71);
    java.lang.String var76 = var75.toStringTree();
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var81 = var80.getNext();
    com.google.javascript.rhino.Node var82 = var78.srcrefTree(var80);
    boolean var84 = var80.getBooleanProp(100);
    int var85 = var80.getSideEffectFlags();
    boolean var86 = var80.isDefaultCase();
    com.google.javascript.rhino.Node var87 = new com.google.javascript.rhino.Node(1, var56, var75, var80);
    java.lang.String var88 = var42.extractClassNameIfProvide(var49, var80);
    var1.markTypeNode(var80, 1, 0, 3, 0, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var76.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test299"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    java.lang.Iterable var5 = var1.getEachReferenceTypeWithProperty("module$InputId: ");
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
    var8.setResolveMode(var9);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var11 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var8);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    boolean var23 = var22.hasAnyTemplateInternal();
    java.lang.Iterable var24 = var22.getAllExtendedInterfaces();
    boolean var25 = var22.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.jscomp.JSModule var33 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var34 = var33.getDependencies();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.block(var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var27.createFunctionTypeWithVarArgs(var31, var34);
    boolean var38 = var36.removeProperty("null(null)");
    var22.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var36);
    com.google.javascript.rhino.jstype.JSType var41 = var8.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var36, "hi!");
    boolean var42 = var36.matchesInt32Context();
    var36.clearCachedValues();
    boolean var44 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var6, (com.google.javascript.rhino.jstype.JSType)var36);
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    var45.setChainCalls(true);
    var45.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var51 = var45.isRemoveUnusedClassProperties();
    var45.setDisambiguateProperties(true);
    var45.setRemoveUnusedLocalVars(true);
    com.google.javascript.jscomp.JSModule var57 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var58 = var57.getProvides();
    java.util.List var59 = var57.getRequires();
    com.google.javascript.jscomp.SourceAst var60 = null;
    com.google.javascript.rhino.InputId var61 = null;
    com.google.javascript.jscomp.CompilerInput var63 = new com.google.javascript.jscomp.CompilerInput(var60, var61, true);
    com.google.javascript.jscomp.JSModule var64 = var63.getModule();
    var57.addFirst(var63);
    java.util.List var66 = var57.getProvides();
    var45.setManageClosureDependencies(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var68 = var1.createFunctionType((com.google.javascript.rhino.jstype.JSType)var36, var66);
      fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test300"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.JSDocInfoBuilder var76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var77 = var76.recordExpose();
    boolean var79 = var76.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    com.google.javascript.rhino.InputId var86 = com.google.javascript.jscomp.NodeUtil.getInputId(var83);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    var83.setJSType(var87);
    com.google.javascript.rhino.JSDocInfo var89 = var76.build(var83);
    java.lang.String var90 = var89.getFileOverview();
    java.util.Set var91 = var89.getModifies();
    java.util.List var92 = var89.getImplementedInterfaces();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.block(var92);
    com.google.javascript.jscomp.NodeTraversal.Callback var94 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var92, var94);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var96 = var3.languageMode();
    boolean var97 = var3.isIdeMode();
    var3.disableThreads();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var99 = var3.languageMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test301"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test302"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    var0.setReserveRawExports(true);
    var0.setAppNameStr("(InputId: )");
    var0.setAliasStringsBlacklist("(LABEL_NAME hi!)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test303"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    var0.setMarkAsCompiled(true);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    var13.setDevirtualizePrototypeMethods(true);
    var13.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var13.getTweakProcessing();
    var0.setTweakProcessing(var24);
    int var26 = var24.ordinal();
    java.lang.Class var27 = var24.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var29 = java.lang.Enum.<java.lang.Enum>valueOf(var27, "goog.global");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test304"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var70 = var31.getTypeOfThis();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var71.clearEdgeAnnotations();
    java.lang.Iterable var73 = var71.getDirectedGraphNodes();
    java.util.List var74 = var71.getEdges();
    var31.setImplementedInterfaces(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test305"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = null;
    var14.setVisibility(var20);
    boolean var22 = var14.isExterns();
    boolean var23 = var14.isNoCompile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test306"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isNE();
    java.lang.String var5 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    boolean var6 = var1.isCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test307"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.Node var10 = var1.createParameters(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    com.google.javascript.rhino.Node var20 = var15.getChildAtIndex(1);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.JSDocInfo var27 = var24.getJSDocInfo();
    com.google.javascript.rhino.Node var28 = var15.copyInformationFrom(var24);
    java.lang.Object var30 = null;
    var15.putProp(0, var30);
    com.google.javascript.rhino.JSTypeExpression var33 = new com.google.javascript.rhino.JSTypeExpression(var15, "()");
    com.google.javascript.rhino.jstype.StaticScope var34 = null;
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    var36.unregisterPropertyOnType("Unversioned directory", var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    boolean var42 = var36.canPropertyBeDefined(var40, "BANG");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.Node var45 = var36.createParameters(var44);
    com.google.javascript.rhino.jstype.JSType var46 = var33.evaluate(var34, var36);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var49 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var48);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
    java.lang.Object var68 = null;
    var53.putProp(0, var68);
    com.google.javascript.rhino.JSTypeExpression var71 = new com.google.javascript.rhino.JSTypeExpression(var53, "()");
    com.google.javascript.rhino.jstype.StaticScope var72 = null;
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    boolean var80 = var74.canPropertyBeDefined(var78, "BANG");
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.Node var83 = var74.createParameters(var82);
    com.google.javascript.rhino.jstype.JSType var84 = var71.evaluate(var72, var74);
    boolean var85 = var49.addVarArgs(var84);
    com.google.javascript.rhino.jstype.JSType var86 = var46.getLeastSupertype(var84);
    boolean var87 = var86.isNullType();
    boolean var88 = var1.declareType("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n", var86);
    boolean var89 = var1.shouldTolerateUndefinedValues();
    boolean var90 = var1.shouldTolerateUndefinedValues();
    java.lang.Iterable var92 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    var1.identifyNonNullableName("LABEL_NAME hi!\n");
    com.google.javascript.rhino.jstype.ObjectType var95 = var1.createAnonymousObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test308"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var18 = var14.getReturnDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test309"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    boolean var73 = var69.isNumberValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test310"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("BANG 0");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test311"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newExpr(var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var2.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test312"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var0.setNameReferenceGraphPath("BANG");
    var0.setGeneratePseudoNames(true);
    var0.setRecordFunctionInformation(true);
    java.util.Set var18 = null;
    var0.setStripTypes(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test313"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("STRING hi 0 [length: 2]\n: RETURN");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test314() {}
//   public void test314() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test314"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.util.List var1 = var0.getGraphvizEdges();
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d);
//     com.google.javascript.jscomp.graph.GraphNode var4 = var0.createNode((java.lang.Object)var3);
//     var0.popEdgeAnnotations();
// 
//   }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test315"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
    var1.sortInputsByDeps(var26);
    int var31 = var26.getWarningCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test316"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    boolean var43 = var1.shouldParseDocumentation();
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var45 = null;
    var44.setBrokenClosureRequiresLevel(var45);
    var44.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var51 = var50.recordExpose();
    boolean var52 = var50.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var54 = null;
    boolean var55 = var50.recordParameter("Unversioned directory", var54);
    com.google.javascript.rhino.JSTypeExpression var56 = null;
    boolean var58 = var50.recordThrowDescription(var56, "");
    com.google.javascript.rhino.JSDocInfoBuilder var60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var61 = var60.recordExpose();
    boolean var63 = var60.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.InputId var70 = com.google.javascript.jscomp.NodeUtil.getInputId(var67);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var67.setJSType(var71);
    com.google.javascript.rhino.JSDocInfo var73 = var60.build(var67);
    java.lang.String var74 = var73.getFileOverview();
    java.util.Set var75 = var73.getModifies();
    boolean var76 = var50.recordSuppressions(var75);
    var44.setAliasableStrings(var75);
    com.google.javascript.jscomp.CompilerOptions var79 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var80 = null;
    var79.setStripTypes(var80);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var82 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var83 = var82.getDirectedGraphNodes();
    java.util.List var84 = var82.getEdges();
    var79.setManageClosureDependencies(var84);
    boolean var86 = var79.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var87 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var88 = null;
    var87.setStripTypes(var88);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var90 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var91 = var90.getDirectedGraphNodes();
    java.util.List var92 = var90.getEdges();
    var87.setManageClosureDependencies(var92);
    var79.setManageClosureDependencies(var92);
    var44.setReplaceStringsConfiguration("hi", var92);
    boolean var96 = var1.recordTemplateTypeNames(var92);
    boolean var98 = var1.recordReturnDescription("function (): {2060974850}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test317"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var36 = var1.recordHiddenness();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var42 = var41.hasOneChild();
    com.google.javascript.rhino.Node var46 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.returnNode();
    boolean var48 = var47.isArrayLit();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var55 = var52.isVarArgs();
    boolean var56 = var52.isOptionalArg();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(0, var41, var46, var47, var52, 1, 100);
    int var60 = var52.getSourceOffset();
    com.google.javascript.rhino.Node var61 = var37.useSourceInfoFromForTree(var52);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var65 = var63.getBooleanProp((-1));
    var63.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var68 = var61.copyInformationFrom(var63);
    com.google.javascript.rhino.JSDocInfo var69 = var1.build(var63);
    boolean var70 = var1.recordIdGenerator();
    boolean var71 = var1.recordExpose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test318"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var37 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    com.google.javascript.rhino.Node var46 = var41.getChildAtIndex(1);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.JSDocInfo var53 = var50.getJSDocInfo();
    com.google.javascript.rhino.Node var54 = var41.copyInformationFrom(var50);
    java.lang.Object var56 = null;
    var41.putProp(0, var56);
    com.google.javascript.rhino.JSTypeExpression var59 = new com.google.javascript.rhino.JSTypeExpression(var41, "()");
    com.google.javascript.rhino.jstype.StaticScope var60 = null;
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    var62.unregisterPropertyOnType("Unversioned directory", var64);
    com.google.javascript.rhino.jstype.JSType var66 = null;
    boolean var68 = var62.canPropertyBeDefined(var66, "BANG");
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.rhino.jstype.JSType[] var70 = new com.google.javascript.rhino.jstype.JSType[] { var69};
    com.google.javascript.rhino.Node var71 = var62.createParameters(var70);
    com.google.javascript.rhino.jstype.JSType var72 = var59.evaluate(var60, var62);
    boolean var73 = var37.addVarArgs(var72);
    com.google.javascript.rhino.jstype.JSType var74 = var34.getLeastSupertype(var72);
    boolean var75 = var34.isNullType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test319"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var17 = null;
    var16.setStripTypes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var20 = var19.getDirectedGraphNodes();
    java.util.List var21 = var19.getEdges();
    var16.setManageClosureDependencies(var21);
    boolean var23 = var16.isExternExportsEnabled();
    var16.setCheckCaja(false);
    java.util.Set var26 = null;
    var16.setReplaceStringsReservedStrings(var26);
    com.google.javascript.rhino.JSDocInfoBuilder var29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var30 = var29.recordExpose();
    boolean var31 = var29.recordExterns();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    boolean var38 = var35.isVarArgs();
    boolean var39 = var35.isArrayLit();
    com.google.javascript.rhino.Node var40 = var35.getNext();
    var29.markTypeNode(var35, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var49 = var48.recordExpose();
    boolean var50 = var48.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var52 = null;
    boolean var53 = var48.recordParameter("Unversioned directory", var52);
    com.google.javascript.rhino.JSTypeExpression var54 = null;
    boolean var56 = var48.recordThrowDescription(var54, "");
    com.google.javascript.rhino.JSDocInfoBuilder var58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var59 = var58.recordExpose();
    boolean var61 = var58.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    com.google.javascript.rhino.InputId var68 = com.google.javascript.jscomp.NodeUtil.getInputId(var65);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var65.setJSType(var69);
    com.google.javascript.rhino.JSDocInfo var71 = var58.build(var65);
    java.lang.String var72 = var71.getFileOverview();
    java.util.Set var73 = var71.getModifies();
    boolean var74 = var48.recordSuppressions(var73);
    boolean var75 = var29.recordModifies(var73);
    var16.setStripNamePrefixes(var73);
    var0.setIdGenerators(var73);
    var0.enableRuntimeTypeCheck("function (): {1852005172}");
    var0.setCheckSuspiciousCode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test320"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.jstype.StaticSourceFile var15 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var8);
    int var16 = var8.getSourceOffset();
    var8.setWasEmptyNode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test321"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getThisType();
    com.google.javascript.rhino.JSTypeExpression var19 = var14.getBaseType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test322"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var1.addFirst(var10);
    java.util.Set var12 = var1.getAllDependencies();
    var1.removeAll();
    com.google.javascript.jscomp.MessageFormatter var14 = null;
    java.util.logging.Logger var15 = null;
    com.google.javascript.jscomp.LoggerErrorManager var16 = new com.google.javascript.jscomp.LoggerErrorManager(var14, var15);
    com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var16);
    int var18 = var17.getErrorCount();
    var1.sortInputsByDeps(var17);
    java.util.List var20 = var1.getRequires();
    boolean var22 = var1.removeByName("{proxy:{1612771089}}");
    java.util.Set var23 = var1.getThisAndAllDependencies();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test323"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    var0.setCrossModuleMethodMotion(true);
    var0.setRemoveUnusedClassProperties(false);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test324"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("function (): ?");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test325() {}
//   public void test325() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test325"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     java.io.PrintStream var5 = null;
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var16 = var15.recordExpose();
//     boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var22.setJSType(var26);
//     com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
//     java.lang.String var29 = var28.getFileOverview();
//     java.util.Set var30 = var28.getModifies();
//     java.util.List var31 = var28.getImplementedInterfaces();
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var33 = null;
//     var32.setStripTypes(var33);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var36 = var35.getDirectedGraphNodes();
//     java.util.List var37 = var35.getEdges();
//     var32.setManageClosureDependencies(var37);
//     var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var32.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
//     var32.setSourceMapDetailLevel(var44);
//     var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
//     com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var49 = null;
//     var48.setStripTypes(var49);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var52 = var51.getDirectedGraphNodes();
//     java.util.List var53 = var51.getEdges();
//     var48.setManageClosureDependencies(var53);
//     boolean var55 = var48.isExternExportsEnabled();
//     var48.setCheckCaja(false);
//     var48.setRemoveUnusedPrototypeProperties(true);
//     var48.setRemoveClosureAsserts(false);
//     com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var64 = var63.recordExpose();
//     boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var71 = var70.getNext();
//     com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
//     com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     var70.setJSType(var74);
//     com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
//     java.util.Collection var77 = var76.getAuthors();
//     com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
//     var48.setSourceMapLocationMappings((java.util.List)var78);
//     com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var81 = null;
//     var80.setStripTypes(var81);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var84 = var83.getDirectedGraphNodes();
//     java.util.List var85 = var83.getEdges();
//     var80.setManageClosureDependencies(var85);
//     var80.setDevirtualizePrototypeMethods(true);
//     var80.setInlineLocalVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
//     boolean var92 = var80.getInferTypes();
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
//     com.google.javascript.jscomp.CompilerOptions.Reach var94 = null;
//     var80.setRemoveUnusedVariable(var94);
// 
//   }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test326"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    var0.setCrossModuleMethodMotion(true);
    var0.setNameReferenceReportPath("(InputId: )");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test327"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    boolean var49 = var45.isOptionalArg();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var51 = new com.google.javascript.rhino.Node(0, var45, var50);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    boolean var58 = var55.isVarArgs();
    boolean var59 = var55.isArrayLit();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var62 = var61.isGetterDef();
    var61.putIntProp((-1), 10);
    var55.addChildrenToFront(var61);
    boolean var67 = var55.isDec();
    var51.addChildToBack(var55);
    boolean var69 = var51.isDebugger();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var70 = var33.getDelegateRelationship(var51);
    boolean var72 = var33.isValidEnumKey("2014/12/24 11:10");
    boolean var74 = var33.isConstantKey("STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test328"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setTightenTypes(true);
    var0.setProcessCommonJSModules(true);
    var0.setProtectHiddenSideEffects(true);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test329"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var8 = var4.getBooleanProp(100);
    int var9 = var4.getSideEffectFlags();
    com.google.javascript.jscomp.CheckLevel var11 = null;
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var11, "");
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var15, "");
    int var18 = var13.compareTo(var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    boolean var25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var23);
    int var26 = var23.getLength();
    com.google.javascript.rhino.Node var27 = null;
    boolean var28 = var23.hasChild(var27);
    com.google.javascript.rhino.Node var29 = var21.useSourceInfoIfMissingFromForTree(var23);
    var23.setSourceFileForTesting("Unversioned directory");
    boolean var32 = var23.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var33 = var23.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var37 = null;
    java.util.logging.Logger var38 = null;
    com.google.javascript.jscomp.LoggerErrorManager var39 = new com.google.javascript.jscomp.LoggerErrorManager(var37, var38);
    com.google.javascript.jscomp.Compiler var40 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var39);
    com.google.javascript.jscomp.Scope var41 = var40.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var42 = null;
    com.google.javascript.jscomp.NodeTraversal var43 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var40, var42);
    com.google.javascript.jscomp.Scope var44 = var43.getScope();
    com.google.javascript.rhino.Node var45 = null;
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var50 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make(var48, var50);
    com.google.javascript.jscomp.DiagnosticType var52 = var51.getType();
    java.lang.String[] var54 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var55 = var43.makeError(var45, var52, var54);
    com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var23, var36, var54);
    com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var4, var13, var54);
    com.google.javascript.jscomp.DiagnosticGroup var58 = com.google.javascript.jscomp.DiagnosticGroup.forType(var13);
    com.google.javascript.jscomp.DiagnosticType var61 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var63 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var64 = com.google.javascript.jscomp.JSError.make(var61, var63);
    int var65 = var64.getCharno();
    int var66 = var64.getLineNumber();
    boolean var67 = var58.matches(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test330"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setGroupVariableDeclarations(true);
    java.util.Map var12 = var0.getDefineReplacements();
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var13 = null;
    var0.setAnonymousFunctionNaming(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var17 = var15.hasNode((java.lang.Object)1);
    java.util.List var18 = var15.getGraphvizEdges();
    java.lang.Iterable var19 = var15.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var20 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var21 = var20.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var22 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var20);
    com.google.javascript.jscomp.LightweightMessageFormatter var23 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var20);
    boolean var24 = var15.hasNode((java.lang.Object)var20);
    com.google.javascript.jscomp.MessageFormatter var25 = null;
    java.util.logging.Logger var26 = null;
    com.google.javascript.jscomp.LoggerErrorManager var27 = new com.google.javascript.jscomp.LoggerErrorManager(var25, var26);
    com.google.javascript.jscomp.Compiler var28 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var27);
    com.google.javascript.jscomp.Scope var29 = var28.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var30 = null;
    com.google.javascript.jscomp.NodeTraversal var31 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var28, var30);
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.script(var37);
    var31.traverseRoots(var37);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    var44.setChainCalls(true);
    java.util.logging.Logger var47 = null;
    com.google.javascript.jscomp.LoggerErrorManager var48 = new com.google.javascript.jscomp.LoggerErrorManager(var47);
    var44.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var48);
    var44.setGatherCssNames(false);
    var20.<com.google.javascript.jscomp.SourceFile>initModules(var37, var43, var44);
    java.util.Map var53 = var44.getDefineReplacements();
    var0.setDefineReplacements(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test331"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getReturnDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test332"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test333"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    boolean var31 = var30.isQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test334"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setAssumeStrictThis(false);
    var0.setConvertToDottedProperties(false);
    var0.setGenerateExports(true);
    com.google.javascript.jscomp.MessageBundle var13 = null;
    var0.setMessageBundle(var13);
    var0.setFoldConstants(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test335"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
    var11.setLength(2);
    boolean var14 = var11.isAssign();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var16.unregisterPropertyOnType("Unversioned directory", var18);
    var16.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isVarArgs();
    boolean var30 = var26.isFor();
    boolean var31 = var26.isNumber();
    com.google.javascript.rhino.Node var32 = var26.getNext();
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    boolean var39 = var36.isVarArgs();
    com.google.javascript.rhino.Node var41 = var36.getChildAtIndex(1);
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.JSDocInfo var48 = var45.getJSDocInfo();
    com.google.javascript.rhino.Node var49 = var36.copyInformationFrom(var45);
    java.lang.Object var51 = null;
    var36.putProp(0, var51);
    com.google.javascript.rhino.JSTypeExpression var54 = new com.google.javascript.rhino.JSTypeExpression(var36, "()");
    com.google.javascript.rhino.jstype.StaticScope var55 = null;
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var57.unregisterPropertyOnType("Unversioned directory", var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    boolean var63 = var57.canPropertyBeDefined(var61, "BANG");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType[] var65 = new com.google.javascript.rhino.jstype.JSType[] { var64};
    com.google.javascript.rhino.Node var66 = var57.createParameters(var65);
    com.google.javascript.rhino.jstype.JSType var67 = var54.evaluate(var55, var57);
    com.google.javascript.rhino.jstype.JSType var68 = var67.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var69 = var68.dereference();
    boolean var70 = var68.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var71 = var16.createEnumType("STRING hi 0 [length: 2]\n", var26, var68);
    java.lang.String var72 = var71.getDisplayName();
    boolean var73 = var71.isFunctionPrototypeType();
    com.google.javascript.rhino.Node var74 = var71.getSource();
    java.lang.String var75 = var11.checkTreeEquals(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var72.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var75.equals("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"));

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test336"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.JSTypeNative[] var91 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var92 = var24.createUnionType(var91);
    boolean var93 = var92.isObject();
    com.google.javascript.rhino.jstype.JSType var95 = var92.findPropertyType("(OFF)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test337"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    com.google.javascript.jscomp.MessageFormatter var10 = null;
    java.util.logging.Logger var11 = null;
    com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var12);
    com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal var16 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var13, var15);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var18 = null;
    var17.setStripTypes(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    var17.setManageClosureDependencies(var22);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.script(var22);
    var16.traverseRoots(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    var29.setChainCalls(true);
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var32);
    var29.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var33);
    var29.setGatherCssNames(false);
    var5.<com.google.javascript.jscomp.SourceFile>initModules(var22, var28, var29);
    java.util.Map var38 = var29.getDefineReplacements();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    com.google.javascript.jscomp.ErrorFormat var46 = null;
    var39.setErrorFormat(var46);
    var39.setRenamePrefix("hi");
    var39.setAcceptConstKeyword(true);
    var39.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var54 = var39.getAliasTransformationHandler();
    var29.setAliasTransformationHandler(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test338() {}
//   public void test338() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test338"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var12 = var11.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
//     com.google.javascript.jscomp.JSError var14 = null;
//     com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
//     var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
//     var0.setNameReferenceGraphPath("goog.exportSymbol");
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var20, "Unversioned directory");
//     com.google.javascript.jscomp.DiagnosticType[] var23 = new com.google.javascript.jscomp.DiagnosticType[] { var22};
//     com.google.javascript.jscomp.DiagnosticGroup var24 = new com.google.javascript.jscomp.DiagnosticGroup(var23);
//     com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var26 = null;
//     var25.setStripTypes(var26);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var29 = var28.getDirectedGraphNodes();
//     java.util.List var30 = var28.getEdges();
//     var25.setManageClosureDependencies(var30);
//     boolean var32 = var25.isExternExportsEnabled();
//     var25.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var39 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make(var37, var39);
//     int var41 = var40.getCharno();
//     com.google.javascript.jscomp.CheckLevel var42 = var40.getDefaultLevel();
//     var25.setReportUnknownTypes(var42);
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var44 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var24, var42);
//     var0.setReportMissingOverride(var42);
//     var0.setInstrumentationTemplate("BANG");
//     com.google.javascript.jscomp.CompilerOptions.Reach var48 = null;
//     var0.setInlineVariables(var48);
// 
//   }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test339"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.lang.String var23 = var18.getMeaning();
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    boolean var30 = var27.isVarArgs();
    boolean var31 = var27.isArrayLit();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var34 = var33.isGetterDef();
    var33.putIntProp((-1), 10);
    var27.addChildrenToFront(var33);
    boolean var39 = var33.isNot();
    int var40 = var33.getSideEffectFlags();
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.jscomp.JSModule var48 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var49 = var48.getDependencies();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.block(var49);
    com.google.javascript.rhino.jstype.FunctionType var51 = var42.createFunctionTypeWithVarArgs(var46, var49);
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var54 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var53);
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    boolean var90 = var54.addVarArgs(var89);
    boolean var91 = var89.isEnumElementType();
    boolean var92 = var89.isNullable();
    boolean var93 = var89.matchesNumberContext();
    boolean var94 = var51.differsFrom(var89);
    var33.setJSType((com.google.javascript.rhino.jstype.JSType)var51);
    var18.setAssociatedNode(var33);
    var33.setString("module$");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var99 = com.google.javascript.jscomp.NodeUtil.newExpr(var33);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test340"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
    var11.setLength(2);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    boolean var17 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var15);
    java.lang.String var18 = var11.checkTreeEquals(var15);
    boolean var19 = var15.isEmpty();
    java.lang.String var20 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var15);
    boolean var21 = var15.isDec();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var18.equals("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test341"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    var1.removeAll();
    com.google.javascript.jscomp.SourceFile var13 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    int var15 = var13.getLineOfOffset(0);
    var1.addFirst(var13);
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.jscomp.SourceAst var20 = null;
    com.google.javascript.rhino.InputId var21 = null;
    com.google.javascript.jscomp.CompilerInput var23 = new com.google.javascript.jscomp.CompilerInput(var20, var21, true);
    com.google.javascript.jscomp.JSModule var24 = var23.getModule();
    var18.add(var23);
    com.google.javascript.jscomp.SourceFile var27 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var18.addFirst(var27);
    java.util.Set var29 = var18.getAllDependencies();
    var18.removeAll();
    com.google.javascript.jscomp.SourceAst var31 = null;
    com.google.javascript.rhino.InputId var32 = null;
    com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31, var32, true);
    com.google.javascript.jscomp.CompilerInput var37 = new com.google.javascript.jscomp.CompilerInput(var31, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var18.addFirst(var37);
    boolean var39 = var37.isExtern();
    com.google.javascript.jscomp.SourceAst var40 = var37.getSourceAst();
    java.lang.String var41 = var37.toString();
    boolean var42 = var37.isExtern();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.add(var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var41.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test342"); }


    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var3, "");
    com.google.javascript.jscomp.CheckLevel var7 = null;
    com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var7, "");
    int var10 = var5.compareTo(var9);
    java.lang.String[] var12 = new java.lang.String[] { "(module$2014$12$24 11:10)"};
    com.google.javascript.jscomp.JSError var13 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", var1, var9, var12);
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    boolean var23 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var21);
    int var24 = var21.getLength();
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var21.hasChild(var25);
    com.google.javascript.rhino.Node var27 = var19.useSourceInfoIfMissingFromForTree(var21);
    var21.setSourceFileForTesting("Unversioned directory");
    boolean var30 = var21.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var31 = var21.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var35 = null;
    java.util.logging.Logger var36 = null;
    com.google.javascript.jscomp.LoggerErrorManager var37 = new com.google.javascript.jscomp.LoggerErrorManager(var35, var36);
    com.google.javascript.jscomp.Compiler var38 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var37);
    com.google.javascript.jscomp.Scope var39 = var38.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var40 = null;
    com.google.javascript.jscomp.NodeTraversal var41 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var38, var40);
    com.google.javascript.jscomp.Scope var42 = var41.getScope();
    com.google.javascript.rhino.Node var43 = null;
    com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var48 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var49 = com.google.javascript.jscomp.JSError.make(var46, var48);
    com.google.javascript.jscomp.DiagnosticType var50 = var49.getType();
    java.lang.String[] var52 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var53 = var41.makeError(var43, var50, var52);
    com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var21, var34, var52);
    com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make(var16, var52);
    int var56 = var9.compareTo(var16);
    com.google.javascript.jscomp.DiagnosticGroup var57 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
    com.google.javascript.jscomp.DiagnosticType var60 = com.google.javascript.jscomp.DiagnosticType.error("STRING hi 0 [length: 2]\n", "RETURN");
    int var61 = var16.compareTo(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-19));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 21);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test343"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test344"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    boolean var64 = var58.hasReferenceName();
    boolean var65 = var58.isFunctionPrototypeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test345"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getErrors();
//     java.lang.String var5 = var3.toSource();
// 
//   }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test346"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    boolean var43 = var1.shouldParseDocumentation();
    com.google.javascript.rhino.JSDocInfoBuilder var45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var46 = var45.recordExpose();
    boolean var48 = var45.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    com.google.javascript.rhino.InputId var55 = com.google.javascript.jscomp.NodeUtil.getInputId(var52);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    var52.setJSType(var56);
    com.google.javascript.rhino.JSDocInfo var58 = var45.build(var52);
    java.util.Collection var59 = var58.getAuthors();
    java.util.Set var60 = var58.getModifies();
    boolean var61 = var1.recordModifies(var60);
    boolean var62 = var1.recordDeprecated();
    boolean var63 = var1.recordNoAlias();
    boolean var65 = var1.hasParameter("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test347"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    java.io.Reader var7 = var3.getCodeReader();
    var3.clearCachedSource();
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var3);
    com.google.javascript.rhino.InputId var10 = var9.getInputId();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var14.setJSType(var15);
    boolean var17 = var14.isScript();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var23 = var21.getLineOfOffset(2);
    var14.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var21);
    com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var21);
    var9.setSourceFile(var21);
    boolean var27 = var21.isExtern();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test348"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.block(var17);
    boolean var19 = var18.isFalse();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var21 = var20.cloneTree();
    com.google.javascript.rhino.Node var22 = var18.useSourceInfoFrom(var20);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var18, "goog.abstractMethod");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.voidNode(var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test349"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isObject();
    com.google.javascript.rhino.jstype.JSType var62 = var58.getPropertyType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test350() {}
//   public void test350() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test350"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("(hi)", var1);
// 
//   }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test351"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isInterface();
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var22 = var19.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.InputId var29 = com.google.javascript.jscomp.NodeUtil.getInputId(var26);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var26.setJSType(var30);
    com.google.javascript.rhino.JSDocInfo var32 = var19.build(var26);
    java.lang.String var33 = var32.getFileOverview();
    boolean var34 = var32.hasFileOverview();
    boolean var35 = var32.hasReturnType();
    boolean var36 = var32.hasType();
    boolean var37 = var32.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var38 = var32.getVisibility();
    var14.setVisibility(var38);
    boolean var40 = var14.isConstant();
    java.lang.String var41 = var14.getDescription();
    com.google.javascript.rhino.JSTypeExpression var42 = var14.getReturnType();
    java.lang.String var43 = var14.getDeprecationReason();
    int var44 = var14.getImplementedInterfaceCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "2014/12/24 11:10"+ "'", var43.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test352"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     var0.setCheckCaja(false);
//     var0.setTightenTypes(false);
//     var0.setPreferLineBreakAtEndOfFile(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var14 = null;
//     var0.setInlineVariables(var14);
// 
//   }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test353"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    boolean var35 = var29.isAllType();
    com.google.javascript.rhino.jstype.JSType var37 = var29.findPropertyType("goog.abstractMethod: WARNING - \n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test354"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.InputId var47 = var38.getInputId();
    boolean var48 = var38.isCall();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    com.google.javascript.rhino.Node var55 = var52.removeFirstChild();
    var55.putIntProp(0, 100);
    boolean var59 = var55.isTrue();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.exprResult(var55);
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    boolean var68 = var65.isVarArgs();
    boolean var69 = var65.isOptionalArg();
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var71 = new com.google.javascript.rhino.Node(0, var65, var70);
    boolean var72 = var70.isInc();
    java.lang.String var73 = var70.getSourceFileName();
    com.google.javascript.rhino.Node var75 = new com.google.javascript.rhino.Node(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.forNode(var38, var55, var70, var75);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test355"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.Node var19 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var20 = var10.useSourceInfoFromForTree(var16);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    boolean var30 = var24.isBlock();
    com.google.javascript.rhino.Node var31 = var24.getParent();
    boolean var32 = var24.isBreak();
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.InputId var36 = var34.getInputId();
    boolean var37 = var34.isGetProp();
    com.google.javascript.rhino.Node var38 = var24.clonePropsFrom(var34);
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(0, var4, var10, var34);
    com.google.javascript.jscomp.ClosureCodingConvention var40 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var42 = var40.isConstantKey("2014/12/24 11:10");
    java.util.Collection var43 = var40.getAssertionFunctions();
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var47.setJSType(var48);
    boolean var50 = var47.isScript();
    com.google.javascript.rhino.Node var51 = var47.removeFirstChild();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var55 = var54.isGetterDef();
    boolean var56 = var54.isAdd();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    boolean var63 = var60.isVarArgs();
    com.google.javascript.rhino.Node var65 = var60.getChildAtIndex(1);
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = var69.getNext();
    com.google.javascript.rhino.Node var71 = var67.srcrefTree(var69);
    com.google.javascript.rhino.JSDocInfo var72 = var69.getJSDocInfo();
    com.google.javascript.rhino.Node var73 = var60.copyInformationFrom(var69);
    java.lang.String var74 = var73.toStringTree();
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = var78.getNext();
    com.google.javascript.rhino.Node var80 = var76.srcrefTree(var78);
    boolean var82 = var78.getBooleanProp(100);
    int var83 = var78.getSideEffectFlags();
    boolean var84 = var78.isDefaultCase();
    com.google.javascript.rhino.Node var85 = new com.google.javascript.rhino.Node(1, var54, var73, var78);
    java.lang.String var86 = var40.extractClassNameIfProvide(var47, var78);
    com.google.javascript.rhino.Node var87 = var78.cloneNode();
    com.google.javascript.rhino.Node var88 = var39.copyInformationFrom(var78);
    boolean var89 = var39.isFalse();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var74.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test356"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    var0.setTweakToStringLiteral("goog.abstractMethod", "ERROR - (InputId: )\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test357"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    com.google.javascript.jscomp.CompilerOptions var68 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var69 = null;
    var68.setStripTypes(var69);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var72 = var71.getDirectedGraphNodes();
    java.util.List var73 = var71.getEdges();
    var68.setManageClosureDependencies(var73);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.script(var73);
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.paramList(var73);
    var31.setImplementedInterfaces(var73);
    boolean var78 = var31.hasCachedValues();
    java.lang.Iterable var79 = var31.getAllExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test358"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var5 = null;
    var0.setAliasTransformationHandler(var5);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.createFunctionTypeWithVarArgs(var12, var15);
    var0.setReplaceStringsFunctionDescriptions(var15);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var30 = var29.hasAnyTemplateInternal();
    java.lang.Iterable var31 = var29.getAllExtendedInterfaces();
    boolean var32 = var29.isEmptyType();
    java.util.Set var33 = var29.getOwnPropertyNames();
    var0.setExtraAnnotationNames(var33);
    var0.setSkipAllPasses(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test359"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var7 = var6.getAncestors();
    boolean var8 = var6.isCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.var(var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test360() {}
//   public void test360() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test360"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isVarArgs();
//     boolean var9 = var5.isOptionalArg();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(0, var5, var10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     boolean var18 = var13.isString();
//     com.google.javascript.rhino.Node var19 = var11.useSourceInfoFromForTree(var13);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.label(var0, var19);
// 
//   }

  public void test361() {}
//   public void test361() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test361"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
//     var1.setResolveMode(var2);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.ErrorReporter var6 = var1.getErrorReporter();
//     var1.incrementGeneration();
//     com.google.javascript.rhino.JSDocInfoBuilder var9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var10 = var9.recordExpose();
//     boolean var12 = var9.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var17 = var16.getNext();
//     com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
//     com.google.javascript.rhino.InputId var19 = com.google.javascript.jscomp.NodeUtil.getInputId(var16);
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     var16.setJSType(var20);
//     com.google.javascript.rhino.JSDocInfo var22 = var9.build(var16);
//     java.lang.String var23 = var22.getFileOverview();
//     java.util.Set var24 = var22.getModifies();
//     java.util.List var25 = var22.getImplementedInterfaces();
//     com.google.javascript.rhino.JSTypeExpression var26 = var22.getType();
//     java.util.List var27 = var22.getImplementedInterfaces();
//     var1.setTemplateTypeNames(var27);
//     com.google.javascript.rhino.jstype.JSTypeNative var29 = null;
//     com.google.javascript.rhino.jstype.JSType var30 = var1.getNativeType(var29);
// 
//   }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test362"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newString(0, "hi!");
    var7.setVarArgs(false);
    com.google.javascript.rhino.jstype.FunctionBuilder var10 = var4.withSourceNode(var7);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.block(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var12.createFunctionTypeWithVarArgs(var16, var19);
    boolean var22 = var21.hasCachedValues();
    java.util.Set var23 = var21.getPropertyNames();
    com.google.javascript.rhino.jstype.ParameterizedType var24 = var21.toMaybeParameterizedType();
    com.google.javascript.rhino.jstype.FunctionBuilder var25 = var10.copyFromOtherFunction(var21);
    java.lang.Iterable var26 = var21.getAllExtendedInterfaces();
    boolean var27 = var21.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test363() {}
//   public void test363() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test363"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     var3.setJSType(var4);
//     boolean var6 = var3.isScript();
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var12 = var10.getLineOfOffset(2);
//     var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var10);
//     com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var10);
//     var14.removeRequire("function (): {140836661}");
// 
//   }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test364"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    var3.setJSType(var4);
    boolean var6 = var3.isScript();
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var12 = var10.getLineOfOffset(2);
    var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var10);
    com.google.javascript.jscomp.Region var15 = var10.getRegion(1);
    com.google.javascript.jscomp.Region var17 = var10.getRegion(153);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test365"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    var0.setProcessObjectPropertyString(true);
    var0.setSyntheticBlockEndMarker("InputId: InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test366"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.JSModule[] var4 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var2);
    com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
    com.google.javascript.jscomp.MessageFormatter var6 = null;
    java.util.logging.Logger var7 = null;
    com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var6, var7);
    com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var8);
    com.google.javascript.jscomp.JSError[] var10 = var9.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.util.List var26 = var25.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var27 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var28 = var27.getDirectedGraphNodes();
    var27.clearNodeAnnotations();
    java.util.List var30 = var27.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    var31.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var31.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var43 = null;
    var31.setSourceMapDetailLevel(var43);
    com.google.javascript.jscomp.CodingConvention var45 = var31.getCodingConvention();
    var31.setMarkNoSideEffectCalls(false);
    var9.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var26, var30, var31);
    com.google.javascript.jscomp.LightweightMessageFormatter var49 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var9);
    com.google.javascript.rhino.JSDocInfoBuilder var51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var52 = var51.recordExpose();
    boolean var54 = var51.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    com.google.javascript.rhino.InputId var61 = com.google.javascript.jscomp.NodeUtil.getInputId(var58);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var58.setJSType(var62);
    com.google.javascript.rhino.JSDocInfo var64 = var51.build(var58);
    java.lang.String var65 = var64.getFileOverview();
    boolean var66 = var64.hasFileOverview();
    boolean var67 = var64.hasReturnType();
    boolean var68 = var64.hasType();
    boolean var69 = var64.isHidden();
    boolean var70 = var64.isInterface();
    com.google.common.collect.ImmutableList var71 = var64.getTemplateTypeNames();
    com.google.javascript.jscomp.NodeTraversal.Callback var72 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var9, (java.util.List)var71, var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.JSModule var74 = var5.getDeepestCommonDependencyInclusive((java.util.Collection)var71);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test367"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    var1.removeAll();
    java.util.List var4 = var1.getDependencies();
    java.util.List var5 = var1.getInputs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test368"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setTweakToStringLiteral("BANG 0\n    STRING hi 0 [length: 2]\n", "InputId: ");
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setReportMissingOverride(var11);
    boolean var13 = var0.shouldColorizeErrorOutput();
    var0.setManageClosureDependencies(true);
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    int var19 = var17.getDepth();
    java.util.Set var20 = var17.getAllDependencies();
    var0.setStripNameSuffixes(var20);
    com.google.javascript.jscomp.ErrorFormat var22 = null;
    var0.setErrorFormat(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test369() {}
//   public void test369() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test369"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("Unversioned directory");
//     boolean var2 = var1.isDo();
//     var1.setIsSyntheticBlock(true);
//     com.google.javascript.rhino.Node var5 = null;
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.labelName("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
//     com.google.javascript.rhino.Node var8 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.forNode(var1, var5, var7, var8);
// 
//   }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test370"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    var3.setCharno(153);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    var12.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isFor();
    boolean var27 = var22.isNumber();
    com.google.javascript.rhino.Node var28 = var22.getNext();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    com.google.javascript.rhino.jstype.JSType var64 = var63.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var65 = var64.dereference();
    boolean var66 = var64.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var67 = var12.createEnumType("STRING hi 0 [length: 2]\n", var22, var64);
    java.lang.String var68 = var67.getDisplayName();
    com.google.javascript.rhino.Node var69 = var67.getSource();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.jscomp.JSModule var77 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var78 = var77.getDependencies();
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.block(var78);
    com.google.javascript.rhino.jstype.FunctionType var80 = var71.createFunctionTypeWithVarArgs(var75, var78);
    boolean var81 = var80.hasAnyTemplateInternal();
    java.lang.Iterable var82 = var80.getAllExtendedInterfaces();
    boolean var83 = var67.isSubtype((com.google.javascript.rhino.jstype.JSType)var80);
    java.lang.String var84 = var67.getDisplayName();
    com.google.javascript.rhino.Node var85 = var67.getSource();
    com.google.javascript.rhino.InputId var87 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var88 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var90 = var88.isConstantKey("2014/12/24 11:10");
    java.lang.String var91 = var88.getAbstractMethodName();
    boolean var92 = var87.equals((java.lang.Object)var91);
    java.lang.String var93 = var87.getIdName();
    var85.setInputId(var87);
    java.lang.String var95 = var3.checkTreeEquals(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var68.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var84.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "goog.abstractMethod"+ "'", var91.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test371"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setFoldConstants(false);
    var0.setAssumeStrictThis(false);
    boolean var15 = var0.assumeStrictThis();
    com.google.javascript.jscomp.SourceMap.Format var16 = null;
    var0.setSourceMapFormat(var16);
    var0.resetWarningsGuard();
    var0.setRemoveUnusedClassProperties(false);
    var0.setRenamePrefixNamespace("goog.global");
    com.google.javascript.jscomp.VariableRenamingPolicy var23 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var24 = null;
    var0.setRenamingPolicy(var23, var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test372"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    boolean var39 = var37.isOrdinaryFunction();
    boolean var40 = var37.isUnionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test373"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    var9.setSourceEncodedPositionForTree(0);
    boolean var13 = var9.isHook();
    boolean var14 = var9.isDefaultCase();
    boolean var15 = var9.isFalse();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var24 = var20.getBooleanProp(100);
    int var25 = var20.getSideEffectFlags();
    com.google.javascript.jscomp.CheckLevel var27 = null;
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var27, "");
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var31, "");
    int var34 = var29.compareTo(var33);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    boolean var41 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var39);
    int var42 = var39.getLength();
    com.google.javascript.rhino.Node var43 = null;
    boolean var44 = var39.hasChild(var43);
    com.google.javascript.rhino.Node var45 = var37.useSourceInfoIfMissingFromForTree(var39);
    var39.setSourceFileForTesting("Unversioned directory");
    boolean var48 = var39.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var49 = var39.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var53 = null;
    java.util.logging.Logger var54 = null;
    com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
    com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
    com.google.javascript.jscomp.Scope var57 = var56.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var58 = null;
    com.google.javascript.jscomp.NodeTraversal var59 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var56, var58);
    com.google.javascript.jscomp.Scope var60 = var59.getScope();
    com.google.javascript.rhino.Node var61 = null;
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var66 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var67 = com.google.javascript.jscomp.JSError.make(var64, var66);
    com.google.javascript.jscomp.DiagnosticType var68 = var67.getType();
    java.lang.String[] var70 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var71 = var59.makeError(var61, var68, var70);
    com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var39, var52, var70);
    com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var20, var29, var70);
    var9.addChildrenToFront(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test374"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    java.lang.Iterable var5 = var1.getEachReferenceTypeWithProperty("module$InputId: ");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    com.google.javascript.rhino.Node var14 = var9.getChildAtIndex(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.JSDocInfo var21 = var18.getJSDocInfo();
    com.google.javascript.rhino.Node var22 = var9.copyInformationFrom(var18);
    java.lang.Object var24 = null;
    var9.putProp(0, var24);
    com.google.javascript.rhino.JSTypeExpression var27 = new com.google.javascript.rhino.JSTypeExpression(var9, "()");
    com.google.javascript.rhino.jstype.StaticScope var28 = null;
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var30.unregisterPropertyOnType("Unversioned directory", var32);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    boolean var36 = var30.canPropertyBeDefined(var34, "BANG");
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.Node var39 = var30.createParameters(var38);
    com.google.javascript.rhino.jstype.JSType var40 = var27.evaluate(var28, var30);
    java.lang.Iterable var42 = var30.getTypesWithProperty("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    com.google.javascript.rhino.jstype.JSType var78 = var77.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.JSType var79 = var30.createDefaultObjectUnion(var78);
    com.google.javascript.rhino.jstype.JSType var80 = var1.createNullableType(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test375"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    java.lang.String var7 = var6.toStringTree();
    java.lang.Iterable var8 = var6.siblings();
    java.lang.String var9 = var6.toStringTree();
    java.lang.String var10 = var6.getString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var7.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var9.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi"+ "'", var10.equals("hi"));

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test376"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    java.lang.String var16 = var14.getDeprecationReason();
    boolean var17 = var14.isConsistentIdGenerator();
    com.google.javascript.rhino.Node var18 = var14.getAssociatedNode();
    boolean var19 = var18.isFalse();
    boolean var20 = var18.isSetterDef();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test377"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    boolean var17 = var14.hasType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getBaseType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test378"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    java.lang.String var79 = var73.getDisplayName();
    boolean var80 = var73.matchesStringContext();
    boolean var81 = var73.matchesObjectContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test379"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    java.util.Collection var3 = var0.getNodes();
    java.util.List var4 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.script(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test380() {}
//   public void test380() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test380"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getDependencies();
//     com.google.javascript.jscomp.SourceAst var12 = null;
//     com.google.javascript.rhino.InputId var13 = null;
//     com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12, var13, true);
//     com.google.javascript.jscomp.JSModule var16 = var15.getModule();
//     var10.add(var15);
//     com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var10.addFirst(var19);
//     java.util.Set var21 = var10.getAllDependencies();
//     var10.removeAll();
//     com.google.javascript.jscomp.SourceAst var23 = null;
//     com.google.javascript.rhino.InputId var24 = null;
//     com.google.javascript.jscomp.CompilerInput var26 = new com.google.javascript.jscomp.CompilerInput(var23, var24, true);
//     com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var23, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var10.addFirst(var29);
//     com.google.javascript.jscomp.SourceAst var31 = null;
//     com.google.javascript.rhino.InputId var32 = null;
//     com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31, var32, true);
//     com.google.javascript.jscomp.SourceAst var35 = var34.getAst();
//     com.google.javascript.jscomp.JSModule var36 = null;
//     var34.setModule(var36);
//     var10.add(var34);
//     var3.setModule(var10);
//     int var41 = var3.getLineOffset((-1));
// 
//   }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test381"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    boolean var60 = var58.matchesStringContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test382"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.resetWarningsGuard();
    var0.setOutputJsStringUsage(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test383"); }


    com.google.javascript.jscomp.CheckLevel var2 = null;
    com.google.javascript.jscomp.DiagnosticType var4 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var2, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var5 = new com.google.javascript.jscomp.DiagnosticType[] { var4};
    com.google.javascript.jscomp.DiagnosticGroup var6 = new com.google.javascript.jscomp.DiagnosticGroup(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    boolean var14 = var7.isExternExportsEnabled();
    var7.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var21 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make(var19, var21);
    int var23 = var22.getCharno();
    com.google.javascript.jscomp.CheckLevel var24 = var22.getDefaultLevel();
    var7.setReportUnknownTypes(var24);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var26 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var6, var24);
    java.lang.String var27 = var6.toString();
    com.google.javascript.jscomp.DiagnosticGroup[] var28 = new com.google.javascript.jscomp.DiagnosticGroup[] { var6};
    com.google.javascript.jscomp.DiagnosticGroup var29 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var28);
    com.google.javascript.jscomp.CompilerOptions var30 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var31 = null;
    var30.setStripTypes(var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.util.List var35 = var33.getEdges();
    var30.setManageClosureDependencies(var35);
    boolean var37 = var30.isExternExportsEnabled();
    var30.setCheckCaja(false);
    java.util.Set var40 = null;
    var30.setReplaceStringsReservedStrings(var40);
    com.google.javascript.rhino.JSDocInfoBuilder var43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var44 = var43.recordExpose();
    boolean var46 = var43.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.InputId var53 = com.google.javascript.jscomp.NodeUtil.getInputId(var50);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var50.setJSType(var54);
    com.google.javascript.rhino.JSDocInfo var56 = var43.build(var50);
    java.lang.String var57 = var56.getFileOverview();
    java.util.Set var58 = var56.getModifies();
    var30.setReplaceStringsReservedStrings(var58);
    var30.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var66 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var67 = com.google.javascript.jscomp.JSError.make(var64, var66);
    int var68 = var67.getCharno();
    com.google.javascript.jscomp.CheckLevel var69 = var67.getDefaultLevel();
    var30.setCheckGlobalThisLevel(var69);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var71 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var29, var69);
    java.lang.String var72 = var71.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "DiagnosticGroup<hi!>(ERROR)"+ "'", var72.equals("DiagnosticGroup<hi!>(ERROR)"));

  }

  public void test384() {}
//   public void test384() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test384"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setDevirtualizePrototypeMethods(true);
//     var0.setCollapsePropertiesOnExternTypes(false);
//     var0.setRemoveUnusedLocalVars(false);
//     var0.setInputDelimiter("module$2014$12$24 11:10");
//     com.google.javascript.jscomp.DiagnosticGroup var15 = null;
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var17 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var15, var16);
//     var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var17);
//     com.google.javascript.jscomp.CompilerOptions.Reach var19 = null;
//     var0.setInlineVariables(var19);
// 
//   }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test385"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    var0.setSyntheticBlockStartMarker("hi");
    var0.setCoalesceVariableNames(false);
    var0.setCoalesceVariableNames(true);
    var0.setInlineConstantVars(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test386"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    var14.setDeprecated(false);
    boolean var21 = var14.isInterface();
    java.lang.String var22 = var14.getFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test387"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d, 10, 0);
    boolean var4 = var3.isArrayLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test388"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    java.lang.String var20 = var14.getOriginalCommentString();
    boolean var21 = var14.isConsistentIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test389() {}
//   public void test389() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test389"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     var0.clearNodeAnnotations();
//     com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var4 = var3.recordExpose();
//     boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var11 = var10.getNext();
//     com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
//     com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var10.setJSType(var14);
//     com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
//     java.lang.String var17 = var16.getFileOverview();
//     boolean var18 = var16.hasFileOverview();
//     boolean var19 = var16.hasReturnType();
//     boolean var20 = var16.hasType();
//     boolean var21 = var16.shouldPreserveTry();
//     com.google.javascript.rhino.JSDocInfo.Visibility var22 = var16.getVisibility();
//     com.google.javascript.rhino.JSTypeExpression var23 = var16.getTypedefType();
//     com.google.javascript.jscomp.graph.GraphNode var24 = var0.createNode((java.lang.Object)var16);
//     var0.popNodeAnnotations();
// 
//   }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test390"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    boolean var90 = var48.hasCachedValues();
    boolean var91 = var48.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test391"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    com.google.javascript.jscomp.CompilerOptions var68 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var69 = null;
    var68.setStripTypes(var69);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var72 = var71.getDirectedGraphNodes();
    java.util.List var73 = var71.getEdges();
    var68.setManageClosureDependencies(var73);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.script(var73);
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.paramList(var73);
    var31.setImplementedInterfaces(var73);
    boolean var78 = var31.hasCachedValues();
    java.lang.String var79 = var31.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test392"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var6 = var4.withReturnType(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var8 = new com.google.javascript.rhino.jstype.FunctionBuilder(var7);
    com.google.javascript.rhino.jstype.FunctionBuilder var10 = var8.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var11 = var10.forConstructor();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.Node.newString(0, "hi!");
    var14.setVarArgs(false);
    com.google.javascript.rhino.jstype.FunctionBuilder var17 = var11.withSourceNode(var14);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.ErrorReporter var53 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var53);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var55 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var54);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    boolean var62 = var59.isVarArgs();
    com.google.javascript.rhino.Node var64 = var59.getChildAtIndex(1);
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = var68.getNext();
    com.google.javascript.rhino.Node var70 = var66.srcrefTree(var68);
    com.google.javascript.rhino.JSDocInfo var71 = var68.getJSDocInfo();
    com.google.javascript.rhino.Node var72 = var59.copyInformationFrom(var68);
    java.lang.Object var74 = null;
    var59.putProp(0, var74);
    com.google.javascript.rhino.JSTypeExpression var77 = new com.google.javascript.rhino.JSTypeExpression(var59, "()");
    com.google.javascript.rhino.jstype.StaticScope var78 = null;
    com.google.javascript.rhino.ErrorReporter var79 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var79);
    com.google.javascript.rhino.jstype.JSType var82 = null;
    var80.unregisterPropertyOnType("Unversioned directory", var82);
    com.google.javascript.rhino.jstype.JSType var84 = null;
    boolean var86 = var80.canPropertyBeDefined(var84, "BANG");
    com.google.javascript.rhino.jstype.JSType var87 = null;
    com.google.javascript.rhino.jstype.JSType[] var88 = new com.google.javascript.rhino.jstype.JSType[] { var87};
    com.google.javascript.rhino.Node var89 = var80.createParameters(var88);
    com.google.javascript.rhino.jstype.JSType var90 = var77.evaluate(var78, var80);
    boolean var91 = var55.addVarArgs(var90);
    com.google.javascript.rhino.jstype.JSType var92 = var52.getLeastSupertype(var90);
    boolean var93 = var92.isObject();
    boolean var94 = var92.isNoType();
    com.google.javascript.rhino.jstype.JSType var96 = var92.findPropertyType("BANG");
    boolean var97 = var96.isNominalConstructor();
    com.google.javascript.rhino.jstype.FunctionBuilder var98 = var17.withReturnType(var96);
    com.google.javascript.rhino.jstype.FunctionBuilder var99 = var4.withInferredReturnType(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test393"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    java.lang.String var71 = var31.getDisplayName();
    com.google.javascript.rhino.jstype.FunctionType var73 = var31.getBindReturnType(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test394"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var15 = var0.getAbstractMethodName();
    java.lang.String var16 = var0.getExportSymbolFunction();
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    boolean var23 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var21);
    int var24 = var21.getLength();
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var21.hasChild(var25);
    com.google.javascript.rhino.Node var27 = var19.useSourceInfoIfMissingFromForTree(var21);
    com.google.javascript.jscomp.CodingConvention.Bind var29 = var17.describeFunctionBind(var19, false);
    int var30 = var19.getSourcePosition();
    int var31 = var19.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    boolean var41 = var35.isBlock();
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    com.google.javascript.rhino.Node var50 = var45.getChildAtIndex(1);
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    com.google.javascript.rhino.JSDocInfo var57 = var54.getJSDocInfo();
    com.google.javascript.rhino.Node var58 = var45.copyInformationFrom(var54);
    com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var60 = null;
    var59.setStripTypes(var60);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var63 = var62.getDirectedGraphNodes();
    java.util.List var64 = var62.getEdges();
    var59.setManageClosureDependencies(var64);
    boolean var66 = var59.isExternExportsEnabled();
    var59.setCheckCaja(false);
    java.util.Set var69 = null;
    var59.setReplaceStringsReservedStrings(var69);
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    var59.setReplaceStringsReservedStrings(var87);
    var45.setDirectives(var87);
    com.google.javascript.rhino.Node var90 = var35.srcrefTree(var45);
    java.lang.String var91 = var0.extractClassNameIfProvide(var19, var45);
    boolean var93 = var0.isValidEnumKey("DiagnosticGroup<hi!>");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "goog.abstractMethod"+ "'", var15.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "goog.exportSymbol"+ "'", var16.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test395"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("LABEL_NAME hi!");
    boolean var2 = var1.wasEmptyNode();
    java.lang.Iterable var3 = var1.children();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test396"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    boolean var7 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var5);
    int var8 = var5.getLength();
    com.google.javascript.rhino.Node var9 = null;
    boolean var10 = var5.hasChild(var9);
    com.google.javascript.rhino.Node var11 = var3.useSourceInfoIfMissingFromForTree(var5);
    com.google.javascript.jscomp.CodingConvention.Bind var13 = var1.describeFunctionBind(var3, false);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.InputId var17 = var15.getInputId();
    boolean var18 = var15.hasChildren();
    java.util.List var19 = var1.identifyTypeDeclarationCall(var15);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isArrayLit();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    boolean var34 = var31.isVarArgs();
    com.google.javascript.rhino.Node var36 = var31.getChildAtIndex(1);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.JSDocInfo var43 = var40.getJSDocInfo();
    com.google.javascript.rhino.Node var44 = var31.copyInformationFrom(var40);
    boolean var45 = var23.hasChild(var40);
    boolean var46 = var23.isSwitch();
    var23.removeProp(0);
    boolean var49 = var1.isOptionalParameter(var23);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node((-19), var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test397"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var4.addChildrenToFront(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    com.google.javascript.rhino.InputId var17 = com.google.javascript.jscomp.NodeUtil.getInputId(var14);
    com.google.javascript.rhino.Node var18 = var4.useSourceInfoFrom(var14);
    com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var21 = var19.isConstantKey("2014/12/24 11:10");
    java.util.Collection var22 = var19.getAssertionFunctions();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var26 = var24.getBooleanProp((-1));
    var24.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var30 = new com.google.javascript.rhino.JSTypeExpression(var24, "goog.abstractMethod");
    boolean var31 = var19.isPrototypeAlias(var24);
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var19, "");
    com.google.javascript.rhino.Node var34 = var14.useSourceInfoIfMissingFrom(var33);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.InputId var41 = com.google.javascript.jscomp.NodeUtil.getInputId(var38);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    var38.setJSType(var42);
    boolean var44 = var38.isBlock();
    com.google.javascript.rhino.Node var45 = var38.getNext();
    boolean var46 = var38.isFromExterns();
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    int var50 = var48.getSourceOffset();
    boolean var51 = var48.isNE();
    int var52 = var48.getChildCount();
    boolean var53 = var38.isEquivalentToTyped(var48);
    boolean var54 = var34.hasChild(var48);
    boolean var55 = var34.hasOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test398"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var3.isSwitch();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    int var32 = var30.getSourceOffset();
    com.google.javascript.rhino.Node var33 = var30.cloneNode();
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    int var37 = var35.getSourceOffset();
    boolean var38 = var35.isAssignAdd();
    int var39 = var33.getIndexOfChild(var35);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.InputId var43 = var41.getInputId();
    com.google.javascript.rhino.Node var44 = var33.useSourceInfoFrom(var41);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    boolean var52 = var49.isVarArgs();
    boolean var53 = var49.isOptionalArg();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var55 = new com.google.javascript.rhino.Node(0, var49, var54);
    boolean var56 = var54.isQualifiedName();
    com.google.javascript.rhino.Node var57 = var54.cloneNode();
    com.google.javascript.rhino.Node var60 = new com.google.javascript.rhino.Node(153, var33, var57, 153, 1);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var64 = var62.getBooleanProp((-1));
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = var68.getNext();
    com.google.javascript.rhino.Node var70 = var66.srcrefTree(var68);
    com.google.javascript.rhino.Node var71 = var68.removeFirstChild();
    com.google.javascript.rhino.Node var72 = var62.useSourceInfoFromForTree(var68);
    boolean var73 = var62.isVar();
    com.google.javascript.rhino.Node var74 = var57.srcrefTree(var62);
    com.google.javascript.rhino.Node var77 = new com.google.javascript.rhino.Node(100, var62, 10, 0);
    com.google.javascript.rhino.Node var78 = var3.clonePropsFrom(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test399"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    var1.forwardDeclareType("");
    com.google.javascript.jscomp.JSModule var6 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var7 = var6.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var8 = new com.google.javascript.jscomp.ComposeWarningsGuard(var7);
    com.google.javascript.jscomp.JSModule[] var9 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var7);
    var1.setTemplateTypeNames(var7);
    boolean var12 = var1.isForwardDeclaredType("function (): {565834337}");
    com.google.javascript.jscomp.ClosureCodingConvention var13 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var14 = null;
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isOr();
    java.lang.String var22 = var13.extractClassNameIfRequire(var14, var18);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getDependencies();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.block(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var35.createFunctionTypeWithVarArgs(var39, var42);
    boolean var45 = var44.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.lang.Iterable var48 = var46.getDirectedGraphNodes();
    java.util.List var49 = var46.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var54 = var53.getDirectedGraphNodes();
    java.util.List var55 = var53.getEdges();
    var50.setManageClosureDependencies(var55);
    boolean var57 = var50.isExternExportsEnabled();
    var50.setCheckCaja(false);
    java.util.Set var60 = null;
    var50.setReplaceStringsReservedStrings(var60);
    var50.setAliasAllStrings(true);
    var50.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var70 = var69.getDirectedGraphNodes();
    java.util.List var71 = var69.getEdges();
    var66.setManageClosureDependencies(var71);
    boolean var73 = var66.isExternExportsEnabled();
    var66.setCheckCaja(false);
    var66.setGroupVariableDeclarations(true);
    java.util.Map var78 = var66.getDefineReplacements();
    var50.setPropertyInvalidationErrors(var78);
    var13.defineDelegateProxyPrototypeProperties(var24, (com.google.javascript.rhino.jstype.StaticScope)var44, var49, var78);
    boolean var81 = var44.canBeCalled();
    boolean var82 = var44.hasAnyTemplateInternal();
    boolean var83 = var44.canBeCalled();
    com.google.javascript.rhino.jstype.JSType var85 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var44, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test400() {}
//   public void test400() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test400"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var4);
//     var3.disableThreads();
//     java.lang.String var7 = var3.toSource();
// 
//   }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test401"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var21.setJSType(var22);
    boolean var24 = var21.isScript();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var29 = var28.isGetterDef();
    boolean var30 = var28.isAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.String var48 = var47.toStringTree();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var56 = var52.getBooleanProp(100);
    int var57 = var52.getSideEffectFlags();
    boolean var58 = var52.isDefaultCase();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(1, var28, var47, var52);
    java.lang.String var60 = var14.extractClassNameIfProvide(var21, var52);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    var0.setDebugFunctionSideEffectsPath("");
    var0.setIgnoreCajaProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var48.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test402"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.jscomp.ClosureCodingConvention var34 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    boolean var40 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var38);
    int var41 = var38.getLength();
    com.google.javascript.rhino.Node var42 = null;
    boolean var43 = var38.hasChild(var42);
    com.google.javascript.rhino.Node var44 = var36.useSourceInfoIfMissingFromForTree(var38);
    com.google.javascript.jscomp.CodingConvention.Bind var46 = var34.describeFunctionBind(var36, false);
    java.lang.String var47 = var34.getExportPropertyFunction();
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.JSDocInfo var54 = var51.getJSDocInfo();
    boolean var55 = var51.isSwitch();
    boolean var56 = var51.isSyntheticBlock();
    boolean var57 = var51.isNumber();
    boolean var58 = var34.isPrototypeAlias(var51);
    boolean var59 = var51.isName();
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    com.google.javascript.rhino.Node var65 = var61.srcrefTree(var63);
    boolean var66 = var63.isVarArgs();
    com.google.javascript.rhino.Node var68 = var63.getChildAtIndex(1);
    java.util.Collection var69 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var63);
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = var73.getNext();
    com.google.javascript.rhino.Node var75 = var71.srcrefTree(var73);
    boolean var77 = var73.getBooleanProp(100);
    int var78 = var73.getSideEffectFlags();
    boolean var79 = var73.isDefaultCase();
    com.google.javascript.rhino.jstype.JSType var80 = null;
    var73.setJSType(var80);
    boolean var82 = var63.isEquivalentTo(var73);
    boolean var83 = var73.isNot();
    java.lang.String var84 = var33.extractClassNameIfRequire(var51, var73);
    boolean var85 = var51.isGetElem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "goog.exportProperty"+ "'", var47.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test403"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    boolean var31 = var1.recordFileOverview("");
    boolean var32 = var1.recordNoTypeCheck();
    com.google.javascript.rhino.JSDocInfoBuilder var34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var35 = var34.recordExpose();
    boolean var36 = var34.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var38 = null;
    boolean var39 = var34.recordParameter("Unversioned directory", var38);
    com.google.javascript.rhino.JSTypeExpression var40 = null;
    boolean var42 = var34.recordThrowDescription(var40, "");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.JSTypeExpression var65 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var64);
    com.google.javascript.rhino.Node var66 = var64.getRoot();
    boolean var67 = var34.recordImplementedInterface(var64);
    boolean var68 = var1.recordExtendedInterface(var64);
    boolean var69 = var1.recordExpose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test404"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    var1.markAnnotation("goog.exportProperty", 0, 1);
    boolean var6 = var1.recordExpose();
    com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var9 = var8.recordExpose();
    boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var15.setJSType(var19);
    com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
    java.util.List var22 = var21.getThrownTypes();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isOr();
    var21.setAssociatedNode(var26);
    java.util.Set var31 = var21.getParameterNames();
    boolean var32 = var1.recordSuppressions(var31);
    com.google.javascript.jscomp.JSModule[] var33 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test405"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var20.isNot();
    int var27 = var20.getChildCount();
    com.google.javascript.rhino.Node.AncestorIterable var28 = var20.getAncestors();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var30 = var29.getDirectives();
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.NodeUtil.newExpr(var29);
    com.google.javascript.rhino.Node var32 = var31.cloneTree();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.labelName("hi!");
    var34.setLineno(0);
    com.google.javascript.rhino.Node var37 = var34.cloneTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.addChildBefore(var32, var34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test406"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("function (): {1466095799}", "DiagnosticGroup<hi!>(ERROR)", var2);
// 
//   }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test407"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isOptionalArg();
    java.lang.String var11 = var3.toString(false, false, true);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var14 = var13.isGetterDef();
    boolean var15 = var13.isNE();
    boolean var16 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var13);
    var13.removeProp(0);
    com.google.javascript.rhino.Node var19 = var3.srcrefTree(var13);
    boolean var20 = var19.isVar();
    boolean var21 = var19.isThis();
    boolean var22 = var19.isContinue();
    boolean var23 = var19.isOnlyModifiesThisCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "BANG"+ "'", var11.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test408"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    var65.unregisterPropertyOnType("Unversioned directory", var67);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.jscomp.JSModule var71 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var72 = var71.getDependencies();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.block(var72);
    com.google.javascript.rhino.jstype.FunctionType var74 = var65.createFunctionTypeWithVarArgs(var69, var72);
    boolean var76 = var74.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var77 = var74.toMaybeEnumType();
    var1.unregisterPropertyOnType("module$2014$12$24 11:10", (com.google.javascript.rhino.jstype.JSType)var74);
    com.google.javascript.rhino.jstype.FunctionType var80 = var74.getBindReturnType(154);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test409"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    boolean var7 = var0.isSuperClassReference("goog.abstractMethod");
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var11.setJSType(var12);
    boolean var14 = var11.isScript();
    com.google.javascript.rhino.Node var15 = var11.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var16 = var0.getDelegateRelationship(var11);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.jscomp.GoogleCodingConvention var18 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var20 = var18.isPrivate("(STRING hi 0 [length: 2]\n)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test410"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setMarkNoSideEffectCalls(false);
    var0.setLooseTypes(true);
    com.google.javascript.jscomp.MessageBundle var19 = null;
    var0.setMessageBundle(var19);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var30.setJSType(var31);
    boolean var33 = var30.isScript();
    com.google.javascript.rhino.Node var34 = var30.removeFirstChild();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var38 = var37.isGetterDef();
    boolean var39 = var37.isAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    boolean var46 = var43.isVarArgs();
    com.google.javascript.rhino.Node var48 = var43.getChildAtIndex(1);
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    com.google.javascript.rhino.JSDocInfo var55 = var52.getJSDocInfo();
    com.google.javascript.rhino.Node var56 = var43.copyInformationFrom(var52);
    java.lang.String var57 = var56.toStringTree();
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    boolean var65 = var61.getBooleanProp(100);
    int var66 = var61.getSideEffectFlags();
    boolean var67 = var61.isDefaultCase();
    com.google.javascript.rhino.Node var68 = new com.google.javascript.rhino.Node(1, var37, var56, var61);
    java.lang.String var69 = var23.extractClassNameIfProvide(var30, var61);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var57.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test411"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d, 3, 0);
    boolean var4 = var3.isIf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test412"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var11 = var0.getTweakProcessing();
    var0.setCollapseVariableDeclarations(false);
    var0.setCommonJSModulePathPrefix("function (): {540092593}");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var16 = var0.getLanguageIn();
    java.lang.Class var17 = var16.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var19 = java.lang.Enum.<java.lang.Enum>valueOf(var17, "function (): {1852005172}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test413"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.JSDocInfo var7 = var4.getJSDocInfo();
    boolean var8 = var4.isWhile();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    int var15 = var14.getSourceOffset();
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node((-1), var4, var14, 3, 2);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isOptionalArg();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var29 = new com.google.javascript.rhino.Node(0, var23, var28);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    boolean var36 = var31.isString();
    com.google.javascript.rhino.Node var37 = var29.useSourceInfoFromForTree(var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = var42.getNext();
    int var44 = var42.getSourceOffset();
    com.google.javascript.rhino.Node var45 = var42.removeFirstChild();
    com.google.javascript.jscomp.graph.GraphNode var46 = var38.getNode((java.lang.Object)var42);
    boolean var47 = var31.hasChild(var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.doNode(var18, var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test414"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.JSDocInfo var7 = var4.getJSDocInfo();
    boolean var8 = var4.isWhile();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    int var15 = var14.getSourceOffset();
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node((-1), var4, var14, 3, 2);
    boolean var19 = var18.isScript();
    com.google.javascript.rhino.Node var20 = var18.getLastChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test415"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(10.0d, 153, 154);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test416"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setFoldConstants(false);
    var0.setAssumeStrictThis(false);
    boolean var15 = var0.assumeStrictThis();
    com.google.javascript.jscomp.SourceMap.Format var16 = null;
    var0.setSourceMapFormat(var16);
    var0.resetWarningsGuard();
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var20 = null;
    var19.setStripTypes(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var23 = var22.getDirectedGraphNodes();
    java.util.List var24 = var22.getEdges();
    var19.setManageClosureDependencies(var24);
    var19.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var19.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var31 = null;
    var19.setSourceMapDetailLevel(var31);
    var19.setInlineLocalFunctions(true);
    com.google.javascript.rhino.JSDocInfoBuilder var36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var37 = var36.recordExpose();
    boolean var39 = var36.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.InputId var46 = com.google.javascript.jscomp.NodeUtil.getInputId(var43);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    var43.setJSType(var47);
    com.google.javascript.rhino.JSDocInfo var49 = var36.build(var43);
    java.lang.String var50 = var49.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var51 = var49.getType();
    java.util.Set var52 = var49.getSuppressions();
    var19.setExtraAnnotationNames(var52);
    var0.setExtraAnnotationNames(var52);
    java.lang.Object var55 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test417"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    var4.unregisterPropertyOnType("Unversioned directory", var6);
    var4.identifyNonNullableName("2014/12/24 11:10");
    var4.clearTemplateTypeNames();
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var12 = null;
    var11.setStripTypes(var12);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var15 = var14.getDirectedGraphNodes();
    java.util.List var16 = var14.getEdges();
    var11.setManageClosureDependencies(var16);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.script(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.paramList(var16);
    com.google.javascript.rhino.Node var20 = var4.createParameters(var16);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    boolean var23 = var4.canPropertyBeDefined(var21, "function (): ?");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var0.getDirectedGraphNode((java.lang.Object)var4);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var4.unregisterPropertyOnType("goog.exportSymbol", var26);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var36 = var35.getDependencies();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.block(var36);
    com.google.javascript.rhino.jstype.FunctionType var38 = var29.createFunctionTypeWithVarArgs(var33, var36);
    boolean var39 = var38.hasCachedValues();
    java.util.Set var40 = var38.getPropertyNames();
    com.google.javascript.rhino.jstype.JSType var45 = var4.getType((com.google.javascript.rhino.jstype.StaticScope)var38, "InputId: ", "", 0, 0);
    com.google.javascript.rhino.JSDocInfoBuilder var47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var48 = var47.recordExpose();
    boolean var50 = var47.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    com.google.javascript.rhino.InputId var57 = com.google.javascript.jscomp.NodeUtil.getInputId(var54);
    com.google.javascript.rhino.jstype.JSType var58 = null;
    var54.setJSType(var58);
    com.google.javascript.rhino.JSDocInfo var60 = var47.build(var54);
    java.lang.String var61 = var60.getFileOverview();
    boolean var62 = var60.hasFileOverview();
    boolean var63 = var60.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var64 = var60.getType();
    boolean var65 = var60.hasThisType();
    com.google.common.collect.ImmutableList var66 = var60.getTemplateTypeNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var38.setExtendedInterfaces((java.util.List)var66);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test418"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isOptionalArg();
    java.lang.String var11 = var3.toString(false, false, true);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var14 = var13.isGetterDef();
    boolean var15 = var13.isNE();
    boolean var16 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var13);
    var13.removeProp(0);
    com.google.javascript.rhino.Node var19 = var3.srcrefTree(var13);
    boolean var20 = var13.isSwitch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "BANG"+ "'", var11.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test419"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.StaticScope var32 = null;
    com.google.javascript.rhino.jstype.JSType var33 = var24.resolve(var31, var32);
    com.google.javascript.rhino.jstype.JSType var34 = var24.getReturnType();
    boolean var35 = var24.hasImplementedInterfaces();
    java.lang.Iterable var36 = var24.getAllExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test420"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var1 = var0.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var3 = var0.getReverseAbstractInterpreter();
// 
//   }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test421"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var4 = var3.getNext();
//     com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
//     boolean var7 = var3.getBooleanProp(100);
//     int var8 = var3.getSideEffectFlags();
//     var3.setSourceEncodedPositionForTree(154);
//     com.google.javascript.rhino.Node var11 = null;
//     com.google.javascript.rhino.Node var12 = var3.copyInformationFromForTree(var11);
// 
//   }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test422"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    boolean var16 = var0.getInferTypes();
    com.google.javascript.jscomp.SourceMap.Format var17 = null;
    var0.setSourceMapFormat(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test423"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var3 = null;
    var2.setResolveMode(var3);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var2);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.block(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var7.createFunctionTypeWithVarArgs(var11, var14);
    boolean var17 = var16.hasAnyTemplateInternal();
    java.lang.Iterable var18 = var16.getAllExtendedInterfaces();
    boolean var19 = var16.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    boolean var32 = var30.removeProperty("null(null)");
    var16.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var30);
    com.google.javascript.rhino.jstype.JSType var35 = var2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var30, "hi!");
    boolean var36 = var30.matchesInt32Context();
    var30.clearCachedValues();
    boolean var38 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var0, (com.google.javascript.rhino.jstype.JSType)var30);
    java.lang.Iterable var39 = var30.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test424"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("{proxy:{1612771089}}", "hi");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test425() {}
//   public void test425() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test425"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var5 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var5);
//     com.google.javascript.rhino.Node var8 = null;
//     com.google.javascript.jscomp.CheckLevel var10 = null;
//     com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var10, "");
//     com.google.javascript.jscomp.CheckLevel var14 = null;
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var14, "");
//     int var17 = var12.compareTo(var16);
//     java.lang.String[] var19 = new java.lang.String[] { "(module$2014$12$24 11:10)"};
//     com.google.javascript.jscomp.JSError var20 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", var8, var16, var19);
//     java.lang.String var21 = var6.formatError(var20);
// 
//   }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test426"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setTweakToNumberLiteral("INHERITED", (-1));
    var0.setCheckSymbols(false);
    var0.setExternExportsPath("null(null)");
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions var24 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var25 = null;
    var24.setStripTypes(var25);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var27 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var28 = var27.getDirectedGraphNodes();
    java.util.List var29 = var27.getEdges();
    var24.setManageClosureDependencies(var29);
    var24.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var24.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.CompilerOptions var36 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var37 = null;
    var36.setStripTypes(var37);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var40 = var39.getDirectedGraphNodes();
    java.util.List var41 = var39.getEdges();
    var36.setManageClosureDependencies(var41);
    boolean var43 = var36.isExternExportsEnabled();
    var36.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var50 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make(var48, var50);
    int var52 = var51.getCharno();
    com.google.javascript.jscomp.CheckLevel var53 = var51.getDefaultLevel();
    var36.setReportUnknownTypes(var53);
    var36.setAmbiguateProperties(true);
    com.google.javascript.rhino.JSDocInfoBuilder var58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var59 = var58.recordExpose();
    boolean var61 = var58.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    com.google.javascript.rhino.InputId var68 = com.google.javascript.jscomp.NodeUtil.getInputId(var65);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var65.setJSType(var69);
    com.google.javascript.rhino.JSDocInfo var71 = var58.build(var65);
    java.lang.String var72 = var71.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var73 = var71.getType();
    java.util.Set var74 = var71.getSuppressions();
    var36.setStripTypePrefixes(var74);
    var36.setRewriteFunctionExpressions(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var78 = var36.getLanguageIn();
    java.util.Map var79 = var36.getDefineReplacements();
    var24.setDefineReplacements(var79);
    var0.setPropertyInvalidationErrors(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test427"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var21.setJSType(var22);
    boolean var24 = var21.isScript();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var29 = var28.isGetterDef();
    boolean var30 = var28.isAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.String var48 = var47.toStringTree();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var56 = var52.getBooleanProp(100);
    int var57 = var52.getSideEffectFlags();
    boolean var58 = var52.isDefaultCase();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(1, var28, var47, var52);
    java.lang.String var60 = var14.extractClassNameIfProvide(var21, var52);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    var0.setInlineVariables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var48.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test428"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isOptionalArg();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(0, var11, var16);
    var16.setSourceEncodedPositionForTree(0);
    boolean var20 = var16.isHook();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.propdef(var1, var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test429"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    boolean var10 = var0.shouldColorizeErrorOutput();
    com.google.common.collect.Multimap var11 = null;
    var0.setCustomPasses(var11);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCheckCaja(false);
    java.util.Set var23 = null;
    var13.setReplaceStringsReservedStrings(var23);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.lang.String var40 = var39.getFileOverview();
    java.util.Set var41 = var39.getModifies();
    var13.setReplaceStringsReservedStrings(var41);
    var13.setGroupVariableDeclarations(false);
    var13.setInferTypes(true);
    var13.setInlineProperties(false);
    java.util.Map var49 = var13.getDefineReplacements();
    var0.setTweakReplacements(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test430"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    java.util.List var19 = var14.getImplementedInterfaces();
    java.lang.String var20 = var14.getDeprecationReason();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "2014/12/24 11:10"+ "'", var20.equals("2014/12/24 11:10"));

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test431"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    boolean var25 = var23.isWhile();
    com.google.javascript.rhino.Node var26 = var23.getLastChild();
    com.google.javascript.rhino.Node var27 = var26.detachFromParent();
    int var28 = var27.getCharno();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test432"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var72 = var56.isPropertyInExterns("goog.exportSymbol");
    boolean var73 = var56.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.EnumElementType var74 = var56.getElementsType();
    com.google.javascript.rhino.jstype.JSType var75 = var56.getIndexType();
    boolean var76 = var56.matchesObjectContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test433"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getInputs();
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getDependencies();
    com.google.javascript.jscomp.SourceAst var7 = null;
    com.google.javascript.rhino.InputId var8 = null;
    com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput(var7, var8, true);
    com.google.javascript.jscomp.JSModule var11 = var10.getModule();
    var5.add(var10);
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var5.addFirst(var14);
    java.util.Set var16 = var5.getAllDependencies();
    var5.removeAll();
    com.google.javascript.jscomp.SourceAst var18 = null;
    com.google.javascript.rhino.InputId var19 = null;
    com.google.javascript.jscomp.CompilerInput var21 = new com.google.javascript.jscomp.CompilerInput(var18, var19, true);
    com.google.javascript.jscomp.CompilerInput var24 = new com.google.javascript.jscomp.CompilerInput(var18, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var5.addFirst(var24);
    boolean var26 = var24.isExtern();
    com.google.javascript.jscomp.SourceAst var27 = var24.getSourceAst();
    java.lang.String var28 = var24.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.add(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var28.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test434"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
    com.google.javascript.rhino.ErrorReporter var9 = var1.getErrorReporter();
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isOr();
    java.lang.String var19 = var10.extractClassNameIfRequire(var11, var15);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var32.unregisterPropertyOnType("Unversioned directory", var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.JSModule var38 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var39 = var38.getDependencies();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.block(var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var32.createFunctionTypeWithVarArgs(var36, var39);
    boolean var42 = var41.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.lang.Iterable var45 = var43.getDirectedGraphNodes();
    java.util.List var46 = var43.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    var47.setAliasAllStrings(true);
    var47.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var64 = null;
    var63.setStripTypes(var64);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var67 = var66.getDirectedGraphNodes();
    java.util.List var68 = var66.getEdges();
    var63.setManageClosureDependencies(var68);
    boolean var70 = var63.isExternExportsEnabled();
    var63.setCheckCaja(false);
    var63.setGroupVariableDeclarations(true);
    java.util.Map var75 = var63.getDefineReplacements();
    var47.setPropertyInvalidationErrors(var75);
    var10.defineDelegateProxyPrototypeProperties(var21, (com.google.javascript.rhino.jstype.StaticScope)var41, var46, var75);
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var41);
    com.google.javascript.rhino.JSDocInfo var79 = var41.getJSDocInfo();
    com.google.javascript.rhino.jstype.FunctionType var80 = var41.toMaybeFunctionType();
    com.google.javascript.rhino.JSDocInfo var82 = var41.getOwnPropertyJSDocInfo("function (): {1342422305}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test435"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var5 = var4.hasOneChild();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    boolean var11 = var10.isArrayLit();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(0, var4, var9, var10, var15, 1, 100);
    int var23 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var0.useSourceInfoFromForTree(var15);
    boolean var25 = var15.isName();
    com.google.javascript.rhino.InputId var26 = var15.getInputId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test436"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var8 = var6.isConstantKey("2014/12/24 11:10");
    java.util.Collection var9 = var6.getAssertionFunctions();
    java.lang.String var10 = var6.getAbstractMethodName();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var15, var20);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var22 = var6.getClassesDefinedByCall(var15);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    boolean var28 = var23.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isOptionalArg();
    java.lang.String var40 = var32.toString(false, false, true);
    java.util.List var41 = var23.identifyTypeDeclarationCall(var32);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var42 = var6.getClassesDefinedByCall(var32);
    java.lang.String var43 = var3.extractClassNameIfRequire(var5, var32);
    boolean var44 = var32.isRegExp();
    java.lang.String var45 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var32);
    boolean var46 = var32.isNoSideEffectsCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var32.setDouble((-1.0d));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "goog.abstractMethod"+ "'", var10.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "BANG"+ "'", var40.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test437"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var19 = var14.getDescriptionForParameter("");
    java.util.Set var20 = var14.getParameterNames();
    boolean var21 = var14.hasReturnType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test438"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var6 = var4.setMoocherDropping(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test439"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.jscomp.deps.SortedDependencies var42 = new com.google.javascript.jscomp.deps.SortedDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var45 = var44.recordExpose();
    boolean var47 = var44.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.InputId var54 = com.google.javascript.jscomp.NodeUtil.getInputId(var51);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var51.setJSType(var55);
    com.google.javascript.rhino.JSDocInfo var57 = var44.build(var51);
    java.lang.String var58 = var57.getFileOverview();
    java.util.Set var59 = var57.getModifies();
    java.util.List var60 = var57.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var61 = var57.getType();
    java.util.List var62 = var57.getImplementedInterfaces();
    java.util.List var63 = var42.getSortedDependenciesOf(var62);
    java.util.List var64 = var42.getInputsWithoutProvides();
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    int var68 = var66.getSourceOffset();
    boolean var69 = var66.isNE();
    int var70 = var66.getChildCount();
    com.google.javascript.jscomp.JSModule var73 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var74 = var73.getDependencies();
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.block(var74);
    var66.putProp(0, (java.lang.Object)var74);
    java.util.List var78 = var42.getDependenciesOf(var74, true);
    com.google.javascript.jscomp.deps.DependencyInfo var80 = var42.maybeGetInputProviding("module$ERROR");
    java.util.List var81 = var42.getSortedList();
    com.google.javascript.jscomp.deps.DependencyInfo var83 = var42.maybeGetInputProviding("hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test440"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setTightenTypes(false);
    var0.setTweakToDoubleLiteral("2014/12/24 11:10", 10.0d);
    var0.setRemoveUnusedLocalVars(true);
    com.google.javascript.jscomp.DependencyOptions var17 = new com.google.javascript.jscomp.DependencyOptions();
    var0.setDependencyOptions(var17);
    com.google.javascript.jscomp.ErrorFormat var19 = null;
    var0.setErrorFormat(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test441"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var51 = var49.getBooleanProp((-1));
    var49.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var49, "goog.abstractMethod");
    boolean var57 = var1.recordThrowDescription(var55, "STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var58 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var59 = null;
    var58.setStripTypes(var59);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var61 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var62 = var61.getDirectedGraphNodes();
    java.util.List var63 = var61.getEdges();
    var58.setManageClosureDependencies(var63);
    boolean var65 = var58.isExternExportsEnabled();
    var58.setCheckCaja(false);
    java.util.Set var68 = null;
    var58.setReplaceStringsReservedStrings(var68);
    com.google.javascript.rhino.JSDocInfoBuilder var71 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var72 = var71.recordExpose();
    boolean var74 = var71.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = var78.getNext();
    com.google.javascript.rhino.Node var80 = var76.srcrefTree(var78);
    com.google.javascript.rhino.InputId var81 = com.google.javascript.jscomp.NodeUtil.getInputId(var78);
    com.google.javascript.rhino.jstype.JSType var82 = null;
    var78.setJSType(var82);
    com.google.javascript.rhino.JSDocInfo var84 = var71.build(var78);
    java.lang.String var85 = var84.getFileOverview();
    java.util.Set var86 = var84.getModifies();
    var58.setReplaceStringsReservedStrings(var86);
    var58.setGroupVariableDeclarations(false);
    com.google.javascript.jscomp.CheckLevel var90 = null;
    var58.setCheckRequires(var90);
    java.util.logging.Logger var92 = null;
    com.google.javascript.jscomp.LoggerErrorManager var93 = new com.google.javascript.jscomp.LoggerErrorManager(var92);
    com.google.javascript.jscomp.JSError[] var94 = var93.getWarnings();
    var58.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var93);
    boolean var96 = var55.equals((java.lang.Object)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test442"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var21.setJSType(var22);
    boolean var24 = var21.isScript();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var29 = var28.isGetterDef();
    boolean var30 = var28.isAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.String var48 = var47.toStringTree();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var56 = var52.getBooleanProp(100);
    int var57 = var52.getSideEffectFlags();
    boolean var58 = var52.isDefaultCase();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(1, var28, var47, var52);
    java.lang.String var60 = var14.extractClassNameIfProvide(var21, var52);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    com.google.javascript.jscomp.CompilerOptions var62 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var63 = null;
    var62.setStripTypes(var63);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var66 = var65.getDirectedGraphNodes();
    java.util.List var67 = var65.getEdges();
    var62.setManageClosureDependencies(var67);
    var62.setDevirtualizePrototypeMethods(true);
    var62.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var73 = var62.getTweakProcessing();
    var62.setCollapseVariableDeclarations(false);
    var62.setCommonJSModulePathPrefix("function (): {540092593}");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var78 = var62.getLanguageIn();
    java.lang.Class var79 = var78.getDeclaringClass();
    java.lang.Class var80 = var78.getDeclaringClass();
    var0.setLanguageIn(var78);
    var0.setCheckControlStructures(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var48.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test443"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var72 = var56.isPropertyInExterns("goog.exportSymbol");
    boolean var73 = var56.isNumberValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test444() {}
//   public void test444() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test444"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var3 = var1.getBooleanProp((-1));
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = var7.getNext();
//     com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
//     com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
//     com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     boolean var18 = var17.isGetterDef();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString(0, "hi!");
//     boolean var23 = var22.hasOneChild();
//     com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.returnNode();
//     boolean var29 = var28.isArrayLit();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var34 = var33.getNext();
//     com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
//     boolean var36 = var33.isVarArgs();
//     boolean var37 = var33.isOptionalArg();
//     com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(0, var22, var27, var28, var33, 1, 100);
//     java.lang.String var41 = var28.getQualifiedName();
//     boolean var42 = var28.isHook();
//     int var43 = var28.getSourceOffset();
//     var28.removeProp(1);
//     com.google.javascript.rhino.Node var46 = var17.useSourceInfoFrom(var28);
//     boolean var47 = var46.isLabelName();
//     var7.removeChild(var46);
// 
//   }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test445"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    boolean var19 = var9.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test446"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setRemoveUnusedLocalVars(true);
    var0.setInputDelimiter("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)");
    var0.setReplaceStringsPlaceholderToken("(hi)");

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test447"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
    com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var13 = null;
    var12.setStripTypes(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var16 = var15.getDirectedGraphNodes();
    java.util.List var17 = var15.getEdges();
    var12.setManageClosureDependencies(var17);
    boolean var19 = var12.isExternExportsEnabled();
    var12.setCollapsePropertiesOnExternTypes(false);
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = var3.getTypeRegistry();
    com.google.javascript.rhino.jstype.ObjectType var24 = var23.createAnonymousObjectType();
    boolean var25 = var24.isNativeObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test448"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    var4.unregisterPropertyOnType("Unversioned directory", var6);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var11 = var10.getDependencies();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.block(var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var4.createFunctionTypeWithVarArgs(var8, var11);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var16 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.Object var35 = null;
    var20.putProp(0, var35);
    com.google.javascript.rhino.JSTypeExpression var38 = new com.google.javascript.rhino.JSTypeExpression(var20, "()");
    com.google.javascript.rhino.jstype.StaticScope var39 = null;
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.unregisterPropertyOnType("Unversioned directory", var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
    com.google.javascript.rhino.jstype.JSType var51 = var38.evaluate(var39, var41);
    boolean var52 = var16.addVarArgs(var51);
    boolean var53 = var51.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.FunctionType var65 = var4.createConstructorType(var51, var63);
    com.google.javascript.rhino.jstype.JSType var67 = var65.getPropertyType("");
    boolean var68 = var1.declareType("(module$2014$12$24 11:10)", var67);
    boolean var69 = var67.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test449"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.block(var26);
    boolean var43 = var42.isArrayLit();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    com.google.javascript.rhino.Node var49 = var47.getAncestor(10);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    boolean var57 = var53.isArrayLit();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var60 = var59.isGetterDef();
    var59.putIntProp((-1), 10);
    var53.addChildrenToFront(var59);
    int var65 = var59.getLength();
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = var69.getNext();
    com.google.javascript.rhino.Node var71 = var67.srcrefTree(var69);
    com.google.javascript.rhino.Node var72 = var69.removeFirstChild();
    com.google.javascript.rhino.Node var73 = var59.useSourceInfoFromForTree(var69);
    boolean var74 = var59.isDebugger();
    com.google.javascript.rhino.Node var75 = var59.removeFirstChild();
    com.google.javascript.rhino.Node var76 = var47.srcrefTree(var59);
    boolean var77 = var59.isNoSideEffectsCall();
    com.google.javascript.rhino.JSTypeExpression var79 = new com.google.javascript.rhino.JSTypeExpression(var59, "function (): ?");
    com.google.javascript.rhino.Node var80 = var42.clonePropsFrom(var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var81 = var42.toStringTree();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test450"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test451"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    var24.setCharno(100);
    com.google.javascript.rhino.Node var36 = var24.getAncestor(0);
    boolean var37 = var24.isScript();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.NodeUtil.newExpr(var24);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test452"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("goog.abstractMethod", var1, "null(null)");
    com.google.javascript.jscomp.DiagnosticGroup var4 = com.google.javascript.jscomp.DiagnosticGroup.forType(var3);
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var9 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var10 = com.google.javascript.jscomp.JSError.make(var7, var9);
    int var11 = var10.getCharno();
    boolean var12 = var4.matches(var10);
    java.lang.String var13 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)"+ "'", var13.equals("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)"));

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test453"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "Unversioned directory");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var0.getDirectedGraphNode((java.lang.Object)"hi!");
    java.util.Collection var9 = var0.getNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.util.List var25 = var24.getThrownTypes();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isOr();
    var24.setAssociatedNode(var29);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var34 = var0.getDirectedGraphNode((java.lang.Object)var24);
    com.google.javascript.jscomp.graph.SubGraph var35 = var0.newSubGraph();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test454"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("Unversioned directory: ", "{160498324}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test455"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    com.google.javascript.rhino.jstype.ObjectType var80 = var73.getImplicitPrototype();
    com.google.javascript.rhino.jstype.ObjectType var81 = var73.getImplicitPrototype();
    boolean var82 = var73.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var83 = var73.getImplicitPrototype();
    java.util.Set var84 = var73.getElements();
    boolean var85 = var73.isCheckedUnknownType();
    boolean var86 = var73.hasDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test456"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var32 = var0.getLanguageOut();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    java.util.Collection var37 = var34.getNodes();
    java.util.List var38 = var34.getGraphvizEdges();
    var0.setReplaceStringsConfiguration("", var38);
    com.google.javascript.jscomp.JSModule[] var40 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test457"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    com.google.javascript.rhino.InputId var8 = com.google.javascript.jscomp.NodeUtil.getInputId(var5);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var5.setJSType(var9);
    var5.setCharno(153);
    com.google.javascript.rhino.Node[] var13 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(100, var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test458"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isVarArgs();
    com.google.javascript.rhino.Node var10 = var5.getChildAtIndex(1);
    com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(1, var11, 153, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(306, var11, 21, (-19));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test459"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getExportPropertyFunction();
    boolean var22 = var0.isValidEnumKey("InputId: ");
    java.util.Collection var23 = var0.getAssertionFunctions();
    java.util.Collection var24 = var0.getAssertionFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test460"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var19 = var14.getDescriptionForParameter("");
    boolean var20 = var14.hasEnumParameterType();
    java.util.List var21 = var14.getExtendedInterfaces();
    boolean var22 = var14.isNoShadow();
    boolean var23 = var14.isHidden();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test461"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckProvides(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var15 = var13.hasNode((java.lang.Object)1);
    java.util.List var16 = var13.getGraphvizEdges();
    java.lang.Iterable var17 = var13.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var18 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var19 = var18.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var20 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var18);
    com.google.javascript.jscomp.LightweightMessageFormatter var21 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var18);
    boolean var22 = var13.hasNode((java.lang.Object)var18);
    com.google.javascript.jscomp.MessageFormatter var23 = null;
    java.util.logging.Logger var24 = null;
    com.google.javascript.jscomp.LoggerErrorManager var25 = new com.google.javascript.jscomp.LoggerErrorManager(var23, var24);
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var25);
    com.google.javascript.jscomp.Scope var27 = var26.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var28 = null;
    com.google.javascript.jscomp.NodeTraversal var29 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var26, var28);
    com.google.javascript.jscomp.CompilerOptions var30 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var31 = null;
    var30.setStripTypes(var31);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.util.List var35 = var33.getEdges();
    var30.setManageClosureDependencies(var35);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.script(var35);
    var29.traverseRoots(var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var40 = var39.getDirectedGraphNodes();
    java.util.List var41 = var39.getEdges();
    com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
    var42.setChainCalls(true);
    java.util.logging.Logger var45 = null;
    com.google.javascript.jscomp.LoggerErrorManager var46 = new com.google.javascript.jscomp.LoggerErrorManager(var45);
    var42.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var46);
    var42.setGatherCssNames(false);
    var18.<com.google.javascript.jscomp.SourceFile>initModules(var35, var41, var42);
    var0.setSourceMapLocationMappings(var35);
    var0.setTightenTypes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + ""+ "'", var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test462"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    com.google.javascript.rhino.Node var39 = null;
    java.util.Map var40 = null;
    var33.checkForCallingConventionDefiningCalls(var39, var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test463"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var14.setDeprecated(false);
    boolean var17 = var14.isNoAlias();
    java.util.List var18 = var14.getImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test464"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var6 = var5.hasOneChild();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.returnNode();
    boolean var12 = var11.isArrayLit();
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    boolean var19 = var16.isVarArgs();
    boolean var20 = var16.isOptionalArg();
    com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(0, var5, var10, var11, var16, 1, 100);
    int var24 = var16.getSourceOffset();
    com.google.javascript.rhino.Node var25 = var1.useSourceInfoFromForTree(var16);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    boolean var33 = var30.isVarArgs();
    boolean var34 = var30.isOptionalArg();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(0, var30, var35);
    boolean var37 = var35.isQualifiedName();
    boolean var38 = var35.isAnd();
    boolean var39 = var35.isFalse();
    java.lang.Iterable var40 = var35.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.process(var1, var35);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test465"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setLineBreak(false);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test466"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    boolean var14 = var10.isFunctionPrototypeType();
    boolean var15 = var10.isNoType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test467() {}
//   public void test467() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test467"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
// 
//   }

  public void test468() {}
//   public void test468() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test468"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     var2.setTypedPercent(0.0d);
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("");
//     java.lang.String var8 = var7.getName();
//     java.lang.String[] var9 = var5.toSourceArray(var7);
// 
//   }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test469"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var7 = null;
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isOr();
    java.lang.String var15 = var6.extractClassNameIfRequire(var7, var11);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var17.unregisterPropertyOnType("Unversioned directory", var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.jscomp.JSModule var23 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var24 = var23.getDependencies();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.block(var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var17.createFunctionTypeWithVarArgs(var21, var24);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    boolean var38 = var37.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var40 = var39.getDirectedGraphNodes();
    java.lang.Iterable var41 = var39.getDirectedGraphNodes();
    java.util.List var42 = var39.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var44 = null;
    var43.setStripTypes(var44);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.util.List var48 = var46.getEdges();
    var43.setManageClosureDependencies(var48);
    boolean var50 = var43.isExternExportsEnabled();
    var43.setCheckCaja(false);
    java.util.Set var53 = null;
    var43.setReplaceStringsReservedStrings(var53);
    var43.setAliasAllStrings(true);
    var43.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var60 = null;
    var59.setStripTypes(var60);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var63 = var62.getDirectedGraphNodes();
    java.util.List var64 = var62.getEdges();
    var59.setManageClosureDependencies(var64);
    boolean var66 = var59.isExternExportsEnabled();
    var59.setCheckCaja(false);
    var59.setGroupVariableDeclarations(true);
    java.util.Map var71 = var59.getDefineReplacements();
    var43.setPropertyInvalidationErrors(var71);
    var6.defineDelegateProxyPrototypeProperties(var17, (com.google.javascript.rhino.jstype.StaticScope)var37, var42, var71);
    boolean var74 = var37.canBeCalled();
    boolean var75 = var37.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var76 = var37.getTypeOfThis();
    boolean var77 = var76.isNoObjectType();
    boolean var78 = var5.addVarArgs((com.google.javascript.rhino.jstype.JSType)var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test470"); }


    java.lang.String var1 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("InputId: InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$InputId: InputId: "+ "'", var1.equals("module$InputId: InputId: "));

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test471"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.ErrorReporter var75 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var75);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    var76.unregisterPropertyOnType("Unversioned directory", var78);
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.jscomp.JSModule var82 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var83 = var82.getDependencies();
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.block(var83);
    com.google.javascript.rhino.jstype.FunctionType var85 = var76.createFunctionTypeWithVarArgs(var80, var83);
    boolean var86 = var85.hasAnyTemplateInternal();
    java.lang.Iterable var87 = var85.getAllExtendedInterfaces();
    boolean var88 = var85.isEmptyType();
    java.util.Set var89 = var85.getOwnPropertyNames();
    var57.setAliasableStrings(var89);
    var57.setCheckSymbols(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test472"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(1, "enum{STRING hi 0 [length: 2]\n}");
    int var3 = var2.getSideEffectFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test473"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setDefineToBooleanLiteral("", true);
    var0.setRemoveUnusedVars(false);
    var0.setAssumeStrictThis(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test474() {}
//   public void test474() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test474"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     var3.setJSType(var4);
//     boolean var6 = var3.isScript();
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var12 = var10.getLineOfOffset(2);
//     var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var10);
//     com.google.javascript.jscomp.CompilerInput var14 = new com.google.javascript.jscomp.CompilerInput(var10);
//     var14.removeRequire("");
// 
//   }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test475"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setNameAnonymousFunctionsOnly(true);
    var0.setAliasKeywords(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test476"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
    com.google.javascript.rhino.ErrorReporter var9 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var12 = null;
    var11.setResolveMode(var12);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var14 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var11);
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var16.unregisterPropertyOnType("Unversioned directory", var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.block(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var16.createFunctionTypeWithVarArgs(var20, var23);
    boolean var26 = var25.hasAnyTemplateInternal();
    java.lang.Iterable var27 = var25.getAllExtendedInterfaces();
    boolean var28 = var25.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var30.unregisterPropertyOnType("Unversioned directory", var32);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.jscomp.JSModule var36 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var37 = var36.getDependencies();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.block(var37);
    com.google.javascript.rhino.jstype.FunctionType var39 = var30.createFunctionTypeWithVarArgs(var34, var37);
    boolean var41 = var39.removeProperty("null(null)");
    var25.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var39);
    com.google.javascript.rhino.jstype.JSType var44 = var11.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var39, "hi!");
    int var45 = var39.getExtendedInterfacesCount();
    com.google.javascript.rhino.jstype.ObjectType var46 = null;
    com.google.javascript.rhino.jstype.FunctionType var47 = var1.createFunctionTypeWithNewThisType(var39, var46);
    var1.resetForTypeCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test477"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isOr();
    java.lang.String var10 = var1.extractClassNameIfRequire(var2, var6);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.block(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var12.createFunctionTypeWithVarArgs(var16, var19);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var33 = var32.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.lang.Iterable var36 = var34.getDirectedGraphNodes();
    java.util.List var37 = var34.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var39 = null;
    var38.setStripTypes(var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    var38.setManageClosureDependencies(var43);
    boolean var45 = var38.isExternExportsEnabled();
    var38.setCheckCaja(false);
    java.util.Set var48 = null;
    var38.setReplaceStringsReservedStrings(var48);
    var38.setAliasAllStrings(true);
    var38.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    var54.setGroupVariableDeclarations(true);
    java.util.Map var66 = var54.getDefineReplacements();
    var38.setPropertyInvalidationErrors(var66);
    var1.defineDelegateProxyPrototypeProperties(var12, (com.google.javascript.rhino.jstype.StaticScope)var32, var37, var66);
    boolean var69 = var32.canBeCalled();
    boolean var70 = var32.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var71 = var32.getTypeOfThis();
    com.google.javascript.rhino.jstype.SimpleSlot var73 = new com.google.javascript.rhino.jstype.SimpleSlot("LABEL_NAME hi!", (com.google.javascript.rhino.jstype.JSType)var71, true);
    com.google.javascript.rhino.JSDocInfo var74 = var73.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test478"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setTightenTypes(true);
    var0.setProcessCommonJSModules(true);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    boolean var14 = var7.isExternExportsEnabled();
    var7.setCollapsePropertiesOnExternTypes(false);
    var7.setTransformAMDToCJSModules(false);
    var7.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var21 = var7.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var22 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var23 = null;
    var22.setStripTypes(var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var26 = var25.getDirectedGraphNodes();
    java.util.List var27 = var25.getEdges();
    var22.setManageClosureDependencies(var27);
    var22.setDevirtualizePrototypeMethods(true);
    var22.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var34 = null;
    var33.setBrokenClosureRequiresLevel(var34);
    var33.setLocale("");
    var33.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    var40.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var54 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make(var52, var54);
    int var56 = var55.getCharno();
    com.google.javascript.jscomp.CheckLevel var57 = var55.getDefaultLevel();
    var40.setReportUnknownTypes(var57);
    var33.setBrokenClosureRequiresLevel(var57);
    var22.setCheckUnreachableCode(var57);
    var7.setReportUnknownTypes(var57);
    com.google.javascript.jscomp.JSModule var63 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var64 = var63.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var65 = new com.google.javascript.jscomp.ComposeWarningsGuard(var64);
    com.google.javascript.jscomp.DiagnosticGroup var66 = null;
    boolean var67 = var65.enables(var66);
    var7.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var65);
    var0.setWarningsGuard(var65);
    boolean var70 = var0.getInferTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test479"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var20.isNot();
    int var27 = var20.getType();
    java.lang.String var28 = com.google.javascript.jscomp.NodeUtil.getSourceName(var20);
    boolean var29 = var20.isGetProp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 306);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test480"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    com.google.javascript.rhino.JSDocInfo var8 = var5.getJSDocInfo();
    boolean var9 = var5.isSwitch();
    boolean var10 = var5.isIf();
    com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(0, var11, 3, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(0, var11, 2, (-19));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test481"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var4 = var3.hasOneChild();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    boolean var10 = var9.isArrayLit();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
    boolean var22 = var8.isOr();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test482() {}
//   public void test482() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test482"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var6 = var5.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     boolean var9 = var0.hasNode((java.lang.Object)var5);
//     java.util.List var10 = var0.getEdges();
//     com.google.javascript.jscomp.ClosureCodingConvention var11 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var13 = var11.isConstantKey("2014/12/24 11:10");
//     com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var11);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newNumber(1.0d);
//     com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var19 = var17.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var20 = var17.getAssertionFunctions();
//     java.lang.String var21 = var17.getAbstractMethodName();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
//     boolean var29 = var26.isVarArgs();
//     boolean var30 = var26.isOptionalArg();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(0, var26, var31);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var33 = var17.getClassesDefinedByCall(var26);
//     com.google.javascript.jscomp.ClosureCodingConvention var34 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var36 = var34.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var37 = var34.getAssertionFunctions();
//     boolean var39 = var34.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var44 = var43.getNext();
//     com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
//     boolean var46 = var43.isVarArgs();
//     boolean var47 = var43.isOptionalArg();
//     java.lang.String var51 = var43.toString(false, false, true);
//     java.util.List var52 = var34.identifyTypeDeclarationCall(var43);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var53 = var17.getClassesDefinedByCall(var43);
//     java.lang.String var54 = var14.extractClassNameIfRequire(var16, var43);
//     boolean var55 = var0.hasNode((java.lang.Object)var43);
//     var0.popNodeAnnotations();
// 
//   }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test483"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearEdgeAnnotations();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    java.util.List var3 = var0.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var5 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var7 = var5.isConstantKey("2014/12/24 11:10");
    java.util.Collection var8 = var5.getAssertionFunctions();
    boolean var10 = var5.isConstant("Unversioned directory");
    com.google.javascript.jscomp.graph.GraphNode var11 = var4.createNode((java.lang.Object)var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var14 = var12.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    java.util.List var32 = var29.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var33 = var29.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var34 = var12.createDirectedGraphNode((java.lang.Object)var29);
    java.util.List var35 = var4.getNeighborNodes(var34);
    java.util.List var36 = var0.getNeighborNodes(var34);
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.JSDocInfoBuilder var39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var40 = var39.recordExpose();
    boolean var42 = var39.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.InputId var49 = com.google.javascript.jscomp.NodeUtil.getInputId(var46);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    var46.setJSType(var50);
    com.google.javascript.rhino.JSDocInfo var52 = var39.build(var46);
    java.lang.String var53 = var52.getFileOverview();
    boolean var54 = var52.hasFileOverview();
    boolean var55 = var52.hasReturnType();
    java.lang.String var57 = var52.getDescriptionForParameter("");
    boolean var58 = var52.hasEnumParameterType();
    java.lang.String var59 = var52.getDescription();
    boolean var60 = var52.isConstant();
    int var61 = var52.getImplementedInterfaceCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var62 = var0.getDirectedPredNodes((java.lang.Object)var52);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test484"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 1);
    com.google.javascript.rhino.Node var51 = var38.clonePropsFrom(var50);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.Node.newString("{proxy:{1743833346}}", 2, 153);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.not(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.label(var38, var56);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test485"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordMeaning("Unversioned directory");
    boolean var5 = var1.recordExport();
    boolean var7 = var1.recordDescription("BANG 0");
    com.google.javascript.rhino.JSDocInfoBuilder var9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var10 = var9.recordExpose();
    boolean var11 = var9.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var9.recordThrowDescription(var12, "()");
    boolean var16 = var9.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var17 = var9.recordConsistentIdGenerator();
    boolean var20 = var9.recordParameterDescription("LABEL_NAME hi!", "(LABEL_NAME hi!)");
    boolean var22 = var9.addAuthor("(LABEL_NAME hi!)");
    boolean var23 = var9.recordDeprecated();
    com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var26 = var25.recordExpose();
    boolean var28 = var25.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.InputId var35 = com.google.javascript.jscomp.NodeUtil.getInputId(var32);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var32.setJSType(var36);
    com.google.javascript.rhino.JSDocInfo var38 = var25.build(var32);
    java.util.List var39 = var38.getThrownTypes();
    java.lang.String var40 = var38.getDeprecationReason();
    java.lang.String var41 = var38.getReturnDescription();
    boolean var42 = var38.isNoSideEffects();
    com.google.javascript.rhino.JSDocInfo.Visibility var43 = var38.getVisibility();
    boolean var44 = var9.recordVisibility(var43);
    boolean var45 = var1.recordVisibility(var43);
    boolean var47 = var1.recordBlockDescription("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "2014/12/24 11:10"+ "'", var40.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test486"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    var0.setInlineGetters(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test487"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var1 = var0.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.ErrorManager var3 = var0.getErrorManager();
    com.google.javascript.jscomp.JSError[] var4 = var0.getMessages();
    boolean var5 = var0.hasErrors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test488"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    boolean var9 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var7);
    int var10 = var7.getLength();
    boolean var11 = var7.isInstanceOf();
    boolean var12 = var7.isName();
    com.google.javascript.jscomp.ClosureCodingConvention var13 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var14 = null;
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isOr();
    java.lang.String var22 = var13.extractClassNameIfRequire(var14, var18);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getDependencies();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.block(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var35.createFunctionTypeWithVarArgs(var39, var42);
    boolean var45 = var44.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.lang.Iterable var48 = var46.getDirectedGraphNodes();
    java.util.List var49 = var46.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var54 = var53.getDirectedGraphNodes();
    java.util.List var55 = var53.getEdges();
    var50.setManageClosureDependencies(var55);
    boolean var57 = var50.isExternExportsEnabled();
    var50.setCheckCaja(false);
    java.util.Set var60 = null;
    var50.setReplaceStringsReservedStrings(var60);
    var50.setAliasAllStrings(true);
    var50.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var70 = var69.getDirectedGraphNodes();
    java.util.List var71 = var69.getEdges();
    var66.setManageClosureDependencies(var71);
    boolean var73 = var66.isExternExportsEnabled();
    var66.setCheckCaja(false);
    var66.setGroupVariableDeclarations(true);
    java.util.Map var78 = var66.getDefineReplacements();
    var50.setPropertyInvalidationErrors(var78);
    var13.defineDelegateProxyPrototypeProperties(var24, (com.google.javascript.rhino.jstype.StaticScope)var44, var49, var78);
    boolean var81 = var44.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var83 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var44, "BANG");
    com.google.javascript.rhino.jstype.FunctionType var84 = var44.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.ObjectType var85 = var1.createObjectType("()", var7, (com.google.javascript.rhino.jstype.ObjectType)var44);
    com.google.javascript.rhino.JSDocInfo var86 = var44.getJSDocInfo();
    boolean var87 = var44.isOrdinaryFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test489"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordMeaning("Unversioned directory");
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    boolean var32 = var6.recordSuppressions(var31);
    com.google.javascript.rhino.JSDocInfoBuilder var34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var35 = var34.recordExpose();
    boolean var36 = var34.recordExterns();
    boolean var37 = var34.recordNoShadow();
    boolean var39 = var34.recordReturnDescription("()");
    boolean var41 = var34.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var45 = var44.recordExpose();
    boolean var46 = var44.recordExterns();
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    boolean var54 = var50.isArrayLit();
    com.google.javascript.rhino.Node var55 = var50.getNext();
    var44.markTypeNode(var50, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    boolean var68 = var65.isVarArgs();
    com.google.javascript.rhino.Node var70 = var65.getChildAtIndex(1);
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = var74.getNext();
    com.google.javascript.rhino.Node var76 = var72.srcrefTree(var74);
    com.google.javascript.rhino.JSDocInfo var77 = var74.getJSDocInfo();
    com.google.javascript.rhino.Node var78 = var65.copyInformationFrom(var74);
    java.lang.Object var80 = null;
    var65.putProp(0, var80);
    com.google.javascript.rhino.JSTypeExpression var83 = new com.google.javascript.rhino.JSTypeExpression(var65, "()");
    com.google.javascript.rhino.JSTypeExpression var84 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var83);
    boolean var85 = var44.recordBaseType(var83);
    com.google.javascript.jscomp.MessageFormatter var86 = null;
    java.util.logging.Logger var87 = null;
    com.google.javascript.jscomp.LoggerErrorManager var88 = new com.google.javascript.jscomp.LoggerErrorManager(var86, var87);
    com.google.javascript.jscomp.Compiler var89 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var88);
    boolean var90 = var83.equals((java.lang.Object)var89);
    boolean var91 = var34.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var83);
    boolean var92 = var6.recordThrowType(var83);
    boolean var93 = var1.recordThrowType(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test490"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.lang.String var54 = var53.getFileOverview();
    java.util.Set var55 = var53.getModifies();
    java.util.List var56 = var53.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var57 = var53.getType();
    boolean var58 = var53.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var59 = null;
    var53.setVisibility(var59);
    com.google.javascript.rhino.Node var61 = var53.getAssociatedNode();
    java.lang.String var62 = var53.getMeaning();
    boolean var63 = var53.isInterface();
    boolean var64 = var53.hasBaseType();
    var18.setPropertyJSDocInfo("hi!: BANG 0\n    STRING hi 0 [length: 2]\n", var53);
    java.lang.String var66 = var53.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test491() {}
//   public void test491() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test491"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
//     var1.setResolveMode(var2);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     com.google.javascript.rhino.Node var14 = var9.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = var18.getNext();
//     com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
//     com.google.javascript.rhino.JSDocInfo var21 = var18.getJSDocInfo();
//     com.google.javascript.rhino.Node var22 = var9.copyInformationFrom(var18);
//     java.lang.Object var24 = null;
//     var9.putProp(0, var24);
//     com.google.javascript.rhino.JSTypeExpression var27 = new com.google.javascript.rhino.JSTypeExpression(var9, "()");
//     com.google.javascript.rhino.jstype.StaticScope var28 = null;
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     var30.unregisterPropertyOnType("Unversioned directory", var32);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     boolean var36 = var30.canPropertyBeDefined(var34, "BANG");
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
//     com.google.javascript.rhino.Node var39 = var30.createParameters(var38);
//     com.google.javascript.rhino.jstype.JSType var40 = var27.evaluate(var28, var30);
//     com.google.javascript.rhino.jstype.JSType var41 = var40.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var42 = var41.dereference();
//     java.util.Collection var43 = var1.getDirectImplementors(var42);
//     var1.identifyNonNullableName("function (): ?");
//     com.google.javascript.rhino.jstype.JSTypeNative var46 = null;
//     com.google.javascript.rhino.jstype.FunctionType var47 = var1.getNativeFunctionType(var46);
// 
//   }

  public void test492() {}
//   public void test492() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest5.test492"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     java.lang.String var3 = var2.toString();
//     java.lang.String var4 = var2.toString();
//     java.lang.String var5 = var2.toString();
//     java.lang.String var6 = var2.toString();
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.DiagnosticGroup var12 = null;
//     boolean var13 = var11.enables(var12);
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "Unversioned directory");
//     com.google.javascript.jscomp.DiagnosticType[] var18 = new com.google.javascript.jscomp.DiagnosticType[] { var17};
//     com.google.javascript.jscomp.DiagnosticGroup var19 = new com.google.javascript.jscomp.DiagnosticGroup(var18);
//     com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var21 = null;
//     var20.setStripTypes(var21);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var24 = var23.getDirectedGraphNodes();
//     java.util.List var25 = var23.getEdges();
//     var20.setManageClosureDependencies(var25);
//     boolean var27 = var20.isExternExportsEnabled();
//     var20.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var34 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make(var32, var34);
//     int var36 = var35.getCharno();
//     com.google.javascript.jscomp.CheckLevel var37 = var35.getDefaultLevel();
//     var20.setReportUnknownTypes(var37);
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var39 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var19, var37);
//     boolean var40 = var11.enables(var19);
//     com.google.javascript.jscomp.JSModule var42 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var43 = var42.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var44 = new com.google.javascript.jscomp.ComposeWarningsGuard(var43);
//     com.google.javascript.jscomp.DiagnosticGroup var45 = null;
//     boolean var46 = var44.enables(var45);
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var48, "Unversioned directory");
//     com.google.javascript.jscomp.DiagnosticType[] var51 = new com.google.javascript.jscomp.DiagnosticType[] { var50};
//     com.google.javascript.jscomp.DiagnosticGroup var52 = new com.google.javascript.jscomp.DiagnosticGroup(var51);
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var54 = null;
//     var53.setStripTypes(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var57 = var56.getDirectedGraphNodes();
//     java.util.List var58 = var56.getEdges();
//     var53.setManageClosureDependencies(var58);
//     boolean var60 = var53.isExternExportsEnabled();
//     var53.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var65 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var67 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var68 = com.google.javascript.jscomp.JSError.make(var65, var67);
//     int var69 = var68.getCharno();
//     com.google.javascript.jscomp.CheckLevel var70 = var68.getDefaultLevel();
//     var53.setReportUnknownTypes(var70);
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var72 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var52, var70);
//     boolean var73 = var44.enables(var52);
//     boolean var74 = var11.enables(var52);
//     com.google.javascript.jscomp.DiagnosticGroup[] var75 = new com.google.javascript.jscomp.DiagnosticGroup[] { var52};
//     com.google.javascript.jscomp.DiagnosticGroup var76 = new com.google.javascript.jscomp.DiagnosticGroup("{proxy:{1241367186}}", var75);
//     boolean var77 = var2.disables(var76);
// 
//   }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test493"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    var0.setNameReferenceGraphPath("goog.exportSymbol");
    var0.setGeneratePseudoNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test494"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setCrossModuleMethodMotion(false);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var15 = var14.getDirectedGraphNodes();
    java.util.List var16 = var14.getEdges();
    var0.setManageClosureDependencies(var16);
    var0.setTransformAMDToCJSModules(true);
    var0.setDefineToNumberLiteral("BANG 0\n    STRING hi 0 [length: 2]\n", 154);
    var0.setDisambiguateProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test495"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    com.google.javascript.rhino.JSDocInfoBuilder var75 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var76 = var75.recordExpose();
    boolean var78 = var75.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var80 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var82 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = var82.getNext();
    com.google.javascript.rhino.Node var84 = var80.srcrefTree(var82);
    com.google.javascript.rhino.InputId var85 = com.google.javascript.jscomp.NodeUtil.getInputId(var82);
    com.google.javascript.rhino.jstype.JSType var86 = null;
    var82.setJSType(var86);
    com.google.javascript.rhino.JSDocInfo var88 = var75.build(var82);
    java.util.List var89 = var88.getThrownTypes();
    java.lang.String var90 = var88.getDeprecationReason();
    var31.setPropertyJSDocInfo("InputId: ", var88);
    boolean var92 = var31.isNominalConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "2014/12/24 11:10"+ "'", var90.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test496"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isAnd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var10.isGetterDef();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var16 = var15.hasOneChild();
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.returnNode();
    boolean var22 = var21.isArrayLit();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isVarArgs();
    boolean var30 = var26.isOptionalArg();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(0, var15, var20, var21, var26, 1, 100);
    java.lang.String var34 = var21.getQualifiedName();
    boolean var35 = var21.isHook();
    int var36 = var21.getSourceOffset();
    var21.removeProp(1);
    com.google.javascript.rhino.Node var39 = var10.useSourceInfoFrom(var21);
    com.google.javascript.rhino.Node var41 = new com.google.javascript.rhino.Node(1);
    boolean var42 = var41.isDefaultCase();
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.InputId var46 = var44.getInputId();
    boolean var47 = var44.isOr();
    com.google.javascript.rhino.Node var48 = var41.useSourceInfoIfMissingFrom(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.replaceChildAfter(var21, var41);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test497"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    var1.markAnnotation("", 2, 2);
    boolean var13 = var1.isJavaDispatch();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test498"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    boolean var10 = var0.shouldColorizeErrorOutput();
    com.google.common.collect.Multimap var11 = null;
    var0.setCustomPasses(var11);
    var0.setPrettyPrint(false);
    com.google.javascript.jscomp.VariableRenamingPolicy var15 = null;
    var0.setVariableRenaming(var15);
    com.google.common.collect.Multimap var17 = null;
    var0.setCustomPasses(var17);
    var0.setClosurePass(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test499"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var49 = var48.isGetterDef();
    boolean var50 = var48.isNE();
    boolean var51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var48);
    com.google.javascript.rhino.Node var52 = var7.clonePropsFrom(var48);
    var48.setType((-1));
    boolean var55 = var48.isFalse();
    boolean var56 = var48.isIf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest5.test500"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setFoldConstants(false);
    com.google.javascript.jscomp.MessageFormatter var7 = null;
    java.util.logging.Logger var8 = null;
    com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
    int var10 = var9.getWarningCount();
    int var11 = var9.getErrorCount();
    com.google.javascript.jscomp.JSError[] var12 = var9.getWarnings();
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var9);
    var9.generateReport();
    var9.setTypedPercent((-1.0d));
    com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

}
