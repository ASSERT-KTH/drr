
import junit.framework.*;

public class RandoopTest9 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test1"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("goog.exportProperty", "STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.Region var4 = var2.getRegion(153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test2() {}
//   public void test2() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test2"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var5 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var5);
//     com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
//     com.google.javascript.jscomp.Region var10 = var3.getSourceRegion("", 306);
// 
//   }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test3"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getExportPropertyFunction();
    boolean var22 = var0.isValidEnumKey("InputId: ");
    java.lang.String var23 = var0.getGlobalObject();
    java.lang.String var24 = var0.getAbstractMethodName();
    java.lang.String var25 = var0.getExportSymbolFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "goog.global"+ "'", var23.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "goog.abstractMethod"+ "'", var24.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "goog.exportSymbol"+ "'", var25.equals("goog.exportSymbol"));

  }

  public void test4() {}
//   public void test4() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test4"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("BANG 0 [source_file: Unversioned directory]\n", "hi", var2);
// 
//   }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test5"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     java.util.List var3 = var1.getRequires();
//     com.google.javascript.jscomp.SourceAst var4 = null;
//     com.google.javascript.rhino.InputId var5 = null;
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
//     com.google.javascript.jscomp.JSModule var8 = var7.getModule();
//     var1.addFirst(var7);
//     int var10 = var7.getNumLines();
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test6"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var12 = var10.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var14 = null;
    boolean var15 = var10.recordParameter("Unversioned directory", var14);
    com.google.javascript.rhino.JSTypeExpression var16 = null;
    boolean var18 = var10.recordThrowDescription(var16, "");
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.lang.String var34 = var33.getFileOverview();
    java.util.Set var35 = var33.getModifies();
    boolean var36 = var10.recordSuppressions(var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var40 = var38.recordExterns();
    boolean var41 = var38.recordNoShadow();
    boolean var43 = var38.recordReturnDescription("()");
    boolean var45 = var38.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var49 = var48.recordExpose();
    boolean var50 = var48.recordExterns();
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    boolean var57 = var54.isVarArgs();
    boolean var58 = var54.isArrayLit();
    com.google.javascript.rhino.Node var59 = var54.getNext();
    var48.markTypeNode(var54, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = var69.getNext();
    com.google.javascript.rhino.Node var71 = var67.srcrefTree(var69);
    boolean var72 = var69.isVarArgs();
    com.google.javascript.rhino.Node var74 = var69.getChildAtIndex(1);
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = var78.getNext();
    com.google.javascript.rhino.Node var80 = var76.srcrefTree(var78);
    com.google.javascript.rhino.JSDocInfo var81 = var78.getJSDocInfo();
    com.google.javascript.rhino.Node var82 = var69.copyInformationFrom(var78);
    java.lang.Object var84 = null;
    var69.putProp(0, var84);
    com.google.javascript.rhino.JSTypeExpression var87 = new com.google.javascript.rhino.JSTypeExpression(var69, "()");
    com.google.javascript.rhino.JSTypeExpression var88 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var87);
    boolean var89 = var48.recordBaseType(var87);
    com.google.javascript.jscomp.MessageFormatter var90 = null;
    java.util.logging.Logger var91 = null;
    com.google.javascript.jscomp.LoggerErrorManager var92 = new com.google.javascript.jscomp.LoggerErrorManager(var90, var91);
    com.google.javascript.jscomp.Compiler var93 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var92);
    boolean var94 = var87.equals((java.lang.Object)var93);
    boolean var95 = var38.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var87);
    boolean var96 = var10.recordThrowType(var87);
    com.google.javascript.rhino.Node var97 = var87.getRoot();
    boolean var98 = var1.recordDefineType(var87);
    boolean var99 = var87.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test7"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    com.google.common.collect.ImmutableList var16 = var14.getTemplateTypeNames();
    boolean var18 = var14.hasParameter("(InputId: )");
    boolean var19 = var14.isConsistentIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test8"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.paramList(var13);
    com.google.javascript.rhino.Node var17 = var1.createParameters(var13);
    var1.resetForTypeCheck();
    com.google.javascript.rhino.ErrorReporter var19 = var1.getErrorReporter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test9"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    boolean var24 = var14.isNoSideEffects();
    java.util.List var25 = var14.getThrownTypes();
    java.lang.String var26 = var14.getDeprecationReason();
    boolean var27 = var14.isExpose();
    boolean var28 = var14.hasEnumParameterType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "2014/12/24 11:10"+ "'", var26.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test10"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setRemoveAbstractMethods(true);
    var0.setOutputCharset("2014/12/24 11:10");
    var0.setProcessObjectPropertyString(true);
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.jscomp.SourceAst var14 = null;
    com.google.javascript.rhino.InputId var15 = null;
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
    com.google.javascript.jscomp.JSModule var18 = var17.getModule();
    var12.add(var17);
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var12.addFirst(var21);
    java.util.Set var23 = var12.getThisAndAllDependencies();
    var0.setIdGenerators(var23);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var25 = var0.getTweakProcessing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test11"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("module$", "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.jscomp.CompilerOptions var9 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var10 = null;
    var9.setBrokenClosureRequiresLevel(var10);
    var9.setLocale("");
    var9.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var17 = null;
    var16.setStripTypes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var20 = var19.getDirectedGraphNodes();
    java.util.List var21 = var19.getEdges();
    var16.setManageClosureDependencies(var21);
    boolean var23 = var16.isExternExportsEnabled();
    var16.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var30 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make(var28, var30);
    int var32 = var31.getCharno();
    com.google.javascript.jscomp.CheckLevel var33 = var31.getDefaultLevel();
    var16.setReportUnknownTypes(var33);
    var9.setBrokenClosureRequiresLevel(var33);
    com.google.javascript.jscomp.CheckLevel var37 = null;
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var37, "");
    com.google.javascript.jscomp.CheckLevel var41 = null;
    com.google.javascript.jscomp.DiagnosticType var43 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var41, "");
    int var44 = var39.compareTo(var43);
    com.google.javascript.jscomp.DiagnosticGroup var45 = com.google.javascript.jscomp.DiagnosticGroup.forType(var39);
    com.google.javascript.rhino.Node var47 = null;
    com.google.javascript.jscomp.CheckLevel var49 = null;
    com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var49, "");
    com.google.javascript.jscomp.CheckLevel var53 = null;
    com.google.javascript.jscomp.DiagnosticType var55 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var53, "");
    int var56 = var51.compareTo(var55);
    java.lang.String[] var58 = new java.lang.String[] { "(module$2014$12$24 11:10)"};
    com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", var47, var55, var58);
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make("null(null)", 0, (-1), var33, var39, var58);
    com.google.javascript.jscomp.DiagnosticType var63 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var65 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var66 = com.google.javascript.jscomp.JSError.make(var63, var65);
    com.google.javascript.jscomp.DiagnosticType var67 = var66.getType();
    java.lang.Object var68 = null;
    boolean var69 = var67.equals(var68);
    com.google.javascript.jscomp.DiagnosticType var72 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
    com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var77 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var75, var77);
    com.google.javascript.jscomp.JSError var79 = com.google.javascript.jscomp.JSError.make(var72, var77);
    com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make("function (): {1883749358}", 306, 0, var33, var67, var77);
    com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var2, var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test12() {}
//   public void test12() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test12"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
//     boolean var5 = var4.hasOneChild();
//     com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
//     boolean var11 = var10.isArrayLit();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     boolean var18 = var15.isVarArgs();
//     boolean var19 = var15.isOptionalArg();
//     com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(0, var4, var9, var10, var15, 1, 100);
//     com.google.javascript.rhino.Node var23 = var10.getLastSibling();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.doNode(var0, var10);
// 
//   }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test13"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    boolean var19 = var7.hasChildren();
    boolean var20 = var7.isBlock();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    int var24 = var22.getSourceOffset();
    com.google.javascript.rhino.Node var25 = var22.removeFirstChild();
    boolean var26 = var22.isDefaultCase();
    com.google.javascript.rhino.Node var27 = var7.useSourceInfoFrom(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.returnNode(var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test14"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.breakNode();
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var1 = var0.getJsDocBuilderForNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test15"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("RETURN 0", 21, 153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test16"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getReturnDescription();
    boolean var18 = var14.hasReturnType();
    java.lang.String var19 = var14.getReturnDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test17"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.removeFirstChild();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    boolean var11 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var9);
    int var12 = var9.getLength();
    com.google.javascript.rhino.Node var13 = null;
    boolean var14 = var9.hasChild(var13);
    com.google.javascript.rhino.Node var15 = var7.useSourceInfoIfMissingFromForTree(var9);
    var9.setSourceFileForTesting("Unversioned directory");
    boolean var18 = var9.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var19 = var9.getStaticSourceFile();
    com.google.javascript.rhino.Node var20 = var2.srcref(var9);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var20);
    boolean var22 = var21.isAssignAdd();
    java.lang.String var23 = var21.getSourceFileName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test18"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    java.util.List var17 = var16.getThrownTypes();
    java.lang.String var18 = var16.getDeprecationReason();
    java.lang.String var19 = var16.getReturnDescription();
    boolean var20 = var16.isImplicitCast();
    var1.setJSDocInfo(var16);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    boolean var39 = var36.isVarArgs();
    com.google.javascript.rhino.Node var41 = var36.getChildAtIndex(1);
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.JSDocInfo var48 = var45.getJSDocInfo();
    com.google.javascript.rhino.Node var49 = var36.copyInformationFrom(var45);
    java.lang.Object var51 = null;
    var36.putProp(0, var51);
    com.google.javascript.rhino.JSTypeExpression var54 = new com.google.javascript.rhino.JSTypeExpression(var36, "()");
    com.google.javascript.rhino.jstype.StaticScope var55 = null;
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var57.unregisterPropertyOnType("Unversioned directory", var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    boolean var63 = var57.canPropertyBeDefined(var61, "BANG");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType[] var65 = new com.google.javascript.rhino.jstype.JSType[] { var64};
    com.google.javascript.rhino.Node var66 = var57.createParameters(var65);
    com.google.javascript.rhino.jstype.JSType var67 = var54.evaluate(var55, var57);
    com.google.javascript.rhino.jstype.JSType var68 = var67.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var69 = var68.dereference();
    boolean var70 = var69.isUnknownType();
    boolean var71 = var32.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var69);
    var1.setJSType((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.jstype.FunctionType var73 = var69.getOwnerFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2014/12/24 11:10"+ "'", var18.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test19"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isObject();
    boolean var61 = var58.isInterface();
    com.google.javascript.rhino.jstype.ObjectType.Property var63 = var58.getSlot("goog.exportProperty");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test20"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     com.google.javascript.jscomp.Compiler.IntermediateState var7 = var3.getState();
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getProvides();
//     com.google.javascript.jscomp.CompilerInput var12 = var9.getByName("()");
//     java.lang.String[] var13 = var3.toSourceArray(var9);
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test21"); }


    java.lang.String var2 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("(STRING hi 0 [length: 2]\n)", "CONTINUE");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "module$(STRING hi 0 [length: 2]\n)"+ "'", var2.equals("module$(STRING hi 0 [length: 2]\n)"));

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test22"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(3, "hi!", 306, 1);
    var4.setWasEmptyNode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test23"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = var4.getNext();
//     com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
//     com.google.javascript.rhino.Node var7 = var4.removeFirstChild();
//     var7.putIntProp(0, 100);
//     boolean var11 = var7.isTrue();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.exprResult(var7);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var15 = null;
//     var14.setResolveMode(var15);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var17 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var14);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var18 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var14);
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     var20.unregisterPropertyOnType("Unversioned directory", var22);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     boolean var26 = var20.canPropertyBeDefined(var24, "BANG");
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
//     com.google.javascript.rhino.Node var29 = var20.createParameters(var28);
//     boolean var30 = var18.addRequiredParams(var28);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var35 = var34.getNext();
//     com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
//     boolean var37 = var34.isVarArgs();
//     com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var44 = var43.getNext();
//     com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
//     com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
//     com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
//     boolean var48 = var34.isVoid();
//     com.google.javascript.rhino.Node var49 = var18.newParameterFromNode(var34);
//     com.google.javascript.rhino.Node var50 = null;
//     com.google.javascript.rhino.Node var51 = new com.google.javascript.rhino.Node((-19), var12, var34, var50);
// 
//   }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test24"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var2 = new com.google.javascript.jscomp.CompilerInput(var0, true);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test25"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.block(var17);
    boolean var19 = var18.isFalse();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var21 = var20.cloneTree();
    com.google.javascript.rhino.Node var22 = var18.useSourceInfoFrom(var20);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var18, "goog.abstractMethod");
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var27 = var26.isGetterDef();
    boolean var28 = var26.isAdd();
    boolean var29 = var26.isName();
    var26.setSourceEncodedPositionForTree(306);
    com.google.javascript.rhino.JSTypeExpression var33 = new com.google.javascript.rhino.JSTypeExpression(var26, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    java.lang.String var34 = var18.checkTreeEquals(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "Node tree inequality:\nTree1:\nBLOCK\n\n\nTree2:\nLABEL_NAME hi! 0\n\n\nSubtree1: BLOCK\n\n\nSubtree2: LABEL_NAME hi! 0\n"+ "'", var34.equals("Node tree inequality:\nTree1:\nBLOCK\n\n\nTree2:\nLABEL_NAME hi! 0\n\n\nSubtree1: BLOCK\n\n\nSubtree2: LABEL_NAME hi! 0\n"));

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test26"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setSyntheticBlockEndMarker("goog.abstractMethod");
    var0.setFoldConstants(false);
    var0.setShadowVariables(true);
    var0.setAliasExternals(false);
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    var21.setInlineLocalVariables(false);
    var21.setDevirtualizePrototypeMethods(false);
    com.google.javascript.jscomp.PropertyRenamingPolicy var26 = null;
    var21.setPropertyRenaming(var26);
    com.google.javascript.jscomp.DependencyOptions var28 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var30 = var28.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var32 = var30.setMoocherDropping(true);
    com.google.javascript.rhino.JSDocInfoBuilder var34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var35 = var34.recordExpose();
    boolean var37 = var34.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.InputId var44 = com.google.javascript.jscomp.NodeUtil.getInputId(var41);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    var41.setJSType(var45);
    com.google.javascript.rhino.JSDocInfo var47 = var34.build(var41);
    java.lang.String var48 = var47.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var49 = var47.getType();
    java.util.Set var50 = var47.getSuppressions();
    com.google.javascript.jscomp.DependencyOptions var51 = var30.setEntryPoints((java.util.Collection)var50);
    var21.setReplaceStringsReservedStrings(var50);
    var0.setStripTypes(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test27"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var31 = var24.getPossibleToBooleanOutcomes();
    boolean var33 = var24.hasOwnProperty("hi!");
    boolean var34 = var24.isConstructor();
    int var35 = var24.getExtendedInterfacesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test28"); }


    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.getMessage1("InputId: ", var1);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test29"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var20 = var14.hasParameter("InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test30"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.Iterable var28 = var10.getOwnImplementedInterfaces();
    java.lang.Iterable var29 = var10.getImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test31"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.JSDocInfo var7 = var4.getJSDocInfo();
    boolean var8 = var4.isSwitch();
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var11 = var9.isConstantKey("2014/12/24 11:10");
    java.util.Collection var12 = var9.getAssertionFunctions();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var16.setJSType(var17);
    boolean var19 = var16.isScript();
    com.google.javascript.rhino.Node var20 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var24 = var23.isGetterDef();
    boolean var25 = var23.isAdd();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
    com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
    java.lang.String var43 = var42.toStringTree();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var51 = var47.getBooleanProp(100);
    int var52 = var47.getSideEffectFlags();
    boolean var53 = var47.isDefaultCase();
    com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(1, var23, var42, var47);
    java.lang.String var55 = var9.extractClassNameIfProvide(var16, var47);
    java.lang.String var56 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var16);
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    boolean var63 = var58.isString();
    boolean var64 = var58.isNE();
    java.lang.String var65 = com.google.javascript.jscomp.NodeUtil.getSourceName(var58);
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    int var69 = var67.getSourceOffset();
    com.google.javascript.rhino.Node var73 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    int var78 = var73.getIndexOfChild(var77);
    int var79 = var67.getIndexOfChild(var73);
    com.google.javascript.rhino.Node var80 = new com.google.javascript.rhino.Node(100, var4, var16, var58, var73);
    java.lang.String var81 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var58);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var58);
    com.google.javascript.rhino.Node var83 = var58.cloneNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var43.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test32"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    var1.removeAll();
    var1.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test33"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var1 = var0.cloneTree();
    java.lang.String var2 = com.google.javascript.jscomp.NodeUtil.getSourceName(var0);
    boolean var3 = var0.wasEmptyNode();
    var0.setWasEmptyNode(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test34"); }


    long var1 = com.google.javascript.rhino.ScriptRuntime.testUint32String("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1L));

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test35"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    com.google.javascript.rhino.Node var9 = var4.getChildAtIndex(1);
    com.google.javascript.rhino.Node[] var10 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(1, var10, 153, 10);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.Node var20 = var17.removeFirstChild();
    java.lang.String var21 = var20.toStringTree();
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var22 = var20.getJsDocBuilderForNode();
    int var23 = var13.getIndexOfChild(var20);
    boolean var24 = var20.isGetElem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var21.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test36"); }


    com.google.javascript.rhino.jstype.JSType var1 = null;
    com.google.javascript.rhino.jstype.SimpleSlot var3 = new com.google.javascript.rhino.jstype.SimpleSlot("", var1, false);
    com.google.javascript.rhino.jstype.JSType var4 = var3.getType();
    boolean var5 = var3.isTypeInferred();
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var7 = var3.getType();
    boolean var8 = var3.isTypeInferred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test37"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var1.recordOriginalCommentString("goog.abstractMethod");
    boolean var17 = var1.recordInterface();
    boolean var18 = var1.recordNoAlias();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    boolean var29 = var26.isAssignAdd();
    int var30 = var24.getIndexOfChild(var26);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.InputId var34 = var32.getInputId();
    com.google.javascript.rhino.Node var35 = var24.useSourceInfoFrom(var32);
    int var36 = var24.getChildCount();
    com.google.javascript.rhino.Node[] var37 = new com.google.javascript.rhino.Node[] { var24};
    com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node((-1), var37);
    com.google.javascript.rhino.JSDocInfo var39 = var1.build(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test38"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    boolean var19 = var7.hasChildren();
    boolean var20 = var7.isBlock();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    int var24 = var22.getSourceOffset();
    com.google.javascript.rhino.Node var25 = var22.removeFirstChild();
    boolean var26 = var22.isDefaultCase();
    com.google.javascript.rhino.Node var27 = var7.useSourceInfoFrom(var22);
    boolean var28 = var7.isNew();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test39"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    var3.parse();
    var3.processDefines();
    com.google.javascript.jscomp.Scope var77 = var3.getTopScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test40"); }


    com.google.javascript.rhino.jstype.JSType var1 = null;
    com.google.javascript.rhino.jstype.SimpleSlot var3 = new com.google.javascript.rhino.jstype.SimpleSlot("Unversioned directory", var1, false);
    boolean var4 = var3.isTypeInferred();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test41"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var1.addFirst(var10);
    java.util.Set var12 = var1.getAllDependencies();
    var1.removeAll();
    com.google.javascript.jscomp.SourceAst var14 = null;
    com.google.javascript.rhino.InputId var15 = null;
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var1.addFirst(var20);
    boolean var22 = var20.isExtern();
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.jscomp.SourceAst var26 = null;
    com.google.javascript.rhino.InputId var27 = null;
    com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var26, var27, true);
    com.google.javascript.jscomp.JSModule var30 = var29.getModule();
    var24.add(var29);
    java.util.Set var32 = var24.getThisAndAllDependencies();
    java.util.List var33 = var24.getProvides();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.setModule(var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test42"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var15 = var0.getAbstractMethodName();
    java.lang.String var16 = var0.getExportSymbolFunction();
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    boolean var23 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var21);
    int var24 = var21.getLength();
    com.google.javascript.rhino.Node var25 = null;
    boolean var26 = var21.hasChild(var25);
    com.google.javascript.rhino.Node var27 = var19.useSourceInfoIfMissingFromForTree(var21);
    com.google.javascript.jscomp.CodingConvention.Bind var29 = var17.describeFunctionBind(var19, false);
    int var30 = var19.getSourcePosition();
    int var31 = var19.getSideEffectFlags();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    boolean var41 = var35.isBlock();
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    com.google.javascript.rhino.Node var50 = var45.getChildAtIndex(1);
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    com.google.javascript.rhino.JSDocInfo var57 = var54.getJSDocInfo();
    com.google.javascript.rhino.Node var58 = var45.copyInformationFrom(var54);
    com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var60 = null;
    var59.setStripTypes(var60);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var63 = var62.getDirectedGraphNodes();
    java.util.List var64 = var62.getEdges();
    var59.setManageClosureDependencies(var64);
    boolean var66 = var59.isExternExportsEnabled();
    var59.setCheckCaja(false);
    java.util.Set var69 = null;
    var59.setReplaceStringsReservedStrings(var69);
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    var59.setReplaceStringsReservedStrings(var87);
    var45.setDirectives(var87);
    com.google.javascript.rhino.Node var90 = var35.srcrefTree(var45);
    java.lang.String var91 = var0.extractClassNameIfProvide(var19, var45);
    var45.setSourceFileForTesting("function (): {924953276}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "goog.abstractMethod"+ "'", var15.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "goog.exportSymbol"+ "'", var16.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test43"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
    com.google.javascript.rhino.ErrorReporter var9 = var1.getErrorReporter();
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isOr();
    java.lang.String var19 = var10.extractClassNameIfRequire(var11, var15);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var32.unregisterPropertyOnType("Unversioned directory", var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.JSModule var38 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var39 = var38.getDependencies();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.block(var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var32.createFunctionTypeWithVarArgs(var36, var39);
    boolean var42 = var41.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.lang.Iterable var45 = var43.getDirectedGraphNodes();
    java.util.List var46 = var43.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    var47.setAliasAllStrings(true);
    var47.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var64 = null;
    var63.setStripTypes(var64);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var67 = var66.getDirectedGraphNodes();
    java.util.List var68 = var66.getEdges();
    var63.setManageClosureDependencies(var68);
    boolean var70 = var63.isExternExportsEnabled();
    var63.setCheckCaja(false);
    var63.setGroupVariableDeclarations(true);
    java.util.Map var75 = var63.getDefineReplacements();
    var47.setPropertyInvalidationErrors(var75);
    var10.defineDelegateProxyPrototypeProperties(var21, (com.google.javascript.rhino.jstype.StaticScope)var41, var46, var75);
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var41);
    com.google.javascript.rhino.JSDocInfo var79 = var41.getJSDocInfo();
    com.google.javascript.rhino.jstype.FunctionType var80 = var41.toMaybeFunctionType();
    int var81 = var80.getExtendedInterfacesCount();
    java.util.Set var82 = var80.getOwnPropertyNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test44"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    java.util.Set var3 = null;
    boolean var4 = var1.recordSuppressions(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test45"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    var14.setDeprecated(false);
    boolean var21 = var14.hasReturnType();
    com.google.javascript.rhino.Node var22 = var14.getAssociatedNode();
    java.lang.String var23 = var14.getDeprecationReason();
    java.util.Set var24 = var14.getSuppressions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "2014/12/24 11:10"+ "'", var23.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test46"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Collection var16 = var14.getTypeNodes();
    com.google.javascript.rhino.JSTypeExpression var17 = var14.getBaseType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test47"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    boolean var25 = var23.isLabelName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test48"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    var0.enableRuntimeTypeCheck("goog.exportSymbol");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test49"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var36 = var1.recordHiddenness();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var42 = var41.hasOneChild();
    com.google.javascript.rhino.Node var46 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.returnNode();
    boolean var48 = var47.isArrayLit();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var55 = var52.isVarArgs();
    boolean var56 = var52.isOptionalArg();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(0, var41, var46, var47, var52, 1, 100);
    int var60 = var52.getSourceOffset();
    com.google.javascript.rhino.Node var61 = var37.useSourceInfoFromForTree(var52);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var65 = var63.getBooleanProp((-1));
    var63.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var68 = var61.copyInformationFrom(var63);
    com.google.javascript.rhino.JSDocInfo var69 = var1.build(var63);
    int var70 = var69.getExtendedInterfacesCount();
    java.lang.String var71 = var69.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test50"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    double var10 = var5.getProgress();
    com.google.javascript.jscomp.ErrorManager var11 = var5.getErrorManager();
    com.google.javascript.jscomp.JSError[] var12 = var5.getWarnings();
    com.google.javascript.jscomp.Result var13 = var5.getResult();
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var17 = var15.recordExterns();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isArrayLit();
    com.google.javascript.rhino.Node var26 = var21.getNext();
    var15.markTypeNode(var21, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    boolean var39 = var36.isVarArgs();
    com.google.javascript.rhino.Node var41 = var36.getChildAtIndex(1);
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.JSDocInfo var48 = var45.getJSDocInfo();
    com.google.javascript.rhino.Node var49 = var36.copyInformationFrom(var45);
    java.lang.Object var51 = null;
    var36.putProp(0, var51);
    com.google.javascript.rhino.JSTypeExpression var54 = new com.google.javascript.rhino.JSTypeExpression(var36, "()");
    com.google.javascript.rhino.JSTypeExpression var55 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var54);
    boolean var56 = var15.recordBaseType(var54);
    com.google.javascript.jscomp.MessageFormatter var57 = null;
    java.util.logging.Logger var58 = null;
    com.google.javascript.jscomp.LoggerErrorManager var59 = new com.google.javascript.jscomp.LoggerErrorManager(var57, var58);
    com.google.javascript.jscomp.Compiler var60 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var59);
    boolean var61 = var54.equals((java.lang.Object)var60);
    java.lang.String var62 = var60.getAstDotGraph();
    com.google.javascript.jscomp.Compiler var63 = new com.google.javascript.jscomp.Compiler();
    var63.reportCodeChange();
    com.google.javascript.jscomp.Compiler.IntermediateState var65 = var63.getState();
    var60.setState(var65);
    var5.setState(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test51"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.jscomp.JSModuleGraph var18 = new com.google.javascript.jscomp.JSModuleGraph(var17);
    var18.coalesceDuplicateFiles();
    var18.coalesceDuplicateFiles();
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var22.removeAll();
    java.lang.String var24 = var22.toString();
    java.util.List var25 = var22.getDependencies();
    int var26 = var22.getDepth();
    com.google.javascript.jscomp.MessageFormatter var27 = null;
    java.util.logging.Logger var28 = null;
    com.google.javascript.jscomp.LoggerErrorManager var29 = new com.google.javascript.jscomp.LoggerErrorManager(var27, var28);
    com.google.javascript.jscomp.Compiler var30 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var29);
    com.google.javascript.jscomp.JSError[] var31 = var30.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var34 = var33.recordExpose();
    boolean var36 = var33.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.InputId var43 = com.google.javascript.jscomp.NodeUtil.getInputId(var40);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var40.setJSType(var44);
    com.google.javascript.rhino.JSDocInfo var46 = var33.build(var40);
    java.util.List var47 = var46.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    var48.clearNodeAnnotations();
    java.util.List var51 = var48.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var52 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var53 = null;
    var52.setStripTypes(var53);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var56 = var55.getDirectedGraphNodes();
    java.util.List var57 = var55.getEdges();
    var52.setManageClosureDependencies(var57);
    var52.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var52.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var64 = null;
    var52.setSourceMapDetailLevel(var64);
    com.google.javascript.jscomp.CodingConvention var66 = var52.getCodingConvention();
    var52.setMarkNoSideEffectCalls(false);
    var30.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var47, var51, var52);
    com.google.javascript.jscomp.LightweightMessageFormatter var70 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var30);
    com.google.javascript.jscomp.JSModule var72 = new com.google.javascript.jscomp.JSModule("");
    java.util.Set var73 = var72.getAllDependencies();
    java.lang.String var74 = var30.toSource(var72);
    boolean var75 = var18.dependsOn(var22, var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Unversioned directory"+ "'", var24.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test52"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var3.isCatch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test53"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.Iterable var28 = var10.getAllImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test54"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    int var13 = var2.getSourcePosition();
    int var14 = var2.getSideEffectFlags();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.addChildAfter(var16, var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test55"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isArrayLit();
    com.google.javascript.rhino.Node var17 = var12.getNext();
    var6.markTypeNode(var12, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    boolean var30 = var27.isVarArgs();
    com.google.javascript.rhino.Node var32 = var27.getChildAtIndex(1);
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    com.google.javascript.rhino.JSDocInfo var39 = var36.getJSDocInfo();
    com.google.javascript.rhino.Node var40 = var27.copyInformationFrom(var36);
    java.lang.Object var42 = null;
    var27.putProp(0, var42);
    com.google.javascript.rhino.JSTypeExpression var45 = new com.google.javascript.rhino.JSTypeExpression(var27, "()");
    com.google.javascript.rhino.JSTypeExpression var46 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var45);
    boolean var47 = var6.recordBaseType(var45);
    boolean var48 = var6.shouldParseDocumentation();
    com.google.javascript.rhino.JSDocInfoBuilder var50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var51 = var50.recordExpose();
    boolean var53 = var50.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.InputId var60 = com.google.javascript.jscomp.NodeUtil.getInputId(var57);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var57.setJSType(var61);
    com.google.javascript.rhino.JSDocInfo var63 = var50.build(var57);
    java.util.Collection var64 = var63.getAuthors();
    java.util.Set var65 = var63.getModifies();
    boolean var66 = var6.recordModifies(var65);
    boolean var67 = var6.recordDeprecated();
    com.google.javascript.jscomp.SourceAst var68 = null;
    com.google.javascript.rhino.InputId var69 = null;
    com.google.javascript.jscomp.CompilerInput var71 = new com.google.javascript.jscomp.CompilerInput(var68, var69, true);
    com.google.javascript.jscomp.CompilerInput var74 = new com.google.javascript.jscomp.CompilerInput(var68, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    com.google.javascript.rhino.InputId var75 = var74.getInputId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)var67, (java.lang.Object)var75);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test56"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    java.util.List var10 = var0.getEdges();
    com.google.javascript.jscomp.MessageFormatter var11 = null;
    java.util.logging.Logger var12 = null;
    com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
    com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var13);
    com.google.javascript.jscomp.JSModule var16 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var17 = var16.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var18 = new com.google.javascript.jscomp.ComposeWarningsGuard(var17);
    com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var21 = var20.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var22 = new com.google.javascript.jscomp.ComposeWarningsGuard(var21);
    com.google.javascript.jscomp.CompilerOptions var23 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var24 = null;
    var23.setStripTypes(var24);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    var23.setManageClosureDependencies(var28);
    boolean var30 = var23.isExternExportsEnabled();
    var23.setCollapsePropertiesOnExternTypes(false);
    var14.<com.google.javascript.jscomp.SourceFile>initModules(var17, var21, var23);
    var23.setAliasKeywords(true);
    var23.setNameReferenceGraphPath("module$2014$12$24 11:10");
    var23.setClosurePass(true);
    var23.setInlineVariables(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var42 = var0.getDirectedSuccNodes((java.lang.Object)var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test57"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setNameAnonymousFunctionsOnly(true);
    var0.setExternExportsPath("module$function (): {140836661}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test58"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    com.google.javascript.jscomp.MessageFormatter var10 = null;
    java.util.logging.Logger var11 = null;
    com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var12);
    com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal var16 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var13, var15);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var18 = null;
    var17.setStripTypes(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    var17.setManageClosureDependencies(var22);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.script(var22);
    var16.traverseRoots(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    var29.setChainCalls(true);
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var32);
    var29.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var33);
    var29.setGatherCssNames(false);
    var5.<com.google.javascript.jscomp.SourceFile>initModules(var22, var28, var29);
    java.lang.String[] var38 = var5.toSourceArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test59"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var3 = null;
    var2.setResolveMode(var3);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var2);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.block(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var7.createFunctionTypeWithVarArgs(var11, var14);
    boolean var17 = var16.hasAnyTemplateInternal();
    java.lang.Iterable var18 = var16.getAllExtendedInterfaces();
    boolean var19 = var16.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    boolean var32 = var30.removeProperty("null(null)");
    var16.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var30);
    com.google.javascript.rhino.jstype.JSType var35 = var2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var30, "hi!");
    boolean var36 = var30.matchesInt32Context();
    var30.clearCachedValues();
    boolean var38 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var0, (com.google.javascript.rhino.jstype.JSType)var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var41 = var39.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var44 = var43.recordExpose();
    boolean var46 = var43.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.InputId var53 = com.google.javascript.jscomp.NodeUtil.getInputId(var50);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var50.setJSType(var54);
    com.google.javascript.rhino.JSDocInfo var56 = var43.build(var50);
    java.lang.String var57 = var56.getFileOverview();
    java.util.Set var58 = var56.getModifies();
    java.util.List var59 = var56.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var60 = var56.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var61 = var39.createDirectedGraphNode((java.lang.Object)var56);
    boolean var62 = var56.isConsistentIdGenerator();
    java.lang.String var63 = var56.getDescription();
    var30.setJSDocInfo(var56);
    boolean var65 = var56.containsDeclaration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test60"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "", "function (): {2074444175}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test61"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    var0.setNameReferenceGraphPath("goog.exportSymbol");
    com.google.javascript.jscomp.CheckLevel var20 = null;
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var20, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var23 = new com.google.javascript.jscomp.DiagnosticType[] { var22};
    com.google.javascript.jscomp.DiagnosticGroup var24 = new com.google.javascript.jscomp.DiagnosticGroup(var23);
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    boolean var32 = var25.isExternExportsEnabled();
    var25.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var39 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make(var37, var39);
    int var41 = var40.getCharno();
    com.google.javascript.jscomp.CheckLevel var42 = var40.getDefaultLevel();
    var25.setReportUnknownTypes(var42);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var44 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var24, var42);
    var0.setReportMissingOverride(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var48 = var46.hasNode((java.lang.Object)1);
    java.util.List var49 = var46.getGraphvizEdges();
    java.lang.Iterable var50 = var46.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var51 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var52 = var51.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var53 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var51);
    com.google.javascript.jscomp.LightweightMessageFormatter var54 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var51);
    boolean var55 = var46.hasNode((java.lang.Object)var51);
    com.google.javascript.jscomp.MessageFormatter var56 = null;
    java.util.logging.Logger var57 = null;
    com.google.javascript.jscomp.LoggerErrorManager var58 = new com.google.javascript.jscomp.LoggerErrorManager(var56, var57);
    com.google.javascript.jscomp.Compiler var59 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var58);
    com.google.javascript.jscomp.Scope var60 = var59.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var61 = null;
    com.google.javascript.jscomp.NodeTraversal var62 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var59, var61);
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var64 = null;
    var63.setStripTypes(var64);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var67 = var66.getDirectedGraphNodes();
    java.util.List var68 = var66.getEdges();
    var63.setManageClosureDependencies(var68);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.script(var68);
    var62.traverseRoots(var68);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var73 = var72.getDirectedGraphNodes();
    java.util.List var74 = var72.getEdges();
    com.google.javascript.jscomp.CompilerOptions var75 = new com.google.javascript.jscomp.CompilerOptions();
    var75.setChainCalls(true);
    java.util.logging.Logger var78 = null;
    com.google.javascript.jscomp.LoggerErrorManager var79 = new com.google.javascript.jscomp.LoggerErrorManager(var78);
    var75.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var79);
    var75.setGatherCssNames(false);
    var51.<com.google.javascript.jscomp.SourceFile>initModules(var68, var74, var75);
    var0.setReplaceStringsFunctionDescriptions(var74);
    var0.setRemoveUnusedClassProperties(true);
    var0.setOutputCharset("goog.abstractMethod");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test62"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    int var35 = var29.getExtendedInterfacesCount();
    boolean var36 = var29.hasImplementedInterfaces();
    java.lang.Iterable var37 = var29.getAllExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test63"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.paramList();
    boolean var9 = var8.isNoSideEffectsCall();
    com.google.javascript.rhino.JSDocInfo var10 = var1.build(var8);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    com.google.javascript.rhino.JSDocInfoBuilder var27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var28 = var27.recordExpose();
    boolean var29 = var27.recordExterns();
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    boolean var36 = var33.isVarArgs();
    boolean var37 = var33.isArrayLit();
    com.google.javascript.rhino.Node var38 = var33.getNext();
    var27.markTypeNode(var33, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.JSTypeExpression var67 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var66);
    boolean var68 = var27.recordBaseType(var66);
    boolean var69 = var12.recordTypedef(var66);
    boolean var70 = var66.isVarArgs();
    boolean var71 = var1.recordTypedef(var66);
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var75 = var73.getBooleanProp((-1));
    var73.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var79 = new com.google.javascript.rhino.JSTypeExpression(var73, "goog.abstractMethod");
    boolean var80 = var1.recordBaseType(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test64"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
//     var6.traverseRoots(var12);
//     int var16 = var6.getLineNumber();
//     java.util.List var17 = null;
//     var6.traverseRoots(var17);
// 
//   }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test65"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.InputId var7 = com.google.javascript.jscomp.NodeUtil.getInputId(var4);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var4.setJSType(var8);
    boolean var10 = var4.isIn();
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var12 = null;
    var11.setStripTypes(var12);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var15 = var14.getDirectedGraphNodes();
    java.util.List var16 = var14.getEdges();
    var11.setManageClosureDependencies(var16);
    boolean var18 = var11.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var20 = null;
    var19.setStripTypes(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var23 = var22.getDirectedGraphNodes();
    java.util.List var24 = var22.getEdges();
    var19.setManageClosureDependencies(var24);
    var11.setManageClosureDependencies(var24);
    var11.setRemoveClosureAsserts(true);
    var11.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    var31.setManageClosureDependencies(var44);
    var31.setRemoveClosureAsserts(true);
    java.util.Map var49 = var31.getTweakReplacements();
    var11.setTweakReplacements(var49);
    var0.checkForCallingConventionDefiningCalls(var4, var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test66"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDeadAssignmentElimination(false);
    var0.setSkipAllPasses(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test67"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isConstructor();
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    java.util.List var88 = var85.getImplementedInterfaces();
    var31.setImplementedInterfaces(var88);
    com.google.javascript.rhino.jstype.FunctionType var90 = var31.toMaybeFunctionType();
    boolean var91 = var31.isOrdinaryFunction();
    boolean var92 = var31.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test68"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    boolean var75 = var31.removeProperty("LinkedGraph");
    boolean var76 = var31.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.JSType var78 = var31.getPropertyType("function (): {1292906510}");
    java.lang.Iterable var79 = var31.getParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test69"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    boolean var32 = var0.shouldColorizeErrorOutput();
    var0.setTightenTypes(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test70"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.lang.String var3 = var0.getAbstractMethodName();
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.rhino.jstype.FunctionType var5 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var6 = null;
    var0.applySubclassRelationship(var4, var5, var6);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var13 = var12.hasOneChild();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.returnNode();
    boolean var19 = var18.isArrayLit();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isOptionalArg();
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(0, var12, var17, var18, var23, 1, 100);
    int var31 = var23.getSourceOffset();
    com.google.javascript.rhino.Node var32 = var8.useSourceInfoFromForTree(var23);
    boolean var33 = var0.isOptionalParameter(var23);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var38 = var37.recordExpose();
    boolean var40 = var37.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    com.google.javascript.rhino.InputId var47 = com.google.javascript.jscomp.NodeUtil.getInputId(var44);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var44.setJSType(var48);
    com.google.javascript.rhino.JSDocInfo var50 = var37.build(var44);
    java.util.List var51 = var50.getThrownTypes();
    java.lang.String var52 = var50.getDeprecationReason();
    java.lang.String var53 = var50.getReturnDescription();
    boolean var54 = var50.isImplicitCast();
    var35.setJSDocInfo(var50);
    boolean var56 = var35.hasChildren();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    int var60 = var58.getSourceOffset();
    com.google.javascript.rhino.Node var61 = var58.cloneNode();
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    int var65 = var63.getSourceOffset();
    com.google.javascript.rhino.Node var66 = var63.cloneNode();
    var61.addChildrenToFront(var66);
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.InputId var74 = com.google.javascript.jscomp.NodeUtil.getInputId(var71);
    com.google.javascript.rhino.Node var75 = var61.useSourceInfoFrom(var71);
    com.google.javascript.rhino.Node var76 = var35.copyInformationFromForTree(var75);
    int var77 = var76.getSourceOffset();
    com.google.javascript.jscomp.CodingConvention.Bind var79 = var0.describeFunctionBind(var76, true);
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    boolean var86 = var83.isOr();
    boolean var87 = var83.isExprResult();
    com.google.javascript.rhino.Node var88 = var83.cloneTree();
    java.lang.String var89 = com.google.javascript.jscomp.NodeUtil.getSourceName(var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var90 = var0.isInlinableFunction(var83);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.abstractMethod"+ "'", var3.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "2014/12/24 11:10"+ "'", var52.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test71"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setAssumeStrictThis(false);
    var0.setConvertToDottedProperties(true);
    var0.setCrossModuleMethodMotion(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test72"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("null(null)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test73"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setRemoveUnusedPrototypePropertiesInExterns(false);
    var0.setInlineGetters(true);
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var20 = null;
    var19.setStripTypes(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var23 = var22.getDirectedGraphNodes();
    java.util.List var24 = var22.getEdges();
    var19.setManageClosureDependencies(var24);
    boolean var26 = var19.isExternExportsEnabled();
    var19.setCheckCaja(false);
    var19.setTightenTypes(false);
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var34 = new com.google.javascript.jscomp.ComposeWarningsGuard(var33);
    com.google.javascript.jscomp.Compiler var35 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var36 = var35.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var37 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var35);
    com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var42 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make(var40, var42);
    int var44 = var43.getCharno();
    com.google.javascript.jscomp.CheckLevel var45 = var43.getDefaultLevel();
    java.lang.String var46 = var37.formatError(var43);
    com.google.javascript.jscomp.CheckLevel var47 = var34.level(var43);
    var19.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var34);
    com.google.javascript.jscomp.JSModule var50 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var51 = var50.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var52 = new com.google.javascript.jscomp.ComposeWarningsGuard(var51);
    com.google.javascript.jscomp.DiagnosticGroup var53 = null;
    boolean var54 = var52.enables(var53);
    com.google.javascript.jscomp.CheckLevel var56 = null;
    com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var56, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var59 = new com.google.javascript.jscomp.DiagnosticType[] { var58};
    com.google.javascript.jscomp.DiagnosticGroup var60 = new com.google.javascript.jscomp.DiagnosticGroup(var59);
    com.google.javascript.jscomp.CompilerOptions var61 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var62 = null;
    var61.setStripTypes(var62);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var64 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var65 = var64.getDirectedGraphNodes();
    java.util.List var66 = var64.getEdges();
    var61.setManageClosureDependencies(var66);
    boolean var68 = var61.isExternExportsEnabled();
    var61.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var73 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var75 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var76 = com.google.javascript.jscomp.JSError.make(var73, var75);
    int var77 = var76.getCharno();
    com.google.javascript.jscomp.CheckLevel var78 = var76.getDefaultLevel();
    var61.setReportUnknownTypes(var78);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var80 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var60, var78);
    boolean var81 = var52.enables(var60);
    boolean var82 = var34.enables(var60);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var46.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test74"); }


    com.google.javascript.jscomp.CheckLevel var4 = null;
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var4, "");
    com.google.javascript.jscomp.CheckLevel var8 = null;
    com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var8, "");
    int var11 = var6.compareTo(var10);
    com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    boolean var21 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var19);
    int var22 = var19.getLength();
    com.google.javascript.rhino.Node var23 = null;
    boolean var24 = var19.hasChild(var23);
    com.google.javascript.rhino.Node var25 = var17.useSourceInfoIfMissingFromForTree(var19);
    var19.setSourceFileForTesting("Unversioned directory");
    boolean var28 = var19.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var29 = var19.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var33 = null;
    java.util.logging.Logger var34 = null;
    com.google.javascript.jscomp.LoggerErrorManager var35 = new com.google.javascript.jscomp.LoggerErrorManager(var33, var34);
    com.google.javascript.jscomp.Compiler var36 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var35);
    com.google.javascript.jscomp.Scope var37 = var36.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal var39 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var36, var38);
    com.google.javascript.jscomp.Scope var40 = var39.getScope();
    com.google.javascript.rhino.Node var41 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var46 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make(var44, var46);
    com.google.javascript.jscomp.DiagnosticType var48 = var47.getType();
    java.lang.String[] var50 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var51 = var39.makeError(var41, var48, var50);
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var19, var32, var50);
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var14, var50);
    com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("hi", 10, (-1), var10, var50);
    int var55 = var54.getCharno();
    com.google.javascript.jscomp.DiagnosticType var56 = var54.getType();
    int var57 = var54.getNodeSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));

  }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test75"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var6 = var5.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var13 = null;
//     var12.setStripTypes(var13);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var16 = var15.getDirectedGraphNodes();
//     java.util.List var17 = var15.getEdges();
//     var12.setManageClosureDependencies(var17);
//     boolean var19 = var12.isExternExportsEnabled();
//     var12.setCollapsePropertiesOnExternTypes(false);
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
//     com.google.javascript.jscomp.JSSourceFile var23 = null;
//     com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var26 = var25.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
//     com.google.javascript.jscomp.JSModule[] var28 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var26);
//     com.google.javascript.jscomp.JSModuleGraph var29 = new com.google.javascript.jscomp.JSModuleGraph(var28);
//     com.google.javascript.jscomp.JSModuleGraph var30 = new com.google.javascript.jscomp.JSModuleGraph(var28);
//     com.google.javascript.jscomp.JSModuleGraph var31 = new com.google.javascript.jscomp.JSModuleGraph(var28);
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var33 = null;
//     var32.setStripTypes(var33);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var36 = var35.getDirectedGraphNodes();
//     java.util.List var37 = var35.getEdges();
//     var32.setManageClosureDependencies(var37);
//     boolean var39 = var32.isExternExportsEnabled();
//     var32.setCheckCaja(false);
//     java.util.Set var42 = null;
//     var32.setReplaceStringsReservedStrings(var42);
//     com.google.javascript.rhino.JSDocInfoBuilder var45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var46 = var45.recordExpose();
//     boolean var48 = var45.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var53 = var52.getNext();
//     com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
//     com.google.javascript.rhino.InputId var55 = com.google.javascript.jscomp.NodeUtil.getInputId(var52);
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     var52.setJSType(var56);
//     com.google.javascript.rhino.JSDocInfo var58 = var45.build(var52);
//     java.lang.String var59 = var58.getFileOverview();
//     java.util.Set var60 = var58.getModifies();
//     var32.setReplaceStringsReservedStrings(var60);
//     var32.setChainCalls(true);
//     com.google.javascript.jscomp.CheckLevel var64 = null;
//     var32.setReportMissingOverride(var64);
//     var32.setInputDelimiter("{proxy:{599688852}}");
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var69 = var68.getDirectedGraphNodes();
//     java.lang.Iterable var70 = var68.getDirectedGraphNodes();
//     var68.pushEdgeAnnotations();
//     java.lang.String var72 = var68.getName();
//     java.util.List var73 = var68.getEdges();
//     var32.setManageClosureDependencies(var73);
//     com.google.javascript.jscomp.Result var75 = var3.compile(var23, var28, var32);
// 
//   }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test76"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(10.0d, 153, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test77"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var2 = null;
    var1.setStripTypes(var2);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var5 = var4.getDirectedGraphNodes();
    java.util.List var6 = var4.getEdges();
    var1.setManageClosureDependencies(var6);
    var1.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.jscomp.JSError var15 = null;
    com.google.javascript.jscomp.CheckLevel var16 = var14.level(var15);
    var1.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var14);
    com.google.javascript.jscomp.graph.GraphNode var18 = var0.getNode((java.lang.Object)var14);
    var0.pushNodeAnnotations();
    java.lang.String var20 = var0.getName();
    var0.popNodeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "LinkedGraph"+ "'", var20.equals("LinkedGraph"));

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test78"); }


    com.google.javascript.jscomp.AbstractCompiler var0 = null;
    com.google.javascript.jscomp.NodeTraversal.Callback var1 = null;
    com.google.javascript.jscomp.NodeTraversal var2 = new com.google.javascript.jscomp.NodeTraversal(var0, var1);
    com.google.javascript.jscomp.Scope var3 = var2.getScope();
    com.google.javascript.rhino.Node var4 = var2.getCurrentNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test79"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var5.isGetterDef();
    int var7 = var5.getSourcePosition();
    var5.setVarArgs(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test80"); }


    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var4 = var2.recordExterns();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    boolean var12 = var8.isArrayLit();
    com.google.javascript.rhino.Node var13 = var8.getNext();
    var2.markTypeNode(var8, 10, 100, 0, 0, false);
    boolean var20 = var8.isIn();
    com.google.javascript.jscomp.ClosureCodingConvention var21 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    boolean var27 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var25);
    int var28 = var25.getLength();
    com.google.javascript.rhino.Node var29 = null;
    boolean var30 = var25.hasChild(var29);
    com.google.javascript.rhino.Node var31 = var23.useSourceInfoIfMissingFromForTree(var25);
    com.google.javascript.jscomp.CodingConvention.Bind var33 = var21.describeFunctionBind(var23, false);
    int var34 = var23.getSourcePosition();
    boolean var35 = var23.isTrue();
    boolean var36 = var23.isVar();
    boolean var37 = var8.isEquivalentTo(var23);
    com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node(0, var23);
    boolean var39 = var38.isBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test81"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    com.google.javascript.rhino.JSDocInfo.Visibility var16 = null;
    var14.setVisibility(var16);
    boolean var19 = var14.hasDescriptionForParameter("(module$2014$12$24 11:10)");
    boolean var21 = var14.hasParameter("BANG 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test82"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isConstructor();
    boolean var71 = var31.isOrdinaryFunction();
    com.google.common.collect.ImmutableList var72 = var31.getTemplateTypeNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test83"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    boolean var90 = var48.isEmptyType();
    com.google.javascript.rhino.Node var91 = var48.getParametersNode();
    java.lang.Iterable var92 = var48.getOwnImplementedInterfaces();
    com.google.javascript.rhino.JSDocInfo var94 = var48.getOwnPropertyJSDocInfo("module$");
    boolean var95 = var48.hasAnyTemplateInternal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test84"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var70 = var31.getTypeOfThis();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.toObjectType();
    com.google.javascript.rhino.JSDocInfo var72 = var70.getJSDocInfo();
    boolean var73 = var70.isNominalConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test85"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isConstructor();
    boolean var71 = var31.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.ObjectType var72 = var31.getPrototype();
    boolean var73 = var31.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test86"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setCheckControlStructures(false);
    var0.setInlineGetters(true);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test87"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    java.util.Collection var47 = var0.getAssertionFunctions();
    java.lang.String var48 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var52 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    var52.setJSType(var53);
    boolean var55 = var52.isScript();
    boolean var56 = var0.isVarArgsParameter(var52);
    boolean var58 = var0.isValidEnumKey("function (): {140836661}");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    boolean var66 = var62.isSwitch();
    boolean var67 = var62.isIf();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var71 = var69.getBooleanProp((-1));
    var69.setSourceEncodedPosition(10);
    boolean var74 = var69.isContinue();
    boolean var75 = var69.isComma();
    boolean var76 = var69.isCase();
    com.google.javascript.rhino.Node var77 = var69.cloneTree();
    com.google.javascript.rhino.Node var78 = var62.useSourceInfoIfMissingFromForTree(var69);
    java.util.List var79 = var0.identifyTypeDeclarationCall(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test88"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.ErrorReporter var75 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var75);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    var76.unregisterPropertyOnType("Unversioned directory", var78);
    com.google.javascript.rhino.jstype.JSType var80 = null;
    com.google.javascript.jscomp.JSModule var82 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var83 = var82.getDependencies();
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.block(var83);
    com.google.javascript.rhino.jstype.FunctionType var85 = var76.createFunctionTypeWithVarArgs(var80, var83);
    boolean var86 = var85.hasAnyTemplateInternal();
    java.lang.Iterable var87 = var85.getAllExtendedInterfaces();
    boolean var88 = var85.isEmptyType();
    java.util.Set var89 = var85.getOwnPropertyNames();
    var57.setAliasableStrings(var89);
    var57.setNameReferenceReportPath("STRING hi 0 [length: 2]\n");
    var57.setCommonJSModulePathPrefix("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test89"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.JSTypeExpression var27 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var26);
    boolean var28 = var1.recordExtendedInterface(var26);
    com.google.javascript.jscomp.SourceFile var31 = new com.google.javascript.jscomp.SourceFile("()");
    var1.markName("module$2014$12$24 11:10", (com.google.javascript.rhino.jstype.StaticSourceFile)var31, 1, 1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    com.google.javascript.jscomp.CompilerOptions var52 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var53 = null;
    var52.setStripTypes(var53);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var56 = var55.getDirectedGraphNodes();
    java.util.List var57 = var55.getEdges();
    var52.setManageClosureDependencies(var57);
    boolean var59 = var52.isExternExportsEnabled();
    var52.setCheckCaja(false);
    java.util.Set var62 = null;
    var52.setReplaceStringsReservedStrings(var62);
    com.google.javascript.rhino.JSDocInfoBuilder var65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var66 = var65.recordExpose();
    boolean var68 = var65.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = var72.getNext();
    com.google.javascript.rhino.Node var74 = var70.srcrefTree(var72);
    com.google.javascript.rhino.InputId var75 = com.google.javascript.jscomp.NodeUtil.getInputId(var72);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var72.setJSType(var76);
    com.google.javascript.rhino.JSDocInfo var78 = var65.build(var72);
    java.lang.String var79 = var78.getFileOverview();
    java.util.Set var80 = var78.getModifies();
    var52.setReplaceStringsReservedStrings(var80);
    var38.setDirectives(var80);
    boolean var83 = var1.recordSuppressions(var80);
    boolean var84 = var1.recordExport();
    boolean var85 = var1.recordNoTypeCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test90"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    com.google.javascript.jscomp.ClosureCodingConvention var39 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var41 = var39.isConstantKey("2014/12/24 11:10");
    java.util.Collection var42 = var39.getAssertionFunctions();
    boolean var44 = var39.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isOptionalArg();
    java.lang.String var56 = var48.toString(false, false, true);
    java.util.List var57 = var39.identifyTypeDeclarationCall(var48);
    java.lang.String var58 = var39.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    int var62 = var60.getSourceOffset();
    com.google.javascript.rhino.Node var63 = var60.cloneNode();
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    int var67 = var65.getSourceOffset();
    com.google.javascript.rhino.Node var68 = var65.cloneNode();
    var63.addChildrenToFront(var68);
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var39.describeFunctionBind(var63, true);
    com.google.javascript.rhino.Node var72 = var2.newOptionalParameterFromNode(var63);
    java.lang.Iterable var73 = var63.siblings();
    com.google.javascript.rhino.Node var75 = var63.getAncestor(0);
    boolean var76 = var75.isNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "BANG"+ "'", var56.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test91"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    com.google.common.collect.ImmutableList var92 = var32.getTemplateTypeNames();
    boolean var93 = var32.isBooleanObjectType();
    boolean var95 = var32.hasOwnProperty("goog.global");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test92"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.jscomp.GoogleCodingConvention var14 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var18 = var16.recordExterns();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isArrayLit();
    com.google.javascript.rhino.Node var27 = var22.getNext();
    var16.markTypeNode(var22, 10, 100, 0, 0, false);
    boolean var34 = var22.isIn();
    boolean var35 = var0.isPrototypeAlias(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test93"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("()");
    com.google.javascript.rhino.InputId var3 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var6 = var4.isConstantKey("2014/12/24 11:10");
    java.lang.String var7 = var4.getAbstractMethodName();
    boolean var8 = var3.equals((java.lang.Object)var7);
    java.lang.String var9 = var3.toString();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasCachedValues();
    boolean var22 = var20.isFunctionPrototypeType();
    boolean var23 = var3.equals((java.lang.Object)var22);
    var1.setInputId(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.abstractMethod"+ "'", var7.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "InputId: "+ "'", var9.equals("InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test94"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setCheckTypes(false);
    var0.setMoveFunctionDeclarations(true);
    var0.setLineBreak(true);
    var0.setAppNameStr("BANG 0\n    STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test95() {}
//   public void test95() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test95"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getDependencies();
//     com.google.javascript.jscomp.SourceAst var12 = null;
//     com.google.javascript.rhino.InputId var13 = null;
//     com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12, var13, true);
//     com.google.javascript.jscomp.JSModule var16 = var15.getModule();
//     var10.add(var15);
//     com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var10.addFirst(var19);
//     java.util.Set var21 = var10.getAllDependencies();
//     var10.removeAll();
//     com.google.javascript.jscomp.SourceAst var23 = null;
//     com.google.javascript.rhino.InputId var24 = null;
//     com.google.javascript.jscomp.CompilerInput var26 = new com.google.javascript.jscomp.CompilerInput(var23, var24, true);
//     com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var23, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var10.addFirst(var29);
//     com.google.javascript.jscomp.SourceAst var31 = null;
//     com.google.javascript.rhino.InputId var32 = null;
//     com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31, var32, true);
//     com.google.javascript.jscomp.SourceAst var35 = var34.getAst();
//     com.google.javascript.jscomp.JSModule var36 = null;
//     var34.setModule(var36);
//     var10.add(var34);
//     var3.setModule(var10);
//     java.lang.String var40 = var3.toString();
// 
//   }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test96"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    boolean var6 = var1.isConstant("Unversioned directory");
    com.google.javascript.jscomp.graph.GraphNode var7 = var0.createNode((java.lang.Object)var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var10 = var8.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    java.util.List var28 = var25.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var29 = var25.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var8.createDirectedGraphNode((java.lang.Object)var25);
    java.util.List var31 = var0.getNeighborNodes(var30);
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    boolean var39 = var32.isExternExportsEnabled();
    var32.setManageClosureDependencies(true);
    boolean var42 = var32.shouldColorizeErrorOutput();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var43 = var0.getDirectedGraphNode((java.lang.Object)var32);
    var32.setMarkAsCompiled(true);
    com.google.javascript.jscomp.ErrorHandler var46 = null;
    var32.setErrorHandler(var46);
    var32.setDefineToStringLiteral("null(null)", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test97"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.removeFirstChild();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    boolean var11 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var9);
    int var12 = var9.getLength();
    com.google.javascript.rhino.Node var13 = null;
    boolean var14 = var9.hasChild(var13);
    com.google.javascript.rhino.Node var15 = var7.useSourceInfoIfMissingFromForTree(var9);
    var9.setSourceFileForTesting("Unversioned directory");
    boolean var18 = var9.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var19 = var9.getStaticSourceFile();
    com.google.javascript.rhino.Node var20 = var2.srcref(var9);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var20);
    boolean var22 = var21.isOptionalArg();
    com.google.javascript.rhino.JSDocInfoBuilder var24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var25 = var24.recordExpose();
    boolean var26 = var24.recordExterns();
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    boolean var33 = var30.isVarArgs();
    boolean var34 = var30.isArrayLit();
    com.google.javascript.rhino.Node var35 = var30.getNext();
    var24.markTypeNode(var30, 10, 100, 0, 0, false);
    boolean var42 = var30.hasChildren();
    boolean var43 = var30.isBlock();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    int var47 = var45.getSourceOffset();
    com.google.javascript.rhino.Node var48 = var45.removeFirstChild();
    boolean var49 = var45.isDefaultCase();
    com.google.javascript.rhino.Node var50 = var30.useSourceInfoFrom(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.tryCatch(var21, var50);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test98"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.Node var17 = var10.getPropertyNode("function (): ?");
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var20 = var10.getParameterType();
    boolean var21 = var10.isNullType();
    boolean var22 = var10.hasCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test99"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var45 = var33.isExported("module$2014$12$24 11:10", false);
    boolean var48 = var33.isExported("", false);
    boolean var50 = var33.isValidEnumKey("STRING hi 0 [length: 2]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test100"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("{proxy:{1743833346}}", 2, 153);
    boolean var4 = var3.isBreak();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test101"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    boolean var31 = var1.recordFileOverview("");
    boolean var32 = var1.recordNoTypeCheck();
    boolean var35 = var1.recordParameterDescription("LABEL_NAME hi!\n", "Node tree inequality:\nTree1:\nBLOCK\n\n\nTree2:\nLABEL_NAME hi! 0\n\n\nSubtree1: BLOCK\n\n\nSubtree2: LABEL_NAME hi! 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test102() {}
//   public void test102() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test102"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     var1.setTypedPercent(10.0d);
//     var1.setTypedPercent(1.0d);
//     com.google.javascript.jscomp.JSError[] var7 = var1.getErrors();
//     var1.setTypedPercent(1.0d);
//     var1.generateReport();
// 
//   }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test103"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    var0.disableRuntimeTypeCheck();
    var0.setAliasStringsBlacklist("module$ERROR");
    var0.setComputeFunctionSideEffects(false);
    var0.setCheckControlStructures(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test104"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.InputId var16 = var14.getInputId();
    boolean var17 = var14.hasChildren();
    java.util.List var18 = var0.identifyTypeDeclarationCall(var14);
    boolean var20 = var0.isSuperClassReference("STRING hi 0 [length: 2]\n.<hi>");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test105"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    var1.markAnnotation("", 2, 2);
    boolean var14 = var1.recordLends("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test106"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.util.List var20 = var19.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    var21.clearNodeAnnotations();
    java.util.List var24 = var21.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    var25.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var25.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var37 = null;
    var25.setSourceMapDetailLevel(var37);
    com.google.javascript.jscomp.CodingConvention var39 = var25.getCodingConvention();
    var25.setMarkNoSideEffectCalls(false);
    var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var20, var24, var25);
    boolean var43 = var3.isIdeMode();
    com.google.javascript.jscomp.JSError[] var44 = var3.getMessages();
    double var45 = var3.getProgress();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var46 = var3.toSourceArray();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test107"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    com.google.javascript.rhino.Node var71 = var56.getSource();
    com.google.javascript.rhino.Node var72 = var56.getSource();
    java.lang.Iterable var73 = var56.getCtorExtendedInterfaces();
    boolean var74 = var56.isNumberValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test108"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var70 = var31.getTypeOfThis();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.toObjectType();
    com.google.javascript.rhino.JSDocInfo var72 = var70.getJSDocInfo();
    boolean var73 = var70.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test109"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    java.util.Set var38 = var36.getOwnPropertyNames();
    boolean var39 = var36.isUnknownType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test110"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.JSTypeNative[] var91 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var92 = var24.createUnionType(var91);
    boolean var93 = var92.isParameterizedType();
    com.google.javascript.rhino.jstype.JSType var94 = var92.collapseUnion();
    boolean var95 = var94.isInterface();
    boolean var96 = var94.isStringObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test111"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isInstanceType();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var71 = var31.getPossibleToBooleanOutcomes();
    com.google.javascript.rhino.jstype.JSType var73 = var31.getRestrictedTypeGivenToBooleanOutcome(false);
    boolean var74 = var73.isCheckedUnknownType();
    boolean var75 = var73.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test112"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    boolean var15 = var0.getInferTypes();
    java.io.PrintStream var16 = null;
    com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler(var16);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.lang.String var40 = var39.getFileOverview();
    java.util.Set var41 = var39.getModifies();
    java.util.List var42 = var39.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var44 = null;
    var43.setStripTypes(var44);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.util.List var48 = var46.getEdges();
    var43.setManageClosureDependencies(var48);
    var43.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var43.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var55 = null;
    var43.setSourceMapDetailLevel(var55);
    var17.<com.google.javascript.jscomp.SourceFile>initModules(var23, var42, var43);
    var43.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CheckLevel var61 = null;
    com.google.javascript.jscomp.DiagnosticType var63 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var61, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var64 = new com.google.javascript.jscomp.DiagnosticType[] { var63};
    com.google.javascript.jscomp.DiagnosticGroup var65 = new com.google.javascript.jscomp.DiagnosticGroup(var64);
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var69 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var70 = var69.getDirectedGraphNodes();
    java.util.List var71 = var69.getEdges();
    var66.setManageClosureDependencies(var71);
    boolean var73 = var66.isExternExportsEnabled();
    var66.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var80 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var78, var80);
    int var82 = var81.getCharno();
    com.google.javascript.jscomp.CheckLevel var83 = var81.getDefaultLevel();
    var66.setReportUnknownTypes(var83);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var85 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var65, var83);
    com.google.javascript.jscomp.DiagnosticType var88 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var90 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var91 = com.google.javascript.jscomp.JSError.make(var88, var90);
    com.google.javascript.jscomp.CheckLevel var92 = var85.level(var91);
    var43.setAggressiveVarCheck(var92);
    var0.setReportUnknownTypes(var92);
    com.google.javascript.jscomp.CodingConvention var95 = var0.getCodingConvention();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test113"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isInstanceOf();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    var6.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var1.addChildToFront(var6);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    var12.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isFor();
    boolean var27 = var22.isNumber();
    com.google.javascript.rhino.Node var28 = var22.getNext();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    com.google.javascript.rhino.jstype.JSType var64 = var63.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var65 = var64.dereference();
    boolean var66 = var64.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var67 = var12.createEnumType("STRING hi 0 [length: 2]\n", var22, var64);
    boolean var68 = var67.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    var70.unregisterPropertyOnType("Unversioned directory", var72);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.jscomp.JSModule var76 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var77 = var76.getDependencies();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.block(var77);
    com.google.javascript.rhino.jstype.FunctionType var79 = var70.createFunctionTypeWithVarArgs(var74, var77);
    boolean var80 = var79.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var81 = var67.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var79);
    com.google.javascript.rhino.Node var82 = var67.getSource();
    boolean var83 = var6.hasChild(var82);
    com.google.javascript.rhino.Node var84 = var82.removeFirstChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test114"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    com.google.javascript.jscomp.ClosureCodingConvention var5 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var7 = var5.isConstantKey("2014/12/24 11:10");
    java.util.Collection var8 = var5.getAssertionFunctions();
    boolean var10 = var5.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    java.lang.String var22 = var14.toString(false, false, true);
    java.util.List var23 = var5.identifyTypeDeclarationCall(var14);
    java.util.Collection var24 = var5.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    boolean var30 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var28);
    int var31 = var28.getLength();
    com.google.javascript.rhino.Node var32 = null;
    boolean var33 = var28.hasChild(var32);
    com.google.javascript.rhino.Node var34 = var26.useSourceInfoIfMissingFromForTree(var28);
    var28.setSourceFileForTesting("Unversioned directory");
    boolean var37 = var28.isWith();
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var39 = null;
    var38.setStripTypes(var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    var38.setManageClosureDependencies(var43);
    boolean var45 = var38.isExternExportsEnabled();
    var38.setCheckCaja(false);
    var38.setGroupVariableDeclarations(true);
    java.util.Map var50 = var38.getDefineReplacements();
    var5.checkForCallingConventionDefiningCalls(var28, var50);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var5, "function (): {2142004661}");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(var53);
    com.google.javascript.jscomp.CodingConvention.Bind var55 = var1.describeFunctionBind(var53);
    com.google.javascript.jscomp.GoogleCodingConvention var56 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var57 = com.google.javascript.rhino.ScriptRuntime.getMessage1("", (java.lang.Object)var1);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "BANG"+ "'", var22.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test115"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    int var6 = var3.getLength();
    com.google.javascript.rhino.Node var7 = null;
    boolean var8 = var3.hasChild(var7);
    com.google.javascript.rhino.Node var9 = var1.useSourceInfoIfMissingFromForTree(var3);
    var3.setSourceFileForTesting("Unversioned directory");
    boolean var12 = var3.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var13 = var3.getStaticSourceFile();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var21 = var17.getBooleanProp(100);
    boolean var22 = var17.isRegExp();
    boolean var23 = var3.isEquivalentToTyped(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test116"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.JSModule[] var4 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var2);
    com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var7 = var6.getDirectedGraphNodes();
    java.lang.Iterable var8 = var6.getDirectedGraphNodes();
    java.util.List var9 = var6.getGraphvizNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    boolean var26 = var24.hasType();
    java.util.List var27 = var24.getThrownTypes();
    java.util.List var28 = var5.manageDependencies(var9, var27);
    com.google.javascript.jscomp.JSModuleGraph var29 = new com.google.javascript.jscomp.JSModuleGraph(var27);
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    var31.removeAll();
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var35.removeAll();
    var31.addDependency(var35);
    java.util.List var38 = var31.getInputs();
    java.lang.String var39 = var31.getName();
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getProvides();
    com.google.javascript.jscomp.CompilerInput var44 = var41.getByName("()");
    com.google.javascript.jscomp.SourceAst var45 = null;
    com.google.javascript.rhino.InputId var46 = null;
    com.google.javascript.jscomp.CompilerInput var48 = new com.google.javascript.jscomp.CompilerInput(var45, var46, true);
    com.google.javascript.jscomp.SourceAst var49 = var48.getAst();
    var41.add(var48);
    boolean var51 = var29.dependsOn(var31, var41);
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.jscomp.SourceAst var55 = null;
    com.google.javascript.rhino.InputId var56 = null;
    com.google.javascript.jscomp.CompilerInput var58 = new com.google.javascript.jscomp.CompilerInput(var55, var56, true);
    com.google.javascript.jscomp.JSModule var59 = var58.getModule();
    var53.add(var58);
    com.google.javascript.jscomp.JSModule var62 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var63 = var62.getDependencies();
    com.google.javascript.jscomp.SourceAst var64 = null;
    com.google.javascript.rhino.InputId var65 = null;
    com.google.javascript.jscomp.CompilerInput var67 = new com.google.javascript.jscomp.CompilerInput(var64, var65, true);
    com.google.javascript.jscomp.JSModule var68 = var67.getModule();
    var62.add(var67);
    com.google.javascript.jscomp.SourceFile var71 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var62.addFirst(var71);
    java.util.Set var73 = var62.getAllDependencies();
    java.lang.String var74 = var62.getName();
    var53.addDependency(var62);
    com.google.javascript.jscomp.JSModule var77 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var78 = var77.getDependencies();
    com.google.javascript.jscomp.SourceAst var79 = null;
    com.google.javascript.rhino.InputId var80 = null;
    com.google.javascript.jscomp.CompilerInput var82 = new com.google.javascript.jscomp.CompilerInput(var79, var80, true);
    com.google.javascript.jscomp.JSModule var83 = var82.getModule();
    var77.add(var82);
    com.google.javascript.jscomp.SourceFile var86 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var77.addFirst(var86);
    java.util.Set var88 = var77.getAllDependencies();
    java.lang.String var89 = var77.getName();
    boolean var90 = var29.dependsOn(var53, var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Unversioned directory"+ "'", var39.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "Unversioned directory"+ "'", var74.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "Unversioned directory"+ "'", var89.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test117"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getTypeNodes();
    java.lang.String var16 = var14.getFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test118"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    java.lang.String var20 = var14.getOriginalCommentString();
    boolean var21 = var14.hasTypedefType();
    java.util.List var22 = var14.getExtendedInterfaces();
    java.lang.String var23 = var14.getBlockDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test119"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    int var6 = var3.getLength();
    com.google.javascript.rhino.Node var7 = null;
    boolean var8 = var3.hasChild(var7);
    com.google.javascript.rhino.Node var9 = var1.useSourceInfoIfMissingFromForTree(var3);
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    boolean var17 = var13.isArrayLit();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var20 = var19.isGetterDef();
    var19.putIntProp((-1), 10);
    var13.addChildrenToFront(var19);
    boolean var25 = var3.hasChild(var13);
    com.google.javascript.jscomp.SourceFile var27 = com.google.javascript.jscomp.SourceFile.fromFile("module$WARNING _ BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var27);
    com.google.javascript.jscomp.CompilerInput var30 = new com.google.javascript.jscomp.CompilerInput(var27, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test120"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
    com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
    com.google.javascript.jscomp.JSModule var5 = null;
    var3.setModule(var5);
    com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
    com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
    com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var11 = var10.getDependencies();
    com.google.javascript.jscomp.SourceAst var12 = null;
    com.google.javascript.rhino.InputId var13 = null;
    com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12, var13, true);
    com.google.javascript.jscomp.JSModule var16 = var15.getModule();
    var10.add(var15);
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var10.addFirst(var19);
    java.util.Set var21 = var10.getAllDependencies();
    var10.removeAll();
    com.google.javascript.jscomp.SourceAst var23 = null;
    com.google.javascript.rhino.InputId var24 = null;
    com.google.javascript.jscomp.CompilerInput var26 = new com.google.javascript.jscomp.CompilerInput(var23, var24, true);
    com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var23, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var10.addFirst(var29);
    com.google.javascript.jscomp.SourceAst var31 = null;
    com.google.javascript.rhino.InputId var32 = null;
    com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31, var32, true);
    com.google.javascript.jscomp.SourceAst var35 = var34.getAst();
    com.google.javascript.jscomp.JSModule var36 = null;
    var34.setModule(var36);
    var10.add(var34);
    var3.setModule(var10);
    com.google.javascript.jscomp.SourceAst var40 = var3.getAst();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test121"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var39);
    var0.setDevirtualizePrototypeMethods(false);
    var0.setExternExportsPath("function (): {1263056885}");
    var0.setExportTestFunctions(true);
    var0.setCheckMissingGetCssNameBlacklist("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test122"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("(STRING hi 0 [length: 2]\n)");
    java.lang.String var2 = var1.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test123"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    boolean var64 = var63.matchesNumberContext();
    java.lang.String var65 = var63.getReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var65.equals("STRING hi 0 [length: 2]\n"));

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test124"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.matchesObjectContext();
    com.google.javascript.rhino.jstype.JSType var64 = var58.getPropertyType("function (): {2142004661}");
    boolean var65 = var58.canBeCalled();
    boolean var66 = var58.isFunctionPrototypeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test125"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setFoldConstants(false);
    var0.setAssumeStrictThis(false);
    var0.setReplaceIdGenerators(true);
    var0.setTweakToBooleanLiteral("(LABEL_NAME hi!): ()", false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test126"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isArrayLit();
    com.google.javascript.rhino.Node var43 = var38.getNext();
    var32.markTypeNode(var38, 10, 100, 0, 0, false);
    boolean var50 = var38.isCall();
    com.google.javascript.rhino.Node var51 = var5.newParameterFromNode(var38);
    com.google.javascript.rhino.Node var52 = var51.removeChildren();
    boolean var53 = var51.isDefaultCase();
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    int var57 = var55.getSourceOffset();
    com.google.javascript.rhino.Node var58 = var55.cloneNode();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    int var62 = var60.getSourceOffset();
    boolean var63 = var60.isAssignAdd();
    int var64 = var58.getIndexOfChild(var60);
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.InputId var68 = var66.getInputId();
    com.google.javascript.rhino.Node var69 = var58.useSourceInfoFrom(var66);
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.returnNode();
    var70.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var73 = var70.cloneNode();
    boolean var74 = var70.isGetProp();
    com.google.javascript.rhino.Node var75 = var69.copyInformationFromForTree(var70);
    com.google.javascript.rhino.Node var76 = var51.clonePropsFrom(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test127"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.jscomp.VariableRenamingPolicy var12 = null;
    var0.setVariableRenaming(var12);
    var0.setDefineToNumberLiteral("()", 306);
    var0.setRewriteFunctionExpressions(true);
    boolean var19 = var0.isRemoveUnusedClassProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test128"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("module$2014$12$24 11:10", "goog.exportSymbol");
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "module$2014$12$24 11:10: goog.exportSymbol"+ "'", var3.equals("module$2014$12$24 11:10: goog.exportSymbol"));

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test129"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var0.setRemoveClosureAsserts(true);
    com.google.common.collect.Multimap var22 = null;
    var0.setCustomPasses(var22);
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make(var26, var28);
    int var30 = var29.getCharno();
    com.google.javascript.jscomp.CheckLevel var31 = var29.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test130"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isAdd();
    boolean var4 = var1.isNE();
    java.lang.Iterable var5 = var1.children();
    boolean var6 = var1.isBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test131"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.String var4 = var0.getName();
    java.util.List var5 = var0.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var8 = var6.hasNode((java.lang.Object)1);
    com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var11 = var10.getProvides();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var12 = var6.createDirectedGraphNode((java.lang.Object)var11);
    java.util.List var13 = var0.getNeighborNodes(var12);
    var0.popEdgeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "LinkedGraph"+ "'", var4.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test132"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var4 = var3.hasOneChild();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    boolean var10 = var9.isArrayLit();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
    com.google.javascript.rhino.Node var22 = var9.getLastSibling();
    com.google.javascript.rhino.Node var24 = var22.getAncestor(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test133"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(2, "hi!", (-1), (-1));
    com.google.javascript.jscomp.JSModule var6 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var7 = var6.getDependencies();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    boolean var9 = var8.hasChildren();
    boolean var10 = var4.hasChild(var8);
    com.google.javascript.jscomp.ClosureCodingConvention var11 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    boolean var17 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var15);
    int var18 = var15.getLength();
    com.google.javascript.rhino.Node var19 = null;
    boolean var20 = var15.hasChild(var19);
    com.google.javascript.rhino.Node var21 = var13.useSourceInfoIfMissingFromForTree(var15);
    com.google.javascript.jscomp.CodingConvention.Bind var23 = var11.describeFunctionBind(var13, false);
    java.lang.String var24 = var11.getExportPropertyFunction();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.jscomp.CodingConvention.Bind var27 = var11.describeFunctionBind(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    boolean var34 = var31.isVarArgs();
    com.google.javascript.rhino.Node var36 = var31.getChildAtIndex(1);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.JSDocInfo var43 = var40.getJSDocInfo();
    com.google.javascript.rhino.Node var44 = var31.copyInformationFrom(var40);
    java.lang.Object var46 = null;
    var31.putProp(0, var46);
    com.google.javascript.rhino.JSTypeExpression var49 = new com.google.javascript.rhino.JSTypeExpression(var31, "()");
    com.google.javascript.rhino.jstype.StaticScope var50 = null;
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.JSType var62 = var49.evaluate(var50, var52);
    java.lang.Iterable var64 = var52.getTypesWithProperty("hi!");
    java.lang.Iterable var66 = var52.getTypesWithProperty("function (): {1292906510}");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var68.clearEdgeAnnotations();
    java.lang.Iterable var70 = var68.getDirectedGraphNodes();
    java.util.List var71 = var68.getEdges();
    java.util.List var72 = var68.getEdges();
    com.google.javascript.jscomp.CompilerOptions var73 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var74 = null;
    var73.setStripTypes(var74);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var76 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var77 = var76.getDirectedGraphNodes();
    java.util.List var78 = var76.getEdges();
    var73.setManageClosureDependencies(var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    boolean var87 = var80.isExternExportsEnabled();
    var80.setCheckCaja(false);
    var80.setGroupVariableDeclarations(true);
    java.util.Map var92 = var80.getDefineReplacements();
    var73.setTweakReplacements(var92);
    var11.defineDelegateProxyPrototypeProperties(var52, var67, var72, var92);
    com.google.javascript.rhino.Node var95 = com.google.javascript.rhino.IR.paramList(var72);
    com.google.javascript.rhino.Node var96 = var8.useSourceInfoIfMissingFromForTree(var95);
    boolean var97 = var8.isStringKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "goog.exportProperty"+ "'", var24.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test134"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make(var5, var7);
    com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make(var2, var7);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newNumber(0.0d);
    boolean var12 = var9.equals((java.lang.Object)var11);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCollapsePropertiesOnExternTypes(false);
    var13.setTransformAMDToCJSModules(false);
    var13.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var27 = var13.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var28 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var29 = null;
    var28.setStripTypes(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var32 = var31.getDirectedGraphNodes();
    java.util.List var33 = var31.getEdges();
    var28.setManageClosureDependencies(var33);
    var28.setDevirtualizePrototypeMethods(true);
    var28.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var40 = null;
    var39.setBrokenClosureRequiresLevel(var40);
    var39.setLocale("");
    var39.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var47 = null;
    var46.setStripTypes(var47);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var50 = var49.getDirectedGraphNodes();
    java.util.List var51 = var49.getEdges();
    var46.setManageClosureDependencies(var51);
    boolean var53 = var46.isExternExportsEnabled();
    var46.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var60 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make(var58, var60);
    int var62 = var61.getCharno();
    com.google.javascript.jscomp.CheckLevel var63 = var61.getDefaultLevel();
    var46.setReportUnknownTypes(var63);
    var39.setBrokenClosureRequiresLevel(var63);
    var28.setCheckUnreachableCode(var63);
    var13.setReportUnknownTypes(var63);
    com.google.javascript.jscomp.Compiler var68 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var69 = var68.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var70 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var68);
    com.google.javascript.jscomp.ErrorManager var71 = var68.getErrorManager();
    com.google.javascript.jscomp.LightweightMessageFormatter var72 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var68);
    java.lang.String var73 = var9.format(var63, (com.google.javascript.jscomp.MessageFormatter)var72);
    int var74 = var9.getNodeLength();
    com.google.javascript.jscomp.DiagnosticType var75 = var9.getType();
    java.lang.String var76 = var9.toString();
    int var77 = var9.getNodeSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "ERROR - (InputId: )\n"+ "'", var73.equals("ERROR - (InputId: )\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "(). (InputId: ) at (unknown source) line (unknown line) : (unknown column)"+ "'", var76.equals("(). (InputId: ) at (unknown source) line (unknown line) : (unknown column)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test135"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    com.google.javascript.jscomp.CheckLevel var32 = null;
    var0.setCheckRequires(var32);
    var0.setExportTestFunctions(false);
    var0.setReplaceIdGenerators(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test136"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("INHERITED");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, false);
//     var3.removeRequire("function (): {565834337}");
// 
//   }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test137"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var46.unregisterPropertyOnType("Unversioned directory", var48);
    var46.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var52 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var46);
    com.google.javascript.rhino.ErrorReporter var53 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var53);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    var54.unregisterPropertyOnType("Unversioned directory", var56);
    com.google.javascript.rhino.jstype.JSType var58 = null;
    com.google.javascript.jscomp.JSModule var60 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var61 = var60.getDependencies();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.block(var61);
    com.google.javascript.rhino.jstype.FunctionType var63 = var54.createFunctionTypeWithVarArgs(var58, var61);
    boolean var65 = var63.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var66 = var63.toMaybeEnumType();
    boolean var67 = var63.isNumber();
    com.google.javascript.rhino.jstype.JSType[] var68 = new com.google.javascript.rhino.jstype.JSType[] { var63};
    com.google.javascript.rhino.Node var69 = var46.createOptionalParameters(var68);
    boolean var70 = var69.hasOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test138"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    var3.parse();
    var3.processDefines();
    com.google.javascript.jscomp.MessageFormatter var77 = null;
    java.util.logging.Logger var78 = null;
    com.google.javascript.jscomp.LoggerErrorManager var79 = new com.google.javascript.jscomp.LoggerErrorManager(var77, var78);
    com.google.javascript.jscomp.Compiler var80 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var79);
    int var81 = var79.getErrorCount();
    int var82 = var79.getErrorCount();
    var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var79);
    com.google.javascript.jscomp.JSError[] var84 = var79.getWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test139"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var18 = var16.recordExterns();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isArrayLit();
    com.google.javascript.rhino.Node var27 = var22.getNext();
    var16.markTypeNode(var22, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    com.google.javascript.rhino.JSTypeExpression var56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var55);
    boolean var57 = var16.recordBaseType(var55);
    boolean var58 = var1.recordTypedef(var55);
    boolean var59 = var55.isVarArgs();
    boolean var60 = var55.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test140"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setRemoveUnusedLocalVars(true);
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getProvides();
    java.util.List var14 = var12.getRequires();
    com.google.javascript.jscomp.SourceAst var15 = null;
    com.google.javascript.rhino.InputId var16 = null;
    com.google.javascript.jscomp.CompilerInput var18 = new com.google.javascript.jscomp.CompilerInput(var15, var16, true);
    com.google.javascript.jscomp.JSModule var19 = var18.getModule();
    var12.addFirst(var18);
    java.util.List var21 = var12.getProvides();
    var0.setManageClosureDependencies(var21);
    var0.setFoldConstants(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test141"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isExported("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    boolean var14 = var9.isNE();
    boolean var15 = var0.isOptionalParameter(var9);
    com.google.javascript.rhino.Node var16 = var9.cloneNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test142"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.Iterable var28 = var10.getOwnImplementedInterfaces();
    boolean var29 = var10.isInstanceType();
    boolean var30 = var10.isEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test143"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    var57.setGroupVariableDeclarations(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test144"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var8 = var3.getNext();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    var10.setSourceEncodedPosition(10);
    boolean var15 = var10.isContinue();
    boolean var16 = var10.isComma();
    com.google.javascript.rhino.Node var17 = var3.useSourceInfoFrom(var10);
    boolean var18 = var17.isDebugger();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test145"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.ErrorFormat var7 = null;
    var0.setErrorFormat(var7);
    var0.setRenamePrefix("hi");
    var0.setAcceptConstKeyword(true);
    var0.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var15 = var0.getAliasTransformationHandler();
    var0.setGenerateExports(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test146"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.resetForTypeCheck();

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test147"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var41 = var40.isTry();
    boolean var42 = var40.isSwitch();
    boolean var43 = var33.isVarArgsParameter(var40);
    java.lang.String var44 = var33.getExportSymbolFunction();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var47 = var46.isGetterDef();
    boolean var48 = var46.isNE();
    boolean var49 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var46);
    com.google.javascript.rhino.Node var50 = var46.cloneTree();
    boolean var51 = var33.isOptionalParameter(var46);
    boolean var54 = var33.isExported("function (): {1342422305}", true);
    boolean var56 = var33.isPrivate("Node tree inequality:\nTree1:\nBLOCK\n\n\nTree2:\nLABEL_NAME hi! 0\n\n\nSubtree1: BLOCK\n\n\nSubtree2: LABEL_NAME hi! 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "goog.exportSymbol"+ "'", var44.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test148"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    var37.clearCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test149"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    boolean var6 = var1.isConstant("Unversioned directory");
    com.google.javascript.jscomp.graph.GraphNode var7 = var0.createNode((java.lang.Object)var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var10 = var8.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    java.util.List var28 = var25.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var29 = var25.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var8.createDirectedGraphNode((java.lang.Object)var25);
    java.util.List var31 = var0.getNeighborNodes(var30);
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    boolean var39 = var32.isExternExportsEnabled();
    var32.setCollapsePropertiesOnExternTypes(false);
    var32.setTransformAMDToCJSModules(false);
    var32.setAmbiguateProperties(false);
    boolean var46 = var32.assumeStrictThis();
    var32.setMoveFunctionDeclarations(false);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var49 = var0.getDirectedGraphNode((java.lang.Object)var32);
    java.util.List var50 = var0.getEdges();
    java.lang.Iterable var51 = var0.getDirectedGraphNodes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test150"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
    var31.setSourceFileForTesting("null(null)");
    boolean var34 = var31.isDo();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.Node var41 = var38.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var42 = var41.getAncestors();
    var31.addChildrenToFront(var41);
    int var44 = var31.getSourcePosition();
    com.google.javascript.rhino.Node var45 = var5.newOptionalParameterFromNode(var31);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var46 = var45.getJsDocBuilderForNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test151"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    boolean var9 = var6.isNE();
    java.lang.String var10 = com.google.javascript.jscomp.NodeUtil.getSourceName(var6);
    com.google.javascript.rhino.Node var11 = var6.cloneTree();
    com.google.javascript.rhino.jstype.FunctionBuilder var12 = var4.withParamsNode(var11);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node((-19));
    var11.addChildToFront(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.Node.newString("hi!");
    com.google.javascript.rhino.Node var18 = var11.srcref(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test152"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.jscomp.deps.SortedDependencies var42 = new com.google.javascript.jscomp.deps.SortedDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var45 = var44.recordExpose();
    boolean var47 = var44.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.InputId var54 = com.google.javascript.jscomp.NodeUtil.getInputId(var51);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var51.setJSType(var55);
    com.google.javascript.rhino.JSDocInfo var57 = var44.build(var51);
    java.lang.String var58 = var57.getFileOverview();
    java.util.Set var59 = var57.getModifies();
    java.util.List var60 = var57.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var61 = var57.getType();
    java.util.List var62 = var57.getImplementedInterfaces();
    java.util.List var63 = var42.getSortedDependenciesOf(var62);
    java.util.List var64 = var42.getSortedList();
    com.google.javascript.jscomp.deps.DependencyInfo var66 = var42.maybeGetInputProviding("STRING hi 0 [length: 2]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test153"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isEnumElementType();
    boolean var61 = var58.matchesStringContext();
    com.google.javascript.rhino.jstype.JSType var63 = var58.findPropertyType("BANG 0 [source_file: Unversioned directory]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test154"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("(LABEL_NAME hi!)");
    var1.setType(21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test155"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    com.google.javascript.jscomp.SourceAst var10 = var7.getSourceAst();
    com.google.javascript.jscomp.MessageFormatter var11 = null;
    java.util.logging.Logger var12 = null;
    com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
    com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var13);
    com.google.javascript.jscomp.JSError[] var15 = var14.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var18 = var17.recordExpose();
    boolean var20 = var17.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    com.google.javascript.rhino.JSDocInfo var30 = var17.build(var24);
    java.util.List var31 = var30.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var33 = var32.getDirectedGraphNodes();
    var32.clearNodeAnnotations();
    java.util.List var35 = var32.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var36 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var37 = null;
    var36.setStripTypes(var37);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var40 = var39.getDirectedGraphNodes();
    java.util.List var41 = var39.getEdges();
    var36.setManageClosureDependencies(var41);
    var36.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var36.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var48 = null;
    var36.setSourceMapDetailLevel(var48);
    com.google.javascript.jscomp.CodingConvention var50 = var36.getCodingConvention();
    var36.setMarkNoSideEffectCalls(false);
    var14.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var31, var35, var36);
    boolean var54 = var14.isIdeMode();
    com.google.javascript.jscomp.JSError[] var55 = var14.getMessages();
    var7.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var14);
    com.google.javascript.jscomp.JSModule var58 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var59 = var58.getDependencies();
    int var60 = var58.getDepth();
    var58.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var65 = var63.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var67 = null;
    boolean var68 = var63.recordParameter("Unversioned directory", var67);
    com.google.javascript.rhino.JSTypeExpression var69 = null;
    boolean var71 = var63.recordThrowDescription(var69, "");
    com.google.javascript.jscomp.SourceFile var76 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var63.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var76, 0, 0);
    java.io.Reader var80 = var76.getCodeReader();
    var58.add(var76);
    com.google.javascript.jscomp.JSModule var83 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var84 = var83.getDependencies();
    var58.addDependency(var83);
    java.lang.String var86 = var83.getName();
    com.google.javascript.jscomp.SourceFile var90 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var92 = var90.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var93 = new com.google.javascript.jscomp.CompilerInput(var90);
    com.google.javascript.jscomp.SourceAst var94 = var93.getAst();
    var83.add(var93);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setModule(var83);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "Unversioned directory"+ "'", var86.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test156"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setOptimizeArgumentsArray(false);
    var0.setColorizeErrorOutput(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test157"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var70.isTemplateType();
    boolean var72 = var70.isEnumType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test158"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    int var5 = var3.getSourceOffset();
    com.google.javascript.rhino.Node var6 = var3.cloneNode();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    int var10 = var8.getSourceOffset();
    boolean var11 = var8.isAssignAdd();
    int var12 = var6.getIndexOfChild(var8);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.InputId var16 = var14.getInputId();
    com.google.javascript.rhino.Node var17 = var6.useSourceInfoFrom(var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isOptionalArg();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(0, var22, var27);
    boolean var29 = var27.isQualifiedName();
    com.google.javascript.rhino.Node var30 = var27.cloneNode();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(153, var6, var30, 153, 1);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var37 = var35.getBooleanProp((-1));
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.Node var44 = var41.removeFirstChild();
    com.google.javascript.rhino.Node var45 = var35.useSourceInfoFromForTree(var41);
    boolean var46 = var35.isVar();
    com.google.javascript.rhino.Node var47 = var30.srcrefTree(var35);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(100, var35, 10, 0);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var54 = var52.getBooleanProp((-1));
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    com.google.javascript.rhino.Node var61 = var58.removeFirstChild();
    com.google.javascript.rhino.Node var62 = var52.useSourceInfoFromForTree(var58);
    boolean var63 = var52.isWhile();
    com.google.javascript.rhino.Node var64 = var35.useSourceInfoIfMissingFrom(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test159"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setTightenTypes(false);
    var0.setNameReferenceGraphPath("module$2014$12$24 11:10");
    var0.setRemoveAbstractMethods(true);
    var0.setReplaceIdGenerators(false);
    com.google.javascript.jscomp.VariableRenamingPolicy var18 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var19 = null;
    var0.setRenamingPolicy(var18, var19);
    var0.setCrossModuleMethodMotion(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test160"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setMarkNoSideEffectCalls(false);
    var0.resetWarningsGuard();
    java.io.PrintStream var18 = null;
    com.google.javascript.jscomp.Compiler var19 = new com.google.javascript.jscomp.Compiler(var18);
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var21 = null;
    var20.setStripTypes(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var24 = var23.getDirectedGraphNodes();
    java.util.List var25 = var23.getEdges();
    var20.setManageClosureDependencies(var25);
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var31 = var28.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    com.google.javascript.rhino.JSDocInfo var41 = var28.build(var35);
    java.lang.String var42 = var41.getFileOverview();
    java.util.Set var43 = var41.getModifies();
    java.util.List var44 = var41.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var46 = null;
    var45.setStripTypes(var46);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    java.util.List var50 = var48.getEdges();
    var45.setManageClosureDependencies(var50);
    var45.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var45.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var57 = null;
    var45.setSourceMapDetailLevel(var57);
    var19.<com.google.javascript.jscomp.SourceFile>initModules(var25, var44, var45);
    var45.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CheckLevel var63 = null;
    com.google.javascript.jscomp.DiagnosticType var65 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var63, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var66 = new com.google.javascript.jscomp.DiagnosticType[] { var65};
    com.google.javascript.jscomp.DiagnosticGroup var67 = new com.google.javascript.jscomp.DiagnosticGroup(var66);
    com.google.javascript.jscomp.CompilerOptions var68 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var69 = null;
    var68.setStripTypes(var69);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var72 = var71.getDirectedGraphNodes();
    java.util.List var73 = var71.getEdges();
    var68.setManageClosureDependencies(var73);
    boolean var75 = var68.isExternExportsEnabled();
    var68.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var80 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var82 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var83 = com.google.javascript.jscomp.JSError.make(var80, var82);
    int var84 = var83.getCharno();
    com.google.javascript.jscomp.CheckLevel var85 = var83.getDefaultLevel();
    var68.setReportUnknownTypes(var85);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var87 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var67, var85);
    com.google.javascript.jscomp.DiagnosticType var90 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var92 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var93 = com.google.javascript.jscomp.JSError.make(var90, var92);
    com.google.javascript.jscomp.CheckLevel var94 = var87.level(var93);
    var45.setAggressiveVarCheck(var94);
    var0.setCheckGlobalThisLevel(var94);
    var0.setAliasAllStrings(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test161"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setInlineFunctions(true);
    var27.setAliasAllStrings(false);
    var27.setCollapseObjectLiterals(false);
    boolean var48 = var27.assumeClosuresOnlyCaptureReferences();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test162"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.paramList(var23);
    var0.setManageClosureDependencies(var23);
    var0.skipAllCompilerPasses();
    com.google.javascript.jscomp.ClosureCodingConvention var29 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var31 = var29.isConstantKey("2014/12/24 11:10");
    java.util.Collection var32 = var29.getAssertionFunctions();
    boolean var34 = var29.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isOptionalArg();
    java.lang.String var46 = var38.toString(false, false, true);
    java.util.List var47 = var29.identifyTypeDeclarationCall(var38);
    java.lang.String var48 = var29.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    int var52 = var50.getSourceOffset();
    com.google.javascript.rhino.Node var53 = var50.cloneNode();
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    int var57 = var55.getSourceOffset();
    com.google.javascript.rhino.Node var58 = var55.cloneNode();
    var53.addChildrenToFront(var58);
    com.google.javascript.jscomp.CodingConvention.Bind var61 = var29.describeFunctionBind(var53, true);
    com.google.javascript.jscomp.GoogleCodingConvention var62 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var29);
    boolean var64 = var62.isConstant("module$2014$12$24 11:10");
    boolean var67 = var62.isExported("Unversioned directory", false);
    boolean var69 = var62.isConstantKey("function (): {540092593}");
    boolean var71 = var62.isPrivate("LABEL_NAME hi!");
    boolean var74 = var62.isExported("module$2014$12$24 11:10", false);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var62);
    boolean var77 = var62.isConstant("function (): {1263056885}");
    boolean var79 = var62.isPrivate("function (): {2074444175}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "BANG"+ "'", var46.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test163"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    var3.setJSType(var4);
    boolean var6 = var3.isScript();
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var12 = var10.getLineOfOffset(2);
    var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var10);
    com.google.javascript.jscomp.Region var15 = var10.getRegion(1);
    com.google.javascript.jscomp.CompilerInput var16 = new com.google.javascript.jscomp.CompilerInput(var10);
    var16.clearAst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test164"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    boolean var35 = var21.isVoid();
    com.google.javascript.rhino.Node var36 = var5.newParameterFromNode(var21);
    com.google.javascript.rhino.Node var37 = var5.build();
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.InputId var44 = com.google.javascript.jscomp.NodeUtil.getInputId(var41);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    var41.setJSType(var45);
    boolean var47 = var41.isBlock();
    com.google.javascript.rhino.Node var48 = var41.getParent();
    boolean var49 = var41.isBreak();
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.InputId var53 = var51.getInputId();
    boolean var54 = var51.isGetProp();
    com.google.javascript.rhino.Node var55 = var41.clonePropsFrom(var51);
    var55.setLineno(100);
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    int var61 = var59.getSourceOffset();
    com.google.javascript.rhino.Node var62 = var59.removeFirstChild();
    com.google.javascript.rhino.Node var63 = var55.useSourceInfoIfMissingFrom(var62);
    com.google.javascript.rhino.Node var64 = var5.newParameterFromNode(var63);
    int var65 = var64.getSourcePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test165"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var2 = var1.getDirectedGraphNodes();
    java.util.List var3 = var1.getEdges();
    java.util.List var4 = var1.getGraphvizNodes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var7 = var5.hasNode((java.lang.Object)1);
    java.util.List var8 = var5.getGraphvizEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var10 = var9.getNodes();
    com.google.javascript.rhino.jstype.TernaryValue var12 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(154);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var13 = var9.createDirectedGraphNode((java.lang.Object)var12);
    java.util.List var14 = var5.getDirectedPredNodes(var13);
    java.util.List var15 = var1.getDirectedPredNodes(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var16 = com.google.javascript.rhino.ScriptRuntime.getMessage1("RETURN 0", (java.lang.Object)var13);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test166"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isIdGenerator();
    java.lang.String var20 = var14.getReturnDescription();
    boolean var21 = var14.hasTypedefType();
    var14.addSuppression("module$");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test167"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    boolean var74 = var31.hasCachedValues();
    java.util.List var75 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.setExtendedInterfaces(var75);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test168"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.returnNode();
    var47.setSourceFileForTesting("null(null)");
    boolean var50 = var47.isDo();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var51 = var0.getDelegateRelationship(var47);
    com.google.javascript.jscomp.ClosureCodingConvention var52 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.jscomp.GoogleCodingConvention var53 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test169"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    var10.clearCachedValues();
    boolean var16 = var10.hasDisplayName();
    java.lang.Iterable var17 = var10.getExtendedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType var18 = var10.getPrototype();
    java.lang.Iterable var19 = var18.getCtorExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test170"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("Unversioned directory: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test171"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("function (): {565834337}", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test172"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    var24.setCharno(100);
    com.google.javascript.rhino.Node var36 = var24.getAncestor(0);
    boolean var37 = var36.isGetElem();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var36.setString("");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test173() {}
//   public void test173() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test173"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getErrors();
//     com.google.javascript.jscomp.Scope var5 = var3.getTopScope();
//     java.lang.String var6 = var3.toSource();
// 
//   }

  public void test174() {}
//   public void test174() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test174"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
//     com.google.javascript.jscomp.JSModule[] var4 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var2);
//     com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
//     com.google.javascript.jscomp.JSModuleGraph var6 = new com.google.javascript.jscomp.JSModuleGraph(var4);
//     com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var9 = var8.recordExpose();
//     boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     var15.setJSType(var19);
//     com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
//     java.lang.String var22 = var21.getFileOverview();
//     boolean var23 = var21.hasType();
//     boolean var24 = var21.hasReturnType();
//     java.util.List var25 = var21.getImplementedInterfaces();
//     java.util.List var26 = null;
//     java.util.List var27 = var6.manageDependencies(var25, var26);
// 
//   }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test175"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    boolean var14 = var10.isOptionalArg();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var18 = var16.getBooleanProp((-1));
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = var22.removeFirstChild();
    com.google.javascript.rhino.Node var26 = var16.useSourceInfoFromForTree(var22);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.InputId var33 = com.google.javascript.jscomp.NodeUtil.getInputId(var30);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var30.setJSType(var34);
    boolean var36 = var30.isBlock();
    com.google.javascript.rhino.Node var37 = var30.getParent();
    boolean var38 = var30.isBreak();
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.InputId var42 = var40.getInputId();
    boolean var43 = var40.isGetProp();
    com.google.javascript.rhino.Node var44 = var30.clonePropsFrom(var40);
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(0, var10, var16, var40);
    com.google.javascript.rhino.Node var46 = var3.useSourceInfoFromForTree(var10);
    java.lang.String var47 = com.google.javascript.jscomp.NodeUtil.getSourceName(var46);
    boolean var48 = var46.isDefaultCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test176"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    var0.setCrossModuleMethodMotion(true);
    var0.setProcessCommonJSModules(false);
    var0.setLooseTypes(true);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test177"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    double var10 = var5.getProgress();
    com.google.javascript.jscomp.ErrorManager var11 = var5.getErrorManager();
    com.google.javascript.jscomp.JSError[] var12 = var5.getWarnings();
    com.google.javascript.jscomp.JSError[] var13 = var5.getWarnings();
    boolean var14 = var5.acceptEcmaScript5();
    com.google.javascript.jscomp.ErrorManager var15 = var5.getErrorManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test178"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setRenamePrefixNamespace("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setDefineToNumberLiteral("goog.abstractMethod", 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test179"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getDelegateSuperclassName();
    boolean var22 = var0.isSuperClassReference("");
    boolean var24 = var0.isSuperClassReference("(STRING hi 0 [length: 2]\n)");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    boolean var33 = var29.isWhile();
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    int var40 = var39.getSourceOffset();
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node((-1), var29, var39, 3, 2);
    boolean var44 = var0.isVarArgsParameter(var39);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var48 = var45.copyInformationFrom(var47);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    boolean var57 = var53.isOptionalArg();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(0, var53, var58);
    boolean var60 = var53.isNE();
    java.lang.String var61 = var0.extractClassNameIfRequire(var45, var53);
    boolean var62 = var45.isAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test180"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    boolean var18 = var14.isExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test181"); }


    com.google.javascript.jscomp.parsing.Config.LanguageMode var1 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    com.google.javascript.jscomp.ClosureCodingConvention var20 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var21 = null;
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    boolean var28 = var25.isOr();
    java.lang.String var29 = var20.extractClassNameIfRequire(var21, var25);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var31.unregisterPropertyOnType("Unversioned directory", var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getDependencies();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var31.createFunctionTypeWithVarArgs(var35, var38);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.jscomp.JSModule var48 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var49 = var48.getDependencies();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.block(var49);
    com.google.javascript.rhino.jstype.FunctionType var51 = var42.createFunctionTypeWithVarArgs(var46, var49);
    boolean var52 = var51.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var54 = var53.getDirectedGraphNodes();
    java.lang.Iterable var55 = var53.getDirectedGraphNodes();
    java.util.List var56 = var53.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    boolean var64 = var57.isExternExportsEnabled();
    var57.setCheckCaja(false);
    java.util.Set var67 = null;
    var57.setReplaceStringsReservedStrings(var67);
    var57.setAliasAllStrings(true);
    var57.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var73 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var74 = null;
    var73.setStripTypes(var74);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var76 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var77 = var76.getDirectedGraphNodes();
    java.util.List var78 = var76.getEdges();
    var73.setManageClosureDependencies(var78);
    boolean var80 = var73.isExternExportsEnabled();
    var73.setCheckCaja(false);
    var73.setGroupVariableDeclarations(true);
    java.util.Map var85 = var73.getDefineReplacements();
    var57.setPropertyInvalidationErrors(var85);
    var20.defineDelegateProxyPrototypeProperties(var31, (com.google.javascript.rhino.jstype.StaticScope)var51, var56, var85);
    boolean var88 = var51.canBeCalled();
    boolean var89 = var51.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var91 = var51.getSlot("hi!");
    var6.setJSType((com.google.javascript.rhino.jstype.JSType)var51);
    boolean var93 = var51.hasCachedValues();
    java.util.Set var94 = var51.getPropertyNames();
    com.google.javascript.jscomp.parsing.Config var95 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(true, var1, false, var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test182"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    boolean var49 = var45.isOptionalArg();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var51 = new com.google.javascript.rhino.Node(0, var45, var50);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    boolean var58 = var55.isVarArgs();
    boolean var59 = var55.isArrayLit();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var62 = var61.isGetterDef();
    var61.putIntProp((-1), 10);
    var55.addChildrenToFront(var61);
    boolean var67 = var55.isDec();
    var51.addChildToBack(var55);
    boolean var69 = var51.isDebugger();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var70 = var33.getDelegateRelationship(var51);
    boolean var72 = var33.isValidEnumKey("2014/12/24 11:10");
    boolean var75 = var33.isExported("", false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test183"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 1);
    com.google.javascript.rhino.Node var51 = var38.clonePropsFrom(var50);
    java.lang.String var52 = var50.getString();
    boolean var53 = var50.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test184"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    boolean var27 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var25);
    int var28 = var25.getLength();
    com.google.javascript.rhino.Node var29 = null;
    boolean var30 = var25.hasChild(var29);
    com.google.javascript.rhino.Node var31 = var23.useSourceInfoIfMissingFromForTree(var25);
    var25.setSourceFileForTesting("Unversioned directory");
    boolean var34 = var25.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var35 = var25.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var39 = null;
    java.util.logging.Logger var40 = null;
    com.google.javascript.jscomp.LoggerErrorManager var41 = new com.google.javascript.jscomp.LoggerErrorManager(var39, var40);
    com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var41);
    com.google.javascript.jscomp.Scope var43 = var42.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
    com.google.javascript.jscomp.NodeTraversal var45 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var42, var44);
    com.google.javascript.jscomp.Scope var46 = var45.getScope();
    com.google.javascript.rhino.Node var47 = null;
    com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var52 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var50, var52);
    com.google.javascript.jscomp.DiagnosticType var54 = var53.getType();
    java.lang.String[] var56 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var57 = var45.makeError(var47, var54, var56);
    com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var25, var38, var56);
    var6.report(var17, var20, var56);
    java.lang.String var60 = var6.getSourceName();
    int var61 = var6.getLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test185"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var1 = var0.cloneTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.neg(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test186"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    var0.setMoveFunctionDeclarations(false);
    var0.setIgnoreCajaProperties(true);
    var0.setCollapseProperties(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test187"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    java.lang.String var73 = var56.getDisplayName();
    com.google.javascript.rhino.Node var74 = var56.getSource();
    var56.clearResolved();
    com.google.javascript.rhino.jstype.EnumElementType var76 = var56.getElementsType();
    com.google.javascript.rhino.jstype.FunctionType var77 = var76.getConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var73.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test188"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setCheckTypes(false);
    var0.setMoveFunctionDeclarations(true);
    boolean var16 = var0.isExternExportsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test189"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
    com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
    com.google.javascript.jscomp.JSModule var6 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var7 = var6.getDependencies();
    var6.removeAll();
    com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var10.removeAll();
    var6.addDependency(var10);
    var3.setModule(var6);
    java.util.Set var14 = var6.getThisAndAllDependencies();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test190"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isSyntheticBlock();
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var5 = var3.isConstantKey("2014/12/24 11:10");
    java.util.Collection var6 = var3.getAssertionFunctions();
    boolean var8 = var3.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isOptionalArg();
    java.lang.String var20 = var12.toString(false, false, true);
    java.util.List var21 = var3.identifyTypeDeclarationCall(var12);
    java.util.Collection var22 = var3.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var26 = var24.getBooleanProp((-1));
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.Node var33 = var30.removeFirstChild();
    com.google.javascript.rhino.Node var34 = var24.useSourceInfoFromForTree(var30);
    var34.setLength(2);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    boolean var40 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var38);
    java.lang.String var41 = var34.checkTreeEquals(var38);
    com.google.javascript.jscomp.CodingConvention.Bind var43 = var3.describeFunctionBind(var34, true);
    boolean var44 = var1.isEquivalentTo(var34);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var47 = var46.isGetterDef();
    java.lang.String var51 = var46.toString(true, false, false);
    boolean var52 = var46.isCatch();
    var46.setSourceEncodedPosition(306);
    com.google.javascript.rhino.Node var55 = var34.useSourceInfoFrom(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "BANG"+ "'", var20.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var41.equals("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "LABEL_NAME hi!"+ "'", var51.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test191"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setSourceMapOutputPath("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.jscomp.VariableRenamingPolicy var15 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var16 = null;
    var0.setRenamingPolicy(var15, var16);
    var0.setCoalesceVariableNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test192"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setMarkNoSideEffectCalls(false);
    var0.setLooseTypes(true);
    com.google.javascript.jscomp.MessageBundle var19 = null;
    var0.setMessageBundle(var19);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CheckLevel var24 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var24, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var27 = new com.google.javascript.jscomp.DiagnosticType[] { var26};
    com.google.javascript.jscomp.DiagnosticGroup var28 = new com.google.javascript.jscomp.DiagnosticGroup(var27);
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var30 = null;
    var29.setStripTypes(var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var33 = var32.getDirectedGraphNodes();
    java.util.List var34 = var32.getEdges();
    var29.setManageClosureDependencies(var34);
    boolean var36 = var29.isExternExportsEnabled();
    var29.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var41 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var43 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var44 = com.google.javascript.jscomp.JSError.make(var41, var43);
    int var45 = var44.getCharno();
    com.google.javascript.jscomp.CheckLevel var46 = var44.getDefaultLevel();
    var29.setReportUnknownTypes(var46);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var48 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var28, var46);
    com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var53 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make(var51, var53);
    com.google.javascript.jscomp.CheckLevel var55 = var48.level(var54);
    com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var57 = null;
    var56.setStripTypes(var57);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var59 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var60 = var59.getDirectedGraphNodes();
    java.util.List var61 = var59.getEdges();
    var56.setManageClosureDependencies(var61);
    var56.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var67 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var68 = var67.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var69 = new com.google.javascript.jscomp.ComposeWarningsGuard(var68);
    com.google.javascript.jscomp.JSError var70 = null;
    com.google.javascript.jscomp.CheckLevel var71 = var69.level(var70);
    var56.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var69);
    com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var77 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var75, var77);
    int var79 = var78.getCharno();
    int var80 = var78.getLineNumber();
    com.google.javascript.jscomp.CheckLevel var81 = var69.level(var78);
    com.google.javascript.jscomp.CheckLevel var82 = var48.level(var78);
    var0.setCheckMissingGetCssNameLevel(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test193"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var1.markText("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", 2, 0, 153, 0);
    boolean var12 = var1.addAuthor("function (): {1466095799}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test194"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    boolean var35 = var34.isNominalType();
    boolean var36 = var34.isNominalConstructor();
    boolean var37 = var34.isArrayType();
    com.google.javascript.rhino.jstype.EnumType var38 = var34.toMaybeEnumType();
    boolean var39 = var34.isNumberObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test195"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var51 = var49.getBooleanProp((-1));
    var49.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var49, "goog.abstractMethod");
    boolean var57 = var1.recordThrowDescription(var55, "STRING hi 0 [length: 2]\n");
    boolean var58 = var1.recordNoCompile();
    boolean var59 = var1.isJavaDispatch();
    com.google.javascript.rhino.Node var60 = null;
    com.google.javascript.rhino.JSDocInfo var61 = var1.build(var60);
    boolean var62 = var61.isExterns();
    java.lang.String var63 = var61.toString();
    com.google.common.collect.ImmutableList var64 = var61.getTemplateTypeNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "JSDocInfo"+ "'", var63.equals("JSDocInfo"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test196"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var13 = var0.getLanguageIn();
    var0.setSourceMapOutputPath("function (): {98322307}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test197"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var8 = var6.getBooleanProp((-1));
    var6.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var12 = new com.google.javascript.rhino.JSTypeExpression(var6, "goog.abstractMethod");
    boolean var13 = var1.isPrototypeAlias(var6);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var17 = var15.getBooleanProp((-1));
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.Node var24 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var25 = var15.useSourceInfoFromForTree(var21);
    boolean var26 = var21.isDec();
    java.lang.String var30 = var21.toString(false, false, true);
    var6.addChildrenToFront(var21);
    boolean var32 = var6.isTypeOf();
    boolean var33 = var6.hasChildren();
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    int var37 = var35.getSourceOffset();
    boolean var38 = var35.isNE();
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    boolean var46 = var43.isVarArgs();
    boolean var47 = var43.isOptionalArg();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var49 = new com.google.javascript.rhino.Node(0, var43, var48);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    boolean var57 = var53.isArrayLit();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var60 = var59.isGetterDef();
    var59.putIntProp((-1), 10);
    var53.addChildrenToFront(var59);
    boolean var65 = var53.isDec();
    var49.addChildToBack(var53);
    com.google.javascript.rhino.Node var67 = new com.google.javascript.rhino.Node(2147483647, var6, var35, var49);
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = var72.getNext();
    com.google.javascript.rhino.Node var74 = var70.srcrefTree(var72);
    com.google.javascript.rhino.InputId var75 = com.google.javascript.jscomp.NodeUtil.getInputId(var72);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var72.setJSType(var76);
    boolean var78 = var72.isBlock();
    com.google.javascript.rhino.Node var79 = var72.getParent();
    boolean var80 = var72.isBreak();
    com.google.javascript.rhino.Node var82 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = var82.getNext();
    com.google.javascript.rhino.InputId var84 = var82.getInputId();
    boolean var85 = var82.isGetProp();
    com.google.javascript.rhino.Node var86 = var72.clonePropsFrom(var82);
    var86.setLineno(100);
    com.google.javascript.rhino.Node var90 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var91 = var90.getNext();
    int var92 = var90.getSourceOffset();
    com.google.javascript.rhino.Node var93 = var90.removeFirstChild();
    com.google.javascript.rhino.Node var94 = var86.useSourceInfoIfMissingFrom(var93);
    var67.putProp(306, (java.lang.Object)var93);
    var93.setOptionalArg(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "BANG"+ "'", var30.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test198"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var1.removeAll();
    java.lang.String var3 = var1.toString();
    java.util.List var4 = var1.getDependencies();
    int var5 = var1.getDepth();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Unversioned directory"+ "'", var3.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Unversioned directory"+ "'", var6.equals("Unversioned directory"));

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test199"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.jscomp.graph.GraphNode var4 = var0.createNode((java.lang.Object)var3);
    var0.clearNodeAnnotations();
    var0.pushNodeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test200"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("ECMASCRIPT3");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    com.google.javascript.rhino.Node var8 = var5.removeFirstChild();
    var8.putIntProp(0, 100);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    int var15 = var13.getSourceOffset();
    com.google.javascript.rhino.Node var16 = var13.removeFirstChild();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    boolean var22 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var20);
    int var23 = var20.getLength();
    com.google.javascript.rhino.Node var24 = null;
    boolean var25 = var20.hasChild(var24);
    com.google.javascript.rhino.Node var26 = var18.useSourceInfoIfMissingFromForTree(var20);
    var20.setSourceFileForTesting("Unversioned directory");
    boolean var29 = var20.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var30 = var20.getStaticSourceFile();
    com.google.javascript.rhino.Node var31 = var13.srcref(var20);
    java.lang.String var32 = var13.toStringTree();
    boolean var33 = var13.isFromExterns();
    var8.addChildrenToFront(var13);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    int var39 = var37.getSourceOffset();
    com.google.javascript.rhino.Node var40 = var37.removeFirstChild();
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    boolean var46 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var44);
    int var47 = var44.getLength();
    com.google.javascript.rhino.Node var48 = null;
    boolean var49 = var44.hasChild(var48);
    com.google.javascript.rhino.Node var50 = var42.useSourceInfoIfMissingFromForTree(var44);
    var44.setSourceFileForTesting("Unversioned directory");
    boolean var53 = var44.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var54 = var44.getStaticSourceFile();
    com.google.javascript.rhino.Node var55 = var37.srcref(var44);
    com.google.javascript.rhino.Node var56 = new com.google.javascript.rhino.Node(10, var55);
    boolean var57 = var55.isOr();
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    com.google.javascript.rhino.InputId var64 = com.google.javascript.jscomp.NodeUtil.getInputId(var61);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var61.setJSType(var65);
    boolean var67 = var61.isBlock();
    com.google.javascript.rhino.Node var68 = var61.getNext();
    boolean var69 = var61.isFromExterns();
    boolean var70 = var61.isGetProp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.forNode(var1, var8, var55, var61);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "BANG 0 [source_file: Unversioned directory]\n"+ "'", var32.equals("BANG 0 [source_file: Unversioned directory]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test201"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setInlineFunctions(true);
    var27.setSkipAllPasses(true);
    var27.setInlineConstantVars(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test202"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    boolean var15 = var3.isDec();
    boolean var16 = var3.isDo();
    boolean var17 = var3.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test203"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setGroupVariableDeclarations(true);
    var0.setTightenTypes(true);
    com.google.javascript.jscomp.CheckLevel var16 = null;
    com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var16, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var19 = new com.google.javascript.jscomp.DiagnosticType[] { var18};
    com.google.javascript.jscomp.DiagnosticGroup var20 = new com.google.javascript.jscomp.DiagnosticGroup(var19);
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var22 = null;
    var21.setStripTypes(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var25 = var24.getDirectedGraphNodes();
    java.util.List var26 = var24.getEdges();
    var21.setManageClosureDependencies(var26);
    boolean var28 = var21.isExternExportsEnabled();
    var21.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var33 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var35 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make(var33, var35);
    int var37 = var36.getCharno();
    com.google.javascript.jscomp.CheckLevel var38 = var36.getDefaultLevel();
    var21.setReportUnknownTypes(var38);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var40 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var20, var38);
    java.lang.String var41 = var20.toString();
    com.google.javascript.jscomp.DiagnosticGroup[] var42 = new com.google.javascript.jscomp.DiagnosticGroup[] { var20};
    com.google.javascript.jscomp.DiagnosticGroup var43 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var42);
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var45 = null;
    var44.setStripTypes(var45);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var48 = var47.getDirectedGraphNodes();
    java.util.List var49 = var47.getEdges();
    var44.setManageClosureDependencies(var49);
    boolean var51 = var44.isExternExportsEnabled();
    var44.setCheckCaja(false);
    java.util.Set var54 = null;
    var44.setReplaceStringsReservedStrings(var54);
    com.google.javascript.rhino.JSDocInfoBuilder var57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var58 = var57.recordExpose();
    boolean var60 = var57.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    com.google.javascript.rhino.Node var66 = var62.srcrefTree(var64);
    com.google.javascript.rhino.InputId var67 = com.google.javascript.jscomp.NodeUtil.getInputId(var64);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    var64.setJSType(var68);
    com.google.javascript.rhino.JSDocInfo var70 = var57.build(var64);
    java.lang.String var71 = var70.getFileOverview();
    java.util.Set var72 = var70.getModifies();
    var44.setReplaceStringsReservedStrings(var72);
    var44.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var80 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var78, var80);
    int var82 = var81.getCharno();
    com.google.javascript.jscomp.CheckLevel var83 = var81.getDefaultLevel();
    var44.setCheckGlobalThisLevel(var83);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var85 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var43, var83);
    var0.setCheckMissingReturn(var83);
    com.google.common.collect.Multimap var87 = null;
    var0.setCustomPasses(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test204"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
    com.google.javascript.rhino.ErrorReporter var9 = var1.getErrorReporter();
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isOr();
    java.lang.String var19 = var10.extractClassNameIfRequire(var11, var15);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var32.unregisterPropertyOnType("Unversioned directory", var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.JSModule var38 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var39 = var38.getDependencies();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.block(var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var32.createFunctionTypeWithVarArgs(var36, var39);
    boolean var42 = var41.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.lang.Iterable var45 = var43.getDirectedGraphNodes();
    java.util.List var46 = var43.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    var47.setAliasAllStrings(true);
    var47.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var64 = null;
    var63.setStripTypes(var64);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var67 = var66.getDirectedGraphNodes();
    java.util.List var68 = var66.getEdges();
    var63.setManageClosureDependencies(var68);
    boolean var70 = var63.isExternExportsEnabled();
    var63.setCheckCaja(false);
    var63.setGroupVariableDeclarations(true);
    java.util.Map var75 = var63.getDefineReplacements();
    var47.setPropertyInvalidationErrors(var75);
    var10.defineDelegateProxyPrototypeProperties(var21, (com.google.javascript.rhino.jstype.StaticScope)var41, var46, var75);
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var41);
    com.google.javascript.rhino.JSDocInfo var79 = var41.getJSDocInfo();
    com.google.javascript.rhino.jstype.FunctionType var80 = var41.toMaybeFunctionType();
    boolean var81 = var41.isOrdinaryFunction();
    boolean var82 = var41.isInstanceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test205"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    java.util.List var19 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var20 = var14.getReturnType();
    java.lang.String var22 = var14.getDescriptionForParameter("function (): {1204057807}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test206() {}
//   public void test206() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test206"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
//     var1.setResolveMode(var2);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
//     var6.setResolveMode(var7);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = var14.getNext();
//     com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
//     boolean var17 = var14.isVarArgs();
//     com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var24 = var23.getNext();
//     com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
//     com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
//     com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
//     java.lang.Object var29 = null;
//     var14.putProp(0, var29);
//     com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
//     com.google.javascript.rhino.jstype.StaticScope var33 = null;
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     var35.unregisterPropertyOnType("Unversioned directory", var37);
//     com.google.javascript.rhino.jstype.JSType var39 = null;
//     boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
//     com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
//     com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
//     com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
//     java.util.Collection var48 = var6.getDirectImplementors(var47);
//     com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
//     com.google.javascript.rhino.ErrorReporter var54 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     var55.unregisterPropertyOnType("Unversioned directory", var57);
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.jscomp.JSModule var61 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var62 = var61.getDependencies();
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.block(var62);
//     com.google.javascript.rhino.jstype.FunctionType var64 = var55.createFunctionTypeWithVarArgs(var59, var62);
//     boolean var66 = var64.removeProperty("null(null)");
//     com.google.javascript.rhino.jstype.EnumType var67 = var64.toMaybeEnumType();
//     var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var64);
//     com.google.javascript.rhino.jstype.FunctionType var69 = var64.toMaybeFunctionType();
//     com.google.javascript.rhino.Node var70 = var64.getParametersNode();
//     java.lang.String var71 = var64.toDebugHashCodeString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var14);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var17 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var27);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var41 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var43);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var44);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var48);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var62);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var63);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var64);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var66 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var67);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var69);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var70);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var71 + "' != '" + "function (): {1593701503}"+ "'", var71.equals("function (): {1593701503}"));
// 
//   }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test207"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.StaticScope var32 = null;
    com.google.javascript.rhino.jstype.JSType var33 = var24.resolve(var31, var32);
    com.google.javascript.rhino.jstype.JSType var34 = var24.getReturnType();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    int var38 = var36.getSourceOffset();
    com.google.javascript.rhino.Node var39 = var36.cloneNode();
    var24.setSource(var39);
    com.google.javascript.rhino.jstype.ObjectType var42 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var24, "goog.abstractMethod");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test208() {}
//   public void test208() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test208"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isOr();
//     java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var11.unregisterPropertyOnType("Unversioned directory", var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var18 = var17.getDependencies();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
//     com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var22.unregisterPropertyOnType("Unversioned directory", var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var29 = var28.getDependencies();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
//     boolean var32 = var31.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var34 = var33.getDirectedGraphNodes();
//     java.lang.Iterable var35 = var33.getDirectedGraphNodes();
//     java.util.List var36 = var33.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var38 = null;
//     var37.setStripTypes(var38);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var41 = var40.getDirectedGraphNodes();
//     java.util.List var42 = var40.getEdges();
//     var37.setManageClosureDependencies(var42);
//     boolean var44 = var37.isExternExportsEnabled();
//     var37.setCheckCaja(false);
//     java.util.Set var47 = null;
//     var37.setReplaceStringsReservedStrings(var47);
//     var37.setAliasAllStrings(true);
//     var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var54 = null;
//     var53.setStripTypes(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var57 = var56.getDirectedGraphNodes();
//     java.util.List var58 = var56.getEdges();
//     var53.setManageClosureDependencies(var58);
//     boolean var60 = var53.isExternExportsEnabled();
//     var53.setCheckCaja(false);
//     var53.setGroupVariableDeclarations(true);
//     java.util.Map var65 = var53.getDefineReplacements();
//     var37.setPropertyInvalidationErrors(var65);
//     var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
//     boolean var68 = var31.canBeCalled();
//     boolean var69 = var31.isUnknownType();
//     com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
//     java.lang.String var72 = var31.getNormalizedReferenceName();
//     java.lang.String var73 = var31.toDebugHashCodeString();
//     var31.clearCachedValues();
//     com.google.javascript.rhino.JSDocInfo var76 = var31.getOwnPropertyJSDocInfo("OFF");
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var73 + "' != '" + "function (): {682163462}"+ "'", var73.equals("function (): {682163462}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var76);
// 
//   }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test209"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setTightenTypes(true);
    var0.setProcessCommonJSModules(true);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    boolean var14 = var7.isExternExportsEnabled();
    var7.setCollapsePropertiesOnExternTypes(false);
    var7.setTransformAMDToCJSModules(false);
    var7.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var21 = var7.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var22 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var23 = null;
    var22.setStripTypes(var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var26 = var25.getDirectedGraphNodes();
    java.util.List var27 = var25.getEdges();
    var22.setManageClosureDependencies(var27);
    var22.setDevirtualizePrototypeMethods(true);
    var22.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var34 = null;
    var33.setBrokenClosureRequiresLevel(var34);
    var33.setLocale("");
    var33.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    var40.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var54 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make(var52, var54);
    int var56 = var55.getCharno();
    com.google.javascript.jscomp.CheckLevel var57 = var55.getDefaultLevel();
    var40.setReportUnknownTypes(var57);
    var33.setBrokenClosureRequiresLevel(var57);
    var22.setCheckUnreachableCode(var57);
    var7.setReportUnknownTypes(var57);
    com.google.javascript.jscomp.JSModule var63 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var64 = var63.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var65 = new com.google.javascript.jscomp.ComposeWarningsGuard(var64);
    com.google.javascript.jscomp.DiagnosticGroup var66 = null;
    boolean var67 = var65.enables(var66);
    var7.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var65);
    var0.setWarningsGuard(var65);
    var0.setReplaceIdGenerators(true);
    boolean var72 = var0.isExternExportsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test210"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    boolean var28 = var1.recordInterface();
    boolean var30 = var1.hasParameter("");
    boolean var32 = var1.recordMeaning("(LABEL_NAME hi!)");
    boolean var33 = var1.recordInterface();
    boolean var34 = var1.recordNoSideEffects();
    boolean var35 = var1.recordExpose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test211"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isIn();
    boolean var10 = var3.isQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test212"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = var26.removeFirstChild();
    var29.setQuotedString();
    boolean var31 = var0.hasNode((java.lang.Object)var29);
    boolean var32 = var0.isDirected();
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.JSDocInfoBuilder var35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var36 = var35.recordExpose();
    boolean var38 = var35.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = var42.getNext();
    com.google.javascript.rhino.Node var44 = var40.srcrefTree(var42);
    com.google.javascript.rhino.InputId var45 = com.google.javascript.jscomp.NodeUtil.getInputId(var42);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var42.setJSType(var46);
    com.google.javascript.rhino.JSDocInfo var48 = var35.build(var42);
    java.util.List var49 = var48.getThrownTypes();
    java.lang.String var50 = var48.getDeprecationReason();
    java.lang.String var51 = var48.getReturnDescription();
    boolean var52 = var48.isNoSideEffects();
    var48.setDeprecated(false);
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var56 = null;
    var55.setBrokenClosureRequiresLevel(var56);
    var55.setPrintInputDelimiter(false);
    var55.setRemoveAbstractMethods(true);
    com.google.javascript.jscomp.DiagnosticGroup var62 = null;
    com.google.javascript.jscomp.CheckLevel var63 = null;
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var64 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var62, var63);
    java.lang.String var65 = var64.toString();
    java.lang.String var66 = var64.toString();
    java.lang.String var67 = var64.toString();
    var55.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var64);
    com.google.javascript.rhino.ErrorReporter var69 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var69);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    var70.unregisterPropertyOnType("Unversioned directory", var72);
    var70.identifyNonNullableName("2014/12/24 11:10");
    var70.clearTemplateTypeNames();
    com.google.javascript.jscomp.CompilerOptions var77 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var78 = null;
    var77.setStripTypes(var78);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var80 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var81 = var80.getDirectedGraphNodes();
    java.util.List var82 = var80.getEdges();
    var77.setManageClosureDependencies(var82);
    com.google.javascript.rhino.Node var84 = com.google.javascript.rhino.IR.script(var82);
    com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.paramList(var82);
    com.google.javascript.rhino.Node var86 = var70.createParameters(var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var87 = var0.isConnectedInDirection((java.lang.Object)var48, (java.lang.Object)var55, (java.lang.Object)var86);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "2014/12/24 11:10"+ "'", var50.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "null(null)"+ "'", var65.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "null(null)"+ "'", var66.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "null(null)"+ "'", var67.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test213"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    boolean var60 = var58.canBeCalled();
    boolean var61 = var58.isObject();
    boolean var62 = var58.isObject();
    boolean var63 = var58.isNominalType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test214"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    int var3 = var2.getWarningCount();
    var2.generateReport();
    int var5 = var2.getWarningCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test215"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.lang.String var3 = var0.getAbstractMethodName();
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.rhino.jstype.FunctionType var5 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var6 = null;
    var0.applySubclassRelationship(var4, var5, var6);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var13 = var12.hasOneChild();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.returnNode();
    boolean var19 = var18.isArrayLit();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isOptionalArg();
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(0, var12, var17, var18, var23, 1, 100);
    int var31 = var23.getSourceOffset();
    com.google.javascript.rhino.Node var32 = var8.useSourceInfoFromForTree(var23);
    boolean var33 = var0.isOptionalParameter(var23);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var38 = var37.recordExpose();
    boolean var40 = var37.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    com.google.javascript.rhino.InputId var47 = com.google.javascript.jscomp.NodeUtil.getInputId(var44);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var44.setJSType(var48);
    com.google.javascript.rhino.JSDocInfo var50 = var37.build(var44);
    java.util.List var51 = var50.getThrownTypes();
    java.lang.String var52 = var50.getDeprecationReason();
    java.lang.String var53 = var50.getReturnDescription();
    boolean var54 = var50.isImplicitCast();
    var35.setJSDocInfo(var50);
    boolean var56 = var35.hasChildren();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    int var60 = var58.getSourceOffset();
    com.google.javascript.rhino.Node var61 = var58.cloneNode();
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    int var65 = var63.getSourceOffset();
    com.google.javascript.rhino.Node var66 = var63.cloneNode();
    var61.addChildrenToFront(var66);
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.InputId var74 = com.google.javascript.jscomp.NodeUtil.getInputId(var71);
    com.google.javascript.rhino.Node var75 = var61.useSourceInfoFrom(var71);
    com.google.javascript.rhino.Node var76 = var35.copyInformationFromForTree(var75);
    int var77 = var76.getSourceOffset();
    com.google.javascript.jscomp.CodingConvention.Bind var79 = var0.describeFunctionBind(var76, true);
    var76.putIntProp(2, 3);
    int var83 = var76.getSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.abstractMethod"+ "'", var3.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "2014/12/24 11:10"+ "'", var52.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test216"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make(var5, var7);
    com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make(var2, var7);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newNumber(0.0d);
    boolean var12 = var9.equals((java.lang.Object)var11);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCollapsePropertiesOnExternTypes(false);
    var13.setTransformAMDToCJSModules(false);
    var13.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var27 = var13.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var28 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var29 = null;
    var28.setStripTypes(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var32 = var31.getDirectedGraphNodes();
    java.util.List var33 = var31.getEdges();
    var28.setManageClosureDependencies(var33);
    var28.setDevirtualizePrototypeMethods(true);
    var28.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var40 = null;
    var39.setBrokenClosureRequiresLevel(var40);
    var39.setLocale("");
    var39.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var47 = null;
    var46.setStripTypes(var47);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var50 = var49.getDirectedGraphNodes();
    java.util.List var51 = var49.getEdges();
    var46.setManageClosureDependencies(var51);
    boolean var53 = var46.isExternExportsEnabled();
    var46.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var60 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make(var58, var60);
    int var62 = var61.getCharno();
    com.google.javascript.jscomp.CheckLevel var63 = var61.getDefaultLevel();
    var46.setReportUnknownTypes(var63);
    var39.setBrokenClosureRequiresLevel(var63);
    var28.setCheckUnreachableCode(var63);
    var13.setReportUnknownTypes(var63);
    com.google.javascript.jscomp.Compiler var68 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var69 = var68.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var70 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var68);
    com.google.javascript.jscomp.ErrorManager var71 = var68.getErrorManager();
    com.google.javascript.jscomp.LightweightMessageFormatter var72 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var68);
    java.lang.String var73 = var9.format(var63, (com.google.javascript.jscomp.MessageFormatter)var72);
    int var74 = var9.getNodeSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "ERROR - (InputId: )\n"+ "'", var73.equals("ERROR - (InputId: )\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test217"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var14.setDeprecated(false);
    boolean var17 = var14.isNoAlias();
    boolean var18 = var14.hasType();
    com.google.javascript.rhino.JSDocInfo.Visibility var19 = var14.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test218"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newExpr(var0);
    boolean var3 = var2.isNull();
    boolean var4 = var2.isGetterDef();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var9 = var8.recordExpose();
    boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var15.setJSType(var19);
    com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
    java.util.List var22 = var21.getThrownTypes();
    java.lang.String var23 = var21.getDeprecationReason();
    java.lang.String var24 = var21.getReturnDescription();
    boolean var25 = var21.isImplicitCast();
    var6.setJSDocInfo(var21);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    java.lang.String var84 = var83.getDisplayName();
    boolean var85 = var83.isFunctionPrototypeType();
    com.google.javascript.rhino.Node var86 = var83.getSource();
    boolean var87 = var86.isAdd();
    com.google.javascript.rhino.Node var88 = var6.useSourceInfoIfMissingFromForTree(var86);
    com.google.javascript.rhino.Node var90 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var92 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var93 = var92.getNext();
    com.google.javascript.rhino.Node var94 = var90.srcrefTree(var92);
    boolean var95 = var94.isGetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.addChildBefore(var88, var94);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "2014/12/24 11:10"+ "'", var23.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var84.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test219"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    boolean var74 = var31.hasCachedValues();
    boolean var75 = var31.matchesNumberContext();
    boolean var76 = var31.isFunctionPrototypeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test220"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordMeaning("Unversioned directory");
    boolean var5 = var1.recordExport();
    boolean var7 = var1.recordDescription("BANG 0");
    var1.markAnnotation("JSDocInfo", 10, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test221"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.Node var15 = var8.getLastChild();
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var18 = var17.recordExpose();
    boolean var20 = var17.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    com.google.javascript.rhino.JSDocInfo var30 = var17.build(var24);
    com.google.javascript.rhino.Node var31 = var24.getLastChild();
    boolean var32 = var24.isThis();
    com.google.javascript.jscomp.SourceFile var34 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var24.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var34);
    var8.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var34);
    var34.clearCachedSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test222"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var3.isSwitch();
    int var27 = var3.getSideEffectFlags();
    com.google.javascript.rhino.JSDocInfo var28 = var3.getJSDocInfo();
    boolean var29 = var3.isIf();
    java.lang.String var30 = var3.toString();
    boolean var31 = var3.isBreak();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "BANG 0"+ "'", var30.equals("BANG 0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test223"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    int var6 = var4.getSourceOffset();
    com.google.javascript.rhino.Node var7 = var4.removeFirstChild();
    com.google.javascript.jscomp.graph.GraphNode var8 = var0.getNode((java.lang.Object)var4);
    java.lang.String var9 = com.google.javascript.jscomp.NodeUtil.getSourceName(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test224"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.disableRuntimeTypeCheck();
    var27.setMoveFunctionDeclarations(true);
    var27.skipAllCompilerPasses();
    var27.setRenamePrefixNamespace("(2014/12/24 11:10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test225"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    java.util.Collection var48 = var6.getDirectImplementors(var47);
    com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    var1.identifyNonNullableName("STRING hi 0 [length: 2]\n");
    var1.clearTemplateTypeNames();
    java.lang.Iterable var58 = var1.getTypesWithProperty("goog.global");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test226"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    java.lang.Iterable var6 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod: WARNING - \n");
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.createFunctionTypeWithVarArgs(var12, var15);
    boolean var18 = var17.hasAnyTemplateInternal();
    java.lang.Iterable var19 = var17.getAllExtendedInterfaces();
    boolean var20 = var17.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var33 = var31.removeProperty("null(null)");
    var17.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var31);
    java.lang.String var35 = var17.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var36 = var17.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var37 = var17.getReturnType();
    com.google.javascript.rhino.jstype.JSType var38 = var1.createOptionalNullableType(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test227"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var9 = var3.getModule();
//     java.lang.String var10 = var3.getCode();
// 
//   }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test228"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var19 = var14.getDescriptionForParameter("");
    java.util.Set var20 = var14.getParameterNames();
    int var21 = var14.getExtendedInterfacesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test229"); }


    com.google.javascript.rhino.jstype.TernaryValue var1 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar((-19));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test230"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isNE();
    java.lang.String var5 = com.google.javascript.jscomp.NodeUtil.getSourceName(var1);
    com.google.javascript.rhino.jstype.StaticSourceFile var6 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test231"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setLineBreak(false);
    var0.setDefineToDoubleLiteral("LABEL_NAME hi!\n", 1.0d);
    var0.setInferTypes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test232"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.SymbolTable var4 = var3.buildKnownSymbolTable();
// 
//   }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test233"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     java.lang.String var6 = var3.getLine((-19));
// 
//   }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test234"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.JSTypeNative[] var91 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var92 = var24.createUnionType(var91);
    var24.clearNamedTypes();
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var94 = null;
    var24.setResolveMode(var94);
    var24.incrementGeneration();
    com.google.javascript.rhino.jstype.FunctionBuilder var97 = new com.google.javascript.rhino.jstype.FunctionBuilder(var24);
    java.lang.Iterable var99 = var24.getEachReferenceTypeWithProperty("function (): {2142004661}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test235"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.isConsistentIdGenerator();
    int var20 = var14.getImplementedInterfaceCount();
    java.util.List var21 = var14.getImplementedInterfaces();
    boolean var22 = var14.isExport();
    com.google.javascript.rhino.JSTypeExpression var23 = var14.getEnumParameterType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test236"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var72 = var31.getReturnType();
    com.google.javascript.rhino.JSDocInfo var74 = var31.getOwnPropertyJSDocInfo("function (): {1292906510}");
    com.google.javascript.rhino.jstype.JSType var76 = var31.findPropertyType("2014/12/24 11:10");
    java.lang.Iterable var77 = var31.getOwnImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test237"); }


    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var8 = new com.google.javascript.jscomp.DiagnosticType[] { var7};
    com.google.javascript.jscomp.DiagnosticGroup var9 = new com.google.javascript.jscomp.DiagnosticGroup(var8);
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    boolean var17 = var10.isExternExportsEnabled();
    var10.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var24 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make(var22, var24);
    int var26 = var25.getCharno();
    com.google.javascript.jscomp.CheckLevel var27 = var25.getDefaultLevel();
    var10.setReportUnknownTypes(var27);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var29 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var9, var27);
    java.lang.String var30 = var9.toString();
    com.google.javascript.jscomp.DiagnosticGroup[] var31 = new com.google.javascript.jscomp.DiagnosticGroup[] { var9};
    com.google.javascript.jscomp.DiagnosticGroup var32 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var31);
    com.google.javascript.jscomp.DiagnosticGroup var33 = new com.google.javascript.jscomp.DiagnosticGroup(var31);
    com.google.javascript.jscomp.DiagnosticGroup var34 = new com.google.javascript.jscomp.DiagnosticGroup(var31);
    com.google.javascript.jscomp.DiagnosticGroup[] var35 = new com.google.javascript.jscomp.DiagnosticGroup[] { var34};
    com.google.javascript.jscomp.DiagnosticGroup var36 = new com.google.javascript.jscomp.DiagnosticGroup("module$InputId: ", var35);
    com.google.javascript.jscomp.DiagnosticGroup var37 = new com.google.javascript.jscomp.DiagnosticGroup("STRING hi 0 [length: 2]\n.<hi>", var35);
    com.google.javascript.jscomp.DiagnosticGroup var38 = new com.google.javascript.jscomp.DiagnosticGroup("RETURN", var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test238"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    boolean var6 = var1.isConstant("Unversioned directory");
    com.google.javascript.jscomp.graph.GraphNode var7 = var0.createNode((java.lang.Object)var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var10 = var8.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    java.util.List var28 = var25.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var29 = var25.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var8.createDirectedGraphNode((java.lang.Object)var25);
    java.util.List var31 = var0.getNeighborNodes(var30);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.paramList(var31);
    boolean var33 = var32.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test239() {}
//   public void test239() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test239"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var1 = var0.getDirectedGraphNodes();
//     var0.pushEdgeAnnotations();
//     java.lang.Iterable var3 = var0.getDirectedGraphNodes();
//     com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var6 = var5.recordExpose();
//     boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = var12.getNext();
//     com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
//     com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var12.setJSType(var16);
//     com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
//     java.lang.String var19 = var18.getFileOverview();
//     java.util.Set var20 = var18.getModifies();
//     java.util.List var21 = var18.getImplementedInterfaces();
//     com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
//     com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var25 = var24.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var26 = new com.google.javascript.jscomp.ComposeWarningsGuard(var25);
//     com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var0.getDirectedGraphNode((java.lang.Object)var26);
//     com.google.javascript.jscomp.ClosureCodingConvention var28 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var30 = var28.isConstantKey("2014/12/24 11:10");
//     java.lang.String var31 = var28.getAbstractMethodName();
//     com.google.javascript.rhino.jstype.FunctionType var32 = null;
//     com.google.javascript.rhino.jstype.FunctionType var33 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var34 = null;
//     var28.applySubclassRelationship(var32, var33, var34);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var40 = var39.getNext();
//     com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
//     com.google.javascript.rhino.JSDocInfo var42 = var39.getJSDocInfo();
//     boolean var43 = var39.isWhile();
//     boolean var44 = var39.isOnlyModifiesThisCall();
//     com.google.javascript.jscomp.CodingConvention.Bind var46 = var28.describeFunctionBind(var39, false);
//     java.util.Collection var47 = var28.getIndirectlyDeclaredProperties();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var53 = var52.getNext();
//     com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
//     boolean var55 = var52.isVarArgs();
//     boolean var56 = var52.isOptionalArg();
//     com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var58 = new com.google.javascript.rhino.Node(0, var52, var57);
//     boolean var59 = var57.isQualifiedName();
//     com.google.javascript.rhino.Node var60 = var57.cloneNode();
//     java.lang.String var61 = var60.toString();
//     com.google.javascript.jscomp.CodingConvention.Bind var63 = var28.describeFunctionBind(var60, true);
//     java.util.List var64 = var0.getNeighborNodes((java.lang.Object)true);
// 
//   }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test240"); }


    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("BANG 0\n    STRING hi 0 [length: 2]\n", "module$function (): {140836661}");
    com.google.javascript.jscomp.MessageFormatter var6 = null;
    java.util.logging.Logger var7 = null;
    com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var6, var7);
    com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var8);
    com.google.javascript.jscomp.Scope var10 = var9.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
    com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var9, var11);
    com.google.javascript.jscomp.Scope var13 = var12.getScope();
    int var14 = var12.getLineNumber();
    com.google.javascript.rhino.Node var15 = var12.getCurrentNode();
    com.google.javascript.rhino.Node var16 = var12.getEnclosingFunction();
    com.google.javascript.rhino.Node var17 = null;
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("{proxy:{599688852}}", "Unversioned directory");
    com.google.javascript.jscomp.CheckLevel var25 = null;
    com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var25, "Unversioned directory");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var36 = var32.getBooleanProp(100);
    int var37 = var32.getSideEffectFlags();
    com.google.javascript.jscomp.CheckLevel var39 = null;
    com.google.javascript.jscomp.DiagnosticType var41 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var39, "");
    com.google.javascript.jscomp.CheckLevel var43 = null;
    com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var43, "");
    int var46 = var41.compareTo(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    boolean var53 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var51);
    int var54 = var51.getLength();
    com.google.javascript.rhino.Node var55 = null;
    boolean var56 = var51.hasChild(var55);
    com.google.javascript.rhino.Node var57 = var49.useSourceInfoIfMissingFromForTree(var51);
    var51.setSourceFileForTesting("Unversioned directory");
    boolean var60 = var51.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var61 = var51.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var65 = null;
    java.util.logging.Logger var66 = null;
    com.google.javascript.jscomp.LoggerErrorManager var67 = new com.google.javascript.jscomp.LoggerErrorManager(var65, var66);
    com.google.javascript.jscomp.Compiler var68 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var67);
    com.google.javascript.jscomp.Scope var69 = var68.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var70 = null;
    com.google.javascript.jscomp.NodeTraversal var71 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var68, var70);
    com.google.javascript.jscomp.Scope var72 = var71.getScope();
    com.google.javascript.rhino.Node var73 = null;
    com.google.javascript.jscomp.DiagnosticType var76 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var78 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var79 = com.google.javascript.jscomp.JSError.make(var76, var78);
    com.google.javascript.jscomp.DiagnosticType var80 = var79.getType();
    java.lang.String[] var82 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var83 = var71.makeError(var73, var80, var82);
    com.google.javascript.jscomp.JSError var84 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var51, var64, var82);
    com.google.javascript.jscomp.JSError var85 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var32, var41, var82);
    com.google.javascript.jscomp.JSError var86 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", (-1), 100, var27, var82);
    var12.report(var17, var20, var82);
    com.google.javascript.jscomp.JSError var88 = com.google.javascript.jscomp.JSError.make("Unversioned directory", 154, (-19), var5, var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test241"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    boolean var18 = var12.canPropertyBeDefined(var16, "BANG");
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.jstype.JSType[] var20 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.Node var21 = var12.createParameters(var20);
    boolean var22 = var10.addRequiredParams(var20);
    com.google.javascript.rhino.jstype.FunctionBuilder var23 = var4.withParams(var10);
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var26 = null;
    var25.setResolveMode(var26);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var28 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var25);
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var31 = null;
    var30.setResolveMode(var31);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var33 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var30);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var34 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var30);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    java.util.Collection var72 = var30.getDirectImplementors(var71);
    com.google.javascript.rhino.jstype.JSType var77 = var25.getType((com.google.javascript.rhino.jstype.StaticScope)var71, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var78 = var71.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var79 = var71.collapseUnion();
    com.google.javascript.rhino.jstype.FunctionBuilder var80 = var4.withReturnType((com.google.javascript.rhino.jstype.JSType)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test242"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    var10.clearCachedValues();
    boolean var16 = var10.hasDisplayName();
    java.lang.Iterable var17 = var10.getExtendedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType var18 = var10.getPrototype();
    boolean var19 = var10.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test243"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.hasReferenceName();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    var67.identifyNonNullableName("2014/12/24 11:10");
    var67.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    com.google.javascript.rhino.jstype.JSType var77 = null;
    var75.unregisterPropertyOnType("Unversioned directory", var77);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    com.google.javascript.jscomp.JSModule var81 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var82 = var81.getDependencies();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.block(var82);
    com.google.javascript.rhino.jstype.FunctionType var84 = var75.createFunctionTypeWithVarArgs(var79, var82);
    boolean var85 = var84.hasCachedValues();
    boolean var86 = var84.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType var91 = var67.getType((com.google.javascript.rhino.jstype.StaticScope)var84, "2014/12/24 11:10", "{proxy:{599688852}}", 10, 0);
    boolean var92 = var84.isArrayType();
    boolean var93 = var62.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test244"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    boolean var2 = var1.hasVarArgs();
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    com.google.javascript.rhino.JSDocInfo var9 = var6.getJSDocInfo();
    boolean var10 = var6.isWhile();
    boolean var11 = var6.isOnlyModifiesThisCall();
    boolean var12 = var6.isParamList();
    com.google.javascript.rhino.Node var13 = var1.newOptionalParameterFromNode(var6);
    com.google.javascript.rhino.InputId var14 = com.google.javascript.jscomp.NodeUtil.getInputId(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test245"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    com.google.javascript.rhino.jstype.JSType var79 = var10.unboxesTo();
    com.google.javascript.rhino.ErrorReporter var80 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var80);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var81.unregisterPropertyOnType("Unversioned directory", var83);
    com.google.javascript.rhino.jstype.JSType var85 = null;
    com.google.javascript.jscomp.JSModule var87 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var88 = var87.getDependencies();
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.block(var88);
    com.google.javascript.rhino.jstype.FunctionType var90 = var81.createFunctionTypeWithVarArgs(var85, var88);
    boolean var91 = var90.hasAnyTemplateInternal();
    java.lang.Iterable var92 = var90.getAllExtendedInterfaces();
    boolean var93 = var90.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var95 = var90.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.Node var97 = var90.getPropertyNode("function (): ?");
    boolean var98 = var10.isSubtype((com.google.javascript.rhino.jstype.JSType)var90);
    boolean var99 = var10.hasCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test246"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var2 = var1.isDo();
    boolean var3 = var1.isAssignAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test247"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var41 = var40.isTry();
    boolean var42 = var40.isSwitch();
    boolean var43 = var33.isVarArgsParameter(var40);
    java.lang.String var44 = var33.getExportSymbolFunction();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isArrayLit();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var55 = var54.isGetterDef();
    var54.putIntProp((-1), 10);
    var48.addChildrenToFront(var54);
    boolean var60 = var54.wasEmptyNode();
    boolean var61 = var33.isVarArgsParameter(var54);
    boolean var63 = var33.isValidEnumKey("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var65 = var33.isConstant("STRING hi 0 [length: 2]\n: RETURN");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "goog.exportSymbol"+ "'", var44.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test248"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    java.util.Set var9 = var1.getThisAndAllDependencies();
    java.util.List var10 = var1.getInputs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test249"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var3 = var1.recordConstructor();
    boolean var4 = var1.recordOverride();
    boolean var5 = var1.recordExpose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test250"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var8 = var6.isConstantKey("2014/12/24 11:10");
    java.util.Collection var9 = var6.getAssertionFunctions();
    java.lang.String var10 = var6.getAbstractMethodName();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var15, var20);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var22 = var6.getClassesDefinedByCall(var15);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    boolean var28 = var23.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isOptionalArg();
    java.lang.String var40 = var32.toString(false, false, true);
    java.util.List var41 = var23.identifyTypeDeclarationCall(var32);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var42 = var6.getClassesDefinedByCall(var32);
    java.lang.String var43 = var3.extractClassNameIfRequire(var5, var32);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var46 = var45.isGetterDef();
    boolean var47 = var45.isGetProp();
    com.google.javascript.rhino.Node var48 = var45.getLastSibling();
    com.google.javascript.jscomp.CodingConvention.Bind var50 = var3.describeFunctionBind(var48, true);
    java.lang.String var51 = var3.getExportSymbolFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "goog.abstractMethod"+ "'", var10.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "BANG"+ "'", var40.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "goog.exportSymbol"+ "'", var51.equals("goog.exportSymbol"));

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test251"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    com.google.javascript.rhino.Node var7 = var3.getLastSibling();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("()");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    var10.pushEdgeAnnotations();
    java.lang.Iterable var13 = var10.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var32 = var10.getNode((java.lang.Object)var28);
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    com.google.javascript.rhino.Node var39 = var36.removeFirstChild();
    var39.setQuotedString();
    boolean var41 = var10.hasNode((java.lang.Object)var39);
    boolean var42 = var39.isExprResult();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.hook(var7, var9, var39);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test252"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isOr();
    java.lang.String var11 = var2.extractClassNameIfRequire(var3, var7);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    boolean var34 = var33.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    java.util.List var38 = var35.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCheckCaja(false);
    java.util.Set var49 = null;
    var39.setReplaceStringsReservedStrings(var49);
    var39.setAliasAllStrings(true);
    var39.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var39.setPropertyInvalidationErrors(var67);
    var2.defineDelegateProxyPrototypeProperties(var13, (com.google.javascript.rhino.jstype.StaticScope)var33, var38, var67);
    boolean var70 = var33.canBeCalled();
    boolean var71 = var33.isRegexpType();
    boolean var72 = var1.equals((java.lang.Object)var33);
    boolean var74 = var33.hasOwnProperty("RETURN");
    java.lang.String var75 = var33.getNormalizedReferenceName();
    com.google.javascript.rhino.Node var76 = var33.getRootNode();
    com.google.javascript.rhino.JSDocInfo var77 = var33.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var78 = var33.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test253"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    boolean var27 = var1.removeByName("BANG 0 [source_file: Unversioned directory]\n");
    com.google.javascript.jscomp.SourceFile var31 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var33 = var31.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31);
    java.lang.String var35 = var34.toString();
    com.google.javascript.jscomp.SourceAst var36 = var34.getSourceAst();
    com.google.javascript.rhino.InputId var38 = new com.google.javascript.rhino.InputId("()");
    com.google.javascript.jscomp.CompilerInput var40 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var34, var38, true);
    int var41 = var40.getNumLines();
    var1.remove(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "goog.abstractMethod"+ "'", var35.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test254"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    var15.setDevirtualizePrototypeMethods(true);
    var15.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var26 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var27 = null;
    var26.setBrokenClosureRequiresLevel(var27);
    var26.setLocale("");
    var26.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var34 = null;
    var33.setStripTypes(var34);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var37 = var36.getDirectedGraphNodes();
    java.util.List var38 = var36.getEdges();
    var33.setManageClosureDependencies(var38);
    boolean var40 = var33.isExternExportsEnabled();
    var33.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var47 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make(var45, var47);
    int var49 = var48.getCharno();
    com.google.javascript.jscomp.CheckLevel var50 = var48.getDefaultLevel();
    var33.setReportUnknownTypes(var50);
    var26.setBrokenClosureRequiresLevel(var50);
    var15.setCheckUnreachableCode(var50);
    var0.setReportUnknownTypes(var50);
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var57);
    com.google.javascript.jscomp.DiagnosticGroup var59 = null;
    boolean var60 = var58.enables(var59);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var58);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var62 = var0.getTweakProcessing();
    java.lang.String var63 = var62.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "OFF"+ "'", var63.equals("OFF"));

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test255"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.Node var63 = var62.getParametersNode();
    java.lang.Iterable var64 = var62.getOwnImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var68 = null;
    var67.setResolveMode(var68);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var70 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var67);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var71 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var67);
    com.google.javascript.rhino.ErrorReporter var72 = var67.getErrorReporter();
    var67.incrementGeneration();
    com.google.javascript.rhino.jstype.JSTypeNative[] var74 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var75 = var67.createUnionType(var74);
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = var77.getNext();
    boolean var79 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var77);
    int var80 = var77.getLength();
    boolean var81 = var77.isQualifiedName();
    boolean var82 = var77.isVar();
    boolean var83 = var62.defineDeclaredProperty("function (): {1593701503}", var75, var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test256"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var70 = var31.getTypeOfThis();
    com.google.javascript.rhino.jstype.ObjectType var71 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var31);
    com.google.javascript.rhino.jstype.FunctionType var72 = var71.getOwnerFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test257"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.String var22 = var21.toStringTree();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var30 = var26.getBooleanProp(100);
    int var31 = var26.getSideEffectFlags();
    boolean var32 = var26.isDefaultCase();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(1, var2, var21, var26);
    boolean var34 = var2.isParamList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setDouble(10.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var22.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test258"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setLabelRenaming(false);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    var17.setChainCalls(true);
    var17.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var23 = var17.isRemoveUnusedClassProperties();
    var17.setDisambiguateProperties(true);
    var17.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var17.setNameReferenceGraphPath("BANG");
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    var31.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var31.setColorizeErrorOutput(true);
    var31.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var46 = null;
    var45.setStripTypes(var46);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    java.util.List var50 = var48.getEdges();
    var45.setManageClosureDependencies(var50);
    var45.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var57);
    com.google.javascript.jscomp.JSError var59 = null;
    com.google.javascript.jscomp.CheckLevel var60 = var58.level(var59);
    var45.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var58);
    var31.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var58);
    var31.setTweakToNumberLiteral("", (-1));
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    byte[] var70 = new byte[] { (byte)100};
    var66.setInputPropertyMapSerialized(var70);
    var66.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var74 = var66.getTracerMode();
    var31.setTracerMode(var74);
    var17.setTracerMode(var74);
    var0.setTracerMode(var74);
    var0.setRemoveUnusedVars(false);
    var0.setShadowVariables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test259"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.matchesNumberContext();
    com.google.javascript.rhino.jstype.FunctionType var66 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var62);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var69 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = var73.getNext();
    boolean var75 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var73);
    int var76 = var73.getLength();
    com.google.javascript.rhino.Node var77 = null;
    boolean var78 = var73.hasChild(var77);
    com.google.javascript.rhino.Node var79 = var71.useSourceInfoIfMissingFromForTree(var73);
    com.google.javascript.jscomp.CodingConvention.Bind var81 = var69.describeFunctionBind(var71, false);
    int var82 = var71.getSourcePosition();
    boolean var83 = var66.defineSynthesizedProperty("function (): {540092593}", var68, var71);
    boolean var84 = var66.isConstructor();
    boolean var85 = var66.hasReferenceName();
    var66.clearResolved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test260() {}
//   public void test260() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test260"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     boolean var5 = var0.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     boolean var13 = var9.isOptionalArg();
//     java.lang.String var17 = var9.toString(false, false, true);
//     java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
//     java.lang.String var19 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var23 = var22.isGetterDef();
//     boolean var24 = var22.isNE();
//     boolean var25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var22);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     java.lang.Iterable var28 = var27.siblings();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = var32.getNext();
//     com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
//     boolean var35 = var32.isVarArgs();
//     boolean var36 = var32.isArrayLit();
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var41 = var40.getNext();
//     com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
//     boolean var43 = var40.isVarArgs();
//     com.google.javascript.rhino.Node var45 = var40.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var50 = var49.getNext();
//     com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
//     com.google.javascript.rhino.JSDocInfo var52 = var49.getJSDocInfo();
//     com.google.javascript.rhino.Node var53 = var40.copyInformationFrom(var49);
//     boolean var54 = var32.hasChild(var49);
//     boolean var55 = var49.isNot();
//     int var56 = var49.getChildCount();
//     com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(10, var22, var27, var49, 153, 10);
//     com.google.javascript.jscomp.CodingConvention.Bind var61 = var0.describeFunctionBind(var59, false);
//     java.util.Collection var62 = var0.getIndirectlyDeclaredProperties();
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.returnNode();
//     var63.setSourceFileForTesting("null(null)");
//     com.google.javascript.rhino.Node var66 = var63.cloneNode();
//     boolean var67 = var63.isGetProp();
//     boolean var68 = var63.isStringKey();
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var69 = var0.getClassesDefinedByCall(var63);
// 
//   }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test261"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
    int var95 = var3.getErrorCount();
    int var96 = var3.getWarningCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test262"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    var0.setDefineToNumberLiteral("null(null)", 10);
    java.util.List var16 = null;
    var0.setReplaceStringsFunctionDescriptions(var16);
    var0.setProtectHiddenSideEffects(false);
    var0.setOptimizeReturns(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test263"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    com.google.common.collect.ImmutableList var16 = var14.getTemplateTypeNames();
    boolean var17 = var14.shouldPreserveTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test264"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.jscomp.deps.SortedDependencies var42 = new com.google.javascript.jscomp.deps.SortedDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var45 = var44.recordExpose();
    boolean var47 = var44.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.InputId var54 = com.google.javascript.jscomp.NodeUtil.getInputId(var51);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var51.setJSType(var55);
    com.google.javascript.rhino.JSDocInfo var57 = var44.build(var51);
    java.lang.String var58 = var57.getFileOverview();
    java.util.Set var59 = var57.getModifies();
    java.util.List var60 = var57.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var61 = var57.getType();
    java.util.List var62 = var57.getImplementedInterfaces();
    java.util.List var63 = var42.getSortedDependenciesOf(var62);
    java.util.List var64 = var42.getInputsWithoutProvides();
    java.util.List var65 = var42.getInputsWithoutProvides();
    com.google.javascript.jscomp.deps.DependencyInfo var67 = var42.maybeGetInputProviding("ECMASCRIPT3");
    com.google.javascript.jscomp.deps.DependencyInfo var69 = var42.maybeGetInputProviding("{160498324}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test265"); }


    com.google.javascript.rhino.Node var1 = new com.google.javascript.rhino.Node(153);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test266"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setLooseTypes(false);
    var0.setCoalesceVariableNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test267"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
    com.google.javascript.jscomp.SourceAst var5 = null;
    com.google.javascript.rhino.InputId var6 = null;
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
    com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
    var1.add(var8);
    com.google.javascript.jscomp.MessageFormatter var11 = null;
    java.util.logging.Logger var12 = null;
    com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
    com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var13);
    com.google.javascript.jscomp.Scope var15 = var14.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var16 = null;
    com.google.javascript.jscomp.NodeTraversal var17 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var14, var16);
    com.google.javascript.jscomp.LightweightMessageFormatter var18 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var14);
    int var19 = var14.getWarningCount();
    var8.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test268"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1);
    boolean var9 = var8.isDefaultCase();
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    int var13 = var11.getSourceOffset();
    com.google.javascript.rhino.Node var14 = var11.cloneNode();
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var15 = var14.getJsDocBuilderForNode();
    boolean var16 = var14.isVoid();
    com.google.javascript.rhino.jstype.JSType var17 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var18 = var1.createConstructorType("function (): {682163462}", var8, var14, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test269"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var3 = var1.recordHiddenness();
    boolean var4 = var1.isInterfaceRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test270"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.String var28 = var10.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var29 = var10.getJSDocInfo();
    boolean var30 = var10.isRecordType();
    com.google.javascript.rhino.JSDocInfo var31 = var10.getJSDocInfo();
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.unregisterPropertyOnType("Unversioned directory", var35);
    var33.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    boolean var46 = var43.isVarArgs();
    boolean var47 = var43.isFor();
    boolean var48 = var43.isNumber();
    com.google.javascript.rhino.Node var49 = var43.getNext();
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
    java.lang.Object var68 = null;
    var53.putProp(0, var68);
    com.google.javascript.rhino.JSTypeExpression var71 = new com.google.javascript.rhino.JSTypeExpression(var53, "()");
    com.google.javascript.rhino.jstype.StaticScope var72 = null;
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    boolean var80 = var74.canPropertyBeDefined(var78, "BANG");
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.Node var83 = var74.createParameters(var82);
    com.google.javascript.rhino.jstype.JSType var84 = var71.evaluate(var72, var74);
    com.google.javascript.rhino.jstype.JSType var85 = var84.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var86 = var85.dereference();
    boolean var87 = var85.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var88 = var33.createEnumType("STRING hi 0 [length: 2]\n", var43, var85);
    com.google.javascript.rhino.JSDocInfo var89 = var88.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var90 = var88.getElementsType();
    java.lang.String var91 = var90.getReferenceName();
    boolean var92 = var90.isEnumElementType();
    boolean var93 = com.google.javascript.rhino.jstype.JSType.isEquivalent((com.google.javascript.rhino.jstype.JSType)var10, (com.google.javascript.rhino.jstype.JSType)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var91.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test271"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(306, "function (): {140836661}", 306, (-19));
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.var(var4, var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test272"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var36 = null;
    boolean var37 = var32.recordParameter("Unversioned directory", var36);
    com.google.javascript.rhino.JSTypeExpression var38 = null;
    boolean var40 = var32.recordThrowDescription(var38, "");
    com.google.javascript.jscomp.SourceFile var45 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var32.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var45, 0, 0);
    var1.markName("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", (com.google.javascript.rhino.jstype.StaticSourceFile)var45, 0, 3);
    boolean var52 = var1.recordJavaDispatch();
    boolean var53 = var1.recordNoSideEffects();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test273"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var0.setRemoveClosureAsserts(true);
    var0.setExternExports(false);
    var0.setOutputCharset("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)");
    var0.setLineBreak(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test274"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isOr();
    java.lang.String var10 = var1.extractClassNameIfRequire(var2, var6);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.block(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var12.createFunctionTypeWithVarArgs(var16, var19);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var33 = var32.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.lang.Iterable var36 = var34.getDirectedGraphNodes();
    java.util.List var37 = var34.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var39 = null;
    var38.setStripTypes(var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    var38.setManageClosureDependencies(var43);
    boolean var45 = var38.isExternExportsEnabled();
    var38.setCheckCaja(false);
    java.util.Set var48 = null;
    var38.setReplaceStringsReservedStrings(var48);
    var38.setAliasAllStrings(true);
    var38.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    var54.setGroupVariableDeclarations(true);
    java.util.Map var66 = var54.getDefineReplacements();
    var38.setPropertyInvalidationErrors(var66);
    var1.defineDelegateProxyPrototypeProperties(var12, (com.google.javascript.rhino.jstype.StaticScope)var32, var37, var66);
    boolean var69 = var32.canBeCalled();
    boolean var70 = var32.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var71 = var32.collapseUnion();
    boolean var72 = var32.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var73 = var32.getReturnType();
    com.google.javascript.rhino.jstype.JSType var75 = var32.findPropertyType("{proxy:{599688852}}");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var76 = var0.createDirectedGraphNode((java.lang.Object)"{proxy:{599688852}}");
    var0.pushEdgeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test275"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isNE();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var2);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var8 = var7.siblings();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isArrayLit();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    boolean var34 = var12.hasChild(var29);
    boolean var35 = var29.isNot();
    int var36 = var29.getChildCount();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, var2, var7, var29, 153, 10);
    boolean var40 = var7.isNew();
    int var41 = var7.getLength();
    com.google.javascript.rhino.Node var42 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.assign(var7, var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test276"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var4 = var3.hasOneChild();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    boolean var10 = var9.isArrayLit();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
    java.lang.String var22 = var9.getQualifiedName();
    boolean var23 = var9.isHook();
    int var24 = var9.getSourceOffset();
    boolean var25 = var9.isBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test277"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    boolean var64 = var58.hasReferenceName();
    com.google.javascript.rhino.jstype.EnumElementType var65 = var58.toMaybeEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test278"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    boolean var32 = var0.shouldColorizeErrorOutput();
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var34 = null;
    var33.setStripTypes(var34);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var37 = var36.getDirectedGraphNodes();
    java.util.List var38 = var36.getEdges();
    var33.setManageClosureDependencies(var38);
    boolean var40 = var33.isExternExportsEnabled();
    var33.setCheckCaja(false);
    var33.setTightenTypes(false);
    var33.setTweakToDoubleLiteral("2014/12/24 11:10", 10.0d);
    var33.setRemoveUnusedLocalVars(true);
    var33.setReplaceStringsPlaceholderToken("null(null)");
    com.google.javascript.jscomp.PropertyRenamingPolicy var53 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("OFF");
    var33.setPropertyRenaming(var53);
    var0.setPropertyRenaming(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test279"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var5 = null;
    var0.setAliasTransformationHandler(var5);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.createFunctionTypeWithVarArgs(var12, var15);
    var0.setReplaceStringsFunctionDescriptions(var15);
    var0.setDefineToDoubleLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", 10.0d);
    var0.setProcessCommonJSModules(false);
    var0.setChainCalls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test280"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.jscomp.JSModuleGraph var18 = new com.google.javascript.jscomp.JSModuleGraph(var17);
    com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var21 = var20.getProvides();
    java.util.List var22 = var20.getInputs();
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getProvides();
    java.util.List var26 = var24.getRequires();
    java.util.Set var27 = var24.getAllDependencies();
    java.lang.String var28 = var24.toString();
    var20.addDependency(var24);
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    var31.removeAll();
    boolean var34 = var18.dependsOn(var20, var31);
    com.google.javascript.jscomp.JSModule var36 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var37 = var36.getDependencies();
    com.google.javascript.jscomp.SourceAst var38 = null;
    com.google.javascript.rhino.InputId var39 = null;
    com.google.javascript.jscomp.CompilerInput var41 = new com.google.javascript.jscomp.CompilerInput(var38, var39, true);
    com.google.javascript.jscomp.JSModule var42 = var41.getModule();
    var36.add(var41);
    com.google.javascript.jscomp.SourceFile var45 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var36.addFirst(var45);
    java.util.Set var47 = var36.getAllDependencies();
    var36.removeAll();
    com.google.javascript.jscomp.SourceAst var49 = null;
    com.google.javascript.rhino.InputId var50 = null;
    com.google.javascript.jscomp.CompilerInput var52 = new com.google.javascript.jscomp.CompilerInput(var49, var50, true);
    com.google.javascript.jscomp.CompilerInput var55 = new com.google.javascript.jscomp.CompilerInput(var49, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var36.addFirst(var55);
    boolean var57 = var55.isExtern();
    com.google.javascript.jscomp.SourceAst var58 = var55.getSourceAst();
    java.lang.String var59 = var55.toString();
    var20.remove(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Unversioned directory"+ "'", var28.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var59.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test281"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var6.isGetterDef();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(100, var6, var11);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    int var20 = var18.getSourceOffset();
    com.google.javascript.rhino.Node var21 = var18.cloneNode();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    int var25 = var23.getSourceOffset();
    boolean var26 = var23.isAssignAdd();
    int var27 = var21.getIndexOfChild(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.or(var11, var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test282"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setInlineLocalFunctions(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.getLanguageIn();
    var0.setInlineConstantVars(false);
    var0.setLabelRenaming(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test283"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    boolean var6 = var1.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    boolean var14 = var10.isOptionalArg();
    java.lang.String var18 = var10.toString(false, false, true);
    java.util.List var19 = var1.identifyTypeDeclarationCall(var10);
    java.lang.String var20 = var1.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    int var24 = var22.getSourceOffset();
    com.google.javascript.rhino.Node var25 = var22.cloneNode();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    int var29 = var27.getSourceOffset();
    com.google.javascript.rhino.Node var30 = var27.cloneNode();
    var25.addChildrenToFront(var30);
    com.google.javascript.jscomp.CodingConvention.Bind var33 = var1.describeFunctionBind(var25, true);
    int var34 = var25.getChildCount();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var37 = var36.isGetterDef();
    java.lang.String var41 = var36.toString(true, false, false);
    com.google.javascript.rhino.JSTypeExpression var43 = new com.google.javascript.rhino.JSTypeExpression(var36, "module$BANG 0 [source_file: Unversioned directory]\n");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.Node var50 = var47.removeFirstChild();
    var50.setQuotedString();
    com.google.javascript.rhino.Node var52 = var50.removeChildren();
    boolean var53 = var50.isCatch();
    com.google.javascript.jscomp.ClosureCodingConvention var54 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    boolean var60 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var58);
    int var61 = var58.getLength();
    com.google.javascript.rhino.Node var62 = null;
    boolean var63 = var58.hasChild(var62);
    com.google.javascript.rhino.Node var64 = var56.useSourceInfoIfMissingFromForTree(var58);
    com.google.javascript.jscomp.CodingConvention.Bind var66 = var54.describeFunctionBind(var56, false);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var69 = var54.isVarArgsParameter(var68);
    com.google.javascript.rhino.Node var72 = new com.google.javascript.rhino.Node((-1), var25, var36, var50, var68, 153, (-19));
    boolean var73 = var50.isBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "BANG"+ "'", var18.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "LABEL_NAME hi!"+ "'", var41.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test284"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setSyntheticBlockEndMarker("RETURN");
    com.google.javascript.jscomp.VariableRenamingPolicy var14 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var15 = null;
    var0.setRenamingPolicy(var14, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test285"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    boolean var39 = var37.removeProperty("ECMASCRIPT3");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test286"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearEdgeAnnotations();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    java.util.List var3 = var0.getEdges();
    com.google.javascript.jscomp.JSModule[] var4 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var3);
    com.google.javascript.jscomp.JSModule[] var5 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var3);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.paramList(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test287"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setFoldConstants(false);
    var0.setAssumeStrictThis(false);
    boolean var15 = var0.assumeStrictThis();
    com.google.javascript.jscomp.SourceMap.Format var16 = null;
    var0.setSourceMapFormat(var16);
    var0.resetWarningsGuard();
    var0.setRemoveUnusedClassProperties(false);
    var0.setRenamePrefixNamespace("goog.global");
    var0.setCheckControlStructures(false);
    var0.setMarkAsCompiled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test288"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getReturnDescription();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getEnumParameterType();
    java.util.Set var19 = var14.getModifies();
    java.util.Set var20 = var14.getParameterNames();
    com.google.javascript.rhino.JSTypeExpression var22 = var14.getParameterType("module$function (): {140836661}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test289"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
    com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
    com.google.javascript.jscomp.JSModule var5 = null;
    var3.setModule(var5);
    com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
    com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
    com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var11 = var10.getProvides();
    com.google.javascript.jscomp.CompilerInput var13 = var10.getByName("()");
    com.google.javascript.jscomp.SourceAst var14 = null;
    com.google.javascript.rhino.InputId var15 = null;
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
    com.google.javascript.jscomp.SourceAst var18 = var17.getAst();
    var10.add(var17);
    var3.setModule(var10);
    boolean var21 = var3.isExtern();
    com.google.javascript.jscomp.SourceAst var22 = var3.getSourceAst();
    com.google.javascript.jscomp.JSModule var23 = var3.getModule();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test290"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var37 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    com.google.javascript.rhino.Node var46 = var41.getChildAtIndex(1);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.JSDocInfo var53 = var50.getJSDocInfo();
    com.google.javascript.rhino.Node var54 = var41.copyInformationFrom(var50);
    java.lang.Object var56 = null;
    var41.putProp(0, var56);
    com.google.javascript.rhino.JSTypeExpression var59 = new com.google.javascript.rhino.JSTypeExpression(var41, "()");
    com.google.javascript.rhino.jstype.StaticScope var60 = null;
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    var62.unregisterPropertyOnType("Unversioned directory", var64);
    com.google.javascript.rhino.jstype.JSType var66 = null;
    boolean var68 = var62.canPropertyBeDefined(var66, "BANG");
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.rhino.jstype.JSType[] var70 = new com.google.javascript.rhino.jstype.JSType[] { var69};
    com.google.javascript.rhino.Node var71 = var62.createParameters(var70);
    com.google.javascript.rhino.jstype.JSType var72 = var59.evaluate(var60, var62);
    boolean var73 = var37.addVarArgs(var72);
    com.google.javascript.rhino.jstype.JSType var74 = var34.getLeastSupertype(var72);
    boolean var75 = var74.isObject();
    boolean var76 = var74.isNoType();
    boolean var77 = var74.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test291"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    boolean var15 = var9.isNot();
    int var16 = var9.getLength();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var19 = null;
    var18.setResolveMode(var19);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var21 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var18);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var22 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var18);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    boolean var34 = var22.addRequiredParams(var32);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    boolean var52 = var38.isVoid();
    com.google.javascript.rhino.Node var53 = var22.newParameterFromNode(var38);
    boolean var54 = var38.isOptionalArg();
    boolean var55 = var38.isDelProp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.or(var9, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test292"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    boolean var47 = var40.equals((java.lang.Object)var46);
    var46.reportCodeChange();
    com.google.javascript.jscomp.ClosureCodingConvention var49 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var51 = var49.isConstantKey("2014/12/24 11:10");
    java.util.Collection var52 = var49.getAssertionFunctions();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var56 = var54.getBooleanProp((-1));
    var54.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var60 = new com.google.javascript.rhino.JSTypeExpression(var54, "goog.abstractMethod");
    boolean var61 = var49.isPrototypeAlias(var54);
    boolean var62 = var54.isThrow();
    com.google.javascript.jscomp.NodeTraversal.Callback var63 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var46, var54, var63);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test293"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    boolean var30 = var28.isOptionalArg();
    boolean var31 = var28.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test294"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isPrivate("");
    boolean var46 = var33.isValidEnumKey("");
    java.lang.String var47 = var33.getGlobalObject();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var51 = var48.copyInformationFrom(var50);
    com.google.javascript.rhino.Node var53 = var50.getAncestor(1);
    com.google.javascript.jscomp.CodingConvention.Bind var55 = var33.describeFunctionBind(var50, true);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    var59.removeProp(0);
    boolean var62 = var59.isArrayLit();
    var59.removeProp(1);
    boolean var65 = var50.hasChild(var59);
    boolean var66 = var59.isNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "goog.global"+ "'", var47.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test295"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    var1.recordOriginalCommentString("module$InputId: InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test296"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    boolean var17 = var13.isOptionalArg();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(0, var13, var18);
    var18.setSourceEncodedPositionForTree(0);
    com.google.javascript.rhino.Node var22 = var18.cloneNode();
    var1.markTypeNode(var22, 10, 1, 100, 2, false);
    var1.recordOriginalCommentString("module$ERROR");
    boolean var31 = var1.recordImplicitCast();
    boolean var32 = var1.recordNoAlias();
    com.google.javascript.rhino.Node var33 = null;
    var1.markTypeNode(var33, 3, 10, 2, 3, false);
    boolean var40 = var1.recordImplicitCast();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test297"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setLabelRenaming(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test298"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.JSModule[] var4 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var2);
    com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var7 = var6.getDirectedGraphNodes();
    java.lang.Iterable var8 = var6.getDirectedGraphNodes();
    java.util.List var9 = var6.getGraphvizNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    boolean var26 = var24.hasType();
    java.util.List var27 = var24.getThrownTypes();
    java.util.List var28 = var5.manageDependencies(var9, var27);
    com.google.javascript.jscomp.JSModuleGraph var29 = new com.google.javascript.jscomp.JSModuleGraph(var27);
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    var31.removeAll();
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var35.removeAll();
    var31.addDependency(var35);
    java.util.List var38 = var31.getInputs();
    com.google.javascript.jscomp.SourceAst var39 = null;
    com.google.javascript.rhino.InputId var40 = null;
    com.google.javascript.jscomp.CompilerInput var42 = new com.google.javascript.jscomp.CompilerInput(var39, var40, true);
    com.google.javascript.jscomp.SourceAst var43 = var42.getAst();
    com.google.javascript.jscomp.JSModule var44 = null;
    var42.setModule(var44);
    var31.add(var42);
    com.google.javascript.jscomp.JSModule var48 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var49 = var48.getDependencies();
    int var50 = var48.getDepth();
    var48.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var54 = var53.recordExpose();
    boolean var55 = var53.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var57 = null;
    boolean var58 = var53.recordParameter("Unversioned directory", var57);
    com.google.javascript.rhino.JSTypeExpression var59 = null;
    boolean var61 = var53.recordThrowDescription(var59, "");
    com.google.javascript.jscomp.SourceFile var66 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var53.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var66, 0, 0);
    java.io.Reader var70 = var66.getCodeReader();
    var48.add(var66);
    int var72 = var48.getDepth();
    com.google.javascript.jscomp.Compiler var73 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var74 = var73.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var75 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var73);
    com.google.javascript.jscomp.ErrorManager var76 = var73.getErrorManager();
    var48.sortInputsByDeps(var73);
    java.util.List var78 = var48.getInputs();
    com.google.javascript.jscomp.JSModule var79 = var29.getDeepestCommonDependencyInclusive(var31, var48);
    var29.coalesceDuplicateFiles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + ""+ "'", var74.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test299"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    boolean var21 = var17.isSwitch();
    boolean var22 = var17.isSyntheticBlock();
    boolean var23 = var17.isNumber();
    boolean var24 = var0.isPrototypeAlias(var17);
    boolean var25 = var17.isName();
    var17.removeProp(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test300"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var72 = var31.getReturnType();
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.jscomp.JSModule var80 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var81 = var80.getDependencies();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.block(var81);
    com.google.javascript.rhino.jstype.FunctionType var83 = var74.createFunctionTypeWithVarArgs(var78, var81);
    boolean var84 = var83.hasCachedValues();
    boolean var85 = var83.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType.TypePair var86 = var31.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType)var83);
    boolean var87 = var83.isInstanceType();
    boolean var88 = var83.isCheckedUnknownType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test301"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    var1.removeAll();
    com.google.javascript.jscomp.SourceFile var13 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    int var15 = var13.getLineOfOffset(0);
    var1.addFirst(var13);
    com.google.javascript.rhino.JSDocInfoBuilder var18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var19 = var18.recordExpose();
    boolean var20 = var18.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var21 = null;
    boolean var23 = var18.recordThrowDescription(var21, "()");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    boolean var30 = var27.isVarArgs();
    com.google.javascript.rhino.Node var32 = var27.getChildAtIndex(1);
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    com.google.javascript.rhino.JSDocInfo var39 = var36.getJSDocInfo();
    com.google.javascript.rhino.Node var40 = var27.copyInformationFrom(var36);
    java.lang.Object var42 = null;
    var27.putProp(0, var42);
    com.google.javascript.rhino.JSTypeExpression var45 = new com.google.javascript.rhino.JSTypeExpression(var27, "()");
    boolean var46 = var18.recordEnumParameterType(var45);
    com.google.javascript.rhino.JSDocInfoBuilder var49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var50 = var49.recordExpose();
    boolean var51 = var49.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var53 = null;
    boolean var54 = var49.recordParameter("Unversioned directory", var53);
    com.google.javascript.rhino.JSTypeExpression var55 = null;
    boolean var57 = var49.recordThrowDescription(var55, "");
    com.google.javascript.jscomp.SourceFile var62 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var49.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var62, 0, 0);
    var18.markName("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", (com.google.javascript.rhino.jstype.StaticSourceFile)var62, 0, 3);
    var62.setOriginalPath("(hi)");
    com.google.javascript.jscomp.JsAst var71 = new com.google.javascript.jscomp.JsAst(var62);
    var1.addFirst(var62);
    com.google.javascript.jscomp.SourceFile var76 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var78 = var76.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var79 = new com.google.javascript.jscomp.CompilerInput(var76);
    com.google.javascript.jscomp.SourceAst var80 = var79.getAst();
    var1.addFirst(var79);
    com.google.javascript.jscomp.SourceAst var82 = var79.getAst();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test302"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoAlias();
    var1.markName("BANG 0\n    STRING hi 0 [length: 2]\n", 2, 306);
    var1.markAnnotation("enum{STRING hi 0 [length: 2]\n}", (-1), 100);
    boolean var14 = var1.recordBlockDescription("STRING hi 0 [length: 2]\n.<hi>");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test303"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    boolean var75 = var31.removeProperty("LinkedGraph");
    boolean var76 = var31.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.JSType var78 = var31.getPropertyType("function (): {1292906510}");
    com.google.javascript.rhino.jstype.ObjectType var79 = var31.getTypeOfThis();
    boolean var80 = var31.hasCachedValues();
    boolean var81 = var31.isBooleanValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test304"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    boolean var47 = var44.isVarArgs();
    com.google.javascript.rhino.Node var49 = var44.getChildAtIndex(1);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    com.google.javascript.rhino.JSDocInfo var56 = var53.getJSDocInfo();
    com.google.javascript.rhino.Node var57 = var44.copyInformationFrom(var53);
    java.lang.Object var59 = null;
    var44.putProp(0, var59);
    com.google.javascript.rhino.JSTypeExpression var62 = new com.google.javascript.rhino.JSTypeExpression(var44, "()");
    com.google.javascript.rhino.JSTypeExpression var63 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var62);
    com.google.javascript.rhino.Node var64 = var62.getRoot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var65 = var33.isOptionalParameter(var64);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test305"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var1.removeAll();
    java.lang.String var3 = var1.toString();
    java.util.List var4 = var1.getDependencies();
    java.util.Set var5 = var1.getThisAndAllDependencies();
    com.google.javascript.jscomp.SourceAst var6 = null;
    com.google.javascript.rhino.InputId var7 = null;
    com.google.javascript.jscomp.CompilerInput var9 = new com.google.javascript.jscomp.CompilerInput(var6, var7, true);
    com.google.javascript.rhino.InputId var10 = var9.getInputId();
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.jscomp.SourceAst var14 = null;
    com.google.javascript.rhino.InputId var15 = null;
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
    com.google.javascript.jscomp.JSModule var18 = var17.getModule();
    var12.add(var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addAfter(var9, var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Unversioned directory"+ "'", var3.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test306"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    boolean var15 = var9.isNot();
    int var16 = var9.getSideEffectFlags();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var18.createFunctionTypeWithVarArgs(var22, var25);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var30 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.Object var49 = null;
    var34.putProp(0, var49);
    com.google.javascript.rhino.JSTypeExpression var52 = new com.google.javascript.rhino.JSTypeExpression(var34, "()");
    com.google.javascript.rhino.jstype.StaticScope var53 = null;
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.JSType var65 = var52.evaluate(var53, var55);
    boolean var66 = var30.addVarArgs(var65);
    boolean var67 = var65.isEnumElementType();
    boolean var68 = var65.isNullable();
    boolean var69 = var65.matchesNumberContext();
    boolean var70 = var27.differsFrom(var65);
    var9.setJSType((com.google.javascript.rhino.jstype.JSType)var27);
    boolean var72 = var27.isCheckedUnknownType();
    java.lang.Iterable var73 = var27.getParameters();
    boolean var74 = var27.isBooleanValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test307"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.util.List var54 = var53.getThrownTypes();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isOr();
    var53.setAssociatedNode(var58);
    boolean var63 = var53.isNoSideEffects();
    java.util.List var64 = var53.getThrownTypes();
    var36.setPropertyJSDocInfo("ERROR", var53);
    java.util.Collection var66 = var53.getTypeNodes();
    java.lang.String var67 = var53.getLendsName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test308"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isArrayLit();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var11 = var10.isGetterDef();
    var10.putIntProp((-1), 10);
    var4.addChildrenToFront(var10);
    int var16 = var10.getLength();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.Node var23 = var20.removeFirstChild();
    com.google.javascript.rhino.Node var24 = var10.useSourceInfoFromForTree(var20);
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    com.google.javascript.rhino.Node var33 = var28.getChildAtIndex(1);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.JSDocInfo var40 = var37.getJSDocInfo();
    com.google.javascript.rhino.Node var41 = var28.copyInformationFrom(var37);
    java.lang.Object var43 = null;
    var28.putProp(0, var43);
    com.google.javascript.rhino.JSTypeExpression var46 = new com.google.javascript.rhino.JSTypeExpression(var28, "()");
    com.google.javascript.rhino.Node var47 = var46.getRoot();
    boolean var48 = var47.isInc();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.stringKey("LABEL_NAME hi!");
    boolean var51 = var50.isComma();
    boolean var52 = var50.isThis();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var53 = new com.google.javascript.rhino.Node((-1), var10, var47, var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test309"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    com.google.javascript.rhino.Node var63 = var56.getPropertyNode("{160498324}");
    java.lang.Iterable var64 = var56.getImplementedInterfaces();
    com.google.javascript.rhino.jstype.JSType var65 = var56.getIndexType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test310() {}
//   public void test310() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test310"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = var6.getNext();
//     com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
//     boolean var9 = var6.isVarArgs();
//     com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
//     com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
//     java.lang.Object var21 = null;
//     var6.putProp(0, var21);
//     com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
//     com.google.javascript.rhino.jstype.StaticScope var25 = null;
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     var27.unregisterPropertyOnType("Unversioned directory", var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
//     com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
//     com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
//     boolean var38 = var2.addVarArgs(var37);
//     java.lang.String var39 = var37.toDebugHashCodeString();
//     boolean var40 = var37.isString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var9 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var16);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var33 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var37);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var38 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var39 + "' != '" + "{proxy:{1439924440}}"+ "'", var39.equals("{proxy:{1439924440}}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var40 == true);
// 
//   }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test311"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    boolean var17 = var10.isExternExportsEnabled();
    var10.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var24 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make(var22, var24);
    int var26 = var25.getCharno();
    com.google.javascript.jscomp.CheckLevel var27 = var25.getDefaultLevel();
    var10.setReportUnknownTypes(var27);
    var0.setCheckUnreachableCode(var27);
    var0.setCollapseProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test312"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isInterface();
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var22 = var19.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.InputId var29 = com.google.javascript.jscomp.NodeUtil.getInputId(var26);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var26.setJSType(var30);
    com.google.javascript.rhino.JSDocInfo var32 = var19.build(var26);
    java.lang.String var33 = var32.getFileOverview();
    boolean var34 = var32.hasFileOverview();
    boolean var35 = var32.hasReturnType();
    boolean var36 = var32.hasType();
    boolean var37 = var32.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var38 = var32.getVisibility();
    var14.setVisibility(var38);
    com.google.common.collect.ImmutableList var40 = var14.getTemplateTypeNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test313"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    com.google.javascript.rhino.Node var5 = var3.getAncestor(10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isArrayLit();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var16 = var15.isGetterDef();
    var15.putIntProp((-1), 10);
    var9.addChildrenToFront(var15);
    int var21 = var15.getLength();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.Node var28 = var25.removeFirstChild();
    com.google.javascript.rhino.Node var29 = var15.useSourceInfoFromForTree(var25);
    boolean var30 = var15.isDebugger();
    com.google.javascript.rhino.Node var31 = var15.removeFirstChild();
    com.google.javascript.rhino.Node var32 = var3.srcrefTree(var15);
    boolean var33 = var15.isNoSideEffectsCall();
    boolean var34 = var15.isGetterDef();
    boolean var35 = var15.isString();
    boolean var36 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var15);
    com.google.javascript.rhino.Node var37 = var15.cloneNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test314"); }


    com.google.javascript.jscomp.parsing.Config var1 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test315"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var31 = var24.getPossibleToBooleanOutcomes();
    boolean var33 = var24.hasOwnProperty("hi!");
    boolean var34 = var24.isInstanceType();
    com.google.javascript.jscomp.ClosureCodingConvention var35 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var37 = var35.isConstantKey("2014/12/24 11:10");
    java.lang.String var38 = var35.getAbstractMethodName();
    com.google.javascript.rhino.jstype.FunctionType var39 = null;
    com.google.javascript.rhino.jstype.FunctionType var40 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var41 = null;
    var35.applySubclassRelationship(var39, var40, var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    boolean var50 = var46.isWhile();
    boolean var51 = var46.isOnlyModifiesThisCall();
    com.google.javascript.jscomp.CodingConvention.Bind var53 = var35.describeFunctionBind(var46, false);
    java.util.Collection var54 = var35.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    boolean var62 = var59.isVarArgs();
    boolean var63 = var59.isOptionalArg();
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(0, var59, var64);
    boolean var66 = var64.isQualifiedName();
    com.google.javascript.rhino.Node var67 = var64.cloneNode();
    java.lang.String var68 = var67.toString();
    com.google.javascript.jscomp.CodingConvention.Bind var70 = var35.describeFunctionBind(var67, true);
    var24.setSource(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "goog.abstractMethod"+ "'", var38.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "RETURN"+ "'", var68.equals("RETURN"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test316"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
    com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var13 = null;
    var12.setStripTypes(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var16 = var15.getDirectedGraphNodes();
    java.util.List var17 = var15.getEdges();
    var12.setManageClosureDependencies(var17);
    boolean var19 = var12.isExternExportsEnabled();
    var12.setCollapsePropertiesOnExternTypes(false);
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
    var12.setAliasKeywords(true);
    var12.setNameReferenceGraphPath("module$2014$12$24 11:10");
    var12.setClosurePass(true);
    var12.setTightenTypes(false);
    var12.setAliasAllStrings(false);
    var12.setCrossModuleCodeMotion(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test317() {}
//   public void test317() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test317"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     var1.identifyNonNullableName("2014/12/24 11:10");
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     var9.unregisterPropertyOnType("Unversioned directory", var11);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var16 = var15.getDependencies();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
//     com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
//     boolean var19 = var18.hasCachedValues();
//     boolean var20 = var18.isFunctionPrototypeType();
//     com.google.javascript.rhino.jstype.JSType var25 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var18, "2014/12/24 11:10", "{proxy:{599688852}}", 10, 0);
//     var1.setLastGeneration(false);
//     boolean var29 = var1.isForwardDeclaredType("FALSE\n");
//     com.google.javascript.rhino.jstype.JSTypeNative var30 = null;
//     com.google.javascript.rhino.jstype.FunctionType var31 = var1.getNativeFunctionType(var30);
// 
//   }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test318"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.rhino.Node var8 = var3.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test319"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setRemoveUnusedPrototypeProperties(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test320"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.matchesNumberContext();
    com.google.javascript.rhino.jstype.JSType var66 = null;
    boolean var67 = var62.isEquivalentTo(var66);
    java.util.Set var68 = var62.getOwnPropertyNames();
    int var69 = var62.getMaxArguments();
    boolean var70 = var62.isParameterizedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test321"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.InputId var5 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var7 = null;
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isOr();
    java.lang.String var15 = var6.extractClassNameIfRequire(var7, var11);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var17.unregisterPropertyOnType("Unversioned directory", var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.jscomp.JSModule var23 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var24 = var23.getDependencies();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.block(var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var17.createFunctionTypeWithVarArgs(var21, var24);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    boolean var38 = var37.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var40 = var39.getDirectedGraphNodes();
    java.lang.Iterable var41 = var39.getDirectedGraphNodes();
    java.util.List var42 = var39.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var44 = null;
    var43.setStripTypes(var44);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.util.List var48 = var46.getEdges();
    var43.setManageClosureDependencies(var48);
    boolean var50 = var43.isExternExportsEnabled();
    var43.setCheckCaja(false);
    java.util.Set var53 = null;
    var43.setReplaceStringsReservedStrings(var53);
    var43.setAliasAllStrings(true);
    var43.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var60 = null;
    var59.setStripTypes(var60);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var63 = var62.getDirectedGraphNodes();
    java.util.List var64 = var62.getEdges();
    var59.setManageClosureDependencies(var64);
    boolean var66 = var59.isExternExportsEnabled();
    var59.setCheckCaja(false);
    var59.setGroupVariableDeclarations(true);
    java.util.Map var71 = var59.getDefineReplacements();
    var43.setPropertyInvalidationErrors(var71);
    var6.defineDelegateProxyPrototypeProperties(var17, (com.google.javascript.rhino.jstype.StaticScope)var37, var42, var71);
    boolean var74 = var37.canBeCalled();
    boolean var75 = var37.isRegexpType();
    boolean var76 = var5.equals((java.lang.Object)var37);
    com.google.javascript.rhino.jstype.JSType var78 = var37.getRestrictedTypeGivenToBooleanOutcome(false);
    var1.setJSType((com.google.javascript.rhino.jstype.JSType)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test322"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.JSDocInfo var73 = var69.getJSDocInfo();
    com.google.javascript.rhino.jstype.FunctionType var74 = var69.getOwnerFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test323"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("Node tree inequality:\nTree1:\nCONTINUE\n\n\nTree2:\nBANG 0\n\n\nSubtree1: CONTINUE\n\n\nSubtree2: BANG 0\n", "enum{STRING hi 0 [length: 2]\n}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test324"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.jscomp.graph.GraphNode var4 = var0.createNode((java.lang.Object)var3);
    var0.clearNodeAnnotations();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var9.setJSType(var10);
    boolean var12 = var9.isScript();
    com.google.javascript.jscomp.SourceFile var16 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var18 = var16.getLineOfOffset(2);
    var9.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var16);
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var16);
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var22 = new com.google.javascript.rhino.jstype.FunctionBuilder(var21);
    com.google.javascript.rhino.jstype.FunctionBuilder var24 = var22.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var25 = var22.forConstructor();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    int var29 = var27.getSourceOffset();
    boolean var30 = var27.isNE();
    java.lang.String var31 = com.google.javascript.jscomp.NodeUtil.getSourceName(var27);
    com.google.javascript.rhino.Node var32 = var27.cloneTree();
    com.google.javascript.rhino.jstype.FunctionBuilder var33 = var25.withParamsNode(var32);
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node((-19));
    var32.addChildToFront(var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var39 = var37.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var42 = var41.recordExpose();
    boolean var44 = var41.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    com.google.javascript.rhino.InputId var51 = com.google.javascript.jscomp.NodeUtil.getInputId(var48);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    var48.setJSType(var52);
    com.google.javascript.rhino.JSDocInfo var54 = var41.build(var48);
    java.lang.String var55 = var54.getFileOverview();
    java.util.Set var56 = var54.getModifies();
    java.util.List var57 = var54.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var58 = var54.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var59 = var37.createDirectedGraphNode((java.lang.Object)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var16, (java.lang.Object)var32, (java.lang.Object)var59);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test325"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    com.google.javascript.jscomp.ClosureCodingConvention var28 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var30 = var28.isConstantKey("2014/12/24 11:10");
    java.util.Collection var31 = var28.getAssertionFunctions();
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var35.setJSType(var36);
    boolean var38 = var35.isScript();
    com.google.javascript.rhino.Node var39 = var35.removeFirstChild();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var43 = var42.isGetterDef();
    boolean var44 = var42.isAdd();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.String var62 = var61.toStringTree();
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    boolean var70 = var66.getBooleanProp(100);
    int var71 = var66.getSideEffectFlags();
    boolean var72 = var66.isDefaultCase();
    com.google.javascript.rhino.Node var73 = new com.google.javascript.rhino.Node(1, var42, var61, var66);
    java.lang.String var74 = var28.extractClassNameIfProvide(var35, var66);
    boolean var77 = var28.isExported("module$2014$12$24 11:10", false);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var81 = var79.getBooleanProp((-1));
    var79.setSourceEncodedPosition(10);
    boolean var84 = var79.isContinue();
    boolean var85 = var79.isGetterDef();
    boolean var86 = var28.isVarArgsParameter(var79);
    com.google.javascript.rhino.JSDocInfo var87 = var1.build(var79);
    boolean var89 = var1.recordDeprecationReason("function (): {1593701503}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var62.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test326"); }


    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.getMessage1("Unversioned directory", var1);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test327"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    com.google.javascript.rhino.jstype.ObjectType var80 = var73.getImplicitPrototype();
    com.google.javascript.rhino.jstype.ParameterizedType var81 = com.google.javascript.rhino.jstype.JSType.toMaybeParameterizedType((com.google.javascript.rhino.jstype.JSType)var73);
    boolean var82 = var73.isInterface();
    com.google.javascript.rhino.jstype.JSType var83 = var73.getParameterType();
    com.google.javascript.rhino.jstype.JSType var85 = var73.findPropertyType("{413092455}");
    boolean var86 = var73.matchesStringContext();
    boolean var87 = var73.isStringValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test328"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    java.lang.String var4 = var0.getAbstractMethodName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var9, var14);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var9);
    com.google.javascript.jscomp.GoogleCodingConvention var17 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.util.Collection var18 = var17.getAssertionFunctions();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var32 = var29.toMaybeEnumType();
    boolean var33 = var29.isNumber();
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getDependencies();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.block(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var35.createFunctionTypeWithVarArgs(var39, var42);
    boolean var45 = var44.hasAnyTemplateInternal();
    java.lang.Iterable var46 = var44.getAllExtendedInterfaces();
    boolean var47 = var44.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var48 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var49.unregisterPropertyOnType("Unversioned directory", var51);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.jscomp.JSModule var55 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var56 = var55.getDependencies();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.block(var56);
    com.google.javascript.rhino.jstype.FunctionType var58 = var49.createFunctionTypeWithVarArgs(var53, var56);
    boolean var60 = var58.removeProperty("null(null)");
    var44.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var58);
    int var62 = var58.getExtendedInterfacesCount();
    java.util.Set var63 = var58.getOwnPropertyNames();
    java.lang.Iterable var64 = var58.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var65 = var58.getPossibleToBooleanOutcomes();
    boolean var67 = var58.hasOwnProperty("hi!");
    boolean var68 = var58.isConstructor();
    com.google.javascript.rhino.jstype.FunctionType var69 = var58.getOwnerFunction();
    java.lang.Iterable var70 = var58.getCtorExtendedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var71 = null;
    var17.applySubclassRelationship(var29, var58, var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.abstractMethod"+ "'", var4.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test329"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.thisNode();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var5 = var4.hasOneChild();
    com.google.javascript.rhino.Node var9 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    boolean var11 = var10.isArrayLit();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(0, var4, var9, var10, var15, 1, 100);
    int var23 = var15.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var0.useSourceInfoFromForTree(var15);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var28 = var26.getBooleanProp((-1));
    var26.setSourceEncodedPosition(10);
    com.google.javascript.rhino.Node var31 = var24.copyInformationFrom(var26);
    int var32 = var31.getLineno();
    boolean var33 = var31.isDelProp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test330"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var4 = var3.hasOneChild();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    boolean var10 = var9.isArrayLit();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
    boolean var22 = var3.isComma();
    com.google.javascript.rhino.JSDocInfoBuilder var24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var25 = var24.recordExpose();
    boolean var27 = var24.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.InputId var34 = com.google.javascript.jscomp.NodeUtil.getInputId(var31);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var31.setJSType(var35);
    com.google.javascript.rhino.JSDocInfo var37 = var24.build(var31);
    java.util.List var38 = var37.getThrownTypes();
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = var42.getNext();
    com.google.javascript.rhino.Node var44 = var40.srcrefTree(var42);
    boolean var45 = var42.isOr();
    var37.setAssociatedNode(var42);
    var3.setJSDocInfo(var37);
    java.lang.String var48 = var37.getOriginalCommentString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test331() {}
//   public void test331() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test331"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     java.lang.String var4 = var0.getAbstractMethodName();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     boolean var13 = var9.isOptionalArg();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var9, var14);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var9);
//     boolean var19 = var0.isExported("2014/12/24 11:10", false);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var21 = var20.getDirectedGraphNodes();
//     var20.pushEdgeAnnotations();
//     java.lang.Iterable var23 = var20.getDirectedGraphNodes();
//     com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var26 = var25.recordExpose();
//     boolean var28 = var25.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = var32.getNext();
//     com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
//     com.google.javascript.rhino.InputId var35 = com.google.javascript.jscomp.NodeUtil.getInputId(var32);
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     var32.setJSType(var36);
//     com.google.javascript.rhino.JSDocInfo var38 = var25.build(var32);
//     java.lang.String var39 = var38.getFileOverview();
//     java.util.Set var40 = var38.getModifies();
//     java.util.List var41 = var38.getImplementedInterfaces();
//     com.google.javascript.jscomp.graph.GraphNode var42 = var20.getNode((java.lang.Object)var38);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var47 = var46.getNext();
//     com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
//     com.google.javascript.rhino.Node var49 = var46.removeFirstChild();
//     var49.setQuotedString();
//     boolean var51 = var20.hasNode((java.lang.Object)var49);
//     boolean var52 = var49.isExprResult();
//     boolean var53 = var0.isOptionalParameter(var49);
//     boolean var54 = var49.isCatch();
//     com.google.javascript.rhino.Node var55 = null;
//     var49.addChildrenToFront(var55);
// 
//   }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test332"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isTemplateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test333"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.jscomp.CodingConvention.Bind var16 = var0.describeFunctionBind(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.Object var35 = null;
    var20.putProp(0, var35);
    com.google.javascript.rhino.JSTypeExpression var38 = new com.google.javascript.rhino.JSTypeExpression(var20, "()");
    com.google.javascript.rhino.jstype.StaticScope var39 = null;
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.unregisterPropertyOnType("Unversioned directory", var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
    com.google.javascript.rhino.jstype.JSType var51 = var38.evaluate(var39, var41);
    java.lang.Iterable var53 = var41.getTypesWithProperty("hi!");
    java.lang.Iterable var55 = var41.getTypesWithProperty("function (): {1292906510}");
    com.google.javascript.rhino.jstype.StaticScope var56 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var57.clearEdgeAnnotations();
    java.lang.Iterable var59 = var57.getDirectedGraphNodes();
    java.util.List var60 = var57.getEdges();
    java.util.List var61 = var57.getEdges();
    com.google.javascript.jscomp.CompilerOptions var62 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var63 = null;
    var62.setStripTypes(var63);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var66 = var65.getDirectedGraphNodes();
    java.util.List var67 = var65.getEdges();
    var62.setManageClosureDependencies(var67);
    com.google.javascript.jscomp.CompilerOptions var69 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var70 = null;
    var69.setStripTypes(var70);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var72 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var73 = var72.getDirectedGraphNodes();
    java.util.List var74 = var72.getEdges();
    var69.setManageClosureDependencies(var74);
    boolean var76 = var69.isExternExportsEnabled();
    var69.setCheckCaja(false);
    var69.setGroupVariableDeclarations(true);
    java.util.Map var81 = var69.getDefineReplacements();
    var62.setTweakReplacements(var81);
    var0.defineDelegateProxyPrototypeProperties(var41, var56, var61, var81);
    boolean var85 = var0.isSuperClassReference("function (): {176541993}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test334"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("(function (): {2033023906})");

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test335"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    var0.setCheckControlStructures(true);
    var0.setCollapseObjectLiterals(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test336"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    boolean var32 = var6.recordSuppressions(var31);
    var0.setAliasableStrings(var31);
    var0.setRenamePrefixNamespace("DiagnosticGroup<hi!>");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test337"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    var80.setOptimizeParameters(true);
    var80.setAmbiguateProperties(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test338"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setInlineFunctions(true);
    var27.setDefineToStringLiteral("{proxy:{1612771089}}", "CONTINUE");
    var27.setLabelRenaming(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test339"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    var0.setRenamePrefixNamespace("function (): {540092593}");
    var0.setOptimizeReturns(false);
    com.google.javascript.jscomp.ErrorFormat var36 = null;
    var0.setErrorFormat(var36);
    var0.setOutputCharset("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)");
    var0.setGeneratePseudoNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test340"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("InputId: ");
    com.google.javascript.jscomp.Region var3 = var1.getRegion(10);
    var1.setOriginalPath("(module$2014$12$24 11:10)");
    var1.clearCachedSource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var8 = var1.getLineOffset(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test341"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.cloneNode();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    com.google.javascript.rhino.Node var10 = var7.cloneNode();
    var5.addChildrenToFront(var10);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, var5, (-1), 100);
    var14.setLength(306);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newExpr(var14);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.block(var17);
    boolean var19 = var17.isTrue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test342"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    com.google.javascript.rhino.Node var65 = var61.srcrefTree(var63);
    com.google.javascript.rhino.JSDocInfo var66 = var63.getJSDocInfo();
    boolean var67 = var63.isWhile();
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    int var74 = var73.getSourceOffset();
    com.google.javascript.rhino.Node var77 = new com.google.javascript.rhino.Node((-1), var63, var73, 3, 2);
    boolean var78 = var77.isScript();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.comma(var58, var77);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test343"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    java.util.Set var38 = var36.getOwnPropertyNames();
    boolean var39 = var36.isFunctionPrototypeType();
    java.lang.String var40 = var36.getDisplayName();
    com.google.javascript.rhino.jstype.JSType var42 = var36.findPropertyType("module$ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi"+ "'", var40.equals("hi"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test344"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.disableRuntimeTypeCheck();
    com.google.javascript.jscomp.CheckLevel var11 = null;
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var11, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var14 = new com.google.javascript.jscomp.DiagnosticType[] { var13};
    com.google.javascript.jscomp.DiagnosticGroup var15 = new com.google.javascript.jscomp.DiagnosticGroup(var14);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var17 = null;
    var16.setStripTypes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var20 = var19.getDirectedGraphNodes();
    java.util.List var21 = var19.getEdges();
    var16.setManageClosureDependencies(var21);
    boolean var23 = var16.isExternExportsEnabled();
    var16.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var30 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make(var28, var30);
    int var32 = var31.getCharno();
    com.google.javascript.jscomp.CheckLevel var33 = var31.getDefaultLevel();
    var16.setReportUnknownTypes(var33);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var35 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var15, var33);
    com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var40 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var41 = com.google.javascript.jscomp.JSError.make(var38, var40);
    com.google.javascript.jscomp.CheckLevel var42 = var35.level(var41);
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var44 = null;
    var43.setBrokenClosureRequiresLevel(var44);
    var43.setLocale("");
    var43.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var54 = var53.getDirectedGraphNodes();
    java.util.List var55 = var53.getEdges();
    var50.setManageClosureDependencies(var55);
    boolean var57 = var50.isExternExportsEnabled();
    var50.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var62 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var64 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var65 = com.google.javascript.jscomp.JSError.make(var62, var64);
    int var66 = var65.getCharno();
    com.google.javascript.jscomp.CheckLevel var67 = var65.getDefaultLevel();
    var50.setReportUnknownTypes(var67);
    var43.setBrokenClosureRequiresLevel(var67);
    int var70 = var67.ordinal();
    com.google.javascript.jscomp.Compiler var71 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var72 = var71.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var73 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var71);
    com.google.javascript.jscomp.LightweightMessageFormatter var74 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var71);
    var74.setColorize(false);
    java.lang.String var77 = var41.format(var67, (com.google.javascript.jscomp.MessageFormatter)var74);
    var0.setBrokenClosureRequiresLevel(var67);
    java.lang.Object var79 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var77.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test345"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var63.unregisterPropertyOnType("Unversioned directory", var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.jscomp.JSModule var69 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var70 = var69.getDependencies();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.block(var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var63.createFunctionTypeWithVarArgs(var67, var70);
    boolean var73 = var72.hasAnyTemplateInternal();
    java.lang.Iterable var74 = var72.getAllExtendedInterfaces();
    boolean var75 = var72.isNominalConstructor();
    boolean var76 = var58.isSubtype((com.google.javascript.rhino.jstype.JSType)var72);
    boolean var77 = var58.canBeCalled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test346"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var8 = var3.getNext();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    var10.setSourceEncodedPosition(10);
    boolean var15 = var10.isContinue();
    boolean var16 = var10.isComma();
    com.google.javascript.rhino.Node var17 = var3.useSourceInfoFrom(var10);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var31.unregisterPropertyOnType("Unversioned directory", var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getDependencies();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var31.createFunctionTypeWithVarArgs(var35, var38);
    com.google.javascript.rhino.Node var41 = var20.createParametersWithVarArgs(var38);
    com.google.javascript.rhino.Node var42 = new com.google.javascript.rhino.Node(2, var41);
    boolean var43 = var17.isEquivalentToTyped(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test347"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setAliasAllStrings(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var14 = null;
    var0.setTracerMode(var14);
    var0.setNameReferenceReportPath("function (): {540092593}");
    var0.setNameReferenceGraphPath("CONTINUE");
    var0.setGeneratePseudoNames(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test348"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    java.util.Set var24 = var14.getParameterNames();
    boolean var25 = var14.hasFileOverview();
    var14.addSuppression("{160498324}");
    boolean var28 = var14.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test349"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("(hi)");
    com.google.javascript.jscomp.parsing.Config.LanguageMode var3 = null;
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var20 = var15.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    var23.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    boolean var36 = var33.isVarArgs();
    boolean var37 = var33.isFor();
    boolean var38 = var33.isNumber();
    com.google.javascript.rhino.Node var39 = var33.getNext();
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    boolean var46 = var43.isVarArgs();
    com.google.javascript.rhino.Node var48 = var43.getChildAtIndex(1);
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    com.google.javascript.rhino.JSDocInfo var55 = var52.getJSDocInfo();
    com.google.javascript.rhino.Node var56 = var43.copyInformationFrom(var52);
    java.lang.Object var58 = null;
    var43.putProp(0, var58);
    com.google.javascript.rhino.JSTypeExpression var61 = new com.google.javascript.rhino.JSTypeExpression(var43, "()");
    com.google.javascript.rhino.jstype.StaticScope var62 = null;
    com.google.javascript.rhino.ErrorReporter var63 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var63);
    com.google.javascript.rhino.jstype.JSType var66 = null;
    var64.unregisterPropertyOnType("Unversioned directory", var66);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    boolean var70 = var64.canPropertyBeDefined(var68, "BANG");
    com.google.javascript.rhino.jstype.JSType var71 = null;
    com.google.javascript.rhino.jstype.JSType[] var72 = new com.google.javascript.rhino.jstype.JSType[] { var71};
    com.google.javascript.rhino.Node var73 = var64.createParameters(var72);
    com.google.javascript.rhino.jstype.JSType var74 = var61.evaluate(var62, var64);
    com.google.javascript.rhino.jstype.JSType var75 = var74.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var76 = var75.dereference();
    boolean var77 = var75.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var78 = var23.createEnumType("STRING hi 0 [length: 2]\n", var33, var75);
    java.lang.String var79 = var78.getDisplayName();
    com.google.javascript.rhino.Node var80 = var78.getSource();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var83 = var15.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var78, var82);
    boolean var84 = var78.isDateType();
    boolean var85 = var78.matchesNumberContext();
    com.google.javascript.rhino.Node var86 = var78.getSource();
    java.util.Set var87 = var78.getElements();
    com.google.javascript.jscomp.parsing.Config var88 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var3, false, var87);
    boolean var89 = var1.equals((java.lang.Object)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test350"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var37 = var1.addAuthor("BANG");
    boolean var38 = var1.recordInterface();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.lang.String var54 = var53.getFileOverview();
    boolean var55 = var53.hasFileOverview();
    boolean var56 = var53.hasReturnType();
    java.lang.String var58 = var53.getDescriptionForParameter("");
    boolean var59 = var53.hasEnumParameterType();
    java.util.List var60 = var53.getExtendedInterfaces();
    boolean var61 = var1.recordTemplateTypeNames(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test351"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(153, 1, (-19));

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test352"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     var1.setTypedPercent(10.0d);
//     double var5 = var1.getTypedPercent();
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler var7 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var8 = var7.getTypeRegistry();
// 
//   }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test353"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var1, "");
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var5, "");
    int var8 = var3.compareTo(var7);
    com.google.javascript.jscomp.DiagnosticGroup var9 = com.google.javascript.jscomp.DiagnosticGroup.forType(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test354"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    boolean var31 = var1.recordFileOverview("");
    boolean var33 = var1.hasParameter("");
    boolean var35 = var1.addAuthor("hi!: Unversioned directory");
    boolean var36 = var1.recordConstancy();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var39 = var38.isGetterDef();
    java.lang.String var43 = var38.toString(true, false, false);
    com.google.javascript.rhino.JSTypeExpression var45 = new com.google.javascript.rhino.JSTypeExpression(var38, "module$BANG 0 [source_file: Unversioned directory]\n");
    boolean var46 = var45.isOptionalArg();
    com.google.javascript.rhino.JSTypeExpression var47 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var45);
    boolean var48 = var1.recordDefineType(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "LABEL_NAME hi!"+ "'", var43.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test355"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("goog.exportProperty");
    com.google.javascript.jscomp.JSModule var3 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var4 = var3.getProvides();
    java.util.List var5 = var3.getRequires();
    com.google.javascript.jscomp.SourceAst var6 = null;
    com.google.javascript.rhino.InputId var7 = null;
    com.google.javascript.jscomp.CompilerInput var9 = new com.google.javascript.jscomp.CompilerInput(var6, var7, true);
    com.google.javascript.jscomp.JSModule var10 = var9.getModule();
    var3.addFirst(var9);
    var3.removeAll();
    int var13 = var3.getDepth();
    var1.addDependency(var3);
    com.google.javascript.jscomp.SourceFile.Generator var16 = null;
    com.google.javascript.jscomp.SourceFile var17 = com.google.javascript.jscomp.SourceFile.fromGenerator("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", var16);
    var1.addFirst(var17);
    java.util.List var19 = var1.getDependencies();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test356"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    java.io.Reader var7 = var3.getCodeReader();
    var3.clearCachedSource();
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var3);
    com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromFile("BANG 0");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.setSourceFile(var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test357"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    var24.setCharno(100);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var37 = var36.isGetterDef();
    java.lang.String var41 = var36.toString(true, false, false);
    com.google.javascript.rhino.JSTypeExpression var43 = new com.google.javascript.rhino.JSTypeExpression(var36, "module$BANG 0 [source_file: Unversioned directory]\n");
    var24.addChildrenToBack(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "LABEL_NAME hi!"+ "'", var41.equals("LABEL_NAME hi!"));

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test358"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    boolean var73 = var56.isNumberObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test359"); }


    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("STRING hi 0 [length: 2]\n", "RETURN");
    com.google.javascript.jscomp.DiagnosticType var8 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
    com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var13 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make(var11, var13);
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var8, var13);
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make("{proxy:{165630172}}", 153, 306, var5, var13);
    com.google.javascript.jscomp.CheckLevel var17 = var16.getDefaultLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test360"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    java.util.Set var69 = var31.getPropertyNames();
    java.lang.Iterable var70 = var31.getOwnImplementedInterfaces();
    boolean var71 = var31.isEnumType();
    boolean var72 = var31.isStringObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test361"); }


    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    java.lang.String var20 = var15.getOriginalCommentString();
    boolean var22 = var15.hasParameterType("(module$2014$12$24 11:10)");
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.labelName("hi!");
    var25.setLineno(0);
    com.google.javascript.rhino.Node var28 = var25.getFirstChild();
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    int var33 = var31.getSourceOffset();
    com.google.javascript.rhino.Node var34 = var31.removeFirstChild();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    boolean var40 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var38);
    int var41 = var38.getLength();
    com.google.javascript.rhino.Node var42 = null;
    boolean var43 = var38.hasChild(var42);
    com.google.javascript.rhino.Node var44 = var36.useSourceInfoIfMissingFromForTree(var38);
    var38.setSourceFileForTesting("Unversioned directory");
    boolean var47 = var38.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var48 = var38.getStaticSourceFile();
    com.google.javascript.rhino.Node var49 = var31.srcref(var38);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(10, var49);
    boolean var51 = var49.isOr();
    com.google.javascript.rhino.Node var52 = var25.useSourceInfoIfMissingFromForTree(var49);
    com.google.javascript.rhino.Node var53 = new com.google.javascript.rhino.Node((-19), var23, var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test362() {}
//   public void test362() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test362"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.MessageFormatter var14 = null;
//     java.util.logging.Logger var15 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var16 = new com.google.javascript.jscomp.LoggerErrorManager(var14, var15);
//     com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var16);
//     int var18 = var17.getErrorCount();
//     var1.sortInputsByDeps(var17);
//     com.google.javascript.jscomp.SourceAst var20 = null;
//     com.google.javascript.rhino.InputId var21 = null;
//     com.google.javascript.jscomp.CompilerInput var23 = new com.google.javascript.jscomp.CompilerInput(var20, var21, true);
//     com.google.javascript.jscomp.SourceAst var24 = var23.getSourceAst();
//     var1.remove(var23);
//     int var27 = var23.getLineOffset(0);
// 
//   }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test363"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var16.unregisterPropertyOnType("Unversioned directory", var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.block(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var16.createFunctionTypeWithVarArgs(var20, var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var28 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    boolean var64 = var28.addVarArgs(var63);
    boolean var65 = var63.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.FunctionType var77 = var16.createConstructorType(var63, var75);
    com.google.javascript.rhino.jstype.JSType var79 = var77.getPropertyType("");
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var82 = var10.defineSynthesizedProperty("BANG 0\n    STRING hi 0 [length: 2]\n", var79, var81);
    com.google.javascript.rhino.jstype.JSType var83 = var10.getReturnType();
    boolean var84 = var10.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.ObjectType var85 = var10.getPrototype();
    com.google.javascript.rhino.jstype.ObjectType var86 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var10);
    com.google.javascript.rhino.Node var87 = var10.getSource();
    boolean var88 = var10.hasReferenceName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var89 = var10.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test364"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    boolean var32 = var6.recordSuppressions(var31);
    var0.setAliasableStrings(var31);
    var0.setTweakToStringLiteral("", "(LABEL_NAME hi!)");
    var0.setProcessObjectPropertyString(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test365"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    boolean var16 = var0.getInferTypes();
    com.google.javascript.jscomp.CodingConvention var17 = var0.getCodingConvention();
    var0.setCheckControlStructures(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test366"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var72 = var56.isPropertyInExterns("goog.exportSymbol");
    boolean var73 = var56.isOrdinaryFunction();
    boolean var74 = var56.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test367"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(0, 2, (-1));
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     var5.unregisterPropertyOnType("Unversioned directory", var7);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var12 = var11.getDependencies();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.block(var12);
//     com.google.javascript.rhino.jstype.FunctionType var14 = var5.createFunctionTypeWithVarArgs(var9, var12);
//     boolean var15 = var14.hasAnyTemplateInternal();
//     java.lang.Iterable var16 = var14.getAllExtendedInterfaces();
//     boolean var17 = var14.isEmptyType();
//     com.google.javascript.rhino.ErrorReporter var18 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     var19.unregisterPropertyOnType("Unversioned directory", var21);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var26 = var25.getDependencies();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.block(var26);
//     com.google.javascript.rhino.jstype.FunctionType var28 = var19.createFunctionTypeWithVarArgs(var23, var26);
//     boolean var30 = var28.removeProperty("null(null)");
//     var14.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var28);
//     java.lang.String var32 = var14.getDisplayName();
//     com.google.javascript.rhino.JSDocInfo var33 = var14.getJSDocInfo();
//     com.google.javascript.rhino.jstype.JSType var34 = var14.getReturnType();
//     var3.setJSType(var34);
//     var34.clearResolved();
//     com.google.common.base.Predicate var37 = null;
//     boolean var38 = var34.setValidator(var37);
// 
//   }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test368"); }


    com.google.javascript.rhino.jstype.JSType var1 = null;
    com.google.javascript.rhino.jstype.SimpleSlot var3 = new com.google.javascript.rhino.jstype.SimpleSlot("", var1, false);
    com.google.javascript.rhino.jstype.JSType var4 = var3.getType();
    boolean var5 = var3.isTypeInferred();
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    com.google.javascript.rhino.JSDocInfo var7 = var3.getJSDocInfo();
    com.google.javascript.rhino.jstype.StaticReference var8 = var3.getDeclaration();
    com.google.javascript.rhino.jstype.StaticReference var9 = var3.getDeclaration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test369() {}
//   public void test369() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test369"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     java.lang.String var3 = var2.toString();
//     java.lang.String var4 = var2.toString();
//     java.lang.String var5 = var2.toString();
//     java.lang.String var6 = var2.toString();
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     boolean var14 = var7.isExternExportsEnabled();
//     var7.setCheckCaja(false);
//     java.util.Set var17 = null;
//     var7.setReplaceStringsReservedStrings(var17);
//     com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var21 = var20.recordExpose();
//     boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = var27.getNext();
//     com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
//     com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     var27.setJSType(var31);
//     com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
//     java.lang.String var34 = var33.getFileOverview();
//     java.util.Set var35 = var33.getModifies();
//     var7.setReplaceStringsReservedStrings(var35);
//     var7.setGroupVariableDeclarations(false);
//     com.google.javascript.jscomp.CheckLevel var39 = null;
//     var7.setCheckRequires(var39);
//     var7.setExportTestFunctions(false);
//     com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var44 = null;
//     var43.setStripTypes(var44);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var47 = var46.getDirectedGraphNodes();
//     java.util.List var48 = var46.getEdges();
//     var43.setManageClosureDependencies(var48);
//     boolean var50 = var43.isExternExportsEnabled();
//     com.google.javascript.jscomp.CompilerOptions var51 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var52 = null;
//     var51.setStripTypes(var52);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var54 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var55 = var54.getDirectedGraphNodes();
//     java.util.List var56 = var54.getEdges();
//     var51.setManageClosureDependencies(var56);
//     var43.setManageClosureDependencies(var56);
//     var43.setRemoveClosureAsserts(true);
//     boolean var61 = var43.isExternExportsEnabled();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var62 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var63 = var62.getDirectedGraphNodes();
//     java.util.List var64 = var62.getEdges();
//     java.util.List var65 = var62.getGraphvizNodes();
//     var43.setSourceMapLocationMappings(var65);
//     var7.setManageClosureDependencies(var65);
//     com.google.javascript.jscomp.CheckLevel var69 = null;
//     com.google.javascript.jscomp.DiagnosticType var71 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var69, "Unversioned directory");
//     com.google.javascript.jscomp.DiagnosticType[] var72 = new com.google.javascript.jscomp.DiagnosticType[] { var71};
//     com.google.javascript.jscomp.DiagnosticGroup var73 = new com.google.javascript.jscomp.DiagnosticGroup(var72);
//     com.google.javascript.jscomp.CompilerOptions var74 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var75 = null;
//     var74.setStripTypes(var75);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var77 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var78 = var77.getDirectedGraphNodes();
//     java.util.List var79 = var77.getEdges();
//     var74.setManageClosureDependencies(var79);
//     boolean var81 = var74.isExternExportsEnabled();
//     var74.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var86 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var88 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var89 = com.google.javascript.jscomp.JSError.make(var86, var88);
//     int var90 = var89.getCharno();
//     com.google.javascript.jscomp.CheckLevel var91 = var89.getDefaultLevel();
//     var74.setReportUnknownTypes(var91);
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var93 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var73, var91);
//     com.google.javascript.jscomp.CheckLevel var94 = null;
//     var7.setWarningLevel(var73, var94);
//     boolean var96 = var2.enables(var73);
// 
//   }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test370"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var0.setDependencySorting(true);
    com.google.javascript.jscomp.DependencyOptions var6 = var4.setMoocherDropping(true);
    com.google.javascript.jscomp.MessageFormatter var7 = null;
    java.util.logging.Logger var8 = null;
    com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
    com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
    com.google.javascript.jscomp.Scope var11 = var10.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var12 = null;
    com.google.javascript.jscomp.NodeTraversal var13 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var10, var12);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.script(var19);
    var13.traverseRoots(var19);
    int var23 = var13.getLineNumber();
    com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var26 = var25.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    com.google.javascript.jscomp.JSModule[] var28 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var26);
    var13.traverseRoots(var26);
    com.google.javascript.jscomp.DependencyOptions var30 = var4.setEntryPoints((java.util.Collection)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test371"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.ObjectType var6 = var1.createAnonymousObjectType();
    java.io.PrintStream var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler(var7);
    com.google.javascript.jscomp.CompilerOptions var9 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var10 = null;
    var9.setStripTypes(var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var13 = var12.getDirectedGraphNodes();
    java.util.List var14 = var12.getEdges();
    var9.setManageClosureDependencies(var14);
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var18 = var17.recordExpose();
    boolean var20 = var17.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    com.google.javascript.rhino.JSDocInfo var30 = var17.build(var24);
    java.lang.String var31 = var30.getFileOverview();
    java.util.Set var32 = var30.getModifies();
    java.util.List var33 = var30.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var35 = null;
    var34.setStripTypes(var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.util.List var39 = var37.getEdges();
    var34.setManageClosureDependencies(var39);
    var34.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var34.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var46 = null;
    var34.setSourceMapDetailLevel(var46);
    var8.<com.google.javascript.jscomp.SourceFile>initModules(var14, var33, var34);
    com.google.javascript.jscomp.deps.SortedDependencies var49 = new com.google.javascript.jscomp.deps.SortedDependencies(var14);
    com.google.javascript.rhino.JSDocInfoBuilder var51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var52 = var51.recordExpose();
    boolean var54 = var51.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    com.google.javascript.rhino.InputId var61 = com.google.javascript.jscomp.NodeUtil.getInputId(var58);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var58.setJSType(var62);
    com.google.javascript.rhino.JSDocInfo var64 = var51.build(var58);
    java.lang.String var65 = var64.getFileOverview();
    java.util.Set var66 = var64.getModifies();
    java.util.List var67 = var64.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var68 = var64.getType();
    java.util.List var69 = var64.getImplementedInterfaces();
    java.util.List var70 = var49.getSortedDependenciesOf(var69);
    java.util.List var71 = var49.getInputsWithoutProvides();
    java.util.List var72 = var49.getInputsWithoutProvides();
    java.util.List var73 = var49.getInputsWithoutProvides();
    java.util.List var74 = var49.getSortedList();
    var1.setTemplateTypeNames(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test372"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    com.google.common.collect.ImmutableList var92 = var32.getTemplateTypeNames();
    boolean var93 = var32.isBooleanObjectType();
    com.google.javascript.rhino.jstype.ObjectType var94 = var32.getTypeOfThis();
    boolean var95 = var32.isParameterizedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test373"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    var3.removeProp(0);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    boolean var12 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var10);
    int var13 = var10.getLength();
    com.google.javascript.rhino.Node var14 = null;
    boolean var15 = var10.hasChild(var14);
    com.google.javascript.rhino.Node var16 = var8.useSourceInfoIfMissingFromForTree(var10);
    com.google.javascript.jscomp.CodingConvention.Bind var18 = var6.describeFunctionBind(var8, false);
    int var19 = var8.getSourcePosition();
    int var20 = var8.getSideEffectFlags();
    boolean var21 = var8.isWith();
    com.google.javascript.rhino.Node var22 = var3.useSourceInfoFromForTree(var8);
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    boolean var24 = var3.isAssign();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test374"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    var1.removeAll();
    int var11 = var1.getDepth();
    int var12 = var1.getDepth();
    java.util.List var13 = var1.getInputs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test375() {}
//   public void test375() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test375"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
//     com.google.javascript.jscomp.SourceAst var5 = null;
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
//     com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
//     var1.add(var8);
//     java.util.List var11 = var1.getDependencies();
//     com.google.javascript.jscomp.JSModule[] var12 = new com.google.javascript.jscomp.JSModule[] { var1};
//     com.google.javascript.jscomp.JSModuleGraph var13 = new com.google.javascript.jscomp.JSModuleGraph(var12);
//     com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var16 = var15.getDependencies();
//     com.google.javascript.jscomp.SourceAst var17 = null;
//     com.google.javascript.rhino.InputId var18 = null;
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var17, var18, true);
//     com.google.javascript.jscomp.JSModule var21 = var20.getModule();
//     var15.add(var20);
//     com.google.javascript.jscomp.SourceFile var24 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var15.addFirst(var24);
//     java.util.Set var26 = var15.getAllDependencies();
//     var15.removeAll();
//     com.google.javascript.jscomp.MessageFormatter var28 = null;
//     java.util.logging.Logger var29 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var30 = new com.google.javascript.jscomp.LoggerErrorManager(var28, var29);
//     com.google.javascript.jscomp.Compiler var31 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var30);
//     int var32 = var31.getErrorCount();
//     var15.sortInputsByDeps(var31);
//     java.util.List var34 = var15.getRequires();
//     com.google.javascript.jscomp.JSModule var35 = null;
//     com.google.javascript.jscomp.JSModule var36 = var13.getDeepestCommonDependencyInclusive(var15, var35);
// 
//   }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test376"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    var0.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var26 = var25.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    com.google.javascript.jscomp.JSError var28 = null;
    com.google.javascript.jscomp.CheckLevel var29 = var27.level(var28);
    var14.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.setTweakToNumberLiteral("", (-1));
    var0.setCollapseProperties(true);
    var0.setCollapseProperties(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test377"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    com.google.javascript.rhino.Node var71 = var56.getSource();
    boolean var72 = var56.matchesNumberContext();
    com.google.javascript.rhino.Node var73 = var56.getSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test378"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var1, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var4 = new com.google.javascript.jscomp.DiagnosticType[] { var3};
    com.google.javascript.jscomp.DiagnosticGroup var5 = new com.google.javascript.jscomp.DiagnosticGroup(var4);
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var7 = null;
    var6.setStripTypes(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    java.util.List var11 = var9.getEdges();
    var6.setManageClosureDependencies(var11);
    boolean var13 = var6.isExternExportsEnabled();
    var6.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var20 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make(var18, var20);
    int var22 = var21.getCharno();
    com.google.javascript.jscomp.CheckLevel var23 = var21.getDefaultLevel();
    var6.setReportUnknownTypes(var23);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var25 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var5, var23);
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var30 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make(var28, var30);
    com.google.javascript.jscomp.CheckLevel var32 = var25.level(var31);
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var34 = null;
    var33.setBrokenClosureRequiresLevel(var34);
    var33.setLocale("");
    var33.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    var40.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var54 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var55 = com.google.javascript.jscomp.JSError.make(var52, var54);
    int var56 = var55.getCharno();
    com.google.javascript.jscomp.CheckLevel var57 = var55.getDefaultLevel();
    var40.setReportUnknownTypes(var57);
    var33.setBrokenClosureRequiresLevel(var57);
    int var60 = var57.ordinal();
    com.google.javascript.jscomp.Compiler var61 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var62 = var61.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var63 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var61);
    com.google.javascript.jscomp.LightweightMessageFormatter var64 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var61);
    var64.setColorize(false);
    java.lang.String var67 = var31.format(var57, (com.google.javascript.jscomp.MessageFormatter)var64);
    int var68 = var31.getCharno();
    int var69 = var31.getNodeSourceOffset();
    com.google.javascript.jscomp.CheckLevel var70 = var31.getDefaultLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + ""+ "'", var62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var67.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test379"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var37 = var1.addAuthor("BANG");
    boolean var38 = var1.recordDeprecated();
    boolean var39 = var1.recordConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test380"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    var2.setDevirtualizePrototypeMethods(true);
    var2.setCollapsePropertiesOnExternTypes(false);
    var2.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    boolean var22 = var15.isExternExportsEnabled();
    var15.setCheckCaja(false);
    java.util.Set var25 = null;
    var15.setReplaceStringsReservedStrings(var25);
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var31 = var28.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    com.google.javascript.rhino.JSDocInfo var41 = var28.build(var35);
    java.lang.String var42 = var41.getFileOverview();
    java.util.Set var43 = var41.getModifies();
    var15.setReplaceStringsReservedStrings(var43);
    var15.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var51 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make(var49, var51);
    int var53 = var52.getCharno();
    com.google.javascript.jscomp.CheckLevel var54 = var52.getDefaultLevel();
    var15.setCheckGlobalThisLevel(var54);
    var2.setCheckMissingGetCssNameLevel(var54);
    com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("STRING hi 0 [length: 2]\n", "RETURN");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    boolean var66 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var64);
    int var67 = var64.getLength();
    com.google.javascript.rhino.Node var68 = null;
    boolean var69 = var64.hasChild(var68);
    com.google.javascript.rhino.Node var70 = var62.useSourceInfoIfMissingFromForTree(var64);
    var64.setSourceFileForTesting("Unversioned directory");
    boolean var73 = var64.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var74 = var64.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var77 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var78 = null;
    java.util.logging.Logger var79 = null;
    com.google.javascript.jscomp.LoggerErrorManager var80 = new com.google.javascript.jscomp.LoggerErrorManager(var78, var79);
    com.google.javascript.jscomp.Compiler var81 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var80);
    com.google.javascript.jscomp.Scope var82 = var81.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var83 = null;
    com.google.javascript.jscomp.NodeTraversal var84 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var81, var83);
    com.google.javascript.jscomp.Scope var85 = var84.getScope();
    com.google.javascript.rhino.Node var86 = null;
    com.google.javascript.jscomp.DiagnosticType var89 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var91 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var92 = com.google.javascript.jscomp.JSError.make(var89, var91);
    com.google.javascript.jscomp.DiagnosticType var93 = var92.getType();
    java.lang.String[] var95 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var96 = var84.makeError(var86, var93, var95);
    com.google.javascript.jscomp.JSError var97 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var64, var77, var95);
    com.google.javascript.jscomp.JSError var98 = com.google.javascript.jscomp.JSError.make("", var1, var54, var59, var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var99 = com.google.javascript.rhino.IR.var(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test381"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var20.isNot();
    int var27 = var20.getType();
    java.lang.String var28 = com.google.javascript.jscomp.NodeUtil.getSourceName(var20);
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    int var37 = var32.getIndexOfChild(var36);
    boolean var38 = var36.isBlock();
    boolean var39 = var36.isOr();
    boolean var40 = var20.isEquivalentToTyped(var36);
    boolean var41 = var36.isBreak();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 306);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test382"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCheckCaja(false);
    java.util.Set var23 = null;
    var13.setReplaceStringsReservedStrings(var23);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.lang.String var40 = var39.getFileOverview();
    java.util.Set var41 = var39.getModifies();
    var13.setReplaceStringsReservedStrings(var41);
    var13.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var49 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make(var47, var49);
    int var51 = var50.getCharno();
    com.google.javascript.jscomp.CheckLevel var52 = var50.getDefaultLevel();
    var13.setCheckGlobalThisLevel(var52);
    var0.setCheckMissingGetCssNameLevel(var52);
    var0.setCommonJSModulePathPrefix("CONTINUE");
    var0.setRenamePrefixNamespace("{proxy:{296085840}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test383"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    java.io.Reader var7 = var3.getCodeReader();
    var3.clearCachedSource();
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var3);
    com.google.javascript.rhino.InputId var10 = var9.getInputId();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var14.setJSType(var15);
    boolean var17 = var14.isScript();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var23 = var21.getLineOfOffset(2);
    var14.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var21);
    com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var21);
    var9.setSourceFile(var21);
    var9.clearAst();
    com.google.javascript.jscomp.SourceFile var28 = var9.getSourceFile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test384"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var72 = var56.isPropertyInExterns("goog.exportSymbol");
    boolean var73 = var56.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.EnumElementType var74 = var56.getElementsType();
    boolean var75 = var74.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test385"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var8 = var6.getExistingIntProp(100);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test386"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    boolean var9 = var6.isNE();
    java.lang.String var10 = com.google.javascript.jscomp.NodeUtil.getSourceName(var6);
    com.google.javascript.rhino.Node var11 = var6.cloneTree();
    com.google.javascript.rhino.jstype.FunctionBuilder var12 = var4.withParamsNode(var11);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node((-19));
    var11.addChildToFront(var14);
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var17.unregisterPropertyOnType("Unversioned directory", var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.jscomp.JSModule var23 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var24 = var23.getDependencies();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.block(var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var17.createFunctionTypeWithVarArgs(var21, var24);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.Node var38 = var17.createParametersWithVarArgs(var35);
    boolean var39 = var38.isInstanceOf();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.returnNode();
    var40.setSourceFileForTesting("null(null)");
    boolean var43 = var40.isDo();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.Node var50 = var47.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var51 = var50.getAncestors();
    var40.addChildrenToFront(var50);
    int var53 = var40.getSourcePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.ifNode(var14, var38, var40);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test387"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isCase();
    com.google.javascript.rhino.Node var9 = var1.cloneTree();
    com.google.javascript.rhino.Node var10 = var9.removeChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test388"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.resetWarningsGuard();
    com.google.javascript.jscomp.CodingConvention var18 = null;
    var0.setCodingConvention(var18);
    com.google.javascript.jscomp.MessageFormatter var20 = null;
    java.util.logging.Logger var21 = null;
    com.google.javascript.jscomp.LoggerErrorManager var22 = new com.google.javascript.jscomp.LoggerErrorManager(var20, var21);
    com.google.javascript.jscomp.Compiler var23 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var22);
    com.google.javascript.jscomp.JSError[] var24 = var23.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.util.List var40 = var39.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    var41.clearNodeAnnotations();
    java.util.List var44 = var41.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var46 = null;
    var45.setStripTypes(var46);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    java.util.List var50 = var48.getEdges();
    var45.setManageClosureDependencies(var50);
    var45.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var45.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var57 = null;
    var45.setSourceMapDetailLevel(var57);
    com.google.javascript.jscomp.CodingConvention var59 = var45.getCodingConvention();
    var45.setMarkNoSideEffectCalls(false);
    var23.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var40, var44, var45);
    boolean var63 = var23.isIdeMode();
    boolean var64 = var23.acceptEcmaScript5();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var65 = var23.languageMode();
    var0.setLanguageIn(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test389"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.util.Collection var29 = var28.getAuthors();
    com.google.common.collect.ImmutableList var30 = var28.getTemplateTypeNames();
    var0.setSourceMapLocationMappings((java.util.List)var30);
    com.google.javascript.jscomp.SourceMap.Format var32 = null;
    var0.setSourceMapFormat(var32);
    var0.setComputeFunctionSideEffects(false);
    var0.skipAllCompilerPasses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test390"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    boolean var63 = var1.shouldTolerateUndefinedValues();
    com.google.javascript.rhino.jstype.JSType var68 = var1.createNamedType("function (): {355321942}", "LABEL_NAME hi!\n", 3, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test391"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    var1.markName("BANG 0\n    STRING hi 0 [length: 2]\n", (-1), (-1));
    boolean var11 = var1.recordImplicitCast();
    boolean var13 = var1.recordDescription("{160498324}");
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newString(0, "null(null)");
    var1.markTypeNode(var16, 154, 100, 2, 10, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.neg(var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test392() {}
//   public void test392() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test392"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
//     com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
//     com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
//     int var9 = var3.getErrorCount();
//     com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
//     com.google.javascript.jscomp.NodeTraversal var11 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var10);
//     int var12 = var11.getLineNumber();
//     com.google.javascript.rhino.Node var13 = var11.getCurrentNode();
//     com.google.javascript.jscomp.JSModule var14 = var11.getModule();
// 
//   }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test393"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.FunctionType var64 = var58.getConstructor();
    boolean var66 = var58.isPropertyTypeDeclared("ERROR");
    com.google.javascript.rhino.jstype.ObjectType.Property var68 = var58.getSlot("Unversioned directory");
    boolean var70 = var58.isPropertyTypeInferred("module$2014$12$24 11:10");
    com.google.javascript.rhino.jstype.ObjectType.Property var72 = var58.getSlot("(STRING hi 0 [length: 2]\n)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test394"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var19 = var14.getDescriptionForParameter("");
    boolean var20 = var14.hasEnumParameterType();
    com.google.javascript.rhino.Node var21 = var14.getAssociatedNode();
    boolean var22 = var21.isIn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test395"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var36 = var1.recordLends("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var1.markName("OFF", (-19), 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test396"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    boolean var28 = var24.isNoType();
    com.google.javascript.rhino.jstype.FunctionType var29 = var24.toMaybeFunctionType();
    boolean var30 = var24.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test397"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    boolean var12 = var1.recordParameterDescription("LABEL_NAME hi!", "(LABEL_NAME hi!)");
    boolean var13 = var1.recordPreserveTry();
    boolean var14 = var1.recordExport();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    boolean var23 = var19.isOptionalArg();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(0, var19, var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    boolean var33 = var29.isArrayLit();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var36 = var35.isGetterDef();
    var35.putIntProp((-1), 10);
    var29.addChildrenToFront(var35);
    boolean var41 = var29.isDec();
    var25.addChildToBack(var29);
    com.google.javascript.rhino.JSDocInfo var43 = var1.build(var25);
    java.lang.String var44 = var43.getReturnDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test398"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("ECMASCRIPT3");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ECMASCRIPT3"+ "'", var1.equals("ECMASCRIPT3"));

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test399"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.ObjectType var6 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.JSType var11 = var1.createNamedType("function (): {1096500211}", "hi!: BANG 0\n    STRING hi 0 [length: 2]\n", 306, 153);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var14.unregisterPropertyOnType("Unversioned directory", var16);
    var14.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var21 = var14.getType("2014/12/24 11:10");
    com.google.javascript.rhino.ErrorReporter var22 = var14.getErrorReporter();
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var24 = null;
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isOr();
    java.lang.String var32 = var23.extractClassNameIfRequire(var24, var28);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var34.unregisterPropertyOnType("Unversioned directory", var36);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.jscomp.JSModule var40 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var41 = var40.getDependencies();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.block(var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var34.createFunctionTypeWithVarArgs(var38, var41);
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    var45.unregisterPropertyOnType("Unversioned directory", var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.JSModule var51 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var52 = var51.getDependencies();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.block(var52);
    com.google.javascript.rhino.jstype.FunctionType var54 = var45.createFunctionTypeWithVarArgs(var49, var52);
    boolean var55 = var54.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.lang.Iterable var58 = var56.getDirectedGraphNodes();
    java.util.List var59 = var56.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var60 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var61 = null;
    var60.setStripTypes(var61);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var64 = var63.getDirectedGraphNodes();
    java.util.List var65 = var63.getEdges();
    var60.setManageClosureDependencies(var65);
    boolean var67 = var60.isExternExportsEnabled();
    var60.setCheckCaja(false);
    java.util.Set var70 = null;
    var60.setReplaceStringsReservedStrings(var70);
    var60.setAliasAllStrings(true);
    var60.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var76 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var77 = null;
    var76.setStripTypes(var77);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var79 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var80 = var79.getDirectedGraphNodes();
    java.util.List var81 = var79.getEdges();
    var76.setManageClosureDependencies(var81);
    boolean var83 = var76.isExternExportsEnabled();
    var76.setCheckCaja(false);
    var76.setGroupVariableDeclarations(true);
    java.util.Map var88 = var76.getDefineReplacements();
    var60.setPropertyInvalidationErrors(var88);
    var23.defineDelegateProxyPrototypeProperties(var34, (com.google.javascript.rhino.jstype.StaticScope)var54, var59, var88);
    var14.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var54);
    com.google.javascript.rhino.JSDocInfo var92 = var54.getJSDocInfo();
    com.google.javascript.rhino.jstype.FunctionType var93 = var54.toMaybeFunctionType();
    java.util.List var94 = var93.getSubTypes();
    boolean var95 = var1.declareType("LinkedGraph", (com.google.javascript.rhino.jstype.JSType)var93);
    boolean var96 = var93.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test400"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isObject();
    com.google.javascript.rhino.jstype.FunctionType var61 = var58.getConstructor();
    boolean var62 = var58.matchesNumberContext();
    boolean var63 = var58.hasReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test401"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var1.addFirst(var10);
    java.util.Set var12 = var1.getAllDependencies();
    var1.removeAll();
    com.google.javascript.jscomp.SourceAst var14 = null;
    com.google.javascript.rhino.InputId var15 = null;
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var1.addFirst(var20);
    boolean var22 = var20.isExtern();
    com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
    java.lang.String var24 = var20.toString();
    java.lang.String var25 = var20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var24.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var25.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test402"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var0.setNameReferenceGraphPath("BANG");
    var0.setLabelRenaming(true);
    var0.setOptimizeArgumentsArray(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test403"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setSyntheticBlockEndMarker("goog.abstractMethod");
    var0.setFoldConstants(false);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var17 = var0.getTracerMode();
    var0.setConvertToDottedProperties(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test404"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    var3.removeProp(0);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    boolean var12 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var10);
    int var13 = var10.getLength();
    com.google.javascript.rhino.Node var14 = null;
    boolean var15 = var10.hasChild(var14);
    com.google.javascript.rhino.Node var16 = var8.useSourceInfoIfMissingFromForTree(var10);
    com.google.javascript.jscomp.CodingConvention.Bind var18 = var6.describeFunctionBind(var8, false);
    int var19 = var8.getSourcePosition();
    int var20 = var8.getSideEffectFlags();
    boolean var21 = var8.isWith();
    com.google.javascript.rhino.Node var22 = var3.useSourceInfoFromForTree(var8);
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
    com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var26 = var25.recordExpose();
    boolean var28 = var25.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.InputId var35 = com.google.javascript.jscomp.NodeUtil.getInputId(var32);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var32.setJSType(var36);
    com.google.javascript.rhino.JSDocInfo var38 = var25.build(var32);
    java.lang.String var39 = var38.getFileOverview();
    boolean var40 = var38.hasFileOverview();
    boolean var41 = var38.isDeprecated();
    boolean var42 = var38.isNoAlias();
    com.google.javascript.rhino.JSTypeExpression var43 = var38.getEnumParameterType();
    var3.setJSDocInfo(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test405"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.lang.String var23 = var18.getMeaning();
    java.lang.String var24 = var18.getReturnDescription();
    java.lang.String var25 = var18.getReturnDescription();
    java.lang.String var26 = var18.getLicense();
    com.google.javascript.rhino.Node var27 = var18.getAssociatedNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test406"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var2 = var1.recordExpose();
//     boolean var3 = var1.recordExterns();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = var7.getNext();
//     com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
//     boolean var10 = var7.isVarArgs();
//     boolean var11 = var7.isArrayLit();
//     com.google.javascript.rhino.Node var12 = var7.getNext();
//     var1.markTypeNode(var7, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     boolean var25 = var22.isVarArgs();
//     com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = var31.getNext();
//     com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
//     com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
//     com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
//     java.lang.Object var37 = null;
//     var22.putProp(0, var37);
//     com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
//     com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
//     boolean var42 = var1.recordBaseType(var40);
//     com.google.javascript.jscomp.MessageFormatter var43 = null;
//     java.util.logging.Logger var44 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
//     com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     java.lang.String var48 = var46.getAstDotGraph();
//     com.google.javascript.jscomp.Compiler var49 = new com.google.javascript.jscomp.Compiler();
//     var49.reportCodeChange();
//     com.google.javascript.jscomp.Compiler.IntermediateState var51 = var49.getState();
//     var46.setState(var51);
//     com.google.javascript.jscomp.Result var53 = var46.getResult();
//     com.google.javascript.jscomp.Compiler var54 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var55 = var54.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var56 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var54);
//     com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var61 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make(var59, var61);
//     int var63 = var62.getCharno();
//     com.google.javascript.jscomp.CheckLevel var64 = var62.getDefaultLevel();
//     java.lang.String var65 = var56.formatError(var62);
//     com.google.javascript.rhino.Node var67 = null;
//     com.google.javascript.jscomp.CheckLevel var69 = null;
//     com.google.javascript.jscomp.DiagnosticType var71 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var69, "");
//     com.google.javascript.jscomp.CheckLevel var73 = null;
//     com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var73, "");
//     int var76 = var71.compareTo(var75);
//     java.lang.String[] var78 = new java.lang.String[] { "(module$2014$12$24 11:10)"};
//     com.google.javascript.jscomp.JSError var79 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", var67, var75, var78);
//     java.lang.String var80 = var56.formatWarning(var79);
//     com.google.javascript.jscomp.CheckLevel var81 = var79.getDefaultLevel();
//     com.google.javascript.jscomp.CheckLevel var82 = var46.getErrorLevel(var79);
// 
//   }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test407"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    int var15 = var9.getLength();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.Node var22 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var23 = var9.useSourceInfoFromForTree(var19);
    boolean var24 = var19.isNew();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test408"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    boolean var22 = var14.isConstant();
    boolean var24 = var14.hasDescriptionForParameter("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    java.lang.String var25 = var14.getLicense();
    java.lang.String var26 = var14.getBlockDescription();
    boolean var27 = var14.isOverride();
    boolean var28 = var14.hasBaseType();
    java.lang.String var29 = var14.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var30 = var14.getThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "goog.abstractMethod"+ "'", var25.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test409"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = null;
    var14.setVisibility(var20);
    com.google.javascript.rhino.Node var22 = var14.getAssociatedNode();
    java.lang.String var23 = var14.getMeaning();
    boolean var24 = var14.isInterface();
    java.lang.String var25 = var14.getDescription();
    boolean var26 = var14.isDeprecated();
    java.util.List var27 = var14.getThrownTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test410"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    boolean var49 = var0.isExported("module$2014$12$24 11:10", false);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var53 = var51.getBooleanProp((-1));
    var51.setSourceEncodedPosition(10);
    boolean var56 = var51.isContinue();
    boolean var57 = var51.isGetterDef();
    boolean var58 = var0.isVarArgsParameter(var51);
    boolean var59 = var51.isAnd();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test411() {}
//   public void test411() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test411"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     var7.setJSType(var8);
//     boolean var10 = var7.isScript();
//     com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var15 = var14.isGetterDef();
//     boolean var16 = var14.isAdd();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = var20.getNext();
//     com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
//     boolean var23 = var20.isVarArgs();
//     com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
//     com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
//     java.lang.String var34 = var33.toStringTree();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = var38.getNext();
//     com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
//     boolean var42 = var38.getBooleanProp(100);
//     int var43 = var38.getSideEffectFlags();
//     boolean var44 = var38.isDefaultCase();
//     com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
//     java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
//     java.util.Collection var47 = var0.getAssertionFunctions();
//     java.lang.String var48 = var0.getGlobalObject();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "");
//     com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var55 = var54.getNext();
//     com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
//     com.google.javascript.rhino.JSDocInfo var57 = var54.getJSDocInfo();
//     boolean var58 = var54.isSwitch();
//     boolean var59 = var54.isIf();
//     var50.addChildToBack(var54);
//     boolean var61 = var50.isCatch();
//     com.google.javascript.rhino.Node var62 = null;
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var65 = var64.isGetterDef();
//     boolean var66 = var64.isNE();
//     boolean var67 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var64);
//     com.google.javascript.rhino.Node var68 = var64.cloneTree();
//     boolean var69 = var64.isDo();
//     com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.function(var50, var62, var64);
// 
//   }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test412"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setFoldConstants(false);
    com.google.javascript.jscomp.MessageFormatter var7 = null;
    java.util.logging.Logger var8 = null;
    com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var7, var8);
    int var10 = var9.getWarningCount();
    int var11 = var9.getErrorCount();
    com.google.javascript.jscomp.JSError[] var12 = var9.getWarnings();
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var9);
    var9.generateReport();
    var9.setTypedPercent((-1.0d));
    double var17 = var9.getTypedPercent();
    com.google.javascript.jscomp.JSError[] var18 = var9.getErrors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test413"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    java.util.List var17 = var16.getThrownTypes();
    java.lang.String var18 = var16.getDeprecationReason();
    java.lang.String var19 = var16.getReturnDescription();
    boolean var20 = var16.isImplicitCast();
    var1.setJSDocInfo(var16);
    com.google.javascript.rhino.Node var22 = var16.getAssociatedNode();
    com.google.javascript.rhino.Node var23 = var22.removeChildren();
    boolean var24 = var23.isGetProp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2014/12/24 11:10"+ "'", var18.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test414"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var1.recordOriginalCommentString("goog.abstractMethod");
    boolean var17 = var1.recordInterface();
    boolean var18 = var1.recordNoSideEffects();
    boolean var19 = var1.recordNoAlias();
    boolean var20 = var1.isConstructorRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test415"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("(function (): {2033023906})", 3, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test416"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var4.addChildrenToFront(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    com.google.javascript.rhino.InputId var17 = com.google.javascript.jscomp.NodeUtil.getInputId(var14);
    com.google.javascript.rhino.Node var18 = var4.useSourceInfoFrom(var14);
    com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var21 = var19.isConstantKey("2014/12/24 11:10");
    java.util.Collection var22 = var19.getAssertionFunctions();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var26 = var24.getBooleanProp((-1));
    var24.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var30 = new com.google.javascript.rhino.JSTypeExpression(var24, "goog.abstractMethod");
    boolean var31 = var19.isPrototypeAlias(var24);
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var19, "");
    com.google.javascript.rhino.Node var34 = var14.useSourceInfoIfMissingFrom(var33);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var35 = var34.getJsDocBuilderForNode();
    boolean var36 = var34.isTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test417"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    var0.setShadowVariables(true);
    var0.setGroupVariableDeclarations(false);
    var0.setInstrumentationTemplate("function (): {1529715975}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test418"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    java.util.Set var69 = var31.getPropertyNames();
    boolean var70 = var31.isNominalConstructor();
    java.util.Set var71 = var31.getPropertyNames();
    com.google.javascript.rhino.jstype.FunctionType var73 = var31.getBindReturnType(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test419"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    com.google.javascript.rhino.JSDocInfo var73 = var31.getJSDocInfo();
    com.google.javascript.rhino.jstype.JSType var75 = var31.getRestrictedTypeGivenToBooleanOutcome(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test420"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var5 = var3.getLineOfOffset(2);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
//     java.lang.String var7 = var6.toString();
//     com.google.javascript.jscomp.SourceAst var8 = var6.getSourceAst();
//     java.util.Collection var9 = var6.getRequires();
// 
//   }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test421"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.ObjectType var6 = var1.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.JSType var11 = var1.createNamedType("function (): {1852005172}", "function (): {1529715975}", 100, 3);
    com.google.javascript.rhino.ErrorReporter var12 = var1.getErrorReporter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test422"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var3 = null;
    var2.setResolveMode(var3);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var2);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.block(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var7.createFunctionTypeWithVarArgs(var11, var14);
    boolean var17 = var16.hasAnyTemplateInternal();
    java.lang.Iterable var18 = var16.getAllExtendedInterfaces();
    boolean var19 = var16.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    boolean var32 = var30.removeProperty("null(null)");
    var16.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var30);
    com.google.javascript.rhino.jstype.JSType var35 = var2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var30, "hi!");
    boolean var36 = var30.matchesInt32Context();
    var30.clearCachedValues();
    boolean var38 = com.google.javascript.rhino.jstype.JSType.isEquivalent(var0, (com.google.javascript.rhino.jstype.JSType)var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var39 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var41 = var39.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var44 = var43.recordExpose();
    boolean var46 = var43.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.InputId var53 = com.google.javascript.jscomp.NodeUtil.getInputId(var50);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var50.setJSType(var54);
    com.google.javascript.rhino.JSDocInfo var56 = var43.build(var50);
    java.lang.String var57 = var56.getFileOverview();
    java.util.Set var58 = var56.getModifies();
    java.util.List var59 = var56.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var60 = var56.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var61 = var39.createDirectedGraphNode((java.lang.Object)var56);
    boolean var62 = var56.isConsistentIdGenerator();
    java.lang.String var63 = var56.getDescription();
    var30.setJSDocInfo(var56);
    com.google.javascript.rhino.jstype.ObjectType var65 = var30.dereference();
    boolean var66 = var30.isAllType();
    java.lang.Iterable var67 = var30.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test423"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setRemoveAbstractMethods(true);
    var0.enableRuntimeTypeCheck("BANG");
    com.google.javascript.jscomp.CssRenamingMap var9 = null;
    var0.setCssRenamingMap(var9);
    var0.setInlineLocalFunctions(false);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test424"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    java.lang.String var73 = var56.getDisplayName();
    com.google.javascript.rhino.Node var74 = var56.getSource();
    boolean var75 = var74.isQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var73.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test425"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var27 = var23.getType();
    boolean var28 = var23.isConsistentIdGenerator();
    java.lang.String var29 = var23.getDeprecationReason();
    var5.setJSDocInfo(var23);
    boolean var31 = var5.isCatch();
    com.google.javascript.rhino.Node[] var32 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(154, var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(2147483647, var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "2014/12/24 11:10"+ "'", var29.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test426"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.util.List var18 = var14.getExtendedInterfaces();
    java.lang.String var20 = var14.getDescriptionForParameter("function (): {1698635356}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test427"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setCheckProvides(var11);
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var14.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.JSTypeExpression var40 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var39);
    boolean var41 = var14.recordExtendedInterface(var39);
    com.google.javascript.jscomp.SourceFile var44 = new com.google.javascript.jscomp.SourceFile("()");
    var14.markName("module$2014$12$24 11:10", (com.google.javascript.rhino.jstype.StaticSourceFile)var44, 1, 1);
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    boolean var54 = var51.isVarArgs();
    com.google.javascript.rhino.Node var56 = var51.getChildAtIndex(1);
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    com.google.javascript.rhino.JSDocInfo var63 = var60.getJSDocInfo();
    com.google.javascript.rhino.Node var64 = var51.copyInformationFrom(var60);
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var66 = null;
    var65.setStripTypes(var66);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var69 = var68.getDirectedGraphNodes();
    java.util.List var70 = var68.getEdges();
    var65.setManageClosureDependencies(var70);
    boolean var72 = var65.isExternExportsEnabled();
    var65.setCheckCaja(false);
    java.util.Set var75 = null;
    var65.setReplaceStringsReservedStrings(var75);
    com.google.javascript.rhino.JSDocInfoBuilder var78 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var79 = var78.recordExpose();
    boolean var81 = var78.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var85 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var86 = var85.getNext();
    com.google.javascript.rhino.Node var87 = var83.srcrefTree(var85);
    com.google.javascript.rhino.InputId var88 = com.google.javascript.jscomp.NodeUtil.getInputId(var85);
    com.google.javascript.rhino.jstype.JSType var89 = null;
    var85.setJSType(var89);
    com.google.javascript.rhino.JSDocInfo var91 = var78.build(var85);
    java.lang.String var92 = var91.getFileOverview();
    java.util.Set var93 = var91.getModifies();
    var65.setReplaceStringsReservedStrings(var93);
    var51.setDirectives(var93);
    boolean var96 = var14.recordSuppressions(var93);
    var0.setExtraAnnotationNames(var93);
    java.util.Map var98 = var0.getDefineReplacements();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test428"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCollapsePropertiesOnExternTypes(false);
    var13.setTransformAMDToCJSModules(false);
    var13.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var27 = var13.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var28 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var29 = null;
    var28.setStripTypes(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var32 = var31.getDirectedGraphNodes();
    java.util.List var33 = var31.getEdges();
    var28.setManageClosureDependencies(var33);
    var28.setDevirtualizePrototypeMethods(true);
    var28.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var40 = null;
    var39.setBrokenClosureRequiresLevel(var40);
    var39.setLocale("");
    var39.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var47 = null;
    var46.setStripTypes(var47);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var50 = var49.getDirectedGraphNodes();
    java.util.List var51 = var49.getEdges();
    var46.setManageClosureDependencies(var51);
    boolean var53 = var46.isExternExportsEnabled();
    var46.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var60 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make(var58, var60);
    int var62 = var61.getCharno();
    com.google.javascript.jscomp.CheckLevel var63 = var61.getDefaultLevel();
    var46.setReportUnknownTypes(var63);
    var39.setBrokenClosureRequiresLevel(var63);
    var28.setCheckUnreachableCode(var63);
    var13.setReportUnknownTypes(var63);
    var0.setCheckProvides(var63);
    var0.setDeadAssignmentElimination(false);
    var0.setInstrumentationTemplate("ERROR - (InputId: )\n");
    var0.setCheckTypes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test429"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    java.util.Map var12 = null;
    var0.setDefineReplacements(var12);
    boolean var14 = var0.assumeStrictThis();
    var0.setRemoveTryCatchFinally(true);
    var0.setCheckControlStructures(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test430"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.paramList(var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    var10.setQuotedString();
    com.google.javascript.rhino.Node var12 = var10.removeChildren();
    boolean var13 = var10.isOr();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = var3.removeChildAfter(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test431"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.lang.String var17 = var14.getDescription();
    boolean var18 = var14.isNoCompile();
    boolean var19 = var14.isDeprecated();
    boolean var20 = var14.isNoSideEffects();
    boolean var21 = var14.isExpose();
    java.lang.String var22 = var14.getLicense();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test432"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    boolean var43 = var1.shouldParseDocumentation();
    com.google.javascript.rhino.JSDocInfoBuilder var45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var46 = var45.recordExpose();
    boolean var48 = var45.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    com.google.javascript.rhino.InputId var55 = com.google.javascript.jscomp.NodeUtil.getInputId(var52);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    var52.setJSType(var56);
    com.google.javascript.rhino.JSDocInfo var58 = var45.build(var52);
    java.util.Collection var59 = var58.getAuthors();
    java.util.Set var60 = var58.getModifies();
    boolean var61 = var1.recordModifies(var60);
    boolean var62 = var1.recordDeprecated();
    var1.recordOriginalCommentString("function (): {1204057807}");
    com.google.javascript.rhino.JSDocInfoBuilder var66 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var67 = var66.recordExpose();
    boolean var68 = var66.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var69 = null;
    boolean var71 = var66.recordThrowDescription(var69, "()");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    boolean var78 = var75.isVarArgs();
    com.google.javascript.rhino.Node var80 = var75.getChildAtIndex(1);
    com.google.javascript.rhino.Node var82 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var85 = var84.getNext();
    com.google.javascript.rhino.Node var86 = var82.srcrefTree(var84);
    com.google.javascript.rhino.JSDocInfo var87 = var84.getJSDocInfo();
    com.google.javascript.rhino.Node var88 = var75.copyInformationFrom(var84);
    java.lang.Object var90 = null;
    var75.putProp(0, var90);
    com.google.javascript.rhino.JSTypeExpression var93 = new com.google.javascript.rhino.JSTypeExpression(var75, "()");
    boolean var94 = var66.recordEnumParameterType(var93);
    boolean var95 = var93.isOptionalArg();
    boolean var96 = var1.recordReturnType(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test433"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    boolean var22 = var14.isConstant();
    boolean var24 = var14.hasDescriptionForParameter("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    java.lang.String var25 = var14.getLicense();
    boolean var26 = var14.isNoTypeCheck();
    com.google.javascript.rhino.JSTypeExpression var27 = var14.getThisType();
    com.google.javascript.rhino.JSTypeExpression var28 = var14.getEnumParameterType();
    java.lang.String var29 = var14.getMeaning();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "goog.abstractMethod"+ "'", var25.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test434"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(0, "hi!");
    var2.setVarArgs(false);
    com.google.javascript.rhino.Node var5 = var2.removeFirstChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test435() {}
//   public void test435() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test435"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var5 = var3.getLineOfOffset(2);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
//     java.io.Reader var7 = var3.getCodeReader();
//     var3.clearCachedSource();
//     com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var3);
//     com.google.javascript.rhino.InputId var10 = var9.getInputId();
//     com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     var14.setJSType(var15);
//     boolean var17 = var14.isScript();
//     com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var23 = var21.getLineOfOffset(2);
//     var14.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var21);
//     com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var21);
//     var9.setSourceFile(var21);
//     var9.clearAst();
//     var9.clearAst();
//     com.google.javascript.jscomp.SourceFile var29 = null;
//     var9.setSourceFile(var29);
// 
//   }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test436"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var12.isString();
    com.google.javascript.rhino.Node var18 = var10.useSourceInfoFromForTree(var12);
    int var19 = var18.getLength();
    java.util.Set var20 = var18.getDirectives();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test437"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType var71 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var31, "BANG");
    int var72 = var31.getMinArguments();
    com.google.javascript.rhino.Node var73 = var31.getRootNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test438"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var3 = var2.hasOneChild();
    com.google.javascript.rhino.jstype.StaticSourceFile var4 = var2.getStaticSourceFile();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var12 = var8.getBooleanProp(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.add(var2, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test439"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("BANG 0");
    var1.setOriginalPath("");
    var1.clearCachedSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test440"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    java.util.Set var24 = var20.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSType var25 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var26 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    com.google.javascript.rhino.JSDocInfo var84 = var83.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var85 = var83.getElementsType();
    boolean var86 = var85.isNominalType();
    java.lang.String var87 = var85.toString();
    java.lang.String var88 = var85.getReferenceName();
    com.google.javascript.rhino.jstype.JSType var89 = var85.autoboxesTo();
    boolean var91 = var85.hasProperty("function (): {1509650176}");
    boolean var92 = var26.addVarArgs((com.google.javascript.rhino.jstype.JSType)var85);
    boolean var93 = var85.matchesObjectContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var87.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var88.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test441() {}
//   public void test441() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test441"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isOr();
//     java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var11.unregisterPropertyOnType("Unversioned directory", var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var18 = var17.getDependencies();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
//     com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var22.unregisterPropertyOnType("Unversioned directory", var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var29 = var28.getDependencies();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
//     boolean var32 = var31.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var34 = var33.getDirectedGraphNodes();
//     java.lang.Iterable var35 = var33.getDirectedGraphNodes();
//     java.util.List var36 = var33.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var38 = null;
//     var37.setStripTypes(var38);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var41 = var40.getDirectedGraphNodes();
//     java.util.List var42 = var40.getEdges();
//     var37.setManageClosureDependencies(var42);
//     boolean var44 = var37.isExternExportsEnabled();
//     var37.setCheckCaja(false);
//     java.util.Set var47 = null;
//     var37.setReplaceStringsReservedStrings(var47);
//     var37.setAliasAllStrings(true);
//     var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var54 = null;
//     var53.setStripTypes(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var57 = var56.getDirectedGraphNodes();
//     java.util.List var58 = var56.getEdges();
//     var53.setManageClosureDependencies(var58);
//     boolean var60 = var53.isExternExportsEnabled();
//     var53.setCheckCaja(false);
//     var53.setGroupVariableDeclarations(true);
//     java.util.Map var65 = var53.getDefineReplacements();
//     var37.setPropertyInvalidationErrors(var65);
//     var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
//     boolean var68 = var31.canBeCalled();
//     boolean var69 = var31.isUnknownType();
//     com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
//     java.lang.String var72 = var31.getNormalizedReferenceName();
//     java.lang.String var73 = var31.toDebugHashCodeString();
//     var31.clearCachedValues();
//     int var75 = var31.getMaxArguments();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var73 + "' != '" + "function (): {397077087}"+ "'", var73.equals("function (): {397077087}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var75 == 0);
// 
//   }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test442"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    var1.removeAll();
    int var11 = var1.getDepth();
    int var12 = var1.getDepth();
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("");
    var1.addDependency(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test443"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var2 = null;
    var1.setStripTypes(var2);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var5 = var4.getDirectedGraphNodes();
    java.util.List var6 = var4.getEdges();
    var1.setManageClosureDependencies(var6);
    var1.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.jscomp.JSError var15 = null;
    com.google.javascript.jscomp.CheckLevel var16 = var14.level(var15);
    var1.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var14);
    com.google.javascript.jscomp.graph.GraphNode var18 = var0.getNode((java.lang.Object)var14);
    var0.pushNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    int var26 = var24.getSourceOffset();
    com.google.javascript.rhino.Node var27 = var24.removeFirstChild();
    com.google.javascript.jscomp.graph.GraphNode var28 = var20.getNode((java.lang.Object)var24);
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.jscomp.SourceAst var32 = null;
    com.google.javascript.rhino.InputId var33 = null;
    com.google.javascript.jscomp.CompilerInput var35 = new com.google.javascript.jscomp.CompilerInput(var32, var33, true);
    com.google.javascript.jscomp.JSModule var36 = var35.getModule();
    var30.add(var35);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var38 = var20.createDirectedGraphNode((java.lang.Object)var30);
    java.util.List var39 = var0.getNeighborNodes(var38);
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    boolean var49 = var45.isOptionalArg();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var51 = new com.google.javascript.rhino.Node(0, var45, var50);
    var50.setSourceEncodedPositionForTree(0);
    boolean var54 = var50.isHook();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var55 = var0.getDirectedGraphNode((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test444"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var8 = var6.isConstantKey("2014/12/24 11:10");
    java.util.Collection var9 = var6.getAssertionFunctions();
    java.lang.String var10 = var6.getAbstractMethodName();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var15, var20);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var22 = var6.getClassesDefinedByCall(var15);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    boolean var28 = var23.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isOptionalArg();
    java.lang.String var40 = var32.toString(false, false, true);
    java.util.List var41 = var23.identifyTypeDeclarationCall(var32);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var42 = var6.getClassesDefinedByCall(var32);
    java.lang.String var43 = var3.extractClassNameIfRequire(var5, var32);
    boolean var44 = var32.isRegExp();
    java.lang.String var45 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var32);
    boolean var46 = var32.isThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "goog.abstractMethod"+ "'", var10.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "BANG"+ "'", var40.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test445"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordPreserveTry();
    com.google.javascript.rhino.JSDocInfoBuilder var4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var4.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    java.lang.Object var26 = null;
    var11.putProp(0, var26);
    com.google.javascript.rhino.JSTypeExpression var29 = new com.google.javascript.rhino.JSTypeExpression(var11, "()");
    com.google.javascript.rhino.JSTypeExpression var30 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var29);
    boolean var31 = var4.recordExtendedInterface(var29);
    boolean var32 = var1.recordExtendedInterface(var29);
    com.google.javascript.rhino.Node var33 = var29.getRoot();
    var33.removeProp((-1));
    com.google.javascript.jscomp.ClosureCodingConvention var36 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var38 = var36.isConstantKey("2014/12/24 11:10");
    java.util.Collection var39 = var36.getAssertionFunctions();
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var43.setJSType(var44);
    boolean var46 = var43.isScript();
    com.google.javascript.rhino.Node var47 = var43.removeFirstChild();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var51 = var50.isGetterDef();
    boolean var52 = var50.isAdd();
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    boolean var59 = var56.isVarArgs();
    com.google.javascript.rhino.Node var61 = var56.getChildAtIndex(1);
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    com.google.javascript.rhino.JSDocInfo var68 = var65.getJSDocInfo();
    com.google.javascript.rhino.Node var69 = var56.copyInformationFrom(var65);
    java.lang.String var70 = var69.toStringTree();
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = var74.getNext();
    com.google.javascript.rhino.Node var76 = var72.srcrefTree(var74);
    boolean var78 = var74.getBooleanProp(100);
    int var79 = var74.getSideEffectFlags();
    boolean var80 = var74.isDefaultCase();
    com.google.javascript.rhino.Node var81 = new com.google.javascript.rhino.Node(1, var50, var69, var74);
    java.lang.String var82 = var36.extractClassNameIfProvide(var43, var74);
    boolean var83 = var43.isGetterDef();
    var43.detachChildren();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var85 = com.google.javascript.rhino.IR.sub(var33, var43);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var70.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test446"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var16.unregisterPropertyOnType("Unversioned directory", var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.block(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var16.createFunctionTypeWithVarArgs(var20, var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var28 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    boolean var64 = var28.addVarArgs(var63);
    boolean var65 = var63.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.FunctionType var77 = var16.createConstructorType(var63, var75);
    com.google.javascript.rhino.jstype.JSType var79 = var77.getPropertyType("");
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var82 = var10.defineSynthesizedProperty("BANG 0\n    STRING hi 0 [length: 2]\n", var79, var81);
    com.google.javascript.rhino.jstype.FunctionType var83 = var10.toMaybeFunctionType();
    var10.clearCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test447"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.Set var3 = var1.getThisAndAllDependencies();
    var1.clearAsts();
    com.google.javascript.jscomp.SourceFile.Generator var6 = null;
    com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)", var6);
    var1.addFirst(var7);
    int var9 = var1.getDepth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test448"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("CONTINUE", var1);
    com.google.javascript.jscomp.Region var4 = var2.getRegion(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test449"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setTightenTypes(true);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var7 = var0.getLanguageIn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test450"); }


    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var3, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var6 = new com.google.javascript.jscomp.DiagnosticType[] { var5};
    com.google.javascript.jscomp.DiagnosticGroup var7 = new com.google.javascript.jscomp.DiagnosticGroup(var6);
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    boolean var15 = var8.isExternExportsEnabled();
    var8.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var22 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make(var20, var22);
    int var24 = var23.getCharno();
    com.google.javascript.jscomp.CheckLevel var25 = var23.getDefaultLevel();
    var8.setReportUnknownTypes(var25);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var27 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var7, var25);
    java.lang.String var28 = var7.toString();
    com.google.javascript.jscomp.DiagnosticGroup[] var29 = new com.google.javascript.jscomp.DiagnosticGroup[] { var7};
    com.google.javascript.jscomp.DiagnosticGroup var30 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var29);
    com.google.javascript.jscomp.DiagnosticGroup var31 = new com.google.javascript.jscomp.DiagnosticGroup(var29);
    com.google.javascript.jscomp.DiagnosticGroup var32 = new com.google.javascript.jscomp.DiagnosticGroup(var29);
    com.google.javascript.jscomp.DiagnosticGroup var33 = new com.google.javascript.jscomp.DiagnosticGroup("function (): {869482344}", var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test451() {}
//   public void test451() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test451"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     boolean var22 = var20.isExtern();
//     com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
//     java.lang.String var24 = var20.toString();
//     boolean var25 = var20.isExtern();
//     com.google.javascript.jscomp.JSModule var26 = var20.getModule();
//     boolean var27 = var20.isExtern();
//     java.lang.String var29 = var20.getLine((-19));
// 
//   }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test452"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("()");
    boolean var2 = var1.isGetterDef();
    var1.setQuotedString();
    var1.setLength(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test453"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.Node var19 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var20 = var10.useSourceInfoFromForTree(var16);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    boolean var30 = var24.isBlock();
    com.google.javascript.rhino.Node var31 = var24.getParent();
    boolean var32 = var24.isBreak();
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.InputId var36 = var34.getInputId();
    boolean var37 = var34.isGetProp();
    com.google.javascript.rhino.Node var38 = var24.clonePropsFrom(var34);
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(0, var4, var10, var34);
    java.util.Collection var40 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var10);
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node((-1), (-19), 1);
    com.google.javascript.rhino.Node var45 = var10.srcref(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test454"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.isHidden();
    boolean var20 = var14.isInterface();
    com.google.javascript.rhino.Node var21 = var14.getAssociatedNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test455"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    var1.recordOriginalCommentString("Unversioned directory");
    boolean var8 = var1.addReference("module$2014$12$24 11:10");
    com.google.javascript.jscomp.CompilerOptions var9 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var10 = null;
    var9.setStripTypes(var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var13 = var12.getDirectedGraphNodes();
    java.util.List var14 = var12.getEdges();
    var9.setManageClosureDependencies(var14);
    var9.setDevirtualizePrototypeMethods(true);
    var9.setCollapsePropertiesOnExternTypes(false);
    var9.setSourceMapOutputPath("()");
    var9.setSourceMapOutputPath("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var9.setTightenTypes(false);
    com.google.javascript.jscomp.CompilerOptions var26 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var27 = null;
    var26.setStripTypes(var27);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var30 = var29.getDirectedGraphNodes();
    java.util.List var31 = var29.getEdges();
    var26.setManageClosureDependencies(var31);
    boolean var33 = var26.isExternExportsEnabled();
    var26.setCheckCaja(false);
    java.util.Set var36 = null;
    var26.setReplaceStringsReservedStrings(var36);
    com.google.javascript.rhino.JSDocInfoBuilder var39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var40 = var39.recordExpose();
    boolean var42 = var39.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.InputId var49 = com.google.javascript.jscomp.NodeUtil.getInputId(var46);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    var46.setJSType(var50);
    com.google.javascript.rhino.JSDocInfo var52 = var39.build(var46);
    java.lang.String var53 = var52.getFileOverview();
    java.util.Set var54 = var52.getModifies();
    var26.setReplaceStringsReservedStrings(var54);
    var9.setStripTypes(var54);
    boolean var57 = var1.recordSuppressions(var54);
    com.google.javascript.rhino.JSDocInfoBuilder var59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var60 = var59.recordExpose();
    boolean var62 = var59.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    com.google.javascript.rhino.InputId var69 = com.google.javascript.jscomp.NodeUtil.getInputId(var66);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    var66.setJSType(var70);
    com.google.javascript.rhino.JSDocInfo var72 = var59.build(var66);
    java.lang.String var73 = var72.getFileOverview();
    java.util.Set var74 = var72.getModifies();
    java.util.List var75 = var72.getImplementedInterfaces();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.block(var75);
    boolean var77 = var76.isFalse();
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var79 = var78.cloneTree();
    com.google.javascript.rhino.Node var80 = var76.useSourceInfoFrom(var78);
    com.google.javascript.rhino.JSTypeExpression var82 = new com.google.javascript.rhino.JSTypeExpression(var76, "goog.abstractMethod");
    boolean var83 = var1.recordThisType(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test456"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var2 = var1.siblings();
    com.google.javascript.jscomp.MessageFormatter var3 = null;
    java.util.logging.Logger var4 = null;
    com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var3, var4);
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
    com.google.javascript.jscomp.Scope var7 = var6.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var8 = null;
    com.google.javascript.jscomp.NodeTraversal var9 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var6, var8);
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.script(var15);
    var9.traverseRoots(var15);
    com.google.javascript.rhino.Node var19 = var9.getEnclosingFunction();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    boolean var30 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var28);
    int var31 = var28.getLength();
    com.google.javascript.rhino.Node var32 = null;
    boolean var33 = var28.hasChild(var32);
    com.google.javascript.rhino.Node var34 = var26.useSourceInfoIfMissingFromForTree(var28);
    var28.setSourceFileForTesting("Unversioned directory");
    boolean var37 = var28.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var38 = var28.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var41 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var42 = null;
    java.util.logging.Logger var43 = null;
    com.google.javascript.jscomp.LoggerErrorManager var44 = new com.google.javascript.jscomp.LoggerErrorManager(var42, var43);
    com.google.javascript.jscomp.Compiler var45 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var44);
    com.google.javascript.jscomp.Scope var46 = var45.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var47 = null;
    com.google.javascript.jscomp.NodeTraversal var48 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var45, var47);
    com.google.javascript.jscomp.Scope var49 = var48.getScope();
    com.google.javascript.rhino.Node var50 = null;
    com.google.javascript.jscomp.DiagnosticType var53 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var55 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make(var53, var55);
    com.google.javascript.jscomp.DiagnosticType var57 = var56.getType();
    java.lang.String[] var59 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var60 = var48.makeError(var50, var57, var59);
    com.google.javascript.jscomp.JSError var61 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var28, var41, var59);
    var9.report(var20, var23, var59);
    boolean var63 = var1.isEquivalentTo(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test457"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.TemplateType var1 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test458"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    var1.setLength(1);
    boolean var4 = var1.isNull();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.catchNode(var1, var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test459() {}
//   public void test459() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test459"); }
// 
// 
//     com.google.javascript.jscomp.ErrorManager var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
// 
//   }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test460"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var2.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test461"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var2 = var1.getString();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var5 = var4.siblings();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("hi!");
    var7.setLength(1);
    boolean var10 = var7.isNull();
    com.google.javascript.rhino.Node var11 = var4.useSourceInfoIfMissingFrom(var7);
    com.google.javascript.rhino.Node var12 = var1.useSourceInfoFromForTree(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var13 = var11.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test462"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
    var2.setLength(1);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var7 = var6.siblings();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("hi!");
    var9.setLength(1);
    boolean var12 = var9.isNull();
    com.google.javascript.rhino.Node var13 = var6.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var16 = var15.getString();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("hi!");
    var18.setLength(1);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var2, var9, var15, var18);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("hi!");
    var24.setLength(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var29 = var28.siblings();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("hi!");
    var31.setLength(1);
    boolean var34 = var31.isNull();
    com.google.javascript.rhino.Node var35 = var28.useSourceInfoIfMissingFrom(var31);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var38 = var37.getString();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.name("hi!");
    var40.setLength(1);
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(10, var24, var31, var37, var40);
    com.google.javascript.rhino.Node[] var44 = new com.google.javascript.rhino.Node[] { var24};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.call(var21, var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test463"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    var1.setLength(1);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    var6.setLength(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var11 = var10.siblings();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("hi!");
    var13.setLength(1);
    boolean var16 = var13.isNull();
    com.google.javascript.rhino.Node var17 = var10.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var20 = var19.getString();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("hi!");
    var22.setLength(1);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(10, var6, var13, var19, var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.catchNode(var1, var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test464() {}
//   public void test464() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test464"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.paramList(var0);
// 
//   }

  public void test465() {}
//   public void test465() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test465"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("hi!");
//     var3.setLength(1);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var8 = var7.siblings();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("hi!");
//     var10.setLength(1);
//     boolean var13 = var10.isNull();
//     com.google.javascript.rhino.Node var14 = var7.useSourceInfoIfMissingFrom(var10);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var17 = var16.getString();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("hi!");
//     var19.setLength(1);
//     com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(10, var3, var10, var16, var19);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("hi!");
//     var24.setLength(1);
//     boolean var27 = var24.isNull();
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.function(var0, var10, var24);
// 
//   }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test466"); }


    boolean var1 = com.google.javascript.rhino.ScriptRuntime.isJSLineTerminator(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test467"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var2 = var1.siblings();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("hi!");
    var4.setLength(1);
    boolean var7 = var4.isNull();
    com.google.javascript.rhino.Node var8 = var1.useSourceInfoIfMissingFrom(var4);
    com.google.javascript.rhino.Node[] var9 = new com.google.javascript.rhino.Node[] { var4};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.objectlit(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test468() {}
//   public void test468() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test468"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("hi!");
//     var4.setLength(1);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var9 = var8.siblings();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("hi!");
//     var11.setLength(1);
//     boolean var14 = var11.isNull();
//     com.google.javascript.rhino.Node var15 = var8.useSourceInfoIfMissingFrom(var11);
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var18 = var17.getString();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("hi!");
//     var20.setLength(1);
//     com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(10, var4, var11, var17, var20);
//     com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(0, var1, var4);
// 
//   }

  public void test469() {}
//   public void test469() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test469"); }
// 
// 
//     com.google.javascript.rhino.JSTypeExpression var0 = null;
//     com.google.javascript.rhino.JSTypeExpression var1 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var0);
// 
//   }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test470"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
    var2.setLength(1);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var7 = var6.siblings();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("hi!");
    var9.setLength(1);
    boolean var12 = var9.isNull();
    com.google.javascript.rhino.Node var13 = var6.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var16 = var15.getString();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("hi!");
    var18.setLength(1);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var2, var9, var15, var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.pos(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test471"); }


    com.google.javascript.rhino.jstype.JSType var0 = null;
    com.google.javascript.rhino.jstype.ObjectType var1 = com.google.javascript.rhino.jstype.ObjectType.cast(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test472"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "hi!");
    com.google.javascript.jscomp.parsing.Config var4 = null;
    com.google.javascript.rhino.head.ErrorReporter var5 = null;
    java.util.logging.Logger var6 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.ParserRunner.parse((com.google.javascript.rhino.jstype.StaticSourceFile)var2, "hi!", var4, var5, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test473"); }


    com.google.javascript.jscomp.CompilerOptions var0 = null;
    com.google.javascript.jscomp.DefaultPassConfig var1 = new com.google.javascript.jscomp.DefaultPassConfig(var0);

  }

  public void test474() {}
//   public void test474() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test474"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("", ": hi!", var2);
// 
//   }

  public void test475() {}
//   public void test475() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test475"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var3 = var2.getString();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var6 = var5.siblings();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("hi!");
//     var8.setLength(1);
//     boolean var11 = var8.isNull();
//     com.google.javascript.rhino.Node var12 = var5.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var13 = var2.useSourceInfoFromForTree(var12);
//     boolean var14 = var2.isCatch();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var17 = var16.siblings();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("hi!");
//     var19.setLength(1);
//     boolean var22 = var19.isNull();
//     com.google.javascript.rhino.Node var23 = var16.useSourceInfoIfMissingFrom(var19);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.function(var0, var2, var16);
// 
//   }

  public void test476() {}
//   public void test476() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test476"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var3 = var2.siblings();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("hi!");
//     var5.setLength(1);
//     boolean var8 = var5.isNull();
//     com.google.javascript.rhino.Node var9 = var2.useSourceInfoIfMissingFrom(var5);
//     com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverse(var0, var5, var10);
// 
//   }

  public void test477() {}
//   public void test477() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test477"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var3 = var2.siblings();
//     com.google.javascript.rhino.Node var6 = new com.google.javascript.rhino.Node(1, var2, 100, 10);
//     com.google.javascript.rhino.Node var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var10 = var9.siblings();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("hi!");
//     var12.setLength(1);
//     boolean var15 = var12.isNull();
//     com.google.javascript.rhino.Node var16 = var9.useSourceInfoIfMissingFrom(var12);
//     com.google.javascript.rhino.Node var17 = var16.cloneTree();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.hook(var2, var7, var17);
// 
//   }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test478"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("hi!", 'a');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test479() {}
//   public void test479() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test479"); }
// 
// 
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", var1);
//     com.google.javascript.jscomp.Region var4 = var2.getRegion(0);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     com.google.javascript.jscomp.CompilerInput var9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var6, ": hi!", false);
//     java.util.Collection var10 = var6.getRequires();
// 
//   }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test480"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
    var2.setLength(1);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var7 = var6.siblings();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("hi!");
    var9.setLength(1);
    boolean var12 = var9.isNull();
    com.google.javascript.rhino.Node var13 = var6.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var16 = var15.getString();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("hi!");
    var18.setLength(1);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var2, var9, var15, var18);
    boolean var22 = var2.isObjectLit();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("hi!");
    var24.setLength(1);
    boolean var27 = var24.isNull();
    boolean var28 = var24.isQualifiedName();
    com.google.javascript.rhino.Node var29 = var24.cloneNode();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var32 = var31.siblings();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("hi!");
    var34.setLength(1);
    boolean var37 = var34.isNull();
    com.google.javascript.rhino.Node var38 = var31.useSourceInfoIfMissingFrom(var34);
    boolean var39 = var34.isLabelName();
    com.google.javascript.rhino.jstype.StaticSourceFile var40 = var34.getStaticSourceFile();
    var29.addChildToFront(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.caseNode(var2, var34);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test481() {}
//   public void test481() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test481"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
//     boolean var3 = var2.isString();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.getprop(var0, var2);
// 
//   }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test482"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
    var2.setLength(1);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var7 = var6.siblings();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("hi!");
    var9.setLength(1);
    boolean var12 = var9.isNull();
    com.google.javascript.rhino.Node var13 = var6.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var16 = var15.getString();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("hi!");
    var18.setLength(1);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var2, var9, var15, var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.paramList(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test483() {}
//   public void test483() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test483"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
//     var1.setLength(1);
//     boolean var4 = var1.isNull();
//     boolean var5 = var1.isQualifiedName();
//     com.google.javascript.rhino.Node var6 = var1.cloneNode();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var9 = var8.getString();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.paramList(var8);
//     com.google.javascript.rhino.Node var11 = var6.useSourceInfoFrom(var10);
//     com.google.javascript.rhino.Node var12 = null;
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.assign(var11, var12);
// 
//   }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test484"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var2 = var1.getString();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.paramList(var1);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    var6.setLength(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var11 = var10.siblings();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("hi!");
    var13.setLength(1);
    boolean var16 = var13.isNull();
    com.google.javascript.rhino.Node var17 = var10.useSourceInfoIfMissingFrom(var13);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var20 = var19.getString();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("hi!");
    var22.setLength(1);
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(10, var6, var13, var19, var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.sheq(var1, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test485"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
    var2.setLength(1);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var7 = var6.siblings();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("hi!");
    var9.setLength(1);
    boolean var12 = var9.isNull();
    com.google.javascript.rhino.Node var13 = var6.useSourceInfoIfMissingFrom(var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var16 = var15.getString();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("hi!");
    var18.setLength(1);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var2, var9, var15, var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setDouble((-1.0d));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test486"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    var1.setLength(1);
    boolean var4 = var1.isNull();
    boolean var5 = var1.isQualifiedName();
    com.google.javascript.rhino.Node var6 = var1.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test487"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var4 = var3.siblings();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, var3, 100, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var3, (-1), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test488"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var3 = var2.siblings();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("hi!");
    var5.setLength(1);
    boolean var8 = var5.isNull();
    com.google.javascript.rhino.Node var9 = var2.useSourceInfoIfMissingFrom(var5);
    boolean var10 = var2.isTry();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = com.google.javascript.rhino.ScriptRuntime.getMessage1("hi!", (java.lang.Object)var2);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test489"); }


    com.google.javascript.jscomp.CheckLevel var4 = null;
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.make("", var4, "hi!");
    java.lang.String[] var7 = null;
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make("hi!", 1, 1, var6, var7);
    int var9 = var8.getCharno();
    int var10 = var8.getNodeLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test490"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test491() {}
//   public void test491() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test491"); }
// 
// 
//     com.google.javascript.jscomp.CheckLevel var4 = null;
//     com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.make("", var4, "hi!");
//     java.lang.String[] var7 = null;
//     com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make("hi!", 1, 1, var6, var7);
//     com.google.javascript.jscomp.CheckLevel var9 = null;
//     com.google.javascript.jscomp.MessageFormatter var10 = null;
//     java.lang.String var11 = var8.format(var9, var10);
// 
//   }

  public void test492() {}
//   public void test492() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test492"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var3 = var2.getString();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var6 = var5.siblings();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("hi!");
//     var8.setLength(1);
//     boolean var11 = var8.isNull();
//     com.google.javascript.rhino.Node var12 = var5.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var13 = var2.useSourceInfoFromForTree(var12);
//     com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var13};
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.paramList(var14);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.call(var0, var14);
// 
//   }

  public void test493() {}
//   public void test493() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test493"); }
// 
// 
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", var1);
//     com.google.javascript.jscomp.Region var4 = var2.getRegion(0);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var2, true);
//     java.util.Collection var7 = var6.getRequires();
// 
//   }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test494"); }


    long var1 = com.google.javascript.rhino.ScriptRuntime.testUint32String("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1L));

  }

  public void test495() {}
//   public void test495() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test495"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var2 = var1.siblings();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("hi!");
//     var4.setLength(1);
//     boolean var7 = var4.isNull();
//     com.google.javascript.rhino.Node var8 = var1.useSourceInfoIfMissingFrom(var4);
//     boolean var9 = var1.isTry();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("hi!");
//     var11.setLength(1);
//     boolean var14 = var11.isNull();
//     boolean var15 = var11.isQualifiedName();
//     com.google.javascript.rhino.Node var16 = var11.cloneNode();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var19 = var18.getString();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.paramList(var18);
//     com.google.javascript.rhino.Node var21 = var16.useSourceInfoFrom(var20);
//     com.google.javascript.rhino.Node var22 = null;
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.tryCatchFinally(var1, var20, var22);
// 
//   }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test496"); }


    java.nio.charset.Charset var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile("hi!", var1);
    com.google.javascript.jscomp.Region var4 = var2.getRegion(0);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var2, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = var6.getCode();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test497() {}
//   public void test497() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test497"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var4 = var3.getString();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.paramList(var3);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var8 = var7.getString();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var11 = var10.siblings();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("hi!");
//     var13.setLength(1);
//     boolean var16 = var13.isNull();
//     com.google.javascript.rhino.Node var17 = var10.useSourceInfoIfMissingFrom(var13);
//     com.google.javascript.rhino.Node var18 = var7.useSourceInfoFromForTree(var17);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("hi!");
//     boolean var21 = var20.isString();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.exprResult(var20);
//     com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(100, var1, var3, var7, var20);
// 
//   }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test498"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var2 = var1.siblings();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("hi!");
    var4.setLength(1);
    boolean var7 = var4.isNull();
    com.google.javascript.rhino.Node var8 = var1.useSourceInfoIfMissingFrom(var4);
    var8.setWasEmptyNode(false);
    com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var8};
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.paramList(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.exprResult(var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test499() {}
//   public void test499() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest9.test499"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.String var3 = var2.getString();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("hi!");
//     java.lang.Iterable var6 = var5.siblings();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("hi!");
//     var8.setLength(1);
//     boolean var11 = var8.isNull();
//     com.google.javascript.rhino.Node var12 = var5.useSourceInfoIfMissingFrom(var8);
//     com.google.javascript.rhino.Node var13 = var2.useSourceInfoFromForTree(var12);
//     com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var13};
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.paramList(var14);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.doNode(var0, var15);
// 
//   }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest9.test500"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.String var2 = var1.getString();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("hi!");
    java.lang.Iterable var5 = var4.siblings();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("hi!");
    var7.setLength(1);
    boolean var10 = var7.isNull();
    com.google.javascript.rhino.Node var11 = var4.useSourceInfoIfMissingFrom(var7);
    com.google.javascript.rhino.Node var12 = var1.useSourceInfoFromForTree(var11);
    com.google.javascript.rhino.Node[] var13 = new com.google.javascript.rhino.Node[] { var12};
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.paramList(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.objectlit(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "hi!"+ "'", var2.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

}
