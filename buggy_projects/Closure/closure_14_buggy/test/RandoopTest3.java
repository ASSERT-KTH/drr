
import junit.framework.*;

public class RandoopTest3 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test1"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.cloneNode();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    com.google.javascript.rhino.Node var10 = var7.cloneNode();
    var5.addChildrenToFront(var10);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, var5, (-1), 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var15 = var5.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test2"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    var0.setRewriteFunctionExpressions(true);
    java.io.PrintStream var8 = null;
    com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler(var8);
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    com.google.javascript.rhino.JSDocInfoBuilder var18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var19 = var18.recordExpose();
    boolean var21 = var18.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.InputId var28 = com.google.javascript.jscomp.NodeUtil.getInputId(var25);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var25.setJSType(var29);
    com.google.javascript.rhino.JSDocInfo var31 = var18.build(var25);
    java.lang.String var32 = var31.getFileOverview();
    java.util.Set var33 = var31.getModifies();
    java.util.List var34 = var31.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    var35.setManageClosureDependencies(var40);
    var35.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var35.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var47 = null;
    var35.setSourceMapDetailLevel(var47);
    var9.<com.google.javascript.jscomp.SourceFile>initModules(var15, var34, var35);
    com.google.javascript.jscomp.deps.SortedDependencies var50 = new com.google.javascript.jscomp.deps.SortedDependencies(var15);
    com.google.javascript.rhino.JSDocInfoBuilder var52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var53 = var52.recordExpose();
    boolean var55 = var52.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.InputId var62 = com.google.javascript.jscomp.NodeUtil.getInputId(var59);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var59.setJSType(var63);
    com.google.javascript.rhino.JSDocInfo var65 = var52.build(var59);
    java.lang.String var66 = var65.getFileOverview();
    java.util.Set var67 = var65.getModifies();
    java.util.List var68 = var65.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var69 = var65.getType();
    java.util.List var70 = var65.getImplementedInterfaces();
    java.util.List var71 = var50.getSortedDependenciesOf(var70);
    java.util.List var72 = var50.getInputsWithoutProvides();
    var0.setReplaceStringsConfiguration("function (): {1883749358}", var72);
    var0.setRemoveAbstractMethods(false);
    var0.setRuntimeTypeCheckLogFunction("BANG 0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test3"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("(module$2014$12$24 11:10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test4"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.jscomp.CodingConvention.Bind var16 = var0.describeFunctionBind(var15);
    com.google.javascript.rhino.InputId var18 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var21 = var19.isConstantKey("2014/12/24 11:10");
    java.lang.String var22 = var19.getAbstractMethodName();
    boolean var23 = var18.equals((java.lang.Object)var22);
    java.lang.String var24 = var18.toString();
    java.lang.String var25 = var18.getIdName();
    var15.setInputId(var18);
    java.lang.String var27 = var18.toString();
    java.lang.String var28 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "goog.abstractMethod"+ "'", var22.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "InputId: "+ "'", var24.equals("InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "InputId: "+ "'", var27.equals("InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "InputId: "+ "'", var28.equals("InputId: "));

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test5"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setGroupVariableDeclarations(true);
    var0.setTightenTypes(true);
    var0.setSourceMapOutputPath("InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test6"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
    var8.setResolveMode(var9);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var11 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var8);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var12 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var8);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var14.unregisterPropertyOnType("Unversioned directory", var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    boolean var20 = var14.canPropertyBeDefined(var18, "BANG");
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
    com.google.javascript.rhino.Node var23 = var14.createParameters(var22);
    boolean var24 = var12.addRequiredParams(var22);
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    com.google.javascript.rhino.Node var33 = var28.getChildAtIndex(1);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.JSDocInfo var40 = var37.getJSDocInfo();
    com.google.javascript.rhino.Node var41 = var28.copyInformationFrom(var37);
    boolean var42 = var28.isVoid();
    com.google.javascript.rhino.Node var43 = var12.newParameterFromNode(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var44 = var6.getObjectLiteralCast(var43);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test7"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
    var3.disableThreads();
    var3.disableThreads();
    com.google.javascript.jscomp.JSError[] var97 = var3.getMessages();
    com.google.javascript.jscomp.CodingConvention var98 = var3.getCodingConvention();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test8"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getReturnDescription();
    boolean var18 = var14.isImplicitCast();
    boolean var19 = var14.hasFileOverview();
    java.lang.String var20 = var14.getVersion();
    java.lang.String var21 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "JSDocInfo"+ "'", var21.equals("JSDocInfo"));

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test9"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isVarArgs();
    boolean var9 = var5.isOptionalArg();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(0, var5, var10);
    var10.setSourceEncodedPositionForTree(0);
    int var14 = var10.getChildCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateCodeRoot(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test10"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    boolean var39 = var37.isFunctionPrototypeType();
    boolean var40 = var37.matchesInt32Context();
    boolean var41 = var37.isNominalConstructor();
    com.google.javascript.rhino.jstype.JSType var42 = var37.autobox();
    boolean var43 = var42.isBooleanValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test11"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var68 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var11);
    java.lang.Iterable var70 = var11.getEachReferenceTypeWithProperty("{proxy:{599688852}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test12"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    boolean var5 = var1.recordConsistentIdGenerator();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var9 = var7.getBooleanProp((-1));
    var7.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var13 = new com.google.javascript.rhino.JSTypeExpression(var7, "goog.abstractMethod");
    boolean var14 = var1.recordThrowType(var13);
    boolean var15 = var1.recordExterns();
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var17.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var17.markText("(InputId: )", 100, 1, 3, 1);
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var30 = var28.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var31 = null;
    boolean var33 = var28.recordThrowDescription(var31, "()");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    boolean var56 = var28.recordEnumParameterType(var55);
    boolean var57 = var17.recordImplementedInterface(var55);
    boolean var58 = var1.recordImplementedInterface(var55);
    boolean var60 = var1.recordLends("BANG");
    boolean var61 = var1.recordPreserveTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test13"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    java.lang.Iterable var39 = var1.getEachReferenceTypeWithProperty("function (): {1096500211}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test14() {}
//   public void test14() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test14"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     var0.setCheckCaja(false);
//     java.util.Set var10 = null;
//     var0.setReplaceStringsReservedStrings(var10);
//     var0.setCrossModuleMethodMotion(false);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var15 = var14.getDirectedGraphNodes();
//     java.util.List var16 = var14.getEdges();
//     var0.setManageClosureDependencies(var16);
//     com.google.javascript.jscomp.CompilerOptions.Reach var18 = null;
//     var0.setRemoveUnusedVariable(var18);
// 
//   }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test15"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setReplaceStringsPlaceholderToken("(hi)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test16() {}
//   public void test16() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test16"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
//     com.google.javascript.rhino.Node var1 = null;
//     var0.validateScript(var1);
// 
//   }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test17"); }


    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var2 = null;
    var1.setStripTypes(var2);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var5 = var4.getDirectedGraphNodes();
    java.util.List var6 = var4.getEdges();
    var1.setManageClosureDependencies(var6);
    boolean var8 = var1.isExternExportsEnabled();
    var1.setManageClosureDependencies(true);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var12 = null;
    var11.setStripTypes(var12);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var15 = var14.getDirectedGraphNodes();
    java.util.List var16 = var14.getEdges();
    var11.setManageClosureDependencies(var16);
    boolean var18 = var11.isExternExportsEnabled();
    var11.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var25 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make(var23, var25);
    int var27 = var26.getCharno();
    com.google.javascript.jscomp.CheckLevel var28 = var26.getDefaultLevel();
    var11.setReportUnknownTypes(var28);
    var1.setCheckUnreachableCode(var28);
    com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.make("function (): {1883749358}", var28, "goog.exportProperty");
    com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var34 = null;
    var33.setStripTypes(var34);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var37 = var36.getDirectedGraphNodes();
    java.util.List var38 = var36.getEdges();
    var33.setManageClosureDependencies(var38);
    var33.setDevirtualizePrototypeMethods(true);
    var33.setInlineLocalVariables(false);
    var33.setFoldConstants(false);
    var33.setAssumeStrictThis(false);
    boolean var48 = var33.assumeStrictThis();
    com.google.javascript.jscomp.SourceMap.Format var49 = null;
    var33.setSourceMapFormat(var49);
    var33.resetWarningsGuard();
    var33.setRemoveUnusedClassProperties(false);
    boolean var54 = var32.equals((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test18"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.String var28 = var10.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var29 = var10.getJSDocInfo();
    boolean var30 = var10.isRecordType();
    var10.clearCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test19"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isCase();
    com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    java.lang.String var12 = var11.toString();
    var1.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var11);
    int var14 = var1.getLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test20"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newExpr(var0);
    boolean var3 = var0.isScript();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test21() {}
//   public void test21() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test21"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
//     com.google.javascript.jscomp.JSSourceFile var8 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var9 = new com.google.javascript.jscomp.JSSourceFile[] { var8};
//     com.google.javascript.jscomp.JSModule[] var10 = null;
//     com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var12 = null;
//     var11.setStripTypes(var12);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var14 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var15 = var14.getDirectedGraphNodes();
//     java.util.List var16 = var14.getEdges();
//     var11.setManageClosureDependencies(var16);
//     boolean var18 = var11.isExternExportsEnabled();
//     var11.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var25 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make(var23, var25);
//     int var27 = var26.getCharno();
//     com.google.javascript.jscomp.CheckLevel var28 = var26.getDefaultLevel();
//     var11.setReportUnknownTypes(var28);
//     var11.setAmbiguateProperties(true);
//     com.google.javascript.rhino.JSDocInfoBuilder var33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var34 = var33.recordExpose();
//     boolean var36 = var33.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var41 = var40.getNext();
//     com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
//     com.google.javascript.rhino.InputId var43 = com.google.javascript.jscomp.NodeUtil.getInputId(var40);
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     var40.setJSType(var44);
//     com.google.javascript.rhino.JSDocInfo var46 = var33.build(var40);
//     java.lang.String var47 = var46.getFileOverview();
//     com.google.javascript.rhino.JSTypeExpression var48 = var46.getType();
//     java.util.Set var49 = var46.getSuppressions();
//     var11.setStripTypePrefixes(var49);
//     com.google.javascript.jscomp.CssRenamingMap var51 = null;
//     var11.setCssRenamingMap(var51);
//     com.google.javascript.jscomp.Result var53 = var3.compile(var9, var10, var11);
// 
//   }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test22"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     boolean var22 = var20.isExtern();
//     com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
//     java.lang.String var24 = var20.toString();
//     com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var27 = var26.getDependencies();
//     int var28 = var26.getDepth();
//     var26.clearAsts();
//     com.google.javascript.rhino.JSDocInfoBuilder var31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var32 = var31.recordExpose();
//     boolean var33 = var31.recordExterns();
//     com.google.javascript.rhino.JSTypeExpression var35 = null;
//     boolean var36 = var31.recordParameter("Unversioned directory", var35);
//     com.google.javascript.rhino.JSTypeExpression var37 = null;
//     boolean var39 = var31.recordThrowDescription(var37, "");
//     com.google.javascript.jscomp.SourceFile var44 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     var31.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var44, 0, 0);
//     java.io.Reader var48 = var44.getCodeReader();
//     var26.add(var44);
//     int var50 = var26.getDepth();
//     com.google.javascript.jscomp.Compiler var51 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var52 = var51.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var53 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var51);
//     com.google.javascript.jscomp.ErrorManager var54 = var51.getErrorManager();
//     var26.sortInputsByDeps(var51);
//     java.util.List var56 = var26.getDependencies();
//     com.google.javascript.jscomp.SourceFile var60 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
//     int var62 = var60.getColumnOfOffset(10);
//     var26.addFirst(var60);
//     var20.setSourceFile(var60);
// 
//   }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test23"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.Scope var7 = var6.getScope();
    int var8 = var6.getLineNumber();
    com.google.javascript.rhino.Node var9 = var6.getCurrentNode();
    com.google.javascript.rhino.Node var10 = var6.getEnclosingFunction();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.Node.newNumber(100.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.traverse(var12);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test24"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    boolean var32 = var0.shouldColorizeErrorOutput();
    var0.setMarkNoSideEffectCalls(false);
    var0.setReplaceStringsPlaceholderToken("(module$2014$12$24 11:10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test25() {}
//   public void test25() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test25"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
//     var6.traverseRoots(var12);
//     com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.continueNode();
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = var25.getNext();
//     boolean var27 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var25);
//     int var28 = var25.getLength();
//     com.google.javascript.rhino.Node var29 = null;
//     boolean var30 = var25.hasChild(var29);
//     com.google.javascript.rhino.Node var31 = var23.useSourceInfoIfMissingFromForTree(var25);
//     var25.setSourceFileForTesting("Unversioned directory");
//     boolean var34 = var25.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var35 = var25.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var38 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var39 = null;
//     java.util.logging.Logger var40 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var41 = new com.google.javascript.jscomp.LoggerErrorManager(var39, var40);
//     com.google.javascript.jscomp.Compiler var42 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var41);
//     com.google.javascript.jscomp.Scope var43 = var42.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var44 = null;
//     com.google.javascript.jscomp.NodeTraversal var45 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var42, var44);
//     com.google.javascript.jscomp.Scope var46 = var45.getScope();
//     com.google.javascript.rhino.Node var47 = null;
//     com.google.javascript.jscomp.DiagnosticType var50 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var52 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var50, var52);
//     com.google.javascript.jscomp.DiagnosticType var54 = var53.getType();
//     java.lang.String[] var56 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var57 = var45.makeError(var47, var54, var56);
//     com.google.javascript.jscomp.JSError var58 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var25, var38, var56);
//     var6.report(var17, var20, var56);
//     java.lang.String var60 = var6.getSourceName();
//     com.google.javascript.jscomp.JSModule var61 = var6.getModule();
// 
//   }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test26"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordMeaning("Unversioned directory");
    boolean var6 = var1.recordReturnDescription("goog.abstractMethod");
    boolean var7 = var1.recordExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test27"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.matchesNumberContext();
    com.google.javascript.rhino.jstype.FunctionType var66 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var62);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var69 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = var73.getNext();
    boolean var75 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var73);
    int var76 = var73.getLength();
    com.google.javascript.rhino.Node var77 = null;
    boolean var78 = var73.hasChild(var77);
    com.google.javascript.rhino.Node var79 = var71.useSourceInfoIfMissingFromForTree(var73);
    com.google.javascript.jscomp.CodingConvention.Bind var81 = var69.describeFunctionBind(var71, false);
    int var82 = var71.getSourcePosition();
    boolean var83 = var66.defineSynthesizedProperty("function (): {540092593}", var68, var71);
    boolean var84 = var66.isConstructor();
    com.google.javascript.rhino.Node var85 = var66.getParametersNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test28"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    com.google.javascript.jscomp.MessageFormatter var10 = null;
    java.util.logging.Logger var11 = null;
    com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var12);
    com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal var16 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var13, var15);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var18 = null;
    var17.setStripTypes(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    var17.setManageClosureDependencies(var22);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.script(var22);
    var16.traverseRoots(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    var29.setChainCalls(true);
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var32);
    var29.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var33);
    var29.setGatherCssNames(false);
    var5.<com.google.javascript.jscomp.SourceFile>initModules(var22, var28, var29);
    var29.setSkipAllPasses(false);
    var29.setRenamePrefixNamespace("JSDocInfo");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test29"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d, 3, 0);
    com.google.javascript.rhino.jstype.JSType var4 = var3.getJSType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test30"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoAlias();
    boolean var9 = var1.recordDeprecationReason("function (): {176541993}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test31"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.isConsistentIdGenerator();
    com.google.javascript.rhino.Node var20 = var14.getAssociatedNode();
    boolean var21 = var14.hasFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test32"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    boolean var7 = var3.isScript();
    boolean var8 = var3.isLocalResultCall();
    boolean var9 = var3.isParamList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setSideEffectFlags(3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test33() {}
//   public void test33() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test33"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isVarArgs();
//     boolean var9 = var5.isArrayLit();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = var13.getNext();
//     com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
//     boolean var16 = var13.isVarArgs();
//     com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
//     com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
//     boolean var27 = var5.hasChild(var22);
//     boolean var28 = var5.isSwitch();
//     int var29 = var5.getSideEffectFlags();
//     com.google.javascript.rhino.JSDocInfo var30 = var5.getJSDocInfo();
//     var5.setWasEmptyNode(false);
//     boolean var33 = var5.isAssignAdd();
//     com.google.javascript.rhino.Node var34 = null;
//     var1.process(var5, var34);
// 
//   }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test34"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newExpr(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var5 = var3.isConstantKey("2014/12/24 11:10");
    java.util.Collection var6 = var3.getAssertionFunctions();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var10.setJSType(var11);
    boolean var13 = var10.isScript();
    com.google.javascript.rhino.Node var14 = var10.removeFirstChild();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var18 = var17.isGetterDef();
    boolean var19 = var17.isAdd();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    com.google.javascript.rhino.Node var28 = var23.getChildAtIndex(1);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.JSDocInfo var35 = var32.getJSDocInfo();
    com.google.javascript.rhino.Node var36 = var23.copyInformationFrom(var32);
    java.lang.String var37 = var36.toStringTree();
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var45 = var41.getBooleanProp(100);
    int var46 = var41.getSideEffectFlags();
    boolean var47 = var41.isDefaultCase();
    com.google.javascript.rhino.Node var48 = new com.google.javascript.rhino.Node(1, var17, var36, var41);
    java.lang.String var49 = var3.extractClassNameIfProvide(var10, var41);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
    var50.setSourceFileForTesting("null(null)");
    boolean var53 = var50.isDo();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var54 = var3.getDelegateRelationship(var50);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.addChildAfter(var50, var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var37.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test35"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineLocalVariables(false);
    var0.setRemoveTryCatchFinally(false);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test36"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setMarkNoSideEffectCalls(false);
    var0.setLooseTypes(true);
    com.google.javascript.jscomp.MessageBundle var19 = null;
    var0.setMessageBundle(var19);
    var0.setPrintInputDelimiter(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test37"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.paramList(var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.InputId var10 = com.google.javascript.jscomp.NodeUtil.getInputId(var7);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var7.setJSType(var11);
    boolean var13 = var3.hasChild(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newExpr(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test38"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.Node var15 = var8.getLastChild();
    java.lang.Object var17 = var8.getProp(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test39"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.util.List var54 = var53.getThrownTypes();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isOr();
    var53.setAssociatedNode(var58);
    boolean var63 = var53.isNoSideEffects();
    java.util.List var64 = var53.getThrownTypes();
    var36.setPropertyJSDocInfo("ERROR", var53);
    java.lang.String var66 = var53.getLendsName();
    boolean var67 = var53.hasReturnType();
    com.google.javascript.rhino.JSDocInfo.Visibility var68 = var53.getVisibility();
    boolean var69 = var53.isExterns();
    java.util.Collection var70 = var53.getMarkers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test40"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasCachedValues();
    java.util.Set var12 = var10.getPropertyNames();
    com.google.javascript.rhino.jstype.ParameterizedType var13 = var10.toMaybeParameterizedType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var14 = var10.cloneWithoutArrowType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test41"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceAst var9 = var6.getSourceAst();
    com.google.javascript.jscomp.SourceAst var10 = var6.getSourceAst();
    com.google.javascript.rhino.InputId var11 = var6.getInputId();
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    int var15 = var13.getDepth();
    java.util.List var16 = var13.getRequires();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setModule(var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test42"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("LABEL_NAME hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test43"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    boolean var47 = var40.equals((java.lang.Object)var46);
    var46.reportCodeChange();
    int var49 = var46.getWarningCount();
    java.lang.String var50 = var46.getAstDotGraph();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));

  }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test44"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     java.util.logging.Logger var7 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var7);
//     com.google.javascript.jscomp.JSError[] var9 = var8.getWarnings();
//     var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var8);
//     com.google.javascript.jscomp.JSSourceFile var11 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var12 = new com.google.javascript.jscomp.JSSourceFile[] { var11};
//     com.google.javascript.jscomp.JSSourceFile var13 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var14 = new com.google.javascript.jscomp.JSSourceFile[] { var13};
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var16 = null;
//     var15.setStripTypes(var16);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var19 = var18.getDirectedGraphNodes();
//     java.util.List var20 = var18.getEdges();
//     var15.setManageClosureDependencies(var20);
//     boolean var22 = var15.isExternExportsEnabled();
//     var15.setCheckCaja(false);
//     java.util.Set var25 = null;
//     var15.setReplaceStringsReservedStrings(var25);
//     var15.setDefineToBooleanLiteral("BANG", false);
//     var15.setInlineGetters(false);
//     boolean var32 = var15.isExternExportsEnabled();
//     var15.setInlineFunctions(false);
//     com.google.javascript.jscomp.Result var35 = var3.compile(var12, var14, var15);
// 
//   }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test45"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    boolean var10 = var5.isScript();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isArrayLit();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var22 = var21.isGetterDef();
    var21.putIntProp((-1), 10);
    var15.addChildrenToFront(var21);
    int var27 = var21.getLength();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.Node var34 = var31.removeFirstChild();
    com.google.javascript.rhino.Node var35 = var21.useSourceInfoFromForTree(var31);
    boolean var36 = var21.isDebugger();
    var21.setType(0);
    var5.putProp(2, (java.lang.Object)var21);
    boolean var40 = var21.isDefaultCase();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.labelName("InputId: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.propdef(var21, var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test46"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    var0.setInferTypes(true);
    var0.setLocale("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test47"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setGeneratePseudoNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test48"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    int var11 = var4.getCharno();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateRoot(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test49"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isInstanceOf();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    var6.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var1.addChildToFront(var6);
    boolean var11 = var6.isThrow();
    boolean var13 = var6.getBooleanProp(154);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test50() {}
//   public void test50() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test50"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getProvides();
//     com.google.javascript.jscomp.CompilerInput var13 = var10.getByName("()");
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.SourceAst var18 = var17.getAst();
//     var10.add(var17);
//     var3.setModule(var10);
//     var3.removeRequire("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)");
// 
//   }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test51"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    var0.setPreferLineBreakAtEndOfFile(false);
    var0.setIdeMode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test52"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var5);
    com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.error("goog.exportProperty", "");
    com.google.javascript.jscomp.DiagnosticType[] var11 = new com.google.javascript.jscomp.DiagnosticType[] { var10};
    com.google.javascript.jscomp.DiagnosticGroup var12 = new com.google.javascript.jscomp.DiagnosticGroup(var11);
    boolean var13 = var7.enables(var12);
    com.google.javascript.jscomp.WarningsGuard[] var14 = new com.google.javascript.jscomp.WarningsGuard[] { var7};
    com.google.javascript.jscomp.ComposeWarningsGuard var15 = new com.google.javascript.jscomp.ComposeWarningsGuard(var14);
    com.google.javascript.jscomp.ComposeWarningsGuard var16 = new com.google.javascript.jscomp.ComposeWarningsGuard(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test53"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var4 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var5 = com.google.javascript.jscomp.JSError.make(var2, var4);
    com.google.javascript.jscomp.DiagnosticType var6 = var5.getType();
    com.google.javascript.jscomp.DiagnosticType var7 = var5.getType();
    com.google.javascript.jscomp.DiagnosticGroup var8 = com.google.javascript.jscomp.DiagnosticGroup.forType(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test54() {}
//   public void test54() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test54"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.JSModule var7 = var3.getModule();
//     java.lang.String var9 = var3.getLine((-1));
// 
//   }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test55"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var3.isNull();
    boolean var18 = var3.isOr();
    boolean var19 = var3.isDo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test56"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    boolean var81 = var39.isParameterizedType();
    com.google.javascript.rhino.jstype.EnumElementType var82 = var39.toMaybeEnumElementType();
    boolean var83 = var39.isGlobalThisType();
    boolean var84 = var39.isRegexpType();
    boolean var85 = var39.isFunctionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test57"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    boolean var58 = var56.isFunctionPrototypeType();
    boolean var59 = var56.isGlobalThisType();
    boolean var60 = var56.isBooleanObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test58"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var1, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var4 = new com.google.javascript.jscomp.DiagnosticType[] { var3};
    com.google.javascript.jscomp.DiagnosticGroup var5 = new com.google.javascript.jscomp.DiagnosticGroup(var4);
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var7 = null;
    var6.setStripTypes(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    java.util.List var11 = var9.getEdges();
    var6.setManageClosureDependencies(var11);
    boolean var13 = var6.isExternExportsEnabled();
    var6.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var20 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make(var18, var20);
    int var22 = var21.getCharno();
    com.google.javascript.jscomp.CheckLevel var23 = var21.getDefaultLevel();
    var6.setReportUnknownTypes(var23);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var25 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var5, var23);
    com.google.javascript.jscomp.CheckLevel var27 = null;
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var27, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var30 = new com.google.javascript.jscomp.DiagnosticType[] { var29};
    com.google.javascript.jscomp.DiagnosticGroup var31 = new com.google.javascript.jscomp.DiagnosticGroup(var30);
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    boolean var39 = var32.isExternExportsEnabled();
    var32.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var46 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make(var44, var46);
    int var48 = var47.getCharno();
    com.google.javascript.jscomp.CheckLevel var49 = var47.getDefaultLevel();
    var32.setReportUnknownTypes(var49);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var51 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var31, var49);
    java.lang.String var52 = var31.toString();
    boolean var53 = var25.disables(var31);
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    var54.setDevirtualizePrototypeMethods(true);
    var54.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var66 = null;
    var65.setBrokenClosureRequiresLevel(var66);
    var65.setLocale("");
    var65.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var72 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var73 = null;
    var72.setStripTypes(var73);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var76 = var75.getDirectedGraphNodes();
    java.util.List var77 = var75.getEdges();
    var72.setManageClosureDependencies(var77);
    boolean var79 = var72.isExternExportsEnabled();
    var72.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var84 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var86 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var87 = com.google.javascript.jscomp.JSError.make(var84, var86);
    int var88 = var87.getCharno();
    com.google.javascript.jscomp.CheckLevel var89 = var87.getDefaultLevel();
    var72.setReportUnknownTypes(var89);
    var65.setBrokenClosureRequiresLevel(var89);
    var54.setCheckUnreachableCode(var89);
    boolean var94 = var89.equals((java.lang.Object)(byte)10);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var95 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var31, var89);
    java.lang.String var96 = var89.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "ERROR"+ "'", var96.equals("ERROR"));

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test59"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    boolean var31 = var1.recordFileOverview("");
    boolean var32 = var1.recordNoTypeCheck();
    boolean var33 = var1.isInterfaceRecorded();
    boolean var35 = var1.recordFileOverview("hi");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test60"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    java.util.logging.Logger var3 = null;
    com.google.javascript.jscomp.LoggerErrorManager var4 = new com.google.javascript.jscomp.LoggerErrorManager(var3);
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var4);
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var4);
    com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make(var9, var14);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newNumber(0.0d);
    boolean var19 = var16.equals((java.lang.Object)var18);
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var21 = null;
    var20.setStripTypes(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var24 = var23.getDirectedGraphNodes();
    java.util.List var25 = var23.getEdges();
    var20.setManageClosureDependencies(var25);
    boolean var27 = var20.isExternExportsEnabled();
    var20.setCollapsePropertiesOnExternTypes(false);
    var20.setTransformAMDToCJSModules(false);
    var20.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var34 = var20.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    var35.setManageClosureDependencies(var40);
    var35.setDevirtualizePrototypeMethods(true);
    var35.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var47 = null;
    var46.setBrokenClosureRequiresLevel(var47);
    var46.setLocale("");
    var46.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var65 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var67 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var68 = com.google.javascript.jscomp.JSError.make(var65, var67);
    int var69 = var68.getCharno();
    com.google.javascript.jscomp.CheckLevel var70 = var68.getDefaultLevel();
    var53.setReportUnknownTypes(var70);
    var46.setBrokenClosureRequiresLevel(var70);
    var35.setCheckUnreachableCode(var70);
    var20.setReportUnknownTypes(var70);
    com.google.javascript.jscomp.Compiler var75 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var76 = var75.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var77 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var75);
    com.google.javascript.jscomp.ErrorManager var78 = var75.getErrorManager();
    com.google.javascript.jscomp.LightweightMessageFormatter var79 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var75);
    java.lang.String var80 = var16.format(var70, (com.google.javascript.jscomp.MessageFormatter)var79);
    com.google.javascript.jscomp.Compiler var81 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var82 = var81.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var83 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var81);
    com.google.javascript.jscomp.DiagnosticType var86 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var88 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var89 = com.google.javascript.jscomp.JSError.make(var86, var88);
    int var90 = var89.getCharno();
    com.google.javascript.jscomp.CheckLevel var91 = var89.getDefaultLevel();
    java.lang.String var92 = var83.formatError(var89);
    var4.report(var70, var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "ERROR - (InputId: )\n"+ "'", var80.equals("ERROR - (InputId: )\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + ""+ "'", var82.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var92.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test61"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    boolean var19 = var15.isSwitch();
    boolean var20 = var15.isIf();
    com.google.javascript.rhino.Node[] var21 = new com.google.javascript.rhino.Node[] { var15};
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(0, var21, 3, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var5, var10, var21);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test62"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("Unversioned directory");
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var5 = var3.isConstantKey("2014/12/24 11:10");
    java.util.Collection var6 = var3.getAssertionFunctions();
    java.lang.String var7 = var3.getAbstractMethodName();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isOptionalArg();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var18 = new com.google.javascript.rhino.Node(0, var12, var17);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var19 = var3.getClassesDefinedByCall(var12);
    java.lang.String var20 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, var2, var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "goog.abstractMethod"+ "'", var7.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test63"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.isHidden();
    boolean var20 = var14.isInterface();
    boolean var21 = var14.isConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test64"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
//     com.google.javascript.jscomp.SourceAst var5 = null;
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
//     com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
//     var1.add(var8);
//     com.google.javascript.jscomp.MessageFormatter var11 = null;
//     java.util.logging.Logger var12 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var13 = new com.google.javascript.jscomp.LoggerErrorManager(var11, var12);
//     com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var13);
//     com.google.javascript.jscomp.Scope var15 = var14.getTopScope();
//     com.google.javascript.jscomp.Result var16 = var14.getResult();
//     com.google.javascript.jscomp.SourceMap var17 = var14.getSourceMap();
//     com.google.javascript.rhino.Node var18 = var8.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var14);
// 
//   }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test65"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    boolean var22 = var14.isConstant();
    boolean var23 = var14.hasReturnType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test66"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setCheckTypes(false);
    com.google.javascript.jscomp.VariableRenamingPolicy var7 = null;
    var0.setVariableRenaming(var7);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test67"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    boolean var10 = var1.shouldTolerateUndefinedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test68"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setDefineToBooleanLiteral("", true);
    var0.setRemoveUnusedVars(false);
    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var20 = null;
    var0.setAnonymousFunctionNaming(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test69"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.exprResult(var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test70() {}
//   public void test70() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test70"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var6 = var5.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var13 = null;
//     var12.setStripTypes(var13);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var16 = var15.getDirectedGraphNodes();
//     java.util.List var17 = var15.getEdges();
//     var12.setManageClosureDependencies(var17);
//     boolean var19 = var12.isExternExportsEnabled();
//     var12.setCollapsePropertiesOnExternTypes(false);
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = var3.getTypeRegistry();
//     com.google.javascript.rhino.jstype.JSTypeNative var24 = null;
//     com.google.javascript.rhino.jstype.JSType var25 = var23.getNativeType(var24);
// 
//   }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test71"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.JSModule[] var4 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var2);
    com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var6 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var7 = var6.getDirectedGraphNodes();
    java.lang.Iterable var8 = var6.getDirectedGraphNodes();
    java.util.List var9 = var6.getGraphvizNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    boolean var26 = var24.hasType();
    java.util.List var27 = var24.getThrownTypes();
    java.util.List var28 = var5.manageDependencies(var9, var27);
    com.google.javascript.jscomp.JSModuleGraph var29 = new com.google.javascript.jscomp.JSModuleGraph(var27);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    var30.pushEdgeAnnotations();
    java.lang.Iterable var33 = var30.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var36 = var35.recordExpose();
    boolean var38 = var35.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = var42.getNext();
    com.google.javascript.rhino.Node var44 = var40.srcrefTree(var42);
    com.google.javascript.rhino.InputId var45 = com.google.javascript.jscomp.NodeUtil.getInputId(var42);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var42.setJSType(var46);
    com.google.javascript.rhino.JSDocInfo var48 = var35.build(var42);
    java.lang.String var49 = var48.getFileOverview();
    java.util.Set var50 = var48.getModifies();
    java.util.List var51 = var48.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var52 = var30.getNode((java.lang.Object)var48);
    java.util.List var53 = var30.getGraphvizNodes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.JSModule var54 = var29.getDeepestCommonDependencyInclusive((java.util.Collection)var53);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test72"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var0.setNameReferenceGraphPath("BANG");
    var0.setGeneratePseudoNames(true);
    var0.setRecordFunctionInformation(true);
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var22 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make(var20, var22);
    int var24 = var23.getCharno();
    com.google.javascript.jscomp.CheckLevel var25 = var23.getDefaultLevel();
    var0.setReportMissingOverride(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test73"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("(module$2014$12$24 11:10)");

  }

  public void test74() {}
//   public void test74() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test74"); }
// 
// 
//     com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
//     com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
//     com.google.javascript.jscomp.DependencyOptions var4 = var2.setDependencyPruning(true);
//     java.util.Collection var5 = null;
//     com.google.javascript.jscomp.DependencyOptions var6 = var2.setEntryPoints(var5);
// 
//   }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test75"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setTweakToNumberLiteral("INHERITED", (-1));
    var0.setCheckSymbols(false);
    var0.setExternExportsPath("null(null)");
    var0.setAliasKeywords(false);
    var0.setMarkAsCompiled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test76"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    com.google.javascript.rhino.JSDocInfoBuilder var22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var23 = var22.recordExpose();
    boolean var25 = var22.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.InputId var32 = com.google.javascript.jscomp.NodeUtil.getInputId(var29);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var29.setJSType(var33);
    com.google.javascript.rhino.JSDocInfo var35 = var22.build(var29);
    java.lang.String var36 = var35.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var37 = var35.getType();
    java.util.Set var38 = var35.getSuppressions();
    var0.setStripTypePrefixes(var38);
    var0.setRewriteFunctionExpressions(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var42 = var0.getLanguageIn();
    java.lang.String var43 = var42.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ECMASCRIPT3"+ "'", var43.equals("ECMASCRIPT3"));

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test77"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    java.util.List var17 = var16.getThrownTypes();
    java.lang.String var18 = var16.getDeprecationReason();
    java.lang.String var19 = var16.getReturnDescription();
    boolean var20 = var16.isImplicitCast();
    var1.setJSDocInfo(var16);
    boolean var22 = var1.hasChildren();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    int var26 = var24.getSourceOffset();
    com.google.javascript.rhino.Node var27 = var24.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    int var31 = var29.getSourceOffset();
    com.google.javascript.rhino.Node var32 = var29.cloneNode();
    var27.addChildrenToFront(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.Node var41 = var27.useSourceInfoFrom(var37);
    com.google.javascript.rhino.Node var42 = var1.copyInformationFromForTree(var41);
    int var43 = var42.getSourceOffset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2014/12/24 11:10"+ "'", var18.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test78"); }


    java.lang.String var1 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("ERROR - (InputId: )\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$ERROR _ (InputId: )\n"+ "'", var1.equals("module$ERROR _ (InputId: )\n"));

  }

  public void test79() {}
//   public void test79() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test79"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var4);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var6 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var6);
//     com.google.javascript.jscomp.CompilerInput var9 = var3.newExternInput("BANG 0 [source_file: Unversioned directory]\n");
// 
//   }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test80"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    boolean var9 = var6.isAssignAdd();
    int var10 = var4.getIndexOfChild(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.InputId var14 = var12.getInputId();
    com.google.javascript.rhino.Node var15 = var4.useSourceInfoFrom(var12);
    boolean var16 = var4.isDelProp();
    var4.setVarArgs(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test81"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getReturnDescription();
    boolean var18 = var14.isNoSideEffects();
    com.google.javascript.rhino.JSDocInfo.Visibility var19 = var14.getVisibility();
    boolean var20 = var14.isNoCompile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test82"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    var0.setExternExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test83"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.InputId var7 = com.google.javascript.jscomp.NodeUtil.getInputId(var4);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var4.setJSType(var8);
    var4.setCharno(153);
    com.google.javascript.rhino.Node[] var12 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var13 = new com.google.javascript.rhino.Node(100, var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test84"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.Node var19 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var20 = var10.useSourceInfoFromForTree(var16);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    boolean var30 = var24.isBlock();
    com.google.javascript.rhino.Node var31 = var24.getParent();
    boolean var32 = var24.isBreak();
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.InputId var36 = var34.getInputId();
    boolean var37 = var34.isGetProp();
    com.google.javascript.rhino.Node var38 = var24.clonePropsFrom(var34);
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(0, var4, var10, var34);
    com.google.javascript.jscomp.ClosureCodingConvention var40 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var42 = var40.isConstantKey("2014/12/24 11:10");
    java.util.Collection var43 = var40.getAssertionFunctions();
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var47.setJSType(var48);
    boolean var50 = var47.isScript();
    com.google.javascript.rhino.Node var51 = var47.removeFirstChild();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var55 = var54.isGetterDef();
    boolean var56 = var54.isAdd();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    boolean var63 = var60.isVarArgs();
    com.google.javascript.rhino.Node var65 = var60.getChildAtIndex(1);
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = var69.getNext();
    com.google.javascript.rhino.Node var71 = var67.srcrefTree(var69);
    com.google.javascript.rhino.JSDocInfo var72 = var69.getJSDocInfo();
    com.google.javascript.rhino.Node var73 = var60.copyInformationFrom(var69);
    java.lang.String var74 = var73.toStringTree();
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = var78.getNext();
    com.google.javascript.rhino.Node var80 = var76.srcrefTree(var78);
    boolean var82 = var78.getBooleanProp(100);
    int var83 = var78.getSideEffectFlags();
    boolean var84 = var78.isDefaultCase();
    com.google.javascript.rhino.Node var85 = new com.google.javascript.rhino.Node(1, var54, var73, var78);
    java.lang.String var86 = var40.extractClassNameIfProvide(var47, var78);
    com.google.javascript.rhino.Node var87 = var78.cloneNode();
    com.google.javascript.rhino.Node var88 = var39.copyInformationFrom(var78);
    boolean var89 = var78.isFalse();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var74.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test85"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.Scope var7 = var6.getScope();
    com.google.javascript.rhino.Node var8 = null;
    com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var13 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make(var11, var13);
    com.google.javascript.jscomp.DiagnosticType var15 = var14.getType();
    java.lang.String[] var17 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var18 = var6.makeError(var8, var15, var17);
    com.google.javascript.jscomp.Scope var19 = var6.getScope();
    com.google.javascript.jscomp.Compiler var20 = var6.getCompiler();
    java.lang.String var21 = var6.getSourceName();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isVarArgs();
    com.google.javascript.rhino.Node var31 = var26.getChildAtIndex(1);
    com.google.javascript.rhino.Node[] var32 = new com.google.javascript.rhino.Node[] { var26};
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(1, var32, 153, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.traverseRoots(var32);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test86"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    java.util.Set var24 = var14.getParameterNames();
    java.util.List var25 = var14.getImplementedInterfaces();
    int var26 = var14.getImplementedInterfaceCount();
    boolean var27 = var14.isConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test87"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    byte[] var4 = new byte[] { (byte)100};
    var0.setInputPropertyMapSerialized(var4);
    var0.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var8 = var0.getTracerMode();
    var0.setRuntimeTypeCheck(true);
    var0.setRemoveTryCatchFinally(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test88() {}
//   public void test88() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test88"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setAssumeStrictThis(false);
//     var0.skipAllCompilerPasses();
//     com.google.javascript.jscomp.CompilerOptions.Reach var10 = null;
//     var0.setInlineFunctions(var10);
// 
//   }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test89"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var20 = var14.hasTypedefType();
    boolean var21 = var14.isExpose();
    boolean var22 = var14.hasType();
    com.google.javascript.rhino.JSDocInfo.Visibility var23 = var14.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test90"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = var1.getErrorReporter();
    var1.incrementGeneration();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    boolean var15 = var9.canPropertyBeDefined(var13, "BANG");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.Node var18 = var9.createParameters(var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    com.google.javascript.rhino.Node var28 = var23.getChildAtIndex(1);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.JSDocInfo var35 = var32.getJSDocInfo();
    com.google.javascript.rhino.Node var36 = var23.copyInformationFrom(var32);
    java.lang.Object var38 = null;
    var23.putProp(0, var38);
    com.google.javascript.rhino.JSTypeExpression var41 = new com.google.javascript.rhino.JSTypeExpression(var23, "()");
    com.google.javascript.rhino.jstype.StaticScope var42 = null;
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var44.unregisterPropertyOnType("Unversioned directory", var46);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    boolean var50 = var44.canPropertyBeDefined(var48, "BANG");
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.rhino.jstype.JSType[] var52 = new com.google.javascript.rhino.jstype.JSType[] { var51};
    com.google.javascript.rhino.Node var53 = var44.createParameters(var52);
    com.google.javascript.rhino.jstype.JSType var54 = var41.evaluate(var42, var44);
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var57 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var56);
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    boolean var64 = var61.isVarArgs();
    com.google.javascript.rhino.Node var66 = var61.getChildAtIndex(1);
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.JSDocInfo var73 = var70.getJSDocInfo();
    com.google.javascript.rhino.Node var74 = var61.copyInformationFrom(var70);
    java.lang.Object var76 = null;
    var61.putProp(0, var76);
    com.google.javascript.rhino.JSTypeExpression var79 = new com.google.javascript.rhino.JSTypeExpression(var61, "()");
    com.google.javascript.rhino.jstype.StaticScope var80 = null;
    com.google.javascript.rhino.ErrorReporter var81 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var82 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var81);
    com.google.javascript.rhino.jstype.JSType var84 = null;
    var82.unregisterPropertyOnType("Unversioned directory", var84);
    com.google.javascript.rhino.jstype.JSType var86 = null;
    boolean var88 = var82.canPropertyBeDefined(var86, "BANG");
    com.google.javascript.rhino.jstype.JSType var89 = null;
    com.google.javascript.rhino.jstype.JSType[] var90 = new com.google.javascript.rhino.jstype.JSType[] { var89};
    com.google.javascript.rhino.Node var91 = var82.createParameters(var90);
    com.google.javascript.rhino.jstype.JSType var92 = var79.evaluate(var80, var82);
    boolean var93 = var57.addVarArgs(var92);
    com.google.javascript.rhino.jstype.JSType var94 = var54.getLeastSupertype(var92);
    boolean var95 = var94.isNullType();
    boolean var96 = var9.declareType("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n", var94);
    boolean var97 = var94.isParameterizedType();
    com.google.javascript.rhino.jstype.JSType var99 = var1.getGreatestSubtypeWithProperty(var94, "goog.abstractMethod");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test91"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var49 = var48.isGetterDef();
    boolean var50 = var48.isNE();
    boolean var51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var48);
    com.google.javascript.rhino.Node var52 = var7.clonePropsFrom(var48);
    boolean var53 = var48.isInstanceOf();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test92() {}
//   public void test92() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test92"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
//     var1.setResolveMode(var2);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     com.google.javascript.rhino.Node var14 = var9.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = var18.getNext();
//     com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
//     com.google.javascript.rhino.JSDocInfo var21 = var18.getJSDocInfo();
//     com.google.javascript.rhino.Node var22 = var9.copyInformationFrom(var18);
//     java.lang.Object var24 = null;
//     var9.putProp(0, var24);
//     com.google.javascript.rhino.JSTypeExpression var27 = new com.google.javascript.rhino.JSTypeExpression(var9, "()");
//     com.google.javascript.rhino.jstype.StaticScope var28 = null;
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     var30.unregisterPropertyOnType("Unversioned directory", var32);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     boolean var36 = var30.canPropertyBeDefined(var34, "BANG");
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
//     com.google.javascript.rhino.Node var39 = var30.createParameters(var38);
//     com.google.javascript.rhino.jstype.JSType var40 = var27.evaluate(var28, var30);
//     com.google.javascript.rhino.jstype.JSType var41 = var40.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var42 = var41.dereference();
//     java.util.Collection var43 = var1.getDirectImplementors(var42);
//     com.google.javascript.rhino.ErrorReporter var44 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.JSTypeNative var45 = null;
//     com.google.javascript.rhino.jstype.ObjectType var46 = var1.getNativeObjectType(var45);
// 
//   }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test93"); }


    com.google.javascript.rhino.jstype.TernaryValue var1 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(0);
    int var2 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test94"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    boolean var28 = var1.recordInterface();
    boolean var30 = var1.hasParameter("");
    boolean var32 = var1.recordMeaning("(LABEL_NAME hi!)");
    com.google.javascript.rhino.JSDocInfoBuilder var35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var36 = var35.recordExpose();
    boolean var37 = var35.recordExterns();
    boolean var38 = var35.recordNoShadow();
    boolean var40 = var35.recordReturnDescription("()");
    boolean var42 = var35.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var46 = var45.recordExpose();
    boolean var47 = var45.recordExterns();
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    boolean var54 = var51.isVarArgs();
    boolean var55 = var51.isArrayLit();
    com.google.javascript.rhino.Node var56 = var51.getNext();
    var45.markTypeNode(var51, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    boolean var69 = var66.isVarArgs();
    com.google.javascript.rhino.Node var71 = var66.getChildAtIndex(1);
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    com.google.javascript.rhino.JSDocInfo var78 = var75.getJSDocInfo();
    com.google.javascript.rhino.Node var79 = var66.copyInformationFrom(var75);
    java.lang.Object var81 = null;
    var66.putProp(0, var81);
    com.google.javascript.rhino.JSTypeExpression var84 = new com.google.javascript.rhino.JSTypeExpression(var66, "()");
    com.google.javascript.rhino.JSTypeExpression var85 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var84);
    boolean var86 = var45.recordBaseType(var84);
    com.google.javascript.jscomp.MessageFormatter var87 = null;
    java.util.logging.Logger var88 = null;
    com.google.javascript.jscomp.LoggerErrorManager var89 = new com.google.javascript.jscomp.LoggerErrorManager(var87, var88);
    com.google.javascript.jscomp.Compiler var90 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var89);
    boolean var91 = var84.equals((java.lang.Object)var90);
    boolean var92 = var35.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var84);
    boolean var93 = var1.recordParameter("goog.abstractMethod: WARNING - \n", var84);
    boolean var94 = var84.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test95"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    boolean var28 = var24.isNoType();
    com.google.javascript.rhino.jstype.EnumElementType var29 = var24.toMaybeEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test96"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.Region var8 = var3.getRegion(153);
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test97"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var16.isFunction();
    com.google.javascript.jscomp.ClosureCodingConvention var18 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var20 = var18.isConstantKey("2014/12/24 11:10");
    java.util.Collection var21 = var18.getAssertionFunctions();
    com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var25.setJSType(var26);
    boolean var28 = var25.isScript();
    com.google.javascript.rhino.Node var29 = var25.removeFirstChild();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var33 = var32.isGetterDef();
    boolean var34 = var32.isAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.String var52 = var51.toStringTree();
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    boolean var60 = var56.getBooleanProp(100);
    int var61 = var56.getSideEffectFlags();
    boolean var62 = var56.isDefaultCase();
    com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node(1, var32, var51, var56);
    java.lang.String var64 = var18.extractClassNameIfProvide(var25, var56);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var67 = var66.isGetterDef();
    boolean var68 = var66.isNE();
    boolean var69 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var66);
    com.google.javascript.rhino.Node var70 = var25.clonePropsFrom(var66);
    boolean var71 = var70.isThis();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.catchNode(var16, var70);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var52.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test98"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
//     com.google.javascript.jscomp.SourceAst var5 = null;
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
//     com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
//     var1.add(var8);
//     java.lang.String var11 = var8.getCode();
// 
//   }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test99"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    int var15 = var9.getLength();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.Node var22 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var23 = var9.useSourceInfoFromForTree(var19);
    boolean var24 = var9.isDebugger();
    var9.setType(0);
    boolean var27 = var9.wasEmptyNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test100"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    java.util.Set var69 = var31.getPropertyNames();
    boolean var70 = var31.isNoObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test101() {}
//   public void test101() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test101"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var9 = var3.getModule();
//     com.google.javascript.jscomp.Region var11 = var3.getRegion((-1));
// 
//   }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test102"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("module$ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test103() {}
//   public void test103() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test103"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     java.util.List var3 = var1.getRequires();
//     com.google.javascript.jscomp.SourceAst var4 = null;
//     com.google.javascript.rhino.InputId var5 = null;
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
//     com.google.javascript.jscomp.JSModule var8 = var7.getModule();
//     var1.addFirst(var7);
//     boolean var11 = var1.removeByName("{proxy:{599688852}}");
// 
//   }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test104"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.trueNode();
    boolean var1 = var0.isGetterDef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test105"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var14.setDeprecated(false);
    boolean var17 = var14.isNoAlias();
    boolean var18 = var14.hasThisType();
    boolean var19 = var14.containsDeclaration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test106"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var1.markText("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", 2, 0, 153, 0);
    com.google.javascript.rhino.JSTypeExpression var11 = null;
    boolean var12 = var1.recordTypedef(var11);
    boolean var13 = var1.isJavaDispatch();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test107() {}
//   public void test107() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test107"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var9 = null;
//     var8.setStripTypes(var9);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var12 = var11.getDirectedGraphNodes();
//     java.util.List var13 = var11.getEdges();
//     var8.setManageClosureDependencies(var13);
//     var0.setManageClosureDependencies(var13);
//     var0.setRemoveClosureAsserts(true);
//     var0.setCheckMissingGetCssNameBlacklist("Unversioned directory");
//     com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     var20.setBrokenClosureRequiresLevel(var21);
//     var20.setLocale("");
//     var20.setLineBreak(false);
//     com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var28 = null;
//     var27.setStripTypes(var28);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var31 = var30.getDirectedGraphNodes();
//     java.util.List var32 = var30.getEdges();
//     var27.setManageClosureDependencies(var32);
//     boolean var34 = var27.isExternExportsEnabled();
//     var27.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var41 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make(var39, var41);
//     int var43 = var42.getCharno();
//     com.google.javascript.jscomp.CheckLevel var44 = var42.getDefaultLevel();
//     var27.setReportUnknownTypes(var44);
//     var20.setBrokenClosureRequiresLevel(var44);
//     var0.setCheckMissingGetCssNameLevel(var44);
//     com.google.javascript.jscomp.JSModule var50 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var51 = var50.getProvides();
//     java.util.List var52 = var50.getRequires();
//     com.google.javascript.jscomp.SourceAst var53 = null;
//     com.google.javascript.rhino.InputId var54 = null;
//     com.google.javascript.jscomp.CompilerInput var56 = new com.google.javascript.jscomp.CompilerInput(var53, var54, true);
//     com.google.javascript.jscomp.JSModule var57 = var56.getModule();
//     var50.addFirst(var56);
//     java.util.List var59 = var50.getProvides();
//     var0.setReplaceStringsConfiguration("InputId: ", var59);
//     java.util.List var62 = null;
//     var0.setReplaceStringsConfiguration("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", var62);
// 
//   }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test108"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    boolean var34 = var27.isExternExportsEnabled();
    var27.setCheckCaja(false);
    java.util.Set var37 = null;
    var27.setReplaceStringsReservedStrings(var37);
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.lang.String var54 = var53.getFileOverview();
    java.util.Set var55 = var53.getModifies();
    var27.setReplaceStringsReservedStrings(var55);
    var13.setDirectives(var55);
    com.google.javascript.rhino.Node var58 = var3.srcrefTree(var13);
    java.lang.String var59 = var13.getSourceFileName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test109"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "{proxy:{599688852}}");
    java.lang.String var5 = var0.getAbstractMethodName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "goog.abstractMethod"+ "'", var5.equals("goog.abstractMethod"));

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test110"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setTweakToStringLiteral("BANG 0\n    STRING hi 0 [length: 2]\n", "InputId: ");
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setReportMissingOverride(var11);
    var0.setRewriteFunctionExpressions(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test111"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var19 = var18.hasCachedValues();
    boolean var20 = var18.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType var25 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var18, "2014/12/24 11:10", "{proxy:{599688852}}", 10, 0);
    com.google.javascript.rhino.jstype.FunctionType var26 = var25.toMaybeFunctionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test112"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.clearNodeAnnotations();
    java.util.List var3 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var6 = var5.isGetterDef();
    var5.putIntProp((-1), 10);
    com.google.javascript.jscomp.graph.GraphNode var10 = var0.getNode((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test113"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("OFF");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test114"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    com.google.javascript.rhino.jstype.ObjectType.Property var16 = var10.getSlot("hi!: BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.Iterable var17 = var10.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test115"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.InputId var3 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isOr();
    java.lang.String var13 = var4.extractClassNameIfRequire(var5, var9);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.lang.Iterable var39 = var37.getDirectedGraphNodes();
    java.util.List var40 = var37.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    boolean var48 = var41.isExternExportsEnabled();
    var41.setCheckCaja(false);
    java.util.Set var51 = null;
    var41.setReplaceStringsReservedStrings(var51);
    var41.setAliasAllStrings(true);
    var41.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    boolean var64 = var57.isExternExportsEnabled();
    var57.setCheckCaja(false);
    var57.setGroupVariableDeclarations(true);
    java.util.Map var69 = var57.getDefineReplacements();
    var41.setPropertyInvalidationErrors(var69);
    var4.defineDelegateProxyPrototypeProperties(var15, (com.google.javascript.rhino.jstype.StaticScope)var35, var40, var69);
    boolean var72 = var35.canBeCalled();
    boolean var73 = var35.isRegexpType();
    boolean var74 = var3.equals((java.lang.Object)var35);
    boolean var76 = var35.hasOwnProperty("RETURN");
    com.google.javascript.rhino.jstype.JSType var78 = var35.findPropertyType("{proxy:{1743833346}}");
    com.google.javascript.rhino.jstype.FunctionBuilder var79 = var1.copyFromOtherFunction(var35);
    java.lang.Iterable var80 = var35.getOwnImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test116"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var71 = var68.isStringObjectType();
    java.lang.Iterable var72 = var68.getOwnImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test117"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$", var1);
    java.lang.String var3 = var2.getOriginalPath();
    var2.clearCachedSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "module$"+ "'", var3.equals("module$"));

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test118"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    java.lang.Iterable var62 = var56.getCtorImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test119"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     boolean var5 = var0.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     boolean var13 = var9.isOptionalArg();
//     java.lang.String var17 = var9.toString(false, false, true);
//     java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
//     java.lang.String var19 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = var21.getNext();
//     int var23 = var21.getSourceOffset();
//     com.google.javascript.rhino.Node var24 = var21.cloneNode();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     int var28 = var26.getSourceOffset();
//     com.google.javascript.rhino.Node var29 = var26.cloneNode();
//     var24.addChildrenToFront(var29);
//     com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
//     com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     boolean var35 = var33.isConstant("module$2014$12$24 11:10");
//     boolean var38 = var33.isExported("Unversioned directory", false);
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var41 = var40.isTry();
//     boolean var42 = var40.isSwitch();
//     boolean var43 = var33.isVarArgsParameter(var40);
//     java.lang.String var44 = var33.getExportSymbolFunction();
//     com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var49 = var48.getNext();
//     com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
//     boolean var51 = var48.isVarArgs();
//     boolean var52 = var48.isArrayLit();
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var55 = var54.isGetterDef();
//     var54.putIntProp((-1), 10);
//     var48.addChildrenToFront(var54);
//     boolean var60 = var54.wasEmptyNode();
//     boolean var61 = var33.isVarArgsParameter(var54);
//     com.google.javascript.rhino.Node var62 = null;
//     boolean var63 = var33.isVarArgsParameter(var62);
// 
//   }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test120"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.Collection var5 = var4.getNodes();
    com.google.javascript.rhino.jstype.TernaryValue var7 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(154);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var4.createDirectedGraphNode((java.lang.Object)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var9 = var0.getWeight((java.lang.Object)var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test121"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     var1.identifyNonNullableName("2014/12/24 11:10");
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     var9.unregisterPropertyOnType("Unversioned directory", var11);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var16 = var15.getDependencies();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
//     com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
//     boolean var20 = var18.removeProperty("null(null)");
//     com.google.javascript.rhino.ErrorReporter var22 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     var26.unregisterPropertyOnType("Unversioned directory", var28);
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
//     com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
//     boolean var36 = var24.addRequiredParams(var34);
//     com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
//     boolean var38 = var37.isInstanceType();
//     int var39 = var37.getMaxArguments();
//     java.lang.String var40 = var37.toAnnotationString();
// 
//   }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test122"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    boolean var34 = var27.isExternExportsEnabled();
    var27.setCheckCaja(false);
    java.util.Set var37 = null;
    var27.setReplaceStringsReservedStrings(var37);
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.lang.String var54 = var53.getFileOverview();
    java.util.Set var55 = var53.getModifies();
    var27.setReplaceStringsReservedStrings(var55);
    var13.setDirectives(var55);
    com.google.javascript.rhino.Node var58 = var3.srcrefTree(var13);
    boolean var59 = var13.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test123"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.paramList();
    boolean var9 = var8.isNoSideEffectsCall();
    com.google.javascript.rhino.JSDocInfo var10 = var1.build(var8);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var12.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    boolean var16 = var12.recordIdGenerator();
    com.google.javascript.rhino.JSDocInfoBuilder var18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var19 = var18.recordExpose();
    boolean var20 = var18.recordExterns();
    boolean var21 = var18.recordNoShadow();
    boolean var23 = var18.recordReturnDescription("()");
    boolean var25 = var18.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var30 = var28.recordExterns();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    boolean var38 = var34.isArrayLit();
    com.google.javascript.rhino.Node var39 = var34.getNext();
    var28.markTypeNode(var34, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    boolean var52 = var49.isVarArgs();
    com.google.javascript.rhino.Node var54 = var49.getChildAtIndex(1);
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    com.google.javascript.rhino.JSDocInfo var61 = var58.getJSDocInfo();
    com.google.javascript.rhino.Node var62 = var49.copyInformationFrom(var58);
    java.lang.Object var64 = null;
    var49.putProp(0, var64);
    com.google.javascript.rhino.JSTypeExpression var67 = new com.google.javascript.rhino.JSTypeExpression(var49, "()");
    com.google.javascript.rhino.JSTypeExpression var68 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var67);
    boolean var69 = var28.recordBaseType(var67);
    com.google.javascript.jscomp.MessageFormatter var70 = null;
    java.util.logging.Logger var71 = null;
    com.google.javascript.jscomp.LoggerErrorManager var72 = new com.google.javascript.jscomp.LoggerErrorManager(var70, var71);
    com.google.javascript.jscomp.Compiler var73 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var72);
    boolean var74 = var67.equals((java.lang.Object)var73);
    boolean var75 = var18.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var67);
    boolean var76 = var12.recordThrowType(var67);
    boolean var77 = var1.recordBaseType(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test124"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var37 = var33.isConstant("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test125"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
    boolean var12 = var7.isDec();
    boolean var13 = var7.isSyntheticBlock();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    int var17 = var15.getSourceOffset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.add(var7, var15);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test126"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var9.isInc();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var14 = null;
    var13.setResolveMode(var14);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var16 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var13);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var17 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var13);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var19.unregisterPropertyOnType("Unversioned directory", var21);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    boolean var25 = var19.canPropertyBeDefined(var23, "BANG");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.Node var28 = var19.createParameters(var27);
    boolean var29 = var17.addRequiredParams(var27);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    boolean var36 = var33.isVarArgs();
    boolean var37 = var33.isOptionalArg();
    java.lang.String var41 = var33.toString(false, false, true);
    com.google.javascript.rhino.Node var42 = var17.newOptionalParameterFromNode(var33);
    var9.addChildrenToBack(var33);
    boolean var44 = var33.isReturn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "BANG"+ "'", var41.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test127"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.SourceAst var5 = var3.getSourceAst();
//     int var7 = var3.getLineOffset(154);
// 
//   }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test128"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var1.markText("(InputId: )", 100, 1, 3, 1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    boolean var28 = var1.recordModifies(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    boolean var64 = var1.recordImplementedInterface(var50);
    boolean var65 = var1.recordExterns();
    boolean var66 = var1.recordHiddenness();
    boolean var67 = var1.isConstructorRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test129"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var5 = var4.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var11 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make(var9, var11);
    int var13 = var12.getCharno();
    com.google.javascript.jscomp.CheckLevel var14 = var12.getDefaultLevel();
    java.lang.String var15 = var6.formatError(var12);
    com.google.javascript.jscomp.CheckLevel var16 = var3.level(var12);
    com.google.javascript.jscomp.CheckLevel var17 = var12.getDefaultLevel();
    int var18 = var12.getNodeSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var15.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test130"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("function (): {944163309}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test131"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var37 = var1.addAuthor("BANG");
    boolean var38 = var1.recordInterface();
    boolean var39 = var1.recordNoCompile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test132"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var71 = var68.isNoType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test133"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getReturnDescription();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getEnumParameterType();
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.lang.String var34 = var33.getFileOverview();
    boolean var35 = var33.hasFileOverview();
    boolean var36 = var33.hasReturnType();
    boolean var37 = var33.hasType();
    boolean var38 = var33.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var39 = var33.getVisibility();
    int var40 = var39.ordinal();
    java.lang.Class var41 = var39.getDeclaringClass();
    var14.setVisibility(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test134"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.InputId var16 = var14.getInputId();
    boolean var17 = var14.hasChildren();
    java.util.List var18 = var0.identifyTypeDeclarationCall(var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isArrayLit();
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    boolean var33 = var30.isVarArgs();
    com.google.javascript.rhino.Node var35 = var30.getChildAtIndex(1);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    com.google.javascript.rhino.JSDocInfo var42 = var39.getJSDocInfo();
    com.google.javascript.rhino.Node var43 = var30.copyInformationFrom(var39);
    boolean var44 = var22.hasChild(var39);
    boolean var45 = var22.isSwitch();
    var22.removeProp(0);
    boolean var48 = var0.isOptionalParameter(var22);
    java.lang.String var49 = var0.getAbstractMethodName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "goog.abstractMethod"+ "'", var49.equals("goog.abstractMethod"));

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test135"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
    boolean var42 = var1.recordBaseType(var40);
    com.google.javascript.jscomp.MessageFormatter var43 = null;
    java.util.logging.Logger var44 = null;
    com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
    com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
    boolean var47 = var40.equals((java.lang.Object)var46);
    java.lang.String var48 = var46.getAstDotGraph();
    com.google.javascript.jscomp.Compiler var49 = new com.google.javascript.jscomp.Compiler();
    var49.reportCodeChange();
    com.google.javascript.jscomp.Compiler.IntermediateState var51 = var49.getState();
    var46.setState(var51);
    com.google.javascript.jscomp.Result var53 = var46.getResult();
    java.io.PrintStream var54 = null;
    com.google.javascript.jscomp.Compiler var55 = new com.google.javascript.jscomp.Compiler(var54);
    com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var57 = null;
    var56.setStripTypes(var57);
    var56.setAliasKeywords(false);
    com.google.javascript.jscomp.DefaultPassConfig var61 = new com.google.javascript.jscomp.DefaultPassConfig(var56);
    var55.setPassConfig((com.google.javascript.jscomp.PassConfig)var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var46.setPassConfig((com.google.javascript.jscomp.PassConfig)var61);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test136"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     var1.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = var11.getNext();
//     com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
//     boolean var14 = var11.isVarArgs();
//     boolean var15 = var11.isFor();
//     boolean var16 = var11.isNumber();
//     com.google.javascript.rhino.Node var17 = var11.getNext();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = var21.getNext();
//     com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
//     boolean var24 = var21.isVarArgs();
//     com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = var30.getNext();
//     com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
//     com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
//     com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
//     java.lang.Object var36 = null;
//     var21.putProp(0, var36);
//     com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
//     com.google.javascript.rhino.jstype.StaticScope var40 = null;
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     var42.unregisterPropertyOnType("Unversioned directory", var44);
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
//     com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
//     com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
//     com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
//     boolean var55 = var53.isConstructor();
//     com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.JSTypeNative[] var58 = null;
//     com.google.javascript.rhino.jstype.JSType var59 = var1.createUnionType(var58);
// 
//   }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test137"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    boolean var90 = var3.isCatch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test138"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var37 = var1.addAuthor("BANG");
    boolean var38 = var1.recordInterface();
    com.google.javascript.rhino.jstype.StaticSourceFile var40 = null;
    var1.markName("module$ERROR", var40, 2, (-1));
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    var45.unregisterPropertyOnType("Unversioned directory", var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.jscomp.JSModule var51 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var52 = var51.getDependencies();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.block(var52);
    com.google.javascript.rhino.jstype.FunctionType var54 = var45.createFunctionTypeWithVarArgs(var49, var52);
    boolean var55 = var54.hasCachedValues();
    boolean var56 = var54.isFunctionPrototypeType();
    java.util.Set var57 = var54.getPropertyNames();
    boolean var58 = var1.recordSuppressions(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test139"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    java.lang.String var6 = var1.toString(true, false, false);
    java.lang.Iterable var7 = var1.children();
    boolean var8 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "LABEL_NAME hi!"+ "'", var6.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test140() {}
//   public void test140() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test140"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceAst var9 = var6.getSourceAst();
//     java.lang.String var10 = var6.toString();
// 
//   }

  public void test141() {}
//   public void test141() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test141"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var0, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     java.lang.String var8 = var6.getLine(2);
// 
//   }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test142"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isParamList();
    boolean var9 = var1.isInc();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var13 = var12.isGetterDef();
    boolean var14 = var12.isAdd();
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isVarArgs();
    com.google.javascript.rhino.Node var23 = var18.getChildAtIndex(1);
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.JSDocInfo var30 = var27.getJSDocInfo();
    com.google.javascript.rhino.Node var31 = var18.copyInformationFrom(var27);
    java.lang.String var32 = var31.toStringTree();
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    boolean var40 = var36.getBooleanProp(100);
    int var41 = var36.getSideEffectFlags();
    boolean var42 = var36.isDefaultCase();
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node(1, var12, var31, var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.assign(var1, var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var32.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test143"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    int var16 = var8.getIntProp(0);
    boolean var17 = var8.isParamList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test144"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    var31.clearResolved();
    boolean var71 = var31.isReturnTypeInferred();
    boolean var72 = var31.canBeCalled();
    java.lang.Iterable var73 = var31.getImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test145"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    boolean var9 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var7);
    int var10 = var7.getLength();
    com.google.javascript.rhino.Node var11 = null;
    boolean var12 = var7.hasChild(var11);
    com.google.javascript.rhino.Node var13 = var5.useSourceInfoIfMissingFromForTree(var7);
    com.google.javascript.jscomp.CodingConvention.Bind var15 = var3.describeFunctionBind(var5, false);
    int var16 = var5.getSourcePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.eq(var1, var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test146"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var3 = new com.google.javascript.jscomp.ComposeWarningsGuard(var2);
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var5 = var4.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var4);
    com.google.javascript.jscomp.DiagnosticType var9 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var11 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var12 = com.google.javascript.jscomp.JSError.make(var9, var11);
    int var13 = var12.getCharno();
    com.google.javascript.jscomp.CheckLevel var14 = var12.getDefaultLevel();
    java.lang.String var15 = var6.formatError(var12);
    com.google.javascript.jscomp.CheckLevel var16 = var3.level(var12);
    java.lang.String var17 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var15.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test147"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var8 = var6.isConstantKey("2014/12/24 11:10");
    java.util.Collection var9 = var6.getAssertionFunctions();
    java.lang.String var10 = var6.getAbstractMethodName();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var15, var20);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var22 = var6.getClassesDefinedByCall(var15);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    boolean var28 = var23.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isOptionalArg();
    java.lang.String var40 = var32.toString(false, false, true);
    java.util.List var41 = var23.identifyTypeDeclarationCall(var32);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var42 = var6.getClassesDefinedByCall(var32);
    java.lang.String var43 = var3.extractClassNameIfRequire(var5, var32);
    boolean var44 = var32.isRegExp();
    boolean var45 = var32.hasMoreThanOneChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "goog.abstractMethod"+ "'", var10.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "BANG"+ "'", var40.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test148"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.Scope var7 = var6.getScope();
    int var8 = var6.getLineNumber();
    com.google.javascript.jscomp.Scope var9 = var6.getScope();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    var10.pushEdgeAnnotations();
    java.lang.Iterable var13 = var10.getDirectedGraphNodes();
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var15, "Unversioned directory");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var18 = var10.getDirectedGraphNode((java.lang.Object)"hi!");
    java.util.List var19 = var10.getGraphvizEdges();
    var6.traverseRoots(var19);
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.JSDocInfo var28 = var25.getJSDocInfo();
    boolean var29 = var25.isSwitch();
    boolean var30 = var25.isIf();
    com.google.javascript.rhino.Node[] var31 = new com.google.javascript.rhino.Node[] { var25};
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(0, var31, 3, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.traverseRoots(var31);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test149"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$", var1);
//     java.lang.String var3 = var2.getOriginalPath();
//     java.io.Reader var4 = var2.getCodeReader();
// 
//   }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test150"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    boolean var21 = var0.isConstantKey("module$2014$12$24 11:10");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test151"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var7 = var6.hasOneChild();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isOptionalArg();
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(0, var6, var11, var12, var17, 1, 100);
    java.lang.String var25 = var0.getSingletonGetterClassName(var24);
    boolean var26 = var24.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test152"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.cloneNode();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    boolean var10 = var7.isAssignAdd();
    int var11 = var5.getIndexOfChild(var7);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    com.google.javascript.rhino.Node var16 = var5.useSourceInfoFrom(var13);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var27 = new com.google.javascript.rhino.Node(0, var21, var26);
    boolean var28 = var26.isQualifiedName();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(153, var5, var29, 153, 1);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var36 = var34.getBooleanProp((-1));
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.Node var43 = var40.removeFirstChild();
    com.google.javascript.rhino.Node var44 = var34.useSourceInfoFromForTree(var40);
    boolean var45 = var34.isVar();
    com.google.javascript.rhino.Node var46 = var29.srcrefTree(var34);
    boolean var47 = var46.isNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test153"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    java.lang.String var4 = var0.getAbstractMethodName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var9, var14);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var9);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var19 = var17.isConstantKey("2014/12/24 11:10");
    java.util.Collection var20 = var17.getAssertionFunctions();
    boolean var22 = var17.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isVarArgs();
    boolean var30 = var26.isOptionalArg();
    java.lang.String var34 = var26.toString(false, false, true);
    java.util.List var35 = var17.identifyTypeDeclarationCall(var26);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var36 = var0.getClassesDefinedByCall(var26);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var38 = var37.cloneTree();
    boolean var39 = var37.isVar();
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var41 = var26.srcref(var37);
    com.google.javascript.jscomp.ClosureCodingConvention var42 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var44 = var42.isConstantKey("2014/12/24 11:10");
    java.util.Collection var45 = var42.getAssertionFunctions();
    boolean var47 = var42.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    boolean var54 = var51.isVarArgs();
    boolean var55 = var51.isOptionalArg();
    java.lang.String var59 = var51.toString(false, false, true);
    java.util.List var60 = var42.identifyTypeDeclarationCall(var51);
    java.util.Collection var61 = var42.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    boolean var67 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var65);
    int var68 = var65.getLength();
    com.google.javascript.rhino.Node var69 = null;
    boolean var70 = var65.hasChild(var69);
    com.google.javascript.rhino.Node var71 = var63.useSourceInfoIfMissingFromForTree(var65);
    var65.setSourceFileForTesting("Unversioned directory");
    boolean var74 = var65.isWith();
    com.google.javascript.jscomp.CompilerOptions var75 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var76 = null;
    var75.setStripTypes(var76);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var78 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var79 = var78.getDirectedGraphNodes();
    java.util.List var80 = var78.getEdges();
    var75.setManageClosureDependencies(var80);
    boolean var82 = var75.isExternExportsEnabled();
    var75.setCheckCaja(false);
    var75.setGroupVariableDeclarations(true);
    java.util.Map var87 = var75.getDefineReplacements();
    var42.checkForCallingConventionDefiningCalls(var65, var87);
    com.google.javascript.rhino.Node var89 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.replaceChildAfter(var65, var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.abstractMethod"+ "'", var4.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG"+ "'", var34.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "BANG"+ "'", var59.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test154"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.paramList(var23);
    var0.setManageClosureDependencies(var23);
    var0.setAcceptConstKeyword(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var32 = var30.hasNode((java.lang.Object)1);
    java.util.List var33 = var30.getGraphvizEdges();
    java.lang.Iterable var34 = var30.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var35 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var36 = var35.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var37 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var35);
    com.google.javascript.jscomp.LightweightMessageFormatter var38 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var35);
    boolean var39 = var30.hasNode((java.lang.Object)var35);
    com.google.javascript.jscomp.MessageFormatter var40 = null;
    java.util.logging.Logger var41 = null;
    com.google.javascript.jscomp.LoggerErrorManager var42 = new com.google.javascript.jscomp.LoggerErrorManager(var40, var41);
    com.google.javascript.jscomp.Compiler var43 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var42);
    com.google.javascript.jscomp.Scope var44 = var43.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var45 = null;
    com.google.javascript.jscomp.NodeTraversal var46 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var43, var45);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.script(var52);
    var46.traverseRoots(var52);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    com.google.javascript.jscomp.CompilerOptions var59 = new com.google.javascript.jscomp.CompilerOptions();
    var59.setChainCalls(true);
    java.util.logging.Logger var62 = null;
    com.google.javascript.jscomp.LoggerErrorManager var63 = new com.google.javascript.jscomp.LoggerErrorManager(var62);
    var59.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var63);
    var59.setGatherCssNames(false);
    var35.<com.google.javascript.jscomp.SourceFile>initModules(var52, var58, var59);
    java.util.Map var68 = var59.getDefineReplacements();
    var0.setTweakReplacements(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test155"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var49 = var48.isGetterDef();
    boolean var50 = var48.isNE();
    boolean var51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var48);
    com.google.javascript.rhino.Node var52 = var7.clonePropsFrom(var48);
    var48.setType((-1));
    boolean var55 = var48.isIn();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test156"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var37 = var1.addAuthor("BANG");
    com.google.javascript.jscomp.SourceFile var42 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.Region var44 = var42.getRegion(0);
    java.io.Reader var45 = var42.getCodeReader();
    var1.markName("(LABEL_NAME hi!)", (com.google.javascript.rhino.jstype.StaticSourceFile)var42, 0, 154);
    boolean var50 = var1.recordBlockDescription("hi!");
    boolean var51 = var1.recordNoTypeCheck();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);

  }

  public void test157() {}
//   public void test157() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test157"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newNumber(0.0d, 10, 0);
//     com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var7 = var6.recordExpose();
//     boolean var8 = var6.recordExterns();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = var12.getNext();
//     com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
//     boolean var15 = var12.isVarArgs();
//     boolean var16 = var12.isArrayLit();
//     com.google.javascript.rhino.Node var17 = var12.getNext();
//     var6.markTypeNode(var12, 10, 100, 0, 0, false);
//     boolean var24 = var12.isCall();
//     var12.setLineno(2);
//     int var27 = var4.getIndexOfChild(var12);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.and(var0, var12);
// 
//   }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test158"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isInstanceOf();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var9 = var7.getBooleanProp((-1));
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.Node var16 = var13.removeFirstChild();
    com.google.javascript.rhino.Node var17 = var7.useSourceInfoFromForTree(var13);
    boolean var18 = var13.isDec();
    boolean var19 = var13.isSyntheticBlock();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    boolean var34 = var31.isVarArgs();
    boolean var35 = var31.isFor();
    boolean var36 = var31.isNumber();
    com.google.javascript.rhino.Node var37 = var31.getNext();
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    com.google.javascript.rhino.Node var46 = var41.getChildAtIndex(1);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.JSDocInfo var53 = var50.getJSDocInfo();
    com.google.javascript.rhino.Node var54 = var41.copyInformationFrom(var50);
    java.lang.Object var56 = null;
    var41.putProp(0, var56);
    com.google.javascript.rhino.JSTypeExpression var59 = new com.google.javascript.rhino.JSTypeExpression(var41, "()");
    com.google.javascript.rhino.jstype.StaticScope var60 = null;
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    var62.unregisterPropertyOnType("Unversioned directory", var64);
    com.google.javascript.rhino.jstype.JSType var66 = null;
    boolean var68 = var62.canPropertyBeDefined(var66, "BANG");
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.rhino.jstype.JSType[] var70 = new com.google.javascript.rhino.jstype.JSType[] { var69};
    com.google.javascript.rhino.Node var71 = var62.createParameters(var70);
    com.google.javascript.rhino.jstype.JSType var72 = var59.evaluate(var60, var62);
    com.google.javascript.rhino.jstype.JSType var73 = var72.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var74 = var73.dereference();
    boolean var75 = var73.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var76 = var21.createEnumType("STRING hi 0 [length: 2]\n", var31, var73);
    java.lang.String var77 = var76.getDisplayName();
    com.google.javascript.rhino.Node var78 = var76.getSource();
    com.google.javascript.rhino.ErrorReporter var79 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var79);
    com.google.javascript.rhino.jstype.JSType var82 = null;
    var80.unregisterPropertyOnType("Unversioned directory", var82);
    com.google.javascript.rhino.jstype.JSType var84 = null;
    com.google.javascript.jscomp.JSModule var86 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var87 = var86.getDependencies();
    com.google.javascript.rhino.Node var88 = com.google.javascript.rhino.IR.block(var87);
    com.google.javascript.rhino.jstype.FunctionType var89 = var80.createFunctionTypeWithVarArgs(var84, var87);
    boolean var90 = var89.hasAnyTemplateInternal();
    java.lang.Iterable var91 = var89.getAllExtendedInterfaces();
    boolean var92 = var76.isSubtype((com.google.javascript.rhino.jstype.JSType)var89);
    com.google.javascript.rhino.Node var93 = var89.getParametersNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addChildBefore(var13, var93);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var77.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test159"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    boolean var35 = var29.matchesInt32Context();
    boolean var36 = var29.isObject();
    boolean var37 = var29.isFunctionPrototypeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test160"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var2 = var1.recordExpose();
//     boolean var3 = var1.recordExterns();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = var7.getNext();
//     com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
//     boolean var10 = var7.isVarArgs();
//     boolean var11 = var7.isArrayLit();
//     com.google.javascript.rhino.Node var12 = var7.getNext();
//     var1.markTypeNode(var7, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     boolean var25 = var22.isVarArgs();
//     com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = var31.getNext();
//     com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
//     com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
//     com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
//     java.lang.Object var37 = null;
//     var22.putProp(0, var37);
//     com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
//     com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
//     boolean var42 = var1.recordBaseType(var40);
//     com.google.javascript.jscomp.MessageFormatter var43 = null;
//     java.util.logging.Logger var44 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
//     com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     var46.processDefines();
// 
//   }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test161"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     var0.reportCodeChange();
//     com.google.javascript.jscomp.Compiler.IntermediateState var2 = var0.getState();
//     var0.parse();
// 
//   }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test162"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("goog.abstractMethod");
    java.lang.Iterable var2 = var1.siblings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test163"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var0.isVarArgsParameter(var14);
    java.lang.String var16 = var0.getExportSymbolFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "goog.exportSymbol"+ "'", var16.equals("goog.exportSymbol"));

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test164"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordNoShadow();
    boolean var6 = var1.recordParameterDescription("JSDocInfo", "BANG");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test165"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    com.google.javascript.rhino.jstype.ObjectType var18 = var10.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var20 = var10.findPropertyType("hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test166"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isNoSideEffects();
    com.google.javascript.rhino.JSTypeExpression var20 = var14.getType();
    boolean var22 = var14.hasParameter("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test167"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    boolean var19 = var7.hasChildren();
    com.google.javascript.rhino.Node var20 = var7.getFirstChild();
    boolean var21 = var20.isNoSideEffectsCall();
    var20.setQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test168"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.isPopulated();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var7 = var5.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var9 = null;
    boolean var10 = var5.recordParameter("Unversioned directory", var9);
    com.google.javascript.rhino.JSTypeExpression var11 = null;
    boolean var13 = var5.recordThrowDescription(var11, "");
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    boolean var31 = var5.recordSuppressions(var30);
    boolean var32 = var5.recordInterface();
    boolean var34 = var5.hasParameter("");
    boolean var36 = var5.recordMeaning("(LABEL_NAME hi!)");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    com.google.javascript.rhino.Node var45 = var40.getChildAtIndex(1);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.JSDocInfo var52 = var49.getJSDocInfo();
    com.google.javascript.rhino.Node var53 = var40.copyInformationFrom(var49);
    java.lang.Object var55 = null;
    var40.putProp(0, var55);
    com.google.javascript.rhino.JSTypeExpression var58 = new com.google.javascript.rhino.JSTypeExpression(var40, "()");
    com.google.javascript.rhino.jstype.StaticScope var59 = null;
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var61.unregisterPropertyOnType("Unversioned directory", var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    boolean var67 = var61.canPropertyBeDefined(var65, "BANG");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.Node var70 = var61.createParameters(var69);
    com.google.javascript.rhino.jstype.JSType var71 = var58.evaluate(var59, var61);
    boolean var72 = var5.recordDefineType(var58);
    boolean var73 = var1.recordBaseType(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test169"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    var0.setDefineToDoubleLiteral("2014/12/24 11:10", 0.0d);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var9.removeAll();
    java.lang.String var11 = var9.toString();
    java.util.List var12 = var9.getDependencies();
    var0.setManageClosureDependencies(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Unversioned directory"+ "'", var11.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test170"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    java.lang.String var79 = var73.getDisplayName();
    boolean var80 = var73.matchesStringContext();
    java.lang.Iterable var81 = var73.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.EnumElementType var82 = var73.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.ObjectType var83 = var73.getImplicitPrototype();
    boolean var85 = var83.hasOwnProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test171"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var8 = var1.recordNoSideEffects();
    boolean var9 = var1.recordConstancy();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var28 = var26.recordExterns();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isArrayLit();
    com.google.javascript.rhino.Node var37 = var32.getNext();
    var26.markTypeNode(var32, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var50 = var47.isVarArgs();
    com.google.javascript.rhino.Node var52 = var47.getChildAtIndex(1);
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    com.google.javascript.rhino.JSDocInfo var59 = var56.getJSDocInfo();
    com.google.javascript.rhino.Node var60 = var47.copyInformationFrom(var56);
    java.lang.Object var62 = null;
    var47.putProp(0, var62);
    com.google.javascript.rhino.JSTypeExpression var65 = new com.google.javascript.rhino.JSTypeExpression(var47, "()");
    com.google.javascript.rhino.JSTypeExpression var66 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var65);
    boolean var67 = var26.recordBaseType(var65);
    boolean var68 = var11.recordTypedef(var65);
    boolean var69 = var65.isVarArgs();
    boolean var70 = var1.recordThrowType(var65);
    boolean var72 = var1.recordReturnDescription("function (): {944163309}");
    com.google.javascript.jscomp.parsing.Config.LanguageMode var74 = null;
    com.google.javascript.rhino.JSDocInfoBuilder var77 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var78 = var77.recordExpose();
    boolean var80 = var77.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var82 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var85 = var84.getNext();
    com.google.javascript.rhino.Node var86 = var82.srcrefTree(var84);
    com.google.javascript.rhino.InputId var87 = com.google.javascript.jscomp.NodeUtil.getInputId(var84);
    com.google.javascript.rhino.jstype.JSType var88 = null;
    var84.setJSType(var88);
    com.google.javascript.rhino.JSDocInfo var90 = var77.build(var84);
    java.lang.String var91 = var90.getFileOverview();
    java.util.Set var92 = var90.getModifies();
    com.google.javascript.jscomp.parsing.Config var93 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var74, false, var92);
    boolean var94 = var1.recordSuppressions(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test172"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setCheckMissingGetCssNameBlacklist("Unversioned directory");
    com.google.javascript.jscomp.CheckLevel var20 = null;
    var0.setCheckUnreachableCode(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test173"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var14.setDeprecated(false);
    boolean var17 = var14.isNoAlias();
    boolean var18 = var14.hasThisType();
    boolean var19 = var14.isIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test174"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("function (): {1883749358}", var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test175"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.JSDocInfoBuilder var76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var77 = var76.recordExpose();
    boolean var79 = var76.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    com.google.javascript.rhino.InputId var86 = com.google.javascript.jscomp.NodeUtil.getInputId(var83);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    var83.setJSType(var87);
    com.google.javascript.rhino.JSDocInfo var89 = var76.build(var83);
    java.lang.String var90 = var89.getFileOverview();
    java.util.Set var91 = var89.getModifies();
    java.util.List var92 = var89.getImplementedInterfaces();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.block(var92);
    com.google.javascript.jscomp.NodeTraversal.Callback var94 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var92, var94);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var96 = var3.languageMode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.optimize();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test176"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    java.util.Set var24 = var20.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSType var25 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    var27.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    boolean var41 = var37.isFor();
    boolean var42 = var37.isNumber();
    com.google.javascript.rhino.Node var43 = var37.getNext();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var50 = var47.isVarArgs();
    com.google.javascript.rhino.Node var52 = var47.getChildAtIndex(1);
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    com.google.javascript.rhino.JSDocInfo var59 = var56.getJSDocInfo();
    com.google.javascript.rhino.Node var60 = var47.copyInformationFrom(var56);
    java.lang.Object var62 = null;
    var47.putProp(0, var62);
    com.google.javascript.rhino.JSTypeExpression var65 = new com.google.javascript.rhino.JSTypeExpression(var47, "()");
    com.google.javascript.rhino.jstype.StaticScope var66 = null;
    com.google.javascript.rhino.ErrorReporter var67 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var67);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    var68.unregisterPropertyOnType("Unversioned directory", var70);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    boolean var74 = var68.canPropertyBeDefined(var72, "BANG");
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.jstype.JSType[] var76 = new com.google.javascript.rhino.jstype.JSType[] { var75};
    com.google.javascript.rhino.Node var77 = var68.createParameters(var76);
    com.google.javascript.rhino.jstype.JSType var78 = var65.evaluate(var66, var68);
    com.google.javascript.rhino.jstype.JSType var79 = var78.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var80 = var79.dereference();
    boolean var81 = var79.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var82 = var27.createEnumType("STRING hi 0 [length: 2]\n", var37, var79);
    java.lang.String var83 = var82.getDisplayName();
    boolean var84 = var82.matchesStringContext();
    com.google.javascript.rhino.jstype.JSType var85 = var20.getLeastSupertype((com.google.javascript.rhino.jstype.JSType)var82);
    com.google.javascript.rhino.Node var87 = var20.getPropertyNode("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var83.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test177() {}
//   public void test177() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test177"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.Result var5 = var3.getResult();
//     com.google.javascript.jscomp.SourceMap var6 = var3.getSourceMap();
//     java.util.Map var7 = var3.getInputsById();
// 
//   }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test178"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = null;
    var14.setVisibility(var20);
    com.google.javascript.rhino.Node var22 = var14.getAssociatedNode();
    java.lang.String var23 = var14.getMeaning();
    boolean var24 = var14.isInterface();
    boolean var25 = var14.hasThisType();
    java.lang.String var26 = var14.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test179"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    boolean var9 = var6.isNE();
    java.lang.String var10 = com.google.javascript.jscomp.NodeUtil.getSourceName(var6);
    com.google.javascript.rhino.Node var11 = var6.cloneTree();
    com.google.javascript.rhino.jstype.FunctionBuilder var12 = var4.withParamsNode(var11);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var15 = null;
    var14.setResolveMode(var15);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var17 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var14);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var18 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var14);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    boolean var26 = var20.canPropertyBeDefined(var24, "BANG");
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.jstype.JSType[] var28 = new com.google.javascript.rhino.jstype.JSType[] { var27};
    com.google.javascript.rhino.Node var29 = var20.createParameters(var28);
    boolean var30 = var18.addRequiredParams(var28);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    boolean var38 = var34.isOptionalArg();
    java.lang.String var42 = var34.toString(false, false, true);
    com.google.javascript.rhino.Node var43 = var18.newOptionalParameterFromNode(var34);
    boolean var44 = var18.hasVarArgs();
    com.google.javascript.rhino.jstype.FunctionBuilder var45 = var4.withParams(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "BANG"+ "'", var42.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test180"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var9.isInc();
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var14 = null;
    var13.setResolveMode(var14);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var16 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var13);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var17 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var13);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var19.unregisterPropertyOnType("Unversioned directory", var21);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    boolean var25 = var19.canPropertyBeDefined(var23, "BANG");
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var26};
    com.google.javascript.rhino.Node var28 = var19.createParameters(var27);
    boolean var29 = var17.addRequiredParams(var27);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    boolean var36 = var33.isVarArgs();
    boolean var37 = var33.isOptionalArg();
    java.lang.String var41 = var33.toString(false, false, true);
    com.google.javascript.rhino.Node var42 = var17.newOptionalParameterFromNode(var33);
    var9.addChildrenToBack(var33);
    int var44 = var9.getSourcePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "BANG"+ "'", var41.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test181"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.FunctionBuilder var91 = new com.google.javascript.rhino.jstype.FunctionBuilder(var24);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var92 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test182"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    var0.setReserveRawExports(true);
    com.google.javascript.jscomp.DefaultPassConfig var16 = new com.google.javascript.jscomp.DefaultPassConfig(var0);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var17 = var0.getLanguageIn();
    java.lang.Class var18 = var17.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test183() {}
//   public void test183() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test183"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setDevirtualizePrototypeMethods(true);
//     var0.setCollapsePropertiesOnExternTypes(false);
//     var0.setShadowVariables(false);
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var14 = null;
//     var13.setStripTypes(var14);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var17 = var16.getDirectedGraphNodes();
//     java.util.List var18 = var16.getEdges();
//     var13.setManageClosureDependencies(var18);
//     boolean var20 = var13.isExternExportsEnabled();
//     var13.setCheckCaja(false);
//     java.util.Set var23 = null;
//     var13.setReplaceStringsReservedStrings(var23);
//     com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var27 = var26.recordExpose();
//     boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var34 = var33.getNext();
//     com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
//     com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     var33.setJSType(var37);
//     com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
//     java.lang.String var40 = var39.getFileOverview();
//     java.util.Set var41 = var39.getModifies();
//     var13.setReplaceStringsReservedStrings(var41);
//     var13.setUnaliasableGlobals("");
//     com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var49 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make(var47, var49);
//     int var51 = var50.getCharno();
//     com.google.javascript.jscomp.CheckLevel var52 = var50.getDefaultLevel();
//     var13.setCheckGlobalThisLevel(var52);
//     var0.setCheckMissingGetCssNameLevel(var52);
//     var0.setDefineToNumberLiteral("(LABEL_NAME hi!)", 10);
//     com.google.javascript.jscomp.CompilerOptions.Reach var58 = null;
//     var0.setInlineFunctions(var58);
// 
//   }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test184"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var39);
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    boolean var48 = var41.isExternExportsEnabled();
    var41.setCheckCaja(false);
    java.util.Set var51 = null;
    var41.setReplaceStringsReservedStrings(var51);
    com.google.javascript.rhino.JSDocInfoBuilder var54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var55 = var54.recordExpose();
    boolean var57 = var54.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    com.google.javascript.rhino.InputId var64 = com.google.javascript.jscomp.NodeUtil.getInputId(var61);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var61.setJSType(var65);
    com.google.javascript.rhino.JSDocInfo var67 = var54.build(var61);
    java.lang.String var68 = var67.getFileOverview();
    java.util.Set var69 = var67.getModifies();
    var41.setReplaceStringsReservedStrings(var69);
    var41.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var77 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var75, var77);
    int var79 = var78.getCharno();
    com.google.javascript.jscomp.CheckLevel var80 = var78.getDefaultLevel();
    var41.setCheckGlobalThisLevel(var80);
    var0.setBrokenClosureRequiresLevel(var80);
    com.google.javascript.jscomp.CompilerOptions var83 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var84 = null;
    var83.setStripTypes(var84);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var86 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var87 = var86.getDirectedGraphNodes();
    java.util.List var88 = var86.getEdges();
    var83.setManageClosureDependencies(var88);
    var83.setDevirtualizePrototypeMethods(true);
    var83.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var94 = var83.getTweakProcessing();
    var0.setTweakProcessing(var94);
    java.lang.Class var96 = var94.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test185"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var7 = null;
    var6.setResolveMode(var7);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var9 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var10 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var6);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    com.google.javascript.rhino.Node var19 = var14.getChildAtIndex(1);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.JSDocInfo var26 = var23.getJSDocInfo();
    com.google.javascript.rhino.Node var27 = var14.copyInformationFrom(var23);
    java.lang.Object var29 = null;
    var14.putProp(0, var29);
    com.google.javascript.rhino.JSTypeExpression var32 = new com.google.javascript.rhino.JSTypeExpression(var14, "()");
    com.google.javascript.rhino.jstype.StaticScope var33 = null;
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var35.unregisterPropertyOnType("Unversioned directory", var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    boolean var41 = var35.canPropertyBeDefined(var39, "BANG");
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.jstype.JSType[] var43 = new com.google.javascript.rhino.jstype.JSType[] { var42};
    com.google.javascript.rhino.Node var44 = var35.createParameters(var43);
    com.google.javascript.rhino.jstype.JSType var45 = var32.evaluate(var33, var35);
    com.google.javascript.rhino.jstype.JSType var46 = var45.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var47 = var46.dereference();
    java.util.Collection var48 = var6.getDirectImplementors(var47);
    com.google.javascript.rhino.jstype.JSType var53 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var47, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.jscomp.JSModule var61 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var62 = var61.getDependencies();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.block(var62);
    com.google.javascript.rhino.jstype.FunctionType var64 = var55.createFunctionTypeWithVarArgs(var59, var62);
    boolean var66 = var64.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var67 = var64.toMaybeEnumType();
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var64);
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var73 = var72.hasOneChild();
    com.google.javascript.rhino.Node var77 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.returnNode();
    boolean var79 = var78.isArrayLit();
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    boolean var86 = var83.isVarArgs();
    boolean var87 = var83.isOptionalArg();
    com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(0, var72, var77, var78, var83, 1, 100);
    java.lang.String var91 = var78.getQualifiedName();
    boolean var92 = var78.isHook();
    int var93 = var78.getSourceOffset();
    var78.removeProp(1);
    com.google.javascript.rhino.jstype.StaticScope var97 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSType var98 = var1.createFromTypeNodes(var78, "function (): {944163309}", var97);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == (-1));

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test186"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    int var6 = var3.getLength();
    com.google.javascript.rhino.Node var7 = null;
    boolean var8 = var3.hasChild(var7);
    com.google.javascript.rhino.Node var9 = var1.useSourceInfoIfMissingFromForTree(var3);
    var3.setSourceFileForTesting("Unversioned directory");
    boolean var12 = var3.isDefaultCase();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.paramList(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    boolean var26 = var16.hasChild(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.removeChild(var20);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test187"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var72 = var31.getReturnType();
    boolean var73 = var31.isNumberObjectType();
    com.google.javascript.rhino.jstype.ObjectType var74 = var31.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test188"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("{proxy:{1612771089}}", "ERROR");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test189"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var39);
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    boolean var48 = var41.isExternExportsEnabled();
    var41.setCheckCaja(false);
    java.util.Set var51 = null;
    var41.setReplaceStringsReservedStrings(var51);
    com.google.javascript.rhino.JSDocInfoBuilder var54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var55 = var54.recordExpose();
    boolean var57 = var54.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    com.google.javascript.rhino.InputId var64 = com.google.javascript.jscomp.NodeUtil.getInputId(var61);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var61.setJSType(var65);
    com.google.javascript.rhino.JSDocInfo var67 = var54.build(var61);
    java.lang.String var68 = var67.getFileOverview();
    java.util.Set var69 = var67.getModifies();
    var41.setReplaceStringsReservedStrings(var69);
    var41.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var77 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var75, var77);
    int var79 = var78.getCharno();
    com.google.javascript.jscomp.CheckLevel var80 = var78.getDefaultLevel();
    var41.setCheckGlobalThisLevel(var80);
    var0.setBrokenClosureRequiresLevel(var80);
    com.google.javascript.jscomp.CompilerOptions var83 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var84 = null;
    var83.setStripTypes(var84);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var86 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var87 = var86.getDirectedGraphNodes();
    java.util.List var88 = var86.getEdges();
    var83.setManageClosureDependencies(var88);
    var83.setDevirtualizePrototypeMethods(true);
    var83.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var94 = var83.getTweakProcessing();
    var0.setTweakProcessing(var94);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.ErrorFormat var98 = null;
    var0.setErrorFormat(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test190"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var1.addFirst(var10);
    java.util.Set var12 = var1.getAllDependencies();
    var1.removeAll();
    com.google.javascript.jscomp.SourceAst var14 = null;
    com.google.javascript.rhino.InputId var15 = null;
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var1.addFirst(var20);
    boolean var22 = var20.isExtern();
    com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
    java.lang.String var24 = var20.toString();
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var28 = new com.google.javascript.jscomp.ComposeWarningsGuard(var27);
    com.google.javascript.jscomp.JSModule[] var29 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var27);
    com.google.javascript.jscomp.JSModuleGraph var30 = new com.google.javascript.jscomp.JSModuleGraph(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var32 = var31.getDirectedGraphNodes();
    java.lang.Iterable var33 = var31.getDirectedGraphNodes();
    java.util.List var34 = var31.getGraphvizNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var37 = var36.recordExpose();
    boolean var39 = var36.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.InputId var46 = com.google.javascript.jscomp.NodeUtil.getInputId(var43);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    var43.setJSType(var47);
    com.google.javascript.rhino.JSDocInfo var49 = var36.build(var43);
    java.lang.String var50 = var49.getFileOverview();
    boolean var51 = var49.hasType();
    java.util.List var52 = var49.getThrownTypes();
    java.util.List var53 = var30.manageDependencies(var34, var52);
    com.google.javascript.jscomp.JSModuleGraph var54 = new com.google.javascript.jscomp.JSModuleGraph(var52);
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    var56.removeAll();
    com.google.javascript.jscomp.JSModule var60 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var60.removeAll();
    var56.addDependency(var60);
    java.util.List var63 = var56.getInputs();
    java.lang.String var64 = var56.getName();
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getProvides();
    com.google.javascript.jscomp.CompilerInput var69 = var66.getByName("()");
    com.google.javascript.jscomp.SourceAst var70 = null;
    com.google.javascript.rhino.InputId var71 = null;
    com.google.javascript.jscomp.CompilerInput var73 = new com.google.javascript.jscomp.CompilerInput(var70, var71, true);
    com.google.javascript.jscomp.SourceAst var74 = var73.getAst();
    var66.add(var73);
    boolean var76 = var54.dependsOn(var56, var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.setModule(var66);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var24.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Unversioned directory"+ "'", var64.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test191"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     var4.unregisterPropertyOnType("Unversioned directory", var6);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     boolean var10 = var4.canPropertyBeDefined(var8, "BANG");
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     com.google.javascript.rhino.jstype.JSType[] var12 = new com.google.javascript.rhino.jstype.JSType[] { var11};
//     com.google.javascript.rhino.Node var13 = var4.createParameters(var12);
//     boolean var14 = var2.addRequiredParams(var12);
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var17 = null;
//     var16.setResolveMode(var17);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var19 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var16);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var20 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var16);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var22.unregisterPropertyOnType("Unversioned directory", var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     boolean var28 = var22.canPropertyBeDefined(var26, "BANG");
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.rhino.jstype.JSType[] var30 = new com.google.javascript.rhino.jstype.JSType[] { var29};
//     com.google.javascript.rhino.Node var31 = var22.createParameters(var30);
//     boolean var32 = var20.addRequiredParams(var30);
//     boolean var33 = var2.addOptionalParams(var30);
// 
//   }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test192"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    boolean var39 = var37.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.ObjectType var40 = var37.dereference();
    boolean var41 = var40.isInstanceType();
    com.google.javascript.rhino.jstype.JSType var43 = var40.findPropertyType("goog.exportSymbol");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test193"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    boolean var28 = var1.recordInterface();
    boolean var30 = var1.hasParameter("");
    boolean var32 = var1.recordMeaning("(LABEL_NAME hi!)");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    boolean var39 = var36.isVarArgs();
    com.google.javascript.rhino.Node var41 = var36.getChildAtIndex(1);
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.JSDocInfo var48 = var45.getJSDocInfo();
    com.google.javascript.rhino.Node var49 = var36.copyInformationFrom(var45);
    java.lang.Object var51 = null;
    var36.putProp(0, var51);
    com.google.javascript.rhino.JSTypeExpression var54 = new com.google.javascript.rhino.JSTypeExpression(var36, "()");
    com.google.javascript.rhino.jstype.StaticScope var55 = null;
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var57.unregisterPropertyOnType("Unversioned directory", var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    boolean var63 = var57.canPropertyBeDefined(var61, "BANG");
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.jstype.JSType[] var65 = new com.google.javascript.rhino.jstype.JSType[] { var64};
    com.google.javascript.rhino.Node var66 = var57.createParameters(var65);
    com.google.javascript.rhino.jstype.JSType var67 = var54.evaluate(var55, var57);
    boolean var68 = var1.recordDefineType(var54);
    boolean var69 = var54.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test194"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var4 = null;
    var3.setResolveMode(var4);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var6 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var3);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var7 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var3);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    boolean var15 = var9.canPropertyBeDefined(var13, "BANG");
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.jstype.JSType[] var17 = new com.google.javascript.rhino.jstype.JSType[] { var16};
    com.google.javascript.rhino.Node var18 = var9.createParameters(var17);
    boolean var19 = var7.addRequiredParams(var17);
    com.google.javascript.rhino.Node var20 = var1.createParameters(var17);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var24 = var23.isGetterDef();
    java.lang.String var28 = var23.toString(true, false, false);
    boolean var29 = var23.isCatch();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var30 = var1.createInterfaceType("", var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "LABEL_NAME hi!"+ "'", var28.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test195"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCheckCaja(false);
    java.util.Set var23 = null;
    var13.setReplaceStringsReservedStrings(var23);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var29 = var26.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.InputId var36 = com.google.javascript.jscomp.NodeUtil.getInputId(var33);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var33.setJSType(var37);
    com.google.javascript.rhino.JSDocInfo var39 = var26.build(var33);
    java.lang.String var40 = var39.getFileOverview();
    java.util.Set var41 = var39.getModifies();
    var13.setReplaceStringsReservedStrings(var41);
    var13.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var49 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var50 = com.google.javascript.jscomp.JSError.make(var47, var49);
    int var51 = var50.getCharno();
    com.google.javascript.jscomp.CheckLevel var52 = var50.getDefaultLevel();
    var13.setCheckGlobalThisLevel(var52);
    var0.setCheckMissingGetCssNameLevel(var52);
    var0.setCommonJSModulePathPrefix("CONTINUE");
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    boolean var64 = var57.isExternExportsEnabled();
    var57.setCheckCaja(false);
    java.util.Set var67 = null;
    var57.setReplaceStringsReservedStrings(var67);
    var57.setReserveRawExports(false);
    var57.setReserveRawExports(true);
    com.google.javascript.jscomp.DefaultPassConfig var73 = new com.google.javascript.jscomp.DefaultPassConfig(var57);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var74 = null;
    var57.setAliasTransformationHandler(var74);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var76 = var57.getTweakProcessing();
    var0.setTweakProcessing(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test196"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.isConsistentIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test197"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var46.unregisterPropertyOnType("Unversioned directory", var48);
    var46.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var52 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var46);
    java.lang.String var53 = var0.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "goog.global"+ "'", var53.equals("goog.global"));

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test198"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.removeFirstChild();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    boolean var11 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var9);
    int var12 = var9.getLength();
    com.google.javascript.rhino.Node var13 = null;
    boolean var14 = var9.hasChild(var13);
    com.google.javascript.rhino.Node var15 = var7.useSourceInfoIfMissingFromForTree(var9);
    var9.setSourceFileForTesting("Unversioned directory");
    boolean var18 = var9.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var19 = var9.getStaticSourceFile();
    com.google.javascript.rhino.Node var20 = var2.srcref(var9);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var20);
    int var22 = var21.getChildCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var23 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test199"); }


    com.google.javascript.jscomp.MessageFormatter var1 = null;
    java.util.logging.Logger var2 = null;
    com.google.javascript.jscomp.LoggerErrorManager var3 = new com.google.javascript.jscomp.LoggerErrorManager(var1, var2);
    com.google.javascript.jscomp.Compiler var4 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var3);
    com.google.javascript.jscomp.Scope var5 = var4.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var6 = null;
    com.google.javascript.jscomp.NodeTraversal var7 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var4, var6);
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    var7.traverseRoots(var13);
    com.google.javascript.rhino.Node var17 = var7.getEnclosingFunction();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    boolean var28 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var26);
    int var29 = var26.getLength();
    com.google.javascript.rhino.Node var30 = null;
    boolean var31 = var26.hasChild(var30);
    com.google.javascript.rhino.Node var32 = var24.useSourceInfoIfMissingFromForTree(var26);
    var26.setSourceFileForTesting("Unversioned directory");
    boolean var35 = var26.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var36 = var26.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var40 = null;
    java.util.logging.Logger var41 = null;
    com.google.javascript.jscomp.LoggerErrorManager var42 = new com.google.javascript.jscomp.LoggerErrorManager(var40, var41);
    com.google.javascript.jscomp.Compiler var43 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var42);
    com.google.javascript.jscomp.Scope var44 = var43.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var45 = null;
    com.google.javascript.jscomp.NodeTraversal var46 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var43, var45);
    com.google.javascript.jscomp.Scope var47 = var46.getScope();
    com.google.javascript.rhino.Node var48 = null;
    com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var53 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make(var51, var53);
    com.google.javascript.jscomp.DiagnosticType var55 = var54.getType();
    java.lang.String[] var57 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var58 = var46.makeError(var48, var55, var57);
    com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var26, var39, var57);
    var7.report(var18, var21, var57);
    com.google.javascript.jscomp.DiagnosticType[] var61 = new com.google.javascript.jscomp.DiagnosticType[] { var21};
    com.google.javascript.jscomp.DiagnosticGroup var62 = new com.google.javascript.jscomp.DiagnosticGroup(var61);
    com.google.javascript.jscomp.DiagnosticGroup[] var63 = new com.google.javascript.jscomp.DiagnosticGroup[] { var62};
    com.google.javascript.jscomp.DiagnosticGroup var64 = new com.google.javascript.jscomp.DiagnosticGroup("OFF", var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test200() {}
//   public void test200() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test200"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     var1.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = var11.getNext();
//     com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
//     boolean var14 = var11.isVarArgs();
//     boolean var15 = var11.isFor();
//     boolean var16 = var11.isNumber();
//     com.google.javascript.rhino.Node var17 = var11.getNext();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = var21.getNext();
//     com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
//     boolean var24 = var21.isVarArgs();
//     com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = var30.getNext();
//     com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
//     com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
//     com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
//     java.lang.Object var36 = null;
//     var21.putProp(0, var36);
//     com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
//     com.google.javascript.rhino.jstype.StaticScope var40 = null;
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     var42.unregisterPropertyOnType("Unversioned directory", var44);
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
//     com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
//     com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
//     com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
//     boolean var55 = var53.isConstructor();
//     com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
//     com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
//     java.lang.String var58 = var56.toDebugHashCodeString();
//     com.google.javascript.rhino.Node var59 = var56.getRootNode();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var11);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var12);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var13);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var14 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var15 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var16 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var17);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var21);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var22);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var23);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var24 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var32);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var50);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var51);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var52);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var53);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var54);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var55 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var58 + "' != '" + "{413092455}"+ "'", var58.equals("{413092455}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var59);
// 
//   }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test201"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    boolean var10 = var0.shouldColorizeErrorOutput();
    com.google.common.collect.Multimap var11 = null;
    var0.setCustomPasses(var11);
    var0.setClosurePass(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test202"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isOr();
    java.lang.String var13 = var4.extractClassNameIfRequire(var5, var9);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.lang.Iterable var39 = var37.getDirectedGraphNodes();
    java.util.List var40 = var37.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    boolean var48 = var41.isExternExportsEnabled();
    var41.setCheckCaja(false);
    java.util.Set var51 = null;
    var41.setReplaceStringsReservedStrings(var51);
    var41.setAliasAllStrings(true);
    var41.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    boolean var64 = var57.isExternExportsEnabled();
    var57.setCheckCaja(false);
    var57.setGroupVariableDeclarations(true);
    java.util.Map var69 = var57.getDefineReplacements();
    var41.setPropertyInvalidationErrors(var69);
    var4.defineDelegateProxyPrototypeProperties(var15, (com.google.javascript.rhino.jstype.StaticScope)var35, var40, var69);
    boolean var72 = var35.canBeCalled();
    boolean var73 = var35.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var75 = var35.getSlot("hi!");
    boolean var76 = var35.isOrdinaryFunction();
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test203"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
//     com.google.javascript.rhino.Node var8 = var3.getRoot();
//     com.google.javascript.jscomp.CodingConvention var9 = var3.getCodingConvention();
// 
//   }

  public void test204() {}
//   public void test204() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test204"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     boolean var11 = var10.hasAnyTemplateInternal();
//     java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
//     boolean var13 = var10.isEmptyType();
//     com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     var18.unregisterPropertyOnType("Unversioned directory", var20);
//     var18.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = var28.getNext();
//     com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
//     boolean var31 = var28.isVarArgs();
//     boolean var32 = var28.isFor();
//     boolean var33 = var28.isNumber();
//     com.google.javascript.rhino.Node var34 = var28.getNext();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = var38.getNext();
//     com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
//     boolean var41 = var38.isVarArgs();
//     com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var48 = var47.getNext();
//     com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
//     com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
//     com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
//     java.lang.Object var53 = null;
//     var38.putProp(0, var53);
//     com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
//     com.google.javascript.rhino.jstype.StaticScope var57 = null;
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     var59.unregisterPropertyOnType("Unversioned directory", var61);
//     com.google.javascript.rhino.jstype.JSType var63 = null;
//     boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
//     com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
//     com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
//     boolean var72 = var70.isConstructor();
//     com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
//     java.lang.String var74 = var73.getDisplayName();
//     com.google.javascript.rhino.Node var75 = var73.getSource();
//     com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
//     boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
//     boolean var79 = var73.isDateType();
//     com.google.javascript.rhino.jstype.JSType var80 = null;
//     com.google.javascript.rhino.jstype.JSType var81 = var73.getLeastSupertype(var80);
// 
//   }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test205"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.returnNode();
    boolean var1 = var0.isReturn();
    com.google.javascript.rhino.Node var2 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.eq(var0, var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test206"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    java.util.Set var24 = var14.getParameterNames();
    java.util.List var25 = var14.getImplementedInterfaces();
    int var26 = var14.getImplementedInterfaceCount();
    boolean var27 = var14.isJavaDispatch();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test207"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newNumber(1.0d);
//     com.google.javascript.rhino.Node var3 = var1.getChildAtIndex(2);
// 
//   }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test208"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = var14.getVisibility();
    boolean var21 = var14.hasBaseType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test209"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var9 = var8.recordExpose();
    boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var15.setJSType(var19);
    com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
    java.lang.String var22 = var21.getFileOverview();
    java.util.Set var23 = var21.getModifies();
    java.util.List var24 = var21.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var25 = var21.getType();
    boolean var26 = var21.isConsistentIdGenerator();
    java.lang.String var27 = var21.getDeprecationReason();
    var3.setJSDocInfo(var21);
    boolean var29 = var3.isCatch();
    var3.removeProp((-19));
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var36 = var35.hasOneChild();
    com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.returnNode();
    boolean var42 = var41.isArrayLit();
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    boolean var50 = var46.isOptionalArg();
    com.google.javascript.rhino.Node var53 = new com.google.javascript.rhino.Node(0, var35, var40, var41, var46, 1, 100);
    boolean var54 = var41.isTry();
    int var55 = var41.getLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var56 = var3.getChildBefore(var41);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "2014/12/24 11:10"+ "'", var27.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);

  }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test210"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var9 = var3.getSourceAst();
//     java.util.Collection var10 = var3.getProvides();
// 
//   }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test211"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     java.util.logging.Logger var7 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var7);
//     com.google.javascript.jscomp.JSError[] var9 = var8.getWarnings();
//     var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var8);
//     java.lang.String[] var11 = var3.toSourceArray();
// 
//   }

  public void test212() {}
//   public void test212() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test212"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.MessageFormatter var9 = null;
//     java.util.logging.Logger var10 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
//     com.google.javascript.jscomp.Scope var13 = var12.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
//     com.google.javascript.jscomp.NodeTraversal var15 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var12, var14);
//     var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var12);
//     com.google.javascript.jscomp.JSSourceFile var17 = null;
//     com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var20 = var19.getProvides();
//     com.google.javascript.jscomp.CompilerInput var22 = var19.getByName("()");
//     com.google.javascript.jscomp.SourceAst var23 = null;
//     com.google.javascript.rhino.InputId var24 = null;
//     com.google.javascript.jscomp.CompilerInput var26 = new com.google.javascript.jscomp.CompilerInput(var23, var24, true);
//     com.google.javascript.jscomp.SourceAst var27 = var26.getAst();
//     var19.add(var26);
//     java.util.List var29 = var19.getDependencies();
//     com.google.javascript.jscomp.JSModule[] var30 = new com.google.javascript.jscomp.JSModule[] { var19};
//     com.google.javascript.jscomp.JSModuleGraph var31 = new com.google.javascript.jscomp.JSModuleGraph(var30);
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var33 = null;
//     var32.setStripTypes(var33);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var36 = var35.getDirectedGraphNodes();
//     java.util.List var37 = var35.getEdges();
//     var32.setManageClosureDependencies(var37);
//     boolean var39 = var32.isExternExportsEnabled();
//     var32.setCollapsePropertiesOnExternTypes(false);
//     var32.setNameAnonymousFunctionsOnly(true);
//     var32.setCheckSymbols(false);
//     com.google.javascript.jscomp.Result var46 = var12.compile(var17, var30, var32);
// 
//   }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test213"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var64.canBeCalled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test214"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    com.google.javascript.rhino.Node var71 = var56.getSource();
    com.google.javascript.rhino.jstype.ObjectType var72 = var56.getParentScope();
    boolean var73 = var72.matchesInt32Context();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test215() {}
//   public void test215() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test215"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     var3.reportCodeChange();
//     com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
//     com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
//     java.lang.String var8 = var3.getAstDotGraph();
//     java.lang.String var9 = var3.toSource();
// 
//   }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test216"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("module$WARNING _ BANG 0\n    STRING hi 0 [length: 2]\n\n", "ERROR - (InputId: )\n", "hi!: BANG 0\n    STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test217"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    java.lang.String var12 = var4.toString(false, false, true);
    boolean var13 = var4.isGetterDef();
    com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    java.lang.String[] var17 = null;
    com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("BANG", var4, var16, var17);
    java.lang.String var19 = var16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "BANG"+ "'", var12.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(LABEL_NAME hi!): ()"+ "'", var19.equals("(LABEL_NAME hi!): ()"));

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test218"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    com.google.javascript.rhino.Node var9 = var4.getChildAtIndex(1);
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.JSDocInfo var16 = var13.getJSDocInfo();
    com.google.javascript.rhino.Node var17 = var4.copyInformationFrom(var13);
    java.lang.Object var19 = null;
    var4.putProp(0, var19);
    com.google.javascript.rhino.JSTypeExpression var22 = new com.google.javascript.rhino.JSTypeExpression(var4, "()");
    com.google.javascript.rhino.jstype.StaticScope var23 = null;
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var25.unregisterPropertyOnType("Unversioned directory", var27);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    boolean var31 = var25.canPropertyBeDefined(var29, "BANG");
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.Node var34 = var25.createParameters(var33);
    com.google.javascript.rhino.jstype.JSType var35 = var22.evaluate(var23, var25);
    com.google.javascript.rhino.jstype.JSType var36 = var35.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var37 = var36.dereference();
    com.google.javascript.rhino.jstype.FunctionType var38 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(var36);
    com.google.javascript.rhino.jstype.SimpleSlot var40 = new com.google.javascript.rhino.jstype.SimpleSlot("function (): {1096500211}", var36, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test219"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     var0.parse();
// 
//   }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test220"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    java.lang.String var16 = var14.getDeprecationReason();
    boolean var17 = var14.isConsistentIdGenerator();
    com.google.javascript.rhino.Node var18 = var14.getAssociatedNode();
    boolean var19 = var18.isOnlyModifiesThisCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var18.setDouble(0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test221"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    java.util.Collection var3 = var0.getNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var7 = var5.recordExterns();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isArrayLit();
    com.google.javascript.rhino.Node var16 = var11.getNext();
    var5.markTypeNode(var11, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isVarArgs();
    com.google.javascript.rhino.Node var31 = var26.getChildAtIndex(1);
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.JSDocInfo var38 = var35.getJSDocInfo();
    com.google.javascript.rhino.Node var39 = var26.copyInformationFrom(var35);
    java.lang.Object var41 = null;
    var26.putProp(0, var41);
    com.google.javascript.rhino.JSTypeExpression var44 = new com.google.javascript.rhino.JSTypeExpression(var26, "()");
    com.google.javascript.rhino.JSTypeExpression var45 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var44);
    boolean var46 = var5.recordBaseType(var44);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    java.util.Collection var56 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var57 = var0.isConnectedInDirection((java.lang.Object)var5, (java.lang.Object)var56);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test222"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.lang.String var23 = var18.getMeaning();
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    boolean var30 = var27.isVarArgs();
    boolean var31 = var27.isArrayLit();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var34 = var33.isGetterDef();
    var33.putIntProp((-1), 10);
    var27.addChildrenToFront(var33);
    boolean var39 = var33.isNot();
    int var40 = var33.getSideEffectFlags();
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    com.google.javascript.jscomp.JSModule var48 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var49 = var48.getDependencies();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.block(var49);
    com.google.javascript.rhino.jstype.FunctionType var51 = var42.createFunctionTypeWithVarArgs(var46, var49);
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var54 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var53);
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    boolean var90 = var54.addVarArgs(var89);
    boolean var91 = var89.isEnumElementType();
    boolean var92 = var89.isNullable();
    boolean var93 = var89.matchesNumberContext();
    boolean var94 = var51.differsFrom(var89);
    var33.setJSType((com.google.javascript.rhino.jstype.JSType)var51);
    var18.setAssociatedNode(var33);
    boolean var97 = var33.isDefaultCase();
    boolean var98 = var33.isGetterDef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test223"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    var0.setRenamePrefixNamespace("function (): {540092593}");
    var0.setOptimizeReturns(false);
    com.google.javascript.jscomp.ErrorFormat var36 = null;
    var0.setErrorFormat(var36);
    var0.setOutputCharset("hi!. BANG 0\n    STRING hi 0 [length: 2]\n at (unknown source) line (unknown line) : (unknown column)");
    var0.setCheckControlStructures(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test224"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var4.addChildrenToFront(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test225"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var3 = var2.isGetterDef();
    boolean var4 = var2.isNE();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var2);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var8 = var7.siblings();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isArrayLit();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    boolean var34 = var12.hasChild(var29);
    boolean var35 = var29.isNot();
    int var36 = var29.getChildCount();
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(10, var2, var7, var29, 153, 10);
    boolean var40 = var7.isNew();
    int var41 = var7.getLength();
    com.google.javascript.rhino.Node var43 = var7.getAncestor(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test226"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var9.isQualifiedName();
    com.google.javascript.rhino.Node var12 = var9.cloneNode();
    com.google.javascript.rhino.Node var13 = null;
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var17 = var15.recordExterns();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isArrayLit();
    com.google.javascript.rhino.Node var26 = var21.getNext();
    var15.markTypeNode(var21, 10, 100, 0, 0, false);
    boolean var33 = var21.isCall();
    var21.setLineno(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.ifNode(var12, var13, var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test227() {}
//   public void test227() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test227"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var1 = var0.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.ErrorManager var3 = var0.getErrorManager();
//     com.google.javascript.jscomp.LightweightMessageFormatter var4 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.languageMode();
//     double var6 = var0.getProgress();
//     com.google.javascript.jscomp.JSSourceFile var7 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var8 = new com.google.javascript.jscomp.JSSourceFile[] { var7};
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getDependencies();
//     var10.removeAll();
//     com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     var14.removeAll();
//     var10.addDependency(var14);
//     java.util.List var17 = var10.getInputs();
//     java.lang.String var18 = var10.getName();
//     com.google.javascript.jscomp.JSModule[] var19 = new com.google.javascript.jscomp.JSModule[] { var10};
//     com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var21 = null;
//     var20.setStripTypes(var21);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var24 = var23.getDirectedGraphNodes();
//     java.util.List var25 = var23.getEdges();
//     var20.setManageClosureDependencies(var25);
//     var20.setDevirtualizePrototypeMethods(true);
//     var20.setCollapsePropertiesOnExternTypes(false);
//     var20.setShadowVariables(false);
//     com.google.javascript.jscomp.CompilerOptions var33 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var34 = null;
//     var33.setStripTypes(var34);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var37 = var36.getDirectedGraphNodes();
//     java.util.List var38 = var36.getEdges();
//     var33.setManageClosureDependencies(var38);
//     boolean var40 = var33.isExternExportsEnabled();
//     var33.setCheckCaja(false);
//     java.util.Set var43 = null;
//     var33.setReplaceStringsReservedStrings(var43);
//     com.google.javascript.rhino.JSDocInfoBuilder var46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var47 = var46.recordExpose();
//     boolean var49 = var46.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var54 = var53.getNext();
//     com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
//     com.google.javascript.rhino.InputId var56 = com.google.javascript.jscomp.NodeUtil.getInputId(var53);
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     var53.setJSType(var57);
//     com.google.javascript.rhino.JSDocInfo var59 = var46.build(var53);
//     java.lang.String var60 = var59.getFileOverview();
//     java.util.Set var61 = var59.getModifies();
//     var33.setReplaceStringsReservedStrings(var61);
//     var33.setUnaliasableGlobals("");
//     com.google.javascript.jscomp.DiagnosticType var67 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var69 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make(var67, var69);
//     int var71 = var70.getCharno();
//     com.google.javascript.jscomp.CheckLevel var72 = var70.getDefaultLevel();
//     var33.setCheckGlobalThisLevel(var72);
//     var20.setCheckMissingGetCssNameLevel(var72);
//     com.google.javascript.jscomp.Result var75 = var0.compile(var8, var19, var20);
// 
//   }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test228"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    com.google.javascript.jscomp.VariableRenamingPolicy var11 = null;
    var0.setVariableRenaming(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test229"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var2 = null;
    var1.setStripTypes(var2);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var5 = var4.getDirectedGraphNodes();
    java.util.List var6 = var4.getEdges();
    var1.setManageClosureDependencies(var6);
    var1.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
    com.google.javascript.jscomp.JSError var15 = null;
    com.google.javascript.jscomp.CheckLevel var16 = var14.level(var15);
    var1.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var14);
    com.google.javascript.jscomp.graph.GraphNode var18 = var0.getNode((java.lang.Object)var14);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.Node.newString("{proxy:{1743833346}}", 2, 153);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var30 = var28.getBooleanProp((-1));
    var28.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var34 = new com.google.javascript.rhino.JSTypeExpression(var28, "goog.abstractMethod");
    boolean var35 = var23.isPrototypeAlias(var28);
    com.google.javascript.rhino.Node var36 = var22.useSourceInfoIfMissingFromForTree(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var37 = var0.getInEdges((java.lang.Object)var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test230"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     var0.popNodeAnnotations();
// 
//   }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test231"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setDefineToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var0.setCommonJSModulePathPrefix("(InputId: )");
    var0.setInlineFunctions(true);
    var0.enableExternExports(false);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test232"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.jscomp.VariableRenamingPolicy var12 = null;
    var0.setVariableRenaming(var12);
    var0.setColorizeErrorOutput(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test233"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var11 = var0.getTweakProcessing();
    java.lang.String var12 = var11.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "OFF"+ "'", var12.equals("OFF"));

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test234"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = var14.getVisibility();
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var22 = null;
    var21.setStripTypes(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var25 = var24.getDirectedGraphNodes();
    java.util.List var26 = var24.getEdges();
    var21.setManageClosureDependencies(var26);
    var21.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var34 = new com.google.javascript.jscomp.ComposeWarningsGuard(var33);
    com.google.javascript.jscomp.JSError var35 = null;
    com.google.javascript.jscomp.CheckLevel var36 = var34.level(var35);
    var21.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var34);
    boolean var38 = var20.equals((java.lang.Object)var34);
    java.lang.Class var39 = var20.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var41 = java.lang.Enum.<java.lang.Enum>valueOf(var39, "{proxy:{599688852}}");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test235"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordPreserveTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test236"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newNumber((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test237"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.setQuotedString();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.NodeUtil.newExpr(var6);
    boolean var9 = var8.isLabelName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var11 = var10.getGraphvizEdges();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var15 = var13.getBooleanProp((-1));
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.Node var22 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var23 = var13.useSourceInfoFromForTree(var19);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var10.getDirectedGraphNode((java.lang.Object)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.propdef(var8, var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test238"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var16.unregisterPropertyOnType("Unversioned directory", var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.block(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var16.createFunctionTypeWithVarArgs(var20, var23);
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var28 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.jstype.StaticScope var51 = null;
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var53.unregisterPropertyOnType("Unversioned directory", var55);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
    com.google.javascript.rhino.jstype.JSType var60 = null;
    com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
    com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
    com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
    boolean var64 = var28.addVarArgs(var63);
    boolean var65 = var63.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.FunctionType var77 = var16.createConstructorType(var63, var75);
    com.google.javascript.rhino.jstype.JSType var79 = var77.getPropertyType("");
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var82 = var10.defineSynthesizedProperty("BANG 0\n    STRING hi 0 [length: 2]\n", var79, var81);
    com.google.javascript.jscomp.CompilerOptions var84 = new com.google.javascript.jscomp.CompilerOptions();
    var84.setChainCalls(true);
    var84.setInlineLocalFunctions(false);
    var84.setDefineToStringLiteral("2014/12/24 11:10", "(LABEL_NAME hi!)");
    var81.putProp(2, (java.lang.Object)var84);
    com.google.javascript.jscomp.JSModule var94 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var95 = var94.getProvides();
    java.util.List var96 = var94.getRequires();
    java.util.Set var97 = var94.getAllDependencies();
    var84.setStripTypes(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test239"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    int var6 = var5.getSourceOffset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var7 = var5.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test240"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setLooseTypes(false);
    boolean var18 = var0.isRemoveUnusedClassProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test241"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getExportPropertyFunction();
    java.lang.String var21 = var0.getAbstractMethodName();
    java.util.Collection var22 = var0.getIndirectlyDeclaredProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "goog.abstractMethod"+ "'", var21.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test242"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isConstant("LABEL_NAME hi!");
    boolean var46 = var33.isPrivate("OFF");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test243"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var5 = var1.recordParameterDescription("InputId: InputId: ", "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var7 = var1.addReference("()");
    boolean var9 = var1.hasParameter("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test244() {}
//   public void test244() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test244"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isOr();
//     java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var11.unregisterPropertyOnType("Unversioned directory", var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var18 = var17.getDependencies();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
//     com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var22.unregisterPropertyOnType("Unversioned directory", var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var29 = var28.getDependencies();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
//     boolean var32 = var31.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var34 = var33.getDirectedGraphNodes();
//     java.lang.Iterable var35 = var33.getDirectedGraphNodes();
//     java.util.List var36 = var33.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var38 = null;
//     var37.setStripTypes(var38);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var41 = var40.getDirectedGraphNodes();
//     java.util.List var42 = var40.getEdges();
//     var37.setManageClosureDependencies(var42);
//     boolean var44 = var37.isExternExportsEnabled();
//     var37.setCheckCaja(false);
//     java.util.Set var47 = null;
//     var37.setReplaceStringsReservedStrings(var47);
//     var37.setAliasAllStrings(true);
//     var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var54 = null;
//     var53.setStripTypes(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var57 = var56.getDirectedGraphNodes();
//     java.util.List var58 = var56.getEdges();
//     var53.setManageClosureDependencies(var58);
//     boolean var60 = var53.isExternExportsEnabled();
//     var53.setCheckCaja(false);
//     var53.setGroupVariableDeclarations(true);
//     java.util.Map var65 = var53.getDefineReplacements();
//     var37.setPropertyInvalidationErrors(var65);
//     var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
//     boolean var68 = var31.canBeCalled();
//     boolean var69 = var31.hasAnyTemplateInternal();
//     var31.clearResolved();
//     boolean var71 = var31.isReturnTypeInferred();
//     java.lang.Iterable var72 = var31.getAllExtendedInterfaces();
//     java.lang.String var73 = var31.toDebugHashCodeString();
//     com.google.javascript.rhino.jstype.ObjectType var74 = var31.getPrototype();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var71 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var73 + "' != '" + "function (): {565834337}"+ "'", var73.equals("function (): {565834337}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var74);
// 
//   }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test245"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var21.setJSType(var22);
    boolean var24 = var21.isScript();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var29 = var28.isGetterDef();
    boolean var30 = var28.isAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.String var48 = var47.toStringTree();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var56 = var52.getBooleanProp(100);
    int var57 = var52.getSideEffectFlags();
    boolean var58 = var52.isDefaultCase();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(1, var28, var47, var52);
    java.lang.String var60 = var14.extractClassNameIfProvide(var21, var52);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    var0.setDebugFunctionSideEffectsPath("");
    var0.setOptimizeCalls(true);
    com.google.javascript.jscomp.CssRenamingMap var66 = null;
    var0.setCssRenamingMap(var66);
    var0.setConvertToDottedProperties(false);
    var0.setTweakToStringLiteral("function (): {175702431}", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var48.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test246"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.ErrorFormat var7 = null;
    var0.setErrorFormat(var7);
    var0.setRenamePrefix("hi");
    var0.setAcceptConstKeyword(true);
    var0.setManageClosureDependencies(true);
    boolean var15 = var0.assumeStrictThis();
    var0.setCollapseObjectLiterals(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test247"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var8 = var6.isConstantKey("2014/12/24 11:10");
    java.util.Collection var9 = var6.getAssertionFunctions();
    java.lang.String var10 = var6.getAbstractMethodName();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var15, var20);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var22 = var6.getClassesDefinedByCall(var15);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    boolean var28 = var23.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isOptionalArg();
    java.lang.String var40 = var32.toString(false, false, true);
    java.util.List var41 = var23.identifyTypeDeclarationCall(var32);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var42 = var6.getClassesDefinedByCall(var32);
    java.lang.String var43 = var3.extractClassNameIfRequire(var5, var32);
    boolean var44 = var32.isRegExp();
    java.lang.String var45 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var32);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.returnNode();
    var46.setSourceFileForTesting("null(null)");
    boolean var49 = var46.isDo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.or(var32, var46);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "goog.abstractMethod"+ "'", var10.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "BANG"+ "'", var40.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test248"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.jscomp.CheckLevel var5 = null;
    var0.setCheckRequires(var5);
    var0.setSummaryDetailLevel((-1));

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test249"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    java.lang.Iterable var13 = var10.getCtorImplementedInterfaces();
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.util.Collection var29 = var28.getAuthors();
    java.lang.String var30 = var28.getDeprecationReason();
    boolean var31 = var28.isConsistentIdGenerator();
    var10.setJSDocInfo(var28);
    java.util.Set var33 = var28.getParameterNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "2014/12/24 11:10"+ "'", var30.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test250"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setAliasExternals(false);
    var0.setRemoveUnusedPrototypePropertiesInExterns(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test251"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("goog.exportProperty", "");
    com.google.javascript.jscomp.DiagnosticType[] var3 = new com.google.javascript.jscomp.DiagnosticType[] { var2};
    com.google.javascript.jscomp.DiagnosticGroup var4 = new com.google.javascript.jscomp.DiagnosticGroup(var3);
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var16 = var12.getBooleanProp(100);
    int var17 = var12.getSideEffectFlags();
    com.google.javascript.jscomp.CheckLevel var19 = null;
    com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var19, "");
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.DiagnosticType var25 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var23, "");
    int var26 = var21.compareTo(var25);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    boolean var33 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var31);
    int var34 = var31.getLength();
    com.google.javascript.rhino.Node var35 = null;
    boolean var36 = var31.hasChild(var35);
    com.google.javascript.rhino.Node var37 = var29.useSourceInfoIfMissingFromForTree(var31);
    var31.setSourceFileForTesting("Unversioned directory");
    boolean var40 = var31.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var41 = var31.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var45 = null;
    java.util.logging.Logger var46 = null;
    com.google.javascript.jscomp.LoggerErrorManager var47 = new com.google.javascript.jscomp.LoggerErrorManager(var45, var46);
    com.google.javascript.jscomp.Compiler var48 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var47);
    com.google.javascript.jscomp.Scope var49 = var48.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var50 = null;
    com.google.javascript.jscomp.NodeTraversal var51 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var48, var50);
    com.google.javascript.jscomp.Scope var52 = var51.getScope();
    com.google.javascript.rhino.Node var53 = null;
    com.google.javascript.jscomp.DiagnosticType var56 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var58 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var59 = com.google.javascript.jscomp.JSError.make(var56, var58);
    com.google.javascript.jscomp.DiagnosticType var60 = var59.getType();
    java.lang.String[] var62 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var63 = var51.makeError(var53, var60, var62);
    com.google.javascript.jscomp.JSError var64 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var31, var44, var62);
    com.google.javascript.jscomp.JSError var65 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var12, var21, var62);
    com.google.javascript.jscomp.JSError var66 = com.google.javascript.jscomp.JSError.make(var7, var62);
    boolean var67 = var4.matches(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test252"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    java.util.logging.Logger var7 = null;
    com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var7);
    com.google.javascript.jscomp.JSError[] var9 = var8.getWarnings();
    var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var8);
    com.google.javascript.jscomp.JSError[] var11 = var8.getErrors();
    var8.generateReport();
    double var13 = var8.getTypedPercent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0d);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test253"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(100, "OFF", 10, 306);
    boolean var5 = var4.isSyntheticBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test254"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setTweakToStringLiteral("BANG 0\n    STRING hi 0 [length: 2]\n", "InputId: ");
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var0.setReportMissingOverride(var11);
    boolean var13 = var0.shouldColorizeErrorOutput();
    var0.setManageClosureDependencies(true);
    com.google.common.collect.Multimap var16 = null;
    var0.setCustomPasses(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test255"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    var0.setReportMissingOverride(var15);
    com.google.javascript.jscomp.ErrorFormat var17 = null;
    var0.setErrorFormat(var17);
    var0.setRemoveAbstractMethods(true);
    var0.setOutputJsStringUsage(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test256"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.Node var19 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var20 = var10.useSourceInfoFromForTree(var16);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    boolean var30 = var24.isBlock();
    com.google.javascript.rhino.Node var31 = var24.getParent();
    boolean var32 = var24.isBreak();
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.InputId var36 = var34.getInputId();
    boolean var37 = var34.isGetProp();
    com.google.javascript.rhino.Node var38 = var24.clonePropsFrom(var34);
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node(0, var4, var10, var34);
    com.google.javascript.rhino.Node var40 = var34.removeFirstChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test257() {}
//   public void test257() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test257"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var4 = var3.getNext();
//     com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
//     boolean var6 = var3.isVarArgs();
//     com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = var12.getNext();
//     com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
//     com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
//     com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
//     java.lang.Object var18 = null;
//     var3.putProp(0, var18);
//     com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
//     com.google.javascript.rhino.jstype.StaticScope var22 = null;
//     com.google.javascript.rhino.ErrorReporter var23 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var24.unregisterPropertyOnType("Unversioned directory", var26);
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
//     com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
//     com.google.javascript.rhino.ErrorReporter var36 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
//     var37.setResolveMode(var38);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
//     var42.setResolveMode(var43);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
//     com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var51 = var50.getNext();
//     com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
//     boolean var53 = var50.isVarArgs();
//     com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var60 = var59.getNext();
//     com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
//     com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
//     com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
//     java.lang.Object var65 = null;
//     var50.putProp(0, var65);
//     com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
//     com.google.javascript.rhino.jstype.StaticScope var69 = null;
//     com.google.javascript.rhino.ErrorReporter var70 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
//     com.google.javascript.rhino.jstype.JSType var73 = null;
//     var71.unregisterPropertyOnType("Unversioned directory", var73);
//     com.google.javascript.rhino.jstype.JSType var75 = null;
//     boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
//     com.google.javascript.rhino.jstype.JSType var78 = null;
//     com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
//     com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
//     com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
//     com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
//     java.util.Collection var84 = var42.getDirectImplementors(var83);
//     com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
//     boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
//     com.google.javascript.rhino.jstype.FunctionBuilder var91 = new com.google.javascript.rhino.jstype.FunctionBuilder(var24);
//     com.google.javascript.rhino.jstype.JSType var96 = var24.createNamedType("hi", "(LABEL_NAME hi!)", 306, 0);
//     var24.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.JSTypeNative var98 = null;
//     com.google.javascript.rhino.jstype.JSType var99 = var24.getNativeType(var98);
// 
//   }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test258"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     var1.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = var11.getNext();
//     com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
//     boolean var14 = var11.isVarArgs();
//     boolean var15 = var11.isFor();
//     boolean var16 = var11.isNumber();
//     com.google.javascript.rhino.Node var17 = var11.getNext();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = var21.getNext();
//     com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
//     boolean var24 = var21.isVarArgs();
//     com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = var30.getNext();
//     com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
//     com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
//     com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
//     java.lang.Object var36 = null;
//     var21.putProp(0, var36);
//     com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
//     com.google.javascript.rhino.jstype.StaticScope var40 = null;
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     var42.unregisterPropertyOnType("Unversioned directory", var44);
//     com.google.javascript.rhino.jstype.JSType var46 = null;
//     boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
//     com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
//     com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
//     com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
//     boolean var55 = var53.isConstructor();
//     com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
//     com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
//     com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
//     boolean var59 = var58.isNominalType();
//     java.lang.String var60 = var58.toString();
//     com.google.javascript.rhino.jstype.Visitor var61 = null;
//     java.lang.Object var62 = var58.visit(var61);
// 
//   }

  public void test259() {}
//   public void test259() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test259"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isOr();
//     java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var11.unregisterPropertyOnType("Unversioned directory", var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var18 = var17.getDependencies();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
//     com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var22.unregisterPropertyOnType("Unversioned directory", var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var29 = var28.getDependencies();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
//     boolean var32 = var31.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var34 = var33.getDirectedGraphNodes();
//     java.lang.Iterable var35 = var33.getDirectedGraphNodes();
//     java.util.List var36 = var33.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var38 = null;
//     var37.setStripTypes(var38);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var41 = var40.getDirectedGraphNodes();
//     java.util.List var42 = var40.getEdges();
//     var37.setManageClosureDependencies(var42);
//     boolean var44 = var37.isExternExportsEnabled();
//     var37.setCheckCaja(false);
//     java.util.Set var47 = null;
//     var37.setReplaceStringsReservedStrings(var47);
//     var37.setAliasAllStrings(true);
//     var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var54 = null;
//     var53.setStripTypes(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var57 = var56.getDirectedGraphNodes();
//     java.util.List var58 = var56.getEdges();
//     var53.setManageClosureDependencies(var58);
//     boolean var60 = var53.isExternExportsEnabled();
//     var53.setCheckCaja(false);
//     var53.setGroupVariableDeclarations(true);
//     java.util.Map var65 = var53.getDefineReplacements();
//     var37.setPropertyInvalidationErrors(var65);
//     var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
//     boolean var68 = var31.canBeCalled();
//     boolean var69 = var31.hasAnyTemplateInternal();
//     boolean var70 = var31.isInstanceType();
//     java.lang.String var71 = var31.toDebugHashCodeString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var70 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var71 + "' != '" + "function (): {140836661}"+ "'", var71.equals("function (): {140836661}"));
// 
//   }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test260"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setDevirtualizePrototypeMethods(true);
    var0.resetWarningsGuard();
    var0.setManageClosureDependencies(false);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var23 = var21.hasNode((java.lang.Object)1);
    java.util.List var24 = var21.getGraphvizEdges();
    java.lang.Iterable var25 = var21.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.LightweightMessageFormatter var29 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    boolean var30 = var21.hasNode((java.lang.Object)var26);
    com.google.javascript.jscomp.MessageFormatter var31 = null;
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var31, var32);
    com.google.javascript.jscomp.Compiler var34 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var33);
    com.google.javascript.jscomp.Scope var35 = var34.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var36 = null;
    com.google.javascript.jscomp.NodeTraversal var37 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var34, var36);
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var39 = null;
    var38.setStripTypes(var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    var38.setManageClosureDependencies(var43);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.script(var43);
    var37.traverseRoots(var43);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var48 = var47.getDirectedGraphNodes();
    java.util.List var49 = var47.getEdges();
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    var50.setChainCalls(true);
    java.util.logging.Logger var53 = null;
    com.google.javascript.jscomp.LoggerErrorManager var54 = new com.google.javascript.jscomp.LoggerErrorManager(var53);
    var50.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var54);
    var50.setGatherCssNames(false);
    var26.<com.google.javascript.jscomp.SourceFile>initModules(var43, var49, var50);
    var50.setAssumeStrictThis(false);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var61 = var50.getTracerMode();
    var0.setTracerMode(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test261"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var49 = var48.isGetterDef();
    boolean var50 = var48.isNE();
    boolean var51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var48);
    com.google.javascript.rhino.Node var52 = var7.clonePropsFrom(var48);
    boolean var53 = var7.isFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test262"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     boolean var2 = var1.acceptEcmaScript5();
// 
//   }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test263"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var39);
    var0.setOutputJsStringUsage(false);
    var0.setTweakToStringLiteral("function (): {140836661}", "hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test264() {}
//   public void test264() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test264"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     var3.removeRequire("goog.abstractMethod: WARNING - \n");
// 
//   }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test265"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isInstanceType();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var71 = var31.getPossibleToBooleanOutcomes();
    com.google.javascript.rhino.jstype.JSType var73 = var31.getRestrictedTypeGivenToBooleanOutcome(false);
    com.google.javascript.rhino.jstype.ObjectType var74 = var31.toObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test266"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    var0.setCheckControlStructures(true);
    var0.setCoalesceVariableNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test267"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var4 = var3.hasOneChild();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    boolean var10 = var9.isArrayLit();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
    java.lang.String var22 = var9.getQualifiedName();
    boolean var23 = var9.isFor();
    boolean var24 = var9.isDo();
    com.google.javascript.rhino.Node var25 = var9.removeChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test268"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.recordNoShadow();
    boolean var6 = var1.recordReturnDescription("()");
    boolean var8 = var1.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var13 = var11.recordExterns();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isArrayLit();
    com.google.javascript.rhino.Node var22 = var17.getNext();
    var11.markTypeNode(var17, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.JSTypeExpression var51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var50);
    boolean var52 = var11.recordBaseType(var50);
    com.google.javascript.jscomp.MessageFormatter var53 = null;
    java.util.logging.Logger var54 = null;
    com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
    com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
    boolean var57 = var50.equals((java.lang.Object)var56);
    boolean var58 = var1.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var50);
    boolean var59 = var50.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test269"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    boolean var35 = var29.isVoidType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test270"); }


    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var2 = null;
    var1.setStripTypes(var2);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var5 = var4.getDirectedGraphNodes();
    java.util.List var6 = var4.getEdges();
    var1.setManageClosureDependencies(var6);
    var1.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var1.setColorizeErrorOutput(true);
    var1.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    var15.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var28 = new com.google.javascript.jscomp.ComposeWarningsGuard(var27);
    com.google.javascript.jscomp.JSError var29 = null;
    com.google.javascript.jscomp.CheckLevel var30 = var28.level(var29);
    var15.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var28);
    var1.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var28);
    var1.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    var35.setManageClosureDependencies(var40);
    var35.setDevirtualizePrototypeMethods(true);
    var35.setCollapsePropertiesOnExternTypes(false);
    var35.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    java.util.Set var58 = null;
    var48.setReplaceStringsReservedStrings(var58);
    com.google.javascript.rhino.JSDocInfoBuilder var61 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var62 = var61.recordExpose();
    boolean var64 = var61.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var69 = var68.getNext();
    com.google.javascript.rhino.Node var70 = var66.srcrefTree(var68);
    com.google.javascript.rhino.InputId var71 = com.google.javascript.jscomp.NodeUtil.getInputId(var68);
    com.google.javascript.rhino.jstype.JSType var72 = null;
    var68.setJSType(var72);
    com.google.javascript.rhino.JSDocInfo var74 = var61.build(var68);
    java.lang.String var75 = var74.getFileOverview();
    java.util.Set var76 = var74.getModifies();
    var48.setReplaceStringsReservedStrings(var76);
    var48.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var82 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var84 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var85 = com.google.javascript.jscomp.JSError.make(var82, var84);
    int var86 = var85.getCharno();
    com.google.javascript.jscomp.CheckLevel var87 = var85.getDefaultLevel();
    var48.setCheckGlobalThisLevel(var87);
    var35.setCheckMissingGetCssNameLevel(var87);
    var1.setCheckProvides(var87);
    java.lang.String var91 = var87.toString();
    com.google.javascript.jscomp.DiagnosticType var93 = com.google.javascript.jscomp.DiagnosticType.make("{160498324}", var87, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "ERROR"+ "'", var91.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test271"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    java.lang.String var4 = var0.getAbstractMethodName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var9, var14);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var9);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var19 = var17.isConstantKey("2014/12/24 11:10");
    java.util.Collection var20 = var17.getAssertionFunctions();
    boolean var22 = var17.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isVarArgs();
    boolean var30 = var26.isOptionalArg();
    java.lang.String var34 = var26.toString(false, false, true);
    java.util.List var35 = var17.identifyTypeDeclarationCall(var26);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var36 = var0.getClassesDefinedByCall(var26);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    boolean var45 = var41.isOptionalArg();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(0, var41, var46);
    var46.setSourceEncodedPositionForTree(0);
    boolean var50 = var46.isHook();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.tryCatch(var26, var46);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.abstractMethod"+ "'", var4.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG"+ "'", var34.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test272"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.removeFirstChild();
    boolean var5 = var1.isDefaultCase();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var8 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var7);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    com.google.javascript.rhino.Node var17 = var12.getChildAtIndex(1);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.JSDocInfo var24 = var21.getJSDocInfo();
    com.google.javascript.rhino.Node var25 = var12.copyInformationFrom(var21);
    java.lang.Object var27 = null;
    var12.putProp(0, var27);
    com.google.javascript.rhino.JSTypeExpression var30 = new com.google.javascript.rhino.JSTypeExpression(var12, "()");
    com.google.javascript.rhino.jstype.StaticScope var31 = null;
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.unregisterPropertyOnType("Unversioned directory", var35);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    boolean var39 = var33.canPropertyBeDefined(var37, "BANG");
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.jstype.JSType[] var41 = new com.google.javascript.rhino.jstype.JSType[] { var40};
    com.google.javascript.rhino.Node var42 = var33.createParameters(var41);
    com.google.javascript.rhino.jstype.JSType var43 = var30.evaluate(var31, var33);
    boolean var44 = var8.addVarArgs(var43);
    boolean var45 = var43.isEnumElementType();
    var1.setJSType(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test273() {}
//   public void test273() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test273"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.rhino.InputId var9 = var6.getInputId();
//     com.google.javascript.jscomp.Region var11 = var6.getRegion(153);
// 
//   }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test274"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isFunctionPrototypeType();
    boolean var95 = var32.canBeCalled();
    java.lang.Iterable var96 = var32.getExtendedInterfaces();
    boolean var97 = var32.isNativeObjectType();
    boolean var98 = var32.matchesUint32Context();
    boolean var99 = var32.isEmptyType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test275"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var1 = var0.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make(var5, var7);
    int var9 = var8.getCharno();
    com.google.javascript.jscomp.CheckLevel var10 = var8.getDefaultLevel();
    java.lang.String var11 = var2.formatError(var8);
    var2.setColorize(true);
    com.google.javascript.jscomp.Compiler var14 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var15 = var14.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var16 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var14);
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var21 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make(var19, var21);
    int var23 = var22.getCharno();
    com.google.javascript.jscomp.CheckLevel var24 = var22.getDefaultLevel();
    java.lang.String var25 = var16.formatError(var22);
    int var26 = var22.getLineNumber();
    java.lang.String var27 = var2.formatWarning(var22);
    int var28 = var22.getCharno();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var11.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var25.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var27.equals("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test276"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var12 = null;
    var11.setBrokenClosureRequiresLevel(var12);
    var11.setLocale("");
    var11.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    boolean var25 = var18.isExternExportsEnabled();
    var18.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var32 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make(var30, var32);
    int var34 = var33.getCharno();
    com.google.javascript.jscomp.CheckLevel var35 = var33.getDefaultLevel();
    var18.setReportUnknownTypes(var35);
    var11.setBrokenClosureRequiresLevel(var35);
    var0.setCheckUnreachableCode(var35);
    var0.setCheckControlStructures(true);
    com.google.javascript.jscomp.PropertyRenamingPolicy var41 = null;
    var0.setPropertyRenaming(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test277"); }


    com.google.javascript.jscomp.CheckLevel var4 = null;
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var4, "");
    com.google.javascript.jscomp.CheckLevel var8 = null;
    com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var8, "");
    int var11 = var6.compareTo(var10);
    com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    boolean var21 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var19);
    int var22 = var19.getLength();
    com.google.javascript.rhino.Node var23 = null;
    boolean var24 = var19.hasChild(var23);
    com.google.javascript.rhino.Node var25 = var17.useSourceInfoIfMissingFromForTree(var19);
    var19.setSourceFileForTesting("Unversioned directory");
    boolean var28 = var19.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var29 = var19.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var33 = null;
    java.util.logging.Logger var34 = null;
    com.google.javascript.jscomp.LoggerErrorManager var35 = new com.google.javascript.jscomp.LoggerErrorManager(var33, var34);
    com.google.javascript.jscomp.Compiler var36 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var35);
    com.google.javascript.jscomp.Scope var37 = var36.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
    com.google.javascript.jscomp.NodeTraversal var39 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var36, var38);
    com.google.javascript.jscomp.Scope var40 = var39.getScope();
    com.google.javascript.rhino.Node var41 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var46 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make(var44, var46);
    com.google.javascript.jscomp.DiagnosticType var48 = var47.getType();
    java.lang.String[] var50 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var51 = var39.makeError(var41, var48, var50);
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var19, var32, var50);
    com.google.javascript.jscomp.JSError var53 = com.google.javascript.jscomp.JSError.make(var14, var50);
    com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make("hi", 10, (-1), var10, var50);
    java.lang.String[] var56 = new java.lang.String[] { "BANG 0\n    STRING hi 0 [length: 2]\n"};
    com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make(var10, var56);
    com.google.javascript.rhino.JSDocInfoBuilder var59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var60 = var59.recordExpose();
    boolean var62 = var59.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    com.google.javascript.rhino.InputId var69 = com.google.javascript.jscomp.NodeUtil.getInputId(var66);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    var66.setJSType(var70);
    com.google.javascript.rhino.JSDocInfo var72 = var59.build(var66);
    java.lang.String var73 = var72.getFileOverview();
    boolean var74 = var72.hasFileOverview();
    boolean var75 = var72.hasReturnType();
    boolean var77 = var72.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var72.setLicense("goog.abstractMethod");
    boolean var80 = var72.isExport();
    java.util.Set var81 = var72.getSuppressions();
    boolean var82 = var10.equals((java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test278"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    int var6 = var3.getLength();
    com.google.javascript.rhino.Node var7 = null;
    boolean var8 = var3.hasChild(var7);
    com.google.javascript.rhino.Node var9 = var1.useSourceInfoIfMissingFromForTree(var3);
    var3.setSourceFileForTesting("Unversioned directory");
    boolean var12 = var3.isDefaultCase();
    java.lang.String var13 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "BANG 0 [source_file: Unversioned directory]"+ "'", var13.equals("BANG 0 [source_file: Unversioned directory]"));

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test279"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    var10.clearCachedValues();
    boolean var16 = var10.hasDisplayName();
    java.lang.Iterable var17 = var10.getExtendedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    var18.setDevirtualizePrototypeMethods(true);
    var18.setCollapsePropertiesOnExternTypes(false);
    var18.setRemoveUnusedLocalVars(false);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var35 = var32.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    com.google.javascript.rhino.InputId var42 = com.google.javascript.jscomp.NodeUtil.getInputId(var39);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var39.setJSType(var43);
    com.google.javascript.rhino.JSDocInfo var45 = var32.build(var39);
    java.lang.String var46 = var45.getFileOverview();
    java.util.Set var47 = var45.getModifies();
    java.util.List var48 = var45.getImplementedInterfaces();
    var18.setSourceMapLocationMappings(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.setExtendedInterfaces(var48);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test280"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.util.Collection var29 = var28.getAuthors();
    com.google.common.collect.ImmutableList var30 = var28.getTemplateTypeNames();
    var0.setSourceMapLocationMappings((java.util.List)var30);
    var0.setCheckCaja(false);
    var0.setRemoveClosureAsserts(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test281"); }


    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isOr();
    java.lang.String var10 = var1.extractClassNameIfRequire(var2, var6);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.block(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var12.createFunctionTypeWithVarArgs(var16, var19);
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var33 = var32.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.lang.Iterable var36 = var34.getDirectedGraphNodes();
    java.util.List var37 = var34.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var39 = null;
    var38.setStripTypes(var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    var38.setManageClosureDependencies(var43);
    boolean var45 = var38.isExternExportsEnabled();
    var38.setCheckCaja(false);
    java.util.Set var48 = null;
    var38.setReplaceStringsReservedStrings(var48);
    var38.setAliasAllStrings(true);
    var38.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    var54.setGroupVariableDeclarations(true);
    java.util.Map var66 = var54.getDefineReplacements();
    var38.setPropertyInvalidationErrors(var66);
    var1.defineDelegateProxyPrototypeProperties(var12, (com.google.javascript.rhino.jstype.StaticScope)var32, var37, var66);
    boolean var69 = var32.canBeCalled();
    boolean var70 = var32.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var72 = var32.getSlot("hi!");
    java.lang.String var73 = var32.getNormalizedReferenceName();
    java.util.List var74 = var32.getSubTypes();
    boolean var76 = var32.removeProperty("LinkedGraph");
    boolean var77 = var32.isReturnTypeInferred();
    java.lang.Iterable var78 = var32.getOwnImplementedInterfaces();
    com.google.javascript.rhino.jstype.SimpleSlot var80 = new com.google.javascript.rhino.jstype.SimpleSlot("BANG 0 [source_file: Unversioned directory]\n", (com.google.javascript.rhino.jstype.JSType)var32, true);
    com.google.javascript.rhino.jstype.BooleanLiteralSet var81 = var32.getPossibleToBooleanOutcomes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test282"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isFunctionPrototypeType();
    boolean var95 = var32.canBeCalled();
    boolean var96 = var32.isGlobalThisType();
    java.lang.Iterable var97 = var32.getCtorExtendedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType var98 = var32.toObjectType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var99 = var32.getInstanceType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test283"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var8 = var4.getBooleanProp(100);
    int var9 = var4.getSideEffectFlags();
    com.google.javascript.jscomp.CheckLevel var11 = null;
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var11, "");
    com.google.javascript.jscomp.CheckLevel var15 = null;
    com.google.javascript.jscomp.DiagnosticType var17 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var15, "");
    int var18 = var13.compareTo(var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    boolean var25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var23);
    int var26 = var23.getLength();
    com.google.javascript.rhino.Node var27 = null;
    boolean var28 = var23.hasChild(var27);
    com.google.javascript.rhino.Node var29 = var21.useSourceInfoIfMissingFromForTree(var23);
    var23.setSourceFileForTesting("Unversioned directory");
    boolean var32 = var23.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var33 = var23.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var37 = null;
    java.util.logging.Logger var38 = null;
    com.google.javascript.jscomp.LoggerErrorManager var39 = new com.google.javascript.jscomp.LoggerErrorManager(var37, var38);
    com.google.javascript.jscomp.Compiler var40 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var39);
    com.google.javascript.jscomp.Scope var41 = var40.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var42 = null;
    com.google.javascript.jscomp.NodeTraversal var43 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var40, var42);
    com.google.javascript.jscomp.Scope var44 = var43.getScope();
    com.google.javascript.rhino.Node var45 = null;
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var50 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var51 = com.google.javascript.jscomp.JSError.make(var48, var50);
    com.google.javascript.jscomp.DiagnosticType var52 = var51.getType();
    java.lang.String[] var54 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var55 = var43.makeError(var45, var52, var54);
    com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var23, var36, var54);
    com.google.javascript.jscomp.JSError var57 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var4, var13, var54);
    com.google.javascript.rhino.jstype.JSType var58 = var4.getJSType();
    boolean var59 = var4.isCase();
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    com.google.javascript.rhino.Node var65 = var61.srcrefTree(var63);
    boolean var66 = var63.isVarArgs();
    boolean var67 = var63.isArrayLit();
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    boolean var74 = var71.isVarArgs();
    com.google.javascript.rhino.Node var76 = var71.getChildAtIndex(1);
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var81 = var80.getNext();
    com.google.javascript.rhino.Node var82 = var78.srcrefTree(var80);
    com.google.javascript.rhino.JSDocInfo var83 = var80.getJSDocInfo();
    com.google.javascript.rhino.Node var84 = var71.copyInformationFrom(var80);
    boolean var85 = var63.hasChild(var80);
    boolean var86 = var80.isNot();
    int var87 = var80.getChildCount();
    com.google.javascript.rhino.InputId var89 = new com.google.javascript.rhino.InputId("LABEL_NAME hi!");
    var80.setInputId(var89);
    var4.setInputId(var89);
    java.lang.Object var92 = null;
    boolean var93 = var89.equals(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test284() {}
//   public void test284() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test284"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var2 = null;
//     var1.setStripTypes(var2);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var5 = var4.getDirectedGraphNodes();
//     java.util.List var6 = var4.getEdges();
//     var1.setManageClosureDependencies(var6);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.script(var6);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.paramList(var6);
//     boolean var10 = var9.isLabel();
//     com.google.javascript.rhino.Node var11 = null;
//     com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(2, var9, var11, 0, 2);
// 
//   }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test285"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearNodeAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var4 = var2.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.lang.String var20 = var19.getFileOverview();
    java.util.Set var21 = var19.getModifies();
    java.util.List var22 = var19.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var23 = var19.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var24 = var2.createDirectedGraphNode((java.lang.Object)var19);
    java.util.List var25 = var0.getDirectedSuccNodes(var24);
    var0.clearEdgeAnnotations();
    java.lang.Object var27 = null;
    com.google.javascript.jscomp.Compiler var28 = new com.google.javascript.jscomp.Compiler();
    var28.reportCodeChange();
    com.google.javascript.jscomp.Compiler.IntermediateState var30 = var28.getState();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var33 = var31.hasNode((java.lang.Object)1);
    java.util.List var34 = var31.getGraphvizEdges();
    java.lang.Iterable var35 = var31.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var36 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var37 = var36.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var38 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var36);
    com.google.javascript.jscomp.LightweightMessageFormatter var39 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var36);
    boolean var40 = var31.hasNode((java.lang.Object)var36);
    com.google.javascript.jscomp.MessageFormatter var41 = null;
    java.util.logging.Logger var42 = null;
    com.google.javascript.jscomp.LoggerErrorManager var43 = new com.google.javascript.jscomp.LoggerErrorManager(var41, var42);
    com.google.javascript.jscomp.Compiler var44 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var43);
    com.google.javascript.jscomp.Scope var45 = var44.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var46 = null;
    com.google.javascript.jscomp.NodeTraversal var47 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var44, var46);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.script(var53);
    var47.traverseRoots(var53);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    com.google.javascript.jscomp.CompilerOptions var60 = new com.google.javascript.jscomp.CompilerOptions();
    var60.setChainCalls(true);
    java.util.logging.Logger var63 = null;
    com.google.javascript.jscomp.LoggerErrorManager var64 = new com.google.javascript.jscomp.LoggerErrorManager(var63);
    var60.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var64);
    var60.setGatherCssNames(false);
    var36.<com.google.javascript.jscomp.SourceFile>initModules(var53, var59, var60);
    java.util.Map var69 = var60.getDefineReplacements();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var70 = var0.isConnectedInDirection(var27, (java.lang.Object)var28, (java.lang.Object)var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test286"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    int var2 = var1.getErrorCount();
    double var3 = var1.getTypedPercent();
    int var4 = var1.getWarningCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test287"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.String var28 = var10.getDisplayName();
    com.google.javascript.rhino.jstype.JSType var29 = var10.collapseUnion();
    com.google.javascript.rhino.JSDocInfoBuilder var31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var32 = var31.recordExpose();
    boolean var34 = var31.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.InputId var41 = com.google.javascript.jscomp.NodeUtil.getInputId(var38);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    var38.setJSType(var42);
    com.google.javascript.rhino.JSDocInfo var44 = var31.build(var38);
    java.lang.String var45 = var44.getFileOverview();
    boolean var46 = var44.hasFileOverview();
    boolean var47 = var44.hasReturnType();
    boolean var48 = var44.hasType();
    boolean var49 = var44.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var50 = var44.getVisibility();
    boolean var51 = var44.shouldPreserveTry();
    java.util.List var52 = var44.getExtendedInterfaces();
    java.util.List var53 = var44.getImplementedInterfaces();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.setExtendedInterfaces(var53);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test288"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    java.lang.String var4 = var0.getAbstractMethodName();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(0, var9, var14);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var16 = var0.getClassesDefinedByCall(var9);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var19 = var17.isConstantKey("2014/12/24 11:10");
    java.util.Collection var20 = var17.getAssertionFunctions();
    boolean var22 = var17.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    boolean var29 = var26.isVarArgs();
    boolean var30 = var26.isOptionalArg();
    java.lang.String var34 = var26.toString(false, false, true);
    java.util.List var35 = var17.identifyTypeDeclarationCall(var26);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var36 = var0.getClassesDefinedByCall(var26);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var38 = var37.cloneTree();
    boolean var39 = var37.isVar();
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var41 = var26.srcref(var37);
    boolean var42 = var41.isTrue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "goog.abstractMethod"+ "'", var4.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG"+ "'", var34.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test289"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    java.lang.String var20 = var14.getLendsName();
    com.google.common.collect.ImmutableList var21 = var14.getTemplateTypeNames();
    java.lang.String var22 = var14.getBlockDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test290"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var20.isNot();
    boolean var27 = var20.isString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test291"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    var0.setNameReferenceGraphPath("goog.exportSymbol");
    var0.setDeadAssignmentElimination(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test292"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var7 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var8 = com.google.javascript.jscomp.JSError.make(var5, var7);
    com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make(var2, var7);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.Node.newNumber(0.0d);
    boolean var12 = var9.equals((java.lang.Object)var11);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    boolean var20 = var13.isExternExportsEnabled();
    var13.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.CompilerOptions var23 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var24 = null;
    var23.setStripTypes(var24);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    var23.setManageClosureDependencies(var28);
    var23.setDevirtualizePrototypeMethods(true);
    var23.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var35 = null;
    var34.setBrokenClosureRequiresLevel(var35);
    var34.setLocale("");
    var34.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    boolean var48 = var41.isExternExportsEnabled();
    var41.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var53 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var55 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var56 = com.google.javascript.jscomp.JSError.make(var53, var55);
    int var57 = var56.getCharno();
    com.google.javascript.jscomp.CheckLevel var58 = var56.getDefaultLevel();
    var41.setReportUnknownTypes(var58);
    var34.setBrokenClosureRequiresLevel(var58);
    var23.setCheckUnreachableCode(var58);
    var13.setCheckGlobalNamesLevel(var58);
    java.io.PrintStream var63 = null;
    com.google.javascript.jscomp.Compiler var64 = new com.google.javascript.jscomp.Compiler(var63);
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var66 = null;
    var65.setStripTypes(var66);
    var65.setAliasKeywords(false);
    com.google.javascript.jscomp.DefaultPassConfig var70 = new com.google.javascript.jscomp.DefaultPassConfig(var65);
    var64.setPassConfig((com.google.javascript.jscomp.PassConfig)var70);
    com.google.javascript.jscomp.MessageFormatter var72 = null;
    java.util.logging.Logger var73 = null;
    com.google.javascript.jscomp.LoggerErrorManager var74 = new com.google.javascript.jscomp.LoggerErrorManager(var72, var73);
    com.google.javascript.jscomp.Compiler var75 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var74);
    com.google.javascript.jscomp.JSModule var77 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var78 = var77.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var79 = new com.google.javascript.jscomp.ComposeWarningsGuard(var78);
    com.google.javascript.jscomp.JSModule var81 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var82 = var81.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var83 = new com.google.javascript.jscomp.ComposeWarningsGuard(var82);
    com.google.javascript.jscomp.CompilerOptions var84 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var85 = null;
    var84.setStripTypes(var85);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var87 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var88 = var87.getDirectedGraphNodes();
    java.util.List var89 = var87.getEdges();
    var84.setManageClosureDependencies(var89);
    boolean var91 = var84.isExternExportsEnabled();
    var84.setCollapsePropertiesOnExternTypes(false);
    var75.<com.google.javascript.jscomp.SourceFile>initModules(var78, var82, var84);
    com.google.javascript.jscomp.NodeTraversal.Callback var95 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var64, var82, var95);
    com.google.javascript.jscomp.LightweightMessageFormatter var97 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var64);
    java.lang.String var98 = var9.format(var58, (com.google.javascript.jscomp.MessageFormatter)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "ERROR - (InputId: )\n"+ "'", var98.equals("ERROR - (InputId: )\n"));

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test293"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    com.google.javascript.rhino.JSTypeExpression var21 = var14.getParameterType("CONTINUE");
    boolean var22 = var14.isDeprecated();
    boolean var23 = var14.hasThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test294"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setAliasStringsBlacklist("BANG 0 [source_file: Unversioned directory]\n");
    var0.setTweakToDoubleLiteral("function (): {175702431}", 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test295"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setProtectHiddenSideEffects(true);
    var0.setLineLengthThreshold((-19));
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.jscomp.SourceAst var17 = null;
    com.google.javascript.rhino.InputId var18 = null;
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var17, var18, true);
    com.google.javascript.jscomp.JSModule var21 = var20.getModule();
    var15.add(var20);
    java.util.Set var23 = var15.getThisAndAllDependencies();
    var0.setStripNamePrefixes(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test296"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    java.util.List var73 = var31.getSubTypes();
    boolean var74 = var31.hasCachedValues();
    int var75 = var31.getMaxArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test297"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    byte[] var4 = new byte[] { (byte)100};
    var0.setInputPropertyMapSerialized(var4);
    var0.setFoldConstants(false);
    var0.setCheckMissingGetCssNameBlacklist("function (): ?");
    var0.setRemoveUnusedLocalVars(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test298"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isOr();
//     java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var11.unregisterPropertyOnType("Unversioned directory", var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var18 = var17.getDependencies();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
//     com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var22.unregisterPropertyOnType("Unversioned directory", var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var29 = var28.getDependencies();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
//     boolean var32 = var31.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var34 = var33.getDirectedGraphNodes();
//     java.lang.Iterable var35 = var33.getDirectedGraphNodes();
//     java.util.List var36 = var33.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var38 = null;
//     var37.setStripTypes(var38);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var41 = var40.getDirectedGraphNodes();
//     java.util.List var42 = var40.getEdges();
//     var37.setManageClosureDependencies(var42);
//     boolean var44 = var37.isExternExportsEnabled();
//     var37.setCheckCaja(false);
//     java.util.Set var47 = null;
//     var37.setReplaceStringsReservedStrings(var47);
//     var37.setAliasAllStrings(true);
//     var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var54 = null;
//     var53.setStripTypes(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var57 = var56.getDirectedGraphNodes();
//     java.util.List var58 = var56.getEdges();
//     var53.setManageClosureDependencies(var58);
//     boolean var60 = var53.isExternExportsEnabled();
//     var53.setCheckCaja(false);
//     var53.setGroupVariableDeclarations(true);
//     java.util.Map var65 = var53.getDefineReplacements();
//     var37.setPropertyInvalidationErrors(var65);
//     var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
//     boolean var68 = var31.canBeCalled();
//     boolean var69 = var31.isUnknownType();
//     com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
//     java.lang.String var72 = var31.getNormalizedReferenceName();
//     java.lang.String var73 = var31.toDebugHashCodeString();
//     boolean var74 = var31.isEnumType();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var71);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var72);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var73 + "' != '" + "function (): {2033023906}"+ "'", var73.equals("function (): {2033023906}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var74 == false);
// 
//   }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test299"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    java.util.Set var38 = var36.getOwnPropertyNames();
    boolean var39 = var36.isNullType();
    com.google.javascript.rhino.jstype.ObjectType var40 = var36.dereference();
    boolean var41 = var40.hasReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test300"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    java.lang.Iterable var13 = var10.getCtorImplementedInterfaces();
    com.google.javascript.rhino.Node var14 = var10.getParametersNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test301"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Collection var16 = var14.getTypeNodes();
    com.google.javascript.rhino.JSTypeExpression var17 = var14.getReturnType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test302"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    int var2 = var1.getErrorCount();
    var1.setTypedPercent(10.0d);
    var1.setTypedPercent(1.0d);
    double var7 = var1.getTypedPercent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0d);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test303"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setNameAnonymousFunctionsOnly(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    boolean var25 = var18.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var26 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var27 = null;
    var26.setStripTypes(var27);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var29 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var30 = var29.getDirectedGraphNodes();
    java.util.List var31 = var29.getEdges();
    var26.setManageClosureDependencies(var31);
    var18.setManageClosureDependencies(var31);
    var18.setRemoveClosureAsserts(true);
    var18.setCheckMissingGetCssNameBlacklist("Unversioned directory");
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var39 = null;
    var38.setBrokenClosureRequiresLevel(var39);
    var38.setLocale("");
    var38.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var46 = null;
    var45.setStripTypes(var46);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    java.util.List var50 = var48.getEdges();
    var45.setManageClosureDependencies(var50);
    boolean var52 = var45.isExternExportsEnabled();
    var45.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var57 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var59 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var60 = com.google.javascript.jscomp.JSError.make(var57, var59);
    int var61 = var60.getCharno();
    com.google.javascript.jscomp.CheckLevel var62 = var60.getDefaultLevel();
    var45.setReportUnknownTypes(var62);
    var38.setBrokenClosureRequiresLevel(var62);
    var18.setCheckMissingGetCssNameLevel(var62);
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getProvides();
    java.util.List var70 = var68.getRequires();
    com.google.javascript.jscomp.SourceAst var71 = null;
    com.google.javascript.rhino.InputId var72 = null;
    com.google.javascript.jscomp.CompilerInput var74 = new com.google.javascript.jscomp.CompilerInput(var71, var72, true);
    com.google.javascript.jscomp.JSModule var75 = var74.getModule();
    var68.addFirst(var74);
    java.util.List var77 = var68.getProvides();
    var18.setReplaceStringsConfiguration("InputId: ", var77);
    var0.setManageClosureDependencies(var77);
    var0.setInputDelimiter("Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test304"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isInstanceOf();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    var6.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var1.addChildToFront(var6);
    var1.setSourceEncodedPosition((-19));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test305"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    java.lang.String var18 = var14.getDescription();
    com.google.javascript.rhino.JSTypeExpression var19 = var14.getReturnType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test306"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test307"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var8 = var1.recordNoSideEffects();
    boolean var9 = var1.recordConstancy();
    var1.recordOriginalCommentString("hi!: BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var13 = var1.recordLends("JSDocInfo");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test308() {}
//   public void test308() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test308"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.breakNode();
//     com.google.javascript.jscomp.NodeTraversal.Callback var2 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverse(var0, var1, var2);
// 
//   }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test309"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var11 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var12 = var11.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var13 = new com.google.javascript.jscomp.ComposeWarningsGuard(var12);
    com.google.javascript.jscomp.JSError var14 = null;
    com.google.javascript.jscomp.CheckLevel var15 = var13.level(var14);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var13);
    var0.setAliasStringsBlacklist("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test310"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    java.util.Collection var47 = var0.getAssertionFunctions();
    java.lang.String var48 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.trueNode();
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    com.google.javascript.rhino.Node var56 = var53.removeFirstChild();
    var56.setQuotedString();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.NodeUtil.newExpr(var56);
    boolean var59 = var58.isLabelName();
    var58.setSourceEncodedPosition(100);
    java.lang.String var62 = var0.extractClassNameIfRequire(var49, var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.NodeUtil.newExpr(var58);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test311() {}
//   public void test311() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test311"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     int var9 = var1.getDepth();
//     var1.clearAsts();
// 
//   }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test312"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isInstanceOf();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    var6.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var1.addChildToFront(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setString("Unversioned directory");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test313"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    int var4 = var3.getErrorCount();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    java.util.Set var15 = null;
    var5.setReplaceStringsReservedStrings(var15);
    var5.setAliasAllStrings(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var19 = null;
    var5.setTracerMode(var19);
    com.google.javascript.jscomp.JSModule var23 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var24 = var23.getProvides();
    java.util.List var25 = var23.getRequires();
    com.google.javascript.jscomp.SourceAst var26 = null;
    com.google.javascript.rhino.InputId var27 = null;
    com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var26, var27, true);
    com.google.javascript.jscomp.JSModule var30 = var29.getModule();
    var23.addFirst(var29);
    java.util.List var32 = var23.getProvides();
    var5.setReplaceStringsConfiguration("2014/12/24 11:10", var32);
    var3.initOptions(var5);
    int var35 = var3.getErrorCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test314"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    com.google.javascript.rhino.Node var90 = null;
    com.google.javascript.rhino.Node var92 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var93 = var92.isGetterDef();
    boolean var94 = var92.isCatch();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var95 = com.google.javascript.rhino.IR.tryCatchFinally(var3, var90, var92);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test315"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    boolean var12 = var1.recordParameterDescription("LABEL_NAME hi!", "(LABEL_NAME hi!)");
    boolean var14 = var1.addAuthor("(LABEL_NAME hi!)");
    boolean var17 = var1.recordParameterDescription("Unversioned directory", "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var1.markAnnotation("function (): ?", 100, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test316() {}
//   public void test316() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test316"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var6 = null;
//     var5.setStripTypes(var6);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var9 = var8.getDirectedGraphNodes();
//     java.util.List var10 = var8.getEdges();
//     var5.setManageClosureDependencies(var10);
//     boolean var12 = var5.isExternExportsEnabled();
//     var5.setCheckCaja(false);
//     var5.setRemoveUnusedPrototypeProperties(true);
//     var5.setRemoveClosureAsserts(false);
//     com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var21 = var20.recordExpose();
//     boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = var27.getNext();
//     com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
//     com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     var27.setJSType(var31);
//     com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
//     java.util.Collection var34 = var33.getAuthors();
//     com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
//     var5.setSourceMapLocationMappings((java.util.List)var35);
//     com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var39 = var38.recordExpose();
//     boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var46 = var45.getNext();
//     com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
//     com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     var45.setJSType(var49);
//     com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
//     java.lang.String var52 = var51.getFileOverview();
//     java.util.Set var53 = var51.getModifies();
//     java.util.List var54 = var51.getImplementedInterfaces();
//     com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
//     java.util.List var56 = var51.getImplementedInterfaces();
//     com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var58 = null;
//     var57.setStripTypes(var58);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var61 = var60.getDirectedGraphNodes();
//     java.util.List var62 = var60.getEdges();
//     var57.setManageClosureDependencies(var62);
//     var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var69 = var68.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
//     com.google.javascript.jscomp.JSError var71 = null;
//     com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
//     var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
//     var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
//     var3.parse();
//     var3.processDefines();
//     com.google.javascript.jscomp.MessageFormatter var77 = null;
//     java.util.logging.Logger var78 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var79 = new com.google.javascript.jscomp.LoggerErrorManager(var77, var78);
//     com.google.javascript.jscomp.Compiler var80 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var79);
//     int var81 = var79.getErrorCount();
//     int var82 = var79.getErrorCount();
//     var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var79);
//     var3.optimize();
// 
//   }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test317"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.script(var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.paramList(var5);
    boolean var10 = var8.getBooleanProp(306);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test318"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.Scope var7 = var6.getScope();
//     com.google.javascript.rhino.Node var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var13 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make(var11, var13);
//     com.google.javascript.jscomp.DiagnosticType var15 = var14.getType();
//     java.lang.String[] var17 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var18 = var6.makeError(var8, var15, var17);
//     com.google.javascript.jscomp.Scope var19 = var6.getScope();
//     com.google.javascript.jscomp.Compiler var20 = var6.getCompiler();
//     com.google.javascript.jscomp.JSModule var21 = var6.getModule();
// 
//   }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test319"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.Iterable var28 = var10.getOwnImplementedInterfaces();
    boolean var29 = var10.isEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test320"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    boolean var91 = var83.isStringObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test321"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.Set var3 = var1.getThisAndAllDependencies();
    var1.setDepth(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test322"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isInterface();
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var22 = var19.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.InputId var29 = com.google.javascript.jscomp.NodeUtil.getInputId(var26);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var26.setJSType(var30);
    com.google.javascript.rhino.JSDocInfo var32 = var19.build(var26);
    java.lang.String var33 = var32.getFileOverview();
    boolean var34 = var32.hasFileOverview();
    boolean var35 = var32.hasReturnType();
    boolean var36 = var32.hasType();
    boolean var37 = var32.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var38 = var32.getVisibility();
    var14.setVisibility(var38);
    boolean var40 = var14.isConstant();
    java.lang.String var41 = var14.getDescription();
    boolean var42 = var14.hasReturnType();
    java.util.Collection var43 = var14.getAuthors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test323"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    boolean var15 = var9.isNot();
    int var16 = var9.getSideEffectFlags();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var18.createFunctionTypeWithVarArgs(var22, var25);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var30 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.Object var49 = null;
    var34.putProp(0, var49);
    com.google.javascript.rhino.JSTypeExpression var52 = new com.google.javascript.rhino.JSTypeExpression(var34, "()");
    com.google.javascript.rhino.jstype.StaticScope var53 = null;
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.JSType var65 = var52.evaluate(var53, var55);
    boolean var66 = var30.addVarArgs(var65);
    boolean var67 = var65.isEnumElementType();
    boolean var68 = var65.isNullable();
    boolean var69 = var65.matchesNumberContext();
    boolean var70 = var27.differsFrom(var65);
    var9.setJSType((com.google.javascript.rhino.jstype.JSType)var27);
    boolean var72 = var27.isCheckedUnknownType();
    com.google.javascript.rhino.JSDocInfo var73 = var27.getJSDocInfo();
    boolean var74 = var27.hasDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test324"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "Unversioned directory");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var0.getDirectedGraphNode((java.lang.Object)"hi!");
    java.util.Collection var9 = var0.getNodes();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var12 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    boolean var19 = var16.isVarArgs();
    com.google.javascript.rhino.Node var21 = var16.getChildAtIndex(1);
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.JSDocInfo var28 = var25.getJSDocInfo();
    com.google.javascript.rhino.Node var29 = var16.copyInformationFrom(var25);
    java.lang.Object var31 = null;
    var16.putProp(0, var31);
    com.google.javascript.rhino.JSTypeExpression var34 = new com.google.javascript.rhino.JSTypeExpression(var16, "()");
    com.google.javascript.rhino.jstype.StaticScope var35 = null;
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var37.unregisterPropertyOnType("Unversioned directory", var39);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    boolean var43 = var37.canPropertyBeDefined(var41, "BANG");
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var44};
    com.google.javascript.rhino.Node var46 = var37.createParameters(var45);
    com.google.javascript.rhino.jstype.JSType var47 = var34.evaluate(var35, var37);
    boolean var48 = var12.addVarArgs(var47);
    boolean var49 = var47.isEnumElementType();
    boolean var50 = var47.isNumber();
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    com.google.javascript.rhino.Node var56 = var52.srcrefTree(var54);
    boolean var57 = var54.isVarArgs();
    com.google.javascript.rhino.Node var59 = var54.getChildAtIndex(1);
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    com.google.javascript.rhino.Node var65 = var61.srcrefTree(var63);
    com.google.javascript.rhino.JSDocInfo var66 = var63.getJSDocInfo();
    com.google.javascript.rhino.Node var67 = var54.copyInformationFrom(var63);
    java.lang.Object var69 = null;
    var54.putProp(0, var69);
    com.google.javascript.rhino.JSTypeExpression var72 = new com.google.javascript.rhino.JSTypeExpression(var54, "()");
    com.google.javascript.rhino.jstype.StaticScope var73 = null;
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    com.google.javascript.rhino.jstype.JSType var77 = null;
    var75.unregisterPropertyOnType("Unversioned directory", var77);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    boolean var81 = var75.canPropertyBeDefined(var79, "BANG");
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.Node var84 = var75.createParameters(var83);
    com.google.javascript.rhino.jstype.JSType var85 = var72.evaluate(var73, var75);
    com.google.javascript.rhino.jstype.JSType var86 = var85.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.JSType.TypePair var87 = var47.getTypesUnderShallowEquality(var86);
    boolean var88 = var0.hasNode((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test325"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    com.google.javascript.rhino.JSDocInfoBuilder var22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var23 = var22.recordExpose();
    boolean var25 = var22.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.InputId var32 = com.google.javascript.jscomp.NodeUtil.getInputId(var29);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var29.setJSType(var33);
    com.google.javascript.rhino.JSDocInfo var35 = var22.build(var29);
    java.lang.String var36 = var35.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var37 = var35.getType();
    java.util.Set var38 = var35.getSuppressions();
    var0.setStripTypePrefixes(var38);
    var0.setRewriteFunctionExpressions(false);
    var0.setDeadAssignmentElimination(true);
    var0.setDefineToDoubleLiteral("(STRING hi 0 [length: 2]\n)", 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test326() {}
//   public void test326() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test326"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     java.io.PrintStream var5 = null;
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var16 = var15.recordExpose();
//     boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var22.setJSType(var26);
//     com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
//     java.lang.String var29 = var28.getFileOverview();
//     java.util.Set var30 = var28.getModifies();
//     java.util.List var31 = var28.getImplementedInterfaces();
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var33 = null;
//     var32.setStripTypes(var33);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var36 = var35.getDirectedGraphNodes();
//     java.util.List var37 = var35.getEdges();
//     var32.setManageClosureDependencies(var37);
//     var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var32.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
//     var32.setSourceMapDetailLevel(var44);
//     var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
//     com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var49 = null;
//     var48.setStripTypes(var49);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var52 = var51.getDirectedGraphNodes();
//     java.util.List var53 = var51.getEdges();
//     var48.setManageClosureDependencies(var53);
//     boolean var55 = var48.isExternExportsEnabled();
//     var48.setCheckCaja(false);
//     var48.setRemoveUnusedPrototypeProperties(true);
//     var48.setRemoveClosureAsserts(false);
//     com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var64 = var63.recordExpose();
//     boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var71 = var70.getNext();
//     com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
//     com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     var70.setJSType(var74);
//     com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
//     java.util.Collection var77 = var76.getAuthors();
//     com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
//     var48.setSourceMapLocationMappings((java.util.List)var78);
//     com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var81 = null;
//     var80.setStripTypes(var81);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var84 = var83.getDirectedGraphNodes();
//     java.util.List var85 = var83.getEdges();
//     var80.setManageClosureDependencies(var85);
//     var80.setDevirtualizePrototypeMethods(true);
//     var80.setInlineLocalVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
//     boolean var92 = var80.getInferTypes();
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
//     com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
//     com.google.javascript.jscomp.ErrorManager var95 = var3.getErrorManager();
//     com.google.javascript.jscomp.CompilerInput var97 = var3.newExternInput("hi");
// 
//   }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test327"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.Node var63 = var62.getParametersNode();
    java.lang.Iterable var64 = var62.getOwnImplementedInterfaces();
    com.google.javascript.rhino.jstype.ObjectType var65 = var62.getParentScope();
    boolean var67 = var62.hasOwnProperty("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test328"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    boolean var7 = var0.isSuperClassReference("");
    java.util.Collection var8 = var0.getAssertionFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test329"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setRemoveUnusedPrototypePropertiesInExterns(false);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var19 = var17.isConstantKey("2014/12/24 11:10");
    java.util.Collection var20 = var17.getAssertionFunctions();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var24 = var22.getBooleanProp((-1));
    var22.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var22, "goog.abstractMethod");
    boolean var29 = var17.isPrototypeAlias(var22);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var17, "");
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test330"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    int var39 = var34.getIndexOfChild(var38);
    boolean var40 = var38.isBlock();
    com.google.javascript.rhino.Node var41 = var5.newParameterFromNode(var38);
    com.google.javascript.jscomp.SourceFile var44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    java.lang.String var46 = var44.getLine((-1));
    java.lang.String var47 = var44.getCode();
    var41.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var44);
    com.google.javascript.jscomp.Region var50 = var44.getRegion(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "()"+ "'", var46.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "()"+ "'", var47.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test331"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    var0.setSyntheticBlockEndMarker("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test332"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var5 = null;
    var4.setResolveMode(var5);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var7 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var19 = var18.hasAnyTemplateInternal();
    java.lang.Iterable var20 = var18.getAllExtendedInterfaces();
    boolean var21 = var18.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    var18.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var32);
    com.google.javascript.rhino.jstype.JSType var37 = var4.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var32, "hi!");
    boolean var38 = var32.isAllType();
    boolean var39 = var32.hasInstanceType();
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions.TracerMode var48 = var40.getTracerMode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)var39, (java.lang.Object)var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test333"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var51 = var49.getBooleanProp((-1));
    var49.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var49, "goog.abstractMethod");
    boolean var57 = var1.recordThrowDescription(var55, "STRING hi 0 [length: 2]\n");
    boolean var58 = var1.recordNoCompile();
    boolean var59 = var1.isJavaDispatch();
    boolean var60 = var1.recordImplicitCast();
    boolean var61 = var1.recordExport();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test334"); }


    com.google.javascript.rhino.Node var1 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    int var6 = var4.getSourceOffset();
    com.google.javascript.rhino.Node var7 = var4.cloneNode();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    int var11 = var9.getSourceOffset();
    boolean var12 = var9.isAssignAdd();
    int var13 = var7.getIndexOfChild(var9);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.InputId var17 = var15.getInputId();
    com.google.javascript.rhino.Node var18 = var7.useSourceInfoFrom(var15);
    int var19 = var7.getChildCount();
    com.google.javascript.rhino.Node[] var20 = new com.google.javascript.rhino.Node[] { var7};
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node((-1), var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.call(var1, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test335() {}
//   public void test335() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test335"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
//     var1.setResolveMode(var2);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.JSTypeNative var6 = null;
//     com.google.javascript.rhino.jstype.ObjectType var7 = var1.getNativeObjectType(var6);
// 
//   }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test336"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
    var8.setColorize(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test337"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    boolean var32 = var6.recordSuppressions(var31);
    var0.setAliasableStrings(var31);
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    var35.setManageClosureDependencies(var40);
    boolean var42 = var35.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var43 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var44 = null;
    var43.setStripTypes(var44);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var46 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var47 = var46.getDirectedGraphNodes();
    java.util.List var48 = var46.getEdges();
    var43.setManageClosureDependencies(var48);
    var35.setManageClosureDependencies(var48);
    var0.setReplaceStringsConfiguration("hi", var48);
    var0.setAliasAllStrings(true);
    var0.setInlineFunctions(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test338"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var12.unregisterPropertyOnType("Unversioned directory", var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.block(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var12.createFunctionTypeWithVarArgs(var16, var19);
    com.google.javascript.rhino.Node var22 = var1.createParametersWithVarArgs(var19);
    boolean var23 = var22.isVoid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test339"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setLocale("");
    var0.setLineBreak(false);
    var0.setNameReferenceGraphPath("hi!");
    var0.setInlineLocalVariables(false);
    var0.setInlineFunctions(true);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test340"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearEdgeAnnotations();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    java.util.List var3 = var0.getEdges();
    java.util.List var4 = var0.getEdges();
    var0.pushEdgeAnnotations();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    boolean var15 = var9.isBlock();
    com.google.javascript.rhino.Node var16 = var9.getNext();
    boolean var17 = var9.isFromExterns();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.InputId var24 = com.google.javascript.jscomp.NodeUtil.getInputId(var21);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var21.setJSType(var25);
    boolean var27 = var21.isBlock();
    com.google.javascript.rhino.Node var28 = var21.getParent();
    boolean var29 = var21.isBreak();
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.InputId var33 = var31.getInputId();
    boolean var34 = var31.isGetProp();
    com.google.javascript.rhino.Node var35 = var21.clonePropsFrom(var31);
    var35.setLineno(100);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.Node.newNumber(0.0d);
    var35.addChildToBack(var39);
    com.google.javascript.rhino.Node var41 = var9.clonePropsFrom(var35);
    com.google.javascript.rhino.JSDocInfoBuilder var43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var44 = var43.recordExpose();
    boolean var46 = var43.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.InputId var53 = com.google.javascript.jscomp.NodeUtil.getInputId(var50);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var50.setJSType(var54);
    com.google.javascript.rhino.JSDocInfo var56 = var43.build(var50);
    java.util.Collection var57 = var56.getAuthors();
    com.google.common.collect.ImmutableList var58 = var56.getTemplateTypeNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var59 = var0.getEdges((java.lang.Object)var35, (java.lang.Object)var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test341() {}
//   public void test341() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test341"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     boolean var12 = var10.removeProperty("null(null)");
//     java.lang.String var13 = var10.toDebugHashCodeString();
//     com.google.javascript.rhino.jstype.JSType var15 = var10.getPropertyType("()");
//     com.google.javascript.rhino.ErrorReporter var16 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     var17.unregisterPropertyOnType("Unversioned directory", var19);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.jscomp.JSModule var23 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var24 = var23.getDependencies();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.block(var24);
//     com.google.javascript.rhino.jstype.FunctionType var26 = var17.createFunctionTypeWithVarArgs(var21, var24);
//     boolean var27 = var26.hasAnyTemplateInternal();
//     java.lang.Iterable var28 = var26.getAllExtendedInterfaces();
//     boolean var29 = var26.isEmptyType();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     var31.unregisterPropertyOnType("Unversioned directory", var33);
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var38 = var37.getDependencies();
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var31.createFunctionTypeWithVarArgs(var35, var38);
//     boolean var42 = var40.removeProperty("null(null)");
//     var26.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var40);
//     int var44 = var40.getExtendedInterfacesCount();
//     java.util.Set var45 = var40.getOwnPropertyNames();
//     java.lang.Iterable var46 = var40.getCtorImplementedInterfaces();
//     com.google.javascript.rhino.jstype.JSType var47 = var40.getReturnType();
//     boolean var48 = var10.canTestForEqualityWith(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = var47.autoboxesTo();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var8);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var12 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var13 + "' != '" + "function (): {2142004661}"+ "'", var13.equals("function (): {2142004661}"));
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var15);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var24);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var25);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var26);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var27 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var28);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var29 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var38);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var39);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var42 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == 0);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var45);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var46);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var47);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var48 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var49);
// 
//   }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test342"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    java.lang.String var6 = var1.toString(true, false, false);
    com.google.javascript.rhino.JSTypeExpression var8 = new com.google.javascript.rhino.JSTypeExpression(var1, "module$BANG 0 [source_file: Unversioned directory]\n");
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var10.unregisterPropertyOnType("Unversioned directory", var12);
    var10.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    boolean var24 = var20.isFor();
    boolean var25 = var20.isNumber();
    com.google.javascript.rhino.Node var26 = var20.getNext();
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    boolean var33 = var30.isVarArgs();
    com.google.javascript.rhino.Node var35 = var30.getChildAtIndex(1);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    com.google.javascript.rhino.JSDocInfo var42 = var39.getJSDocInfo();
    com.google.javascript.rhino.Node var43 = var30.copyInformationFrom(var39);
    java.lang.Object var45 = null;
    var30.putProp(0, var45);
    com.google.javascript.rhino.JSTypeExpression var48 = new com.google.javascript.rhino.JSTypeExpression(var30, "()");
    com.google.javascript.rhino.jstype.StaticScope var49 = null;
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    var51.unregisterPropertyOnType("Unversioned directory", var53);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    boolean var57 = var51.canPropertyBeDefined(var55, "BANG");
    com.google.javascript.rhino.jstype.JSType var58 = null;
    com.google.javascript.rhino.jstype.JSType[] var59 = new com.google.javascript.rhino.jstype.JSType[] { var58};
    com.google.javascript.rhino.Node var60 = var51.createParameters(var59);
    com.google.javascript.rhino.jstype.JSType var61 = var48.evaluate(var49, var51);
    com.google.javascript.rhino.jstype.JSType var62 = var61.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var63 = var62.dereference();
    boolean var64 = var62.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var65 = var10.createEnumType("STRING hi 0 [length: 2]\n", var20, var62);
    com.google.javascript.rhino.JSDocInfo var66 = var65.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var67 = var65.getElementsType();
    boolean var68 = var67.isNominalType();
    java.lang.String var69 = var67.toString();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var72 = null;
    var71.setResolveMode(var72);
    var71.clearNamedTypes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSType var75 = var8.evaluate((com.google.javascript.rhino.jstype.StaticScope)var67, var71);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "LABEL_NAME hi!"+ "'", var6.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var69.equals("STRING hi 0 [length: 2]\n.<hi>"));

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test343"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var7 = var6.getAncestors();
    boolean var8 = var6.isCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.defaultCase(var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test344"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.script(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.paramList(var13);
    com.google.javascript.rhino.Node var17 = var1.createParameters(var13);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    boolean var20 = var1.canPropertyBeDefined(var18, "function (): ?");
    com.google.javascript.rhino.jstype.FunctionParamBuilder var21 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test345"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setDebugFunctionSideEffectsPath("STRING hi 0 [length: 2]\n");
    var0.setRemoveClosureAsserts(true);
    com.google.javascript.jscomp.CompilerOptions var22 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var23 = null;
    var22.setStripTypes(var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var26 = var25.getDirectedGraphNodes();
    java.util.List var27 = var25.getEdges();
    var22.setManageClosureDependencies(var27);
    var22.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var33 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var34 = var33.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var35 = new com.google.javascript.jscomp.ComposeWarningsGuard(var34);
    com.google.javascript.jscomp.JSError var36 = null;
    com.google.javascript.jscomp.CheckLevel var37 = var35.level(var36);
    var22.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var35);
    var22.setNameReferenceGraphPath("goog.exportSymbol");
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var42, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var45 = new com.google.javascript.jscomp.DiagnosticType[] { var44};
    com.google.javascript.jscomp.DiagnosticGroup var46 = new com.google.javascript.jscomp.DiagnosticGroup(var45);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var61 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make(var59, var61);
    int var63 = var62.getCharno();
    com.google.javascript.jscomp.CheckLevel var64 = var62.getDefaultLevel();
    var47.setReportUnknownTypes(var64);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var66 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var46, var64);
    var22.setReportMissingOverride(var64);
    var0.setBrokenClosureRequiresLevel(var64);
    var0.setCollapseVariableDeclarations(true);
    var0.setExternExportsPath("module$ERROR _ (InputId: )\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test346"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var0.isVarArgsParameter(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    boolean var19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var17);
    int var20 = var17.getLength();
    boolean var21 = var17.isTrue();
    boolean var22 = var17.isAnd();
    java.util.List var23 = var0.identifyTypeDeclarationCall(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test347"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    boolean var10 = var0.shouldColorizeErrorOutput();
    var0.setComputeFunctionSideEffects(false);
    var0.setTransformAMDToCJSModules(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test348"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var19 = var18.hasCachedValues();
    boolean var20 = var18.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType var25 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var18, "2014/12/24 11:10", "{proxy:{599688852}}", 10, 0);
    com.google.javascript.rhino.jstype.ObjectType var26 = var18.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test349"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var3.setSourceFileForTesting("STRING hi 0 [length: 2]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test350"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    int var5 = var3.getSourceOffset();
    com.google.javascript.rhino.Node var6 = var3.cloneNode();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    int var10 = var8.getSourceOffset();
    boolean var11 = var8.isAssignAdd();
    int var12 = var6.getIndexOfChild(var8);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.InputId var16 = var14.getInputId();
    com.google.javascript.rhino.Node var17 = var6.useSourceInfoFrom(var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isOptionalArg();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(0, var22, var27);
    boolean var29 = var27.isQualifiedName();
    com.google.javascript.rhino.Node var30 = var27.cloneNode();
    com.google.javascript.rhino.Node var33 = new com.google.javascript.rhino.Node(153, var6, var30, 153, 1);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var37 = var35.getBooleanProp((-1));
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.Node var44 = var41.removeFirstChild();
    com.google.javascript.rhino.Node var45 = var35.useSourceInfoFromForTree(var41);
    boolean var46 = var35.isVar();
    com.google.javascript.rhino.Node var47 = var30.srcrefTree(var35);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(100, var35, 10, 0);
    com.google.javascript.rhino.Node var52 = new com.google.javascript.rhino.Node(2);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("CONTINUE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.function(var35, var52, var54);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test351"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    com.google.javascript.rhino.jstype.ObjectType var80 = var73.getImplicitPrototype();
    com.google.javascript.rhino.jstype.ObjectType var81 = var73.getImplicitPrototype();
    com.google.javascript.rhino.jstype.ObjectType var82 = var81.getTypeOfThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test352"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var26 = new com.google.javascript.jscomp.ComposeWarningsGuard(var25);
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var27 = var0.getDirectedGraphNode((java.lang.Object)var26);
    com.google.javascript.jscomp.MessageFormatter var28 = null;
    java.util.logging.Logger var29 = null;
    com.google.javascript.jscomp.LoggerErrorManager var30 = new com.google.javascript.jscomp.LoggerErrorManager(var28, var29);
    com.google.javascript.jscomp.Compiler var31 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var30);
    com.google.javascript.jscomp.Scope var32 = var31.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var33 = null;
    com.google.javascript.jscomp.NodeTraversal var34 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var31, var33);
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var38 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var39 = var38.getDirectedGraphNodes();
    java.util.List var40 = var38.getEdges();
    var35.setManageClosureDependencies(var40);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.script(var40);
    var34.traverseRoots(var40);
    com.google.javascript.rhino.Node var44 = var34.getEnclosingFunction();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    boolean var55 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var53);
    int var56 = var53.getLength();
    com.google.javascript.rhino.Node var57 = null;
    boolean var58 = var53.hasChild(var57);
    com.google.javascript.rhino.Node var59 = var51.useSourceInfoIfMissingFromForTree(var53);
    var53.setSourceFileForTesting("Unversioned directory");
    boolean var62 = var53.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var63 = var53.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var66 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var67 = null;
    java.util.logging.Logger var68 = null;
    com.google.javascript.jscomp.LoggerErrorManager var69 = new com.google.javascript.jscomp.LoggerErrorManager(var67, var68);
    com.google.javascript.jscomp.Compiler var70 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var69);
    com.google.javascript.jscomp.Scope var71 = var70.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var72 = null;
    com.google.javascript.jscomp.NodeTraversal var73 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var70, var72);
    com.google.javascript.jscomp.Scope var74 = var73.getScope();
    com.google.javascript.rhino.Node var75 = null;
    com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var80 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var78, var80);
    com.google.javascript.jscomp.DiagnosticType var82 = var81.getType();
    java.lang.String[] var84 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var85 = var73.makeError(var75, var82, var84);
    com.google.javascript.jscomp.JSError var86 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var53, var66, var84);
    var34.report(var45, var48, var84);
    com.google.javascript.jscomp.DiagnosticType[] var88 = new com.google.javascript.jscomp.DiagnosticType[] { var48};
    com.google.javascript.jscomp.DiagnosticGroup var89 = new com.google.javascript.jscomp.DiagnosticGroup(var88);
    boolean var90 = var26.disables(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test353() {}
//   public void test353() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test353"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.MessageFormatter var9 = null;
//     java.util.logging.Logger var10 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
//     com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
//     com.google.javascript.jscomp.Scope var13 = var12.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
//     com.google.javascript.jscomp.NodeTraversal var15 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var12, var14);
//     var6.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var12);
//     var12.disableThreads();
//     java.lang.String var18 = var12.getAstDotGraph();
//     com.google.javascript.rhino.Node var19 = var12.getRoot();
//     java.lang.String var20 = var12.toSource();
// 
//   }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test354"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isNoSideEffects();
    boolean var20 = var14.isNoAlias();
    int var21 = var14.getImplementedInterfaceCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test355"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    com.google.javascript.rhino.Node var28 = var23.getChildAtIndex(1);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.InputId var35 = com.google.javascript.jscomp.NodeUtil.getInputId(var32);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var32.setJSType(var36);
    boolean var38 = var32.isBlock();
    com.google.javascript.rhino.Node var39 = var32.getParent();
    boolean var40 = var32.isBreak();
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = var42.getNext();
    com.google.javascript.rhino.InputId var44 = var42.getInputId();
    boolean var45 = var42.isGetProp();
    com.google.javascript.rhino.Node var46 = var32.clonePropsFrom(var42);
    var46.setLineno(100);
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    int var52 = var50.getSourceOffset();
    com.google.javascript.rhino.Node var53 = var50.removeFirstChild();
    com.google.javascript.rhino.Node var54 = var46.useSourceInfoIfMissingFrom(var53);
    int var55 = var53.getSourcePosition();
    java.lang.String var56 = var0.extractClassNameIfProvide(var23, var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test356"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setInlineLocalFunctions(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var18 = var16.hasNode((java.lang.Object)1);
    java.util.List var19 = var16.getGraphvizEdges();
    java.lang.Iterable var20 = var16.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var21 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var22 = var21.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var23 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var21);
    com.google.javascript.jscomp.LightweightMessageFormatter var24 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var21);
    boolean var25 = var16.hasNode((java.lang.Object)var21);
    double var26 = var21.getProgress();
    com.google.javascript.jscomp.ErrorManager var27 = var21.getErrorManager();
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test357() {}
//   public void test357() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test357"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.CompilerOptions.Reach var3 = null;
//     var0.setInlineVariables(var3);
// 
//   }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test358"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var39);
    var0.setDevirtualizePrototypeMethods(false);
    var0.setExternExportsPath("function (): {1263056885}");
    boolean var45 = var0.isExternExportsEnabled();
    var0.setFlowSensitiveInlineVariables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test359"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setDevirtualizePrototypeMethods(true);
    var0.resetWarningsGuard();
    var0.setManageClosureDependencies(false);
    var0.setFoldConstants(false);
    var0.setLineBreak(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test360"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var20.isTry();
    boolean var27 = var20.isVarArgs();
    boolean var28 = var20.isLocalResultCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test361"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var6 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var8 = var6.isConstantKey("2014/12/24 11:10");
    java.util.Collection var9 = var6.getAssertionFunctions();
    java.lang.String var10 = var6.getAbstractMethodName();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    boolean var19 = var15.isOptionalArg();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var15, var20);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var22 = var6.getClassesDefinedByCall(var15);
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var25 = var23.isConstantKey("2014/12/24 11:10");
    java.util.Collection var26 = var23.getAssertionFunctions();
    boolean var28 = var23.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isOptionalArg();
    java.lang.String var40 = var32.toString(false, false, true);
    java.util.List var41 = var23.identifyTypeDeclarationCall(var32);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var42 = var6.getClassesDefinedByCall(var32);
    java.lang.String var43 = var3.extractClassNameIfRequire(var5, var32);
    boolean var44 = var32.isRegExp();
    com.google.javascript.rhino.JSTypeExpression var46 = new com.google.javascript.rhino.JSTypeExpression(var32, "function (): {1263056885}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "goog.abstractMethod"+ "'", var10.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "BANG"+ "'", var40.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test362"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var38 = var36.getParameterType();
    com.google.javascript.rhino.jstype.ObjectType var39 = var36.dereference();
    com.google.javascript.rhino.jstype.JSType var40 = var39.getParameterType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test363"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    var1.setSourceEncodedPosition(10);
    boolean var6 = var1.isContinue();
    boolean var7 = var1.isComma();
    boolean var8 = var1.isCase();
    com.google.javascript.rhino.Node var9 = var1.cloneTree();
    var1.setString("LinkedGraph");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test364"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    com.google.javascript.rhino.Node var9 = var4.getChildAtIndex(1);
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.JSDocInfo var16 = var13.getJSDocInfo();
    com.google.javascript.rhino.Node var17 = var4.copyInformationFrom(var13);
    java.lang.Object var19 = null;
    var4.putProp(0, var19);
    com.google.javascript.rhino.JSTypeExpression var22 = new com.google.javascript.rhino.JSTypeExpression(var4, "()");
    com.google.javascript.rhino.jstype.StaticScope var23 = null;
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var25.unregisterPropertyOnType("Unversioned directory", var27);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    boolean var31 = var25.canPropertyBeDefined(var29, "BANG");
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.jstype.JSType[] var33 = new com.google.javascript.rhino.jstype.JSType[] { var32};
    com.google.javascript.rhino.Node var34 = var25.createParameters(var33);
    com.google.javascript.rhino.jstype.JSType var35 = var22.evaluate(var23, var25);
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var39 = null;
    var38.setResolveMode(var39);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var41 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var38);
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var44 = null;
    var43.setResolveMode(var44);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var47 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var43);
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    boolean var54 = var51.isVarArgs();
    com.google.javascript.rhino.Node var56 = var51.getChildAtIndex(1);
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    com.google.javascript.rhino.JSDocInfo var63 = var60.getJSDocInfo();
    com.google.javascript.rhino.Node var64 = var51.copyInformationFrom(var60);
    java.lang.Object var66 = null;
    var51.putProp(0, var66);
    com.google.javascript.rhino.JSTypeExpression var69 = new com.google.javascript.rhino.JSTypeExpression(var51, "()");
    com.google.javascript.rhino.jstype.StaticScope var70 = null;
    com.google.javascript.rhino.ErrorReporter var71 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var71);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var72.unregisterPropertyOnType("Unversioned directory", var74);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    boolean var78 = var72.canPropertyBeDefined(var76, "BANG");
    com.google.javascript.rhino.jstype.JSType var79 = null;
    com.google.javascript.rhino.jstype.JSType[] var80 = new com.google.javascript.rhino.jstype.JSType[] { var79};
    com.google.javascript.rhino.Node var81 = var72.createParameters(var80);
    com.google.javascript.rhino.jstype.JSType var82 = var69.evaluate(var70, var72);
    com.google.javascript.rhino.jstype.JSType var83 = var82.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var84 = var83.dereference();
    java.util.Collection var85 = var43.getDirectImplementors(var84);
    com.google.javascript.rhino.jstype.JSType var90 = var38.getType((com.google.javascript.rhino.jstype.StaticScope)var84, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var91 = var25.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var84);
    com.google.javascript.rhino.jstype.FunctionBuilder var92 = new com.google.javascript.rhino.jstype.FunctionBuilder(var25);
    com.google.javascript.rhino.jstype.FunctionBuilder var94 = var92.setIsConstructor(false);
    com.google.javascript.rhino.Node var95 = com.google.javascript.rhino.IR.nullNode();
    boolean var96 = var95.isHook();
    com.google.javascript.rhino.jstype.FunctionBuilder var97 = var94.withParamsNode(var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateRoot(var95);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test365"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setInlineLocalFunctions(true);
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var18 = var17.recordExpose();
    boolean var20 = var17.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.InputId var27 = com.google.javascript.jscomp.NodeUtil.getInputId(var24);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var24.setJSType(var28);
    com.google.javascript.rhino.JSDocInfo var30 = var17.build(var24);
    java.lang.String var31 = var30.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var32 = var30.getType();
    java.util.Set var33 = var30.getSuppressions();
    var0.setExtraAnnotationNames(var33);
    var0.setAliasAllStrings(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test366"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setCheckTypes(false);
    var0.setMoveFunctionDeclarations(true);
    var0.setInferTypes(false);
    var0.setCollapseVariableDeclarations(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test367"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.CompilerInput var2 = new com.google.javascript.jscomp.CompilerInput(var0, true);
// 
//   }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test368"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    com.google.javascript.jscomp.MessageFormatter var10 = null;
    java.util.logging.Logger var11 = null;
    com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var12);
    com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal var16 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var13, var15);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var18 = null;
    var17.setStripTypes(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    var17.setManageClosureDependencies(var22);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.script(var22);
    var16.traverseRoots(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    var29.setChainCalls(true);
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var32);
    var29.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var33);
    var29.setGatherCssNames(false);
    var5.<com.google.javascript.jscomp.SourceFile>initModules(var22, var28, var29);
    java.util.Map var38 = var29.getDefineReplacements();
    var29.setOptimizeParameters(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test369"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    com.google.javascript.rhino.jstype.ObjectType var81 = com.google.javascript.rhino.jstype.ObjectType.cast(var39);
    com.google.javascript.rhino.jstype.FunctionType var82 = var81.toMaybeFunctionType();
    java.lang.String var83 = var81.getNormalizedReferenceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "hi"+ "'", var83.equals("hi"));

  }

  public void test370() {}
//   public void test370() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test370"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.CodingConvention var4 = var3.getCodingConvention();
// 
//   }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test371"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", (-19), 153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test372"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    java.lang.Iterable var15 = var10.getImplementedInterfaces();
    com.google.javascript.rhino.jstype.FunctionType var16 = var10.toMaybeFunctionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test373"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var3.recordExpose();
    boolean var6 = var3.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    com.google.javascript.rhino.InputId var13 = com.google.javascript.jscomp.NodeUtil.getInputId(var10);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var10.setJSType(var14);
    com.google.javascript.rhino.JSDocInfo var16 = var3.build(var10);
    java.util.List var17 = var16.getThrownTypes();
    java.lang.String var18 = var16.getDeprecationReason();
    java.lang.String var19 = var16.getReturnDescription();
    boolean var20 = var16.isImplicitCast();
    var1.setJSDocInfo(var16);
    boolean var22 = var1.hasChildren();
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    int var26 = var24.getSourceOffset();
    com.google.javascript.rhino.Node var27 = var24.cloneNode();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    int var31 = var29.getSourceOffset();
    com.google.javascript.rhino.Node var32 = var29.cloneNode();
    var27.addChildrenToFront(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.Node var41 = var27.useSourceInfoFrom(var37);
    com.google.javascript.rhino.Node var42 = var1.copyInformationFromForTree(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var42.setJSType(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2014/12/24 11:10"+ "'", var18.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test374"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var4 = var3.hasOneChild();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    boolean var10 = var9.isArrayLit();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
    java.lang.String var22 = var9.getQualifiedName();
    boolean var23 = var9.isHook();
    int var24 = var9.getSourceOffset();
    boolean var25 = var9.isReturn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test375"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setTweakToNumberLiteral("INHERITED", (-1));
    var0.setCheckSymbols(false);
    var0.setCollapseObjectLiterals(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test376"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.jstype.JSType var6 = var3.getJSType();
    com.google.javascript.rhino.Node var7 = null;
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    java.lang.String var14 = var9.toString(true, false, false);
    java.lang.Iterable var15 = var9.children();
    boolean var16 = var9.isGetProp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.function(var3, var7, var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "LABEL_NAME hi!"+ "'", var14.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test377"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.Node var17 = var10.getPropertyNode("function (): ?");
    com.google.javascript.rhino.Node var18 = var10.getSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test378"); }


    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var3, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var6 = new com.google.javascript.jscomp.DiagnosticType[] { var5};
    com.google.javascript.jscomp.DiagnosticGroup var7 = new com.google.javascript.jscomp.DiagnosticGroup(var6);
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    boolean var15 = var8.isExternExportsEnabled();
    var8.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var22 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make(var20, var22);
    int var24 = var23.getCharno();
    com.google.javascript.jscomp.CheckLevel var25 = var23.getDefaultLevel();
    var8.setReportUnknownTypes(var25);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var27 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var7, var25);
    java.lang.String var28 = var7.toString();
    com.google.javascript.jscomp.DiagnosticGroup[] var29 = new com.google.javascript.jscomp.DiagnosticGroup[] { var7};
    com.google.javascript.jscomp.DiagnosticGroup var30 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var29);
    com.google.javascript.jscomp.DiagnosticGroup var31 = new com.google.javascript.jscomp.DiagnosticGroup(var29);
    com.google.javascript.jscomp.DiagnosticGroup var32 = new com.google.javascript.jscomp.DiagnosticGroup("{proxy:{1241367186}}", var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test379"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var1.markText("(InputId: )", 100, 1, 3, 1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    boolean var28 = var1.recordModifies(var27);
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var30.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    com.google.javascript.rhino.JSTypeExpression var56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var55);
    boolean var57 = var30.recordExtendedInterface(var55);
    boolean var58 = var1.recordThrowType(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test380"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.isHidden();
    boolean var20 = var14.isInterface();
    boolean var21 = var14.isExport();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test381"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    boolean var39 = var37.isFunctionPrototypeType();
    boolean var40 = var37.matchesInt32Context();
    com.google.javascript.rhino.jstype.TemplateType var41 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType(var37);
    boolean var42 = var37.isFunctionType();
    var37.clearResolved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test382"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("InputId: ");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "InputId: InputId: "+ "'", var2.equals("InputId: InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "InputId: InputId: "+ "'", var3.equals("InputId: InputId: "));

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test383"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var1.setDepth(0);
    var1.setDepth(154);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test384"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isIdGenerator();
    java.lang.String var20 = var14.getReturnDescription();
    com.google.javascript.rhino.JSTypeExpression var21 = var14.getBaseType();
    boolean var22 = var14.shouldPreserveTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test385"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var5 = var4.recordExpose();
    boolean var7 = var4.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.InputId var14 = com.google.javascript.jscomp.NodeUtil.getInputId(var11);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var11.setJSType(var15);
    com.google.javascript.rhino.JSDocInfo var17 = var4.build(var11);
    java.lang.String var18 = var17.getFileOverview();
    java.util.Set var19 = var17.getModifies();
    java.util.List var20 = var17.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var21 = var17.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var0.createDirectedGraphNode((java.lang.Object)var17);
    com.google.javascript.jscomp.CompilerOptions var23 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var24 = null;
    var23.setBrokenClosureRequiresLevel(var24);
    var23.setPrintInputDelimiter(false);
    var23.setRemoveAbstractMethods(true);
    com.google.javascript.jscomp.DiagnosticGroup var30 = null;
    com.google.javascript.jscomp.CheckLevel var31 = null;
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var32 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var30, var31);
    java.lang.String var33 = var32.toString();
    java.lang.String var34 = var32.toString();
    java.lang.String var35 = var32.toString();
    var23.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var32);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.thisNode();
    boolean var38 = var37.isNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var39 = var0.getEdges((java.lang.Object)var32, (java.lang.Object)var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "null(null)"+ "'", var33.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "null(null)"+ "'", var34.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "null(null)"+ "'", var35.equals("null(null)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test386"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.InputId var3 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var4 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isOr();
    java.lang.String var13 = var4.extractClassNameIfRequire(var5, var9);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.lang.Iterable var39 = var37.getDirectedGraphNodes();
    java.util.List var40 = var37.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    boolean var48 = var41.isExternExportsEnabled();
    var41.setCheckCaja(false);
    java.util.Set var51 = null;
    var41.setReplaceStringsReservedStrings(var51);
    var41.setAliasAllStrings(true);
    var41.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    boolean var64 = var57.isExternExportsEnabled();
    var57.setCheckCaja(false);
    var57.setGroupVariableDeclarations(true);
    java.util.Map var69 = var57.getDefineReplacements();
    var41.setPropertyInvalidationErrors(var69);
    var4.defineDelegateProxyPrototypeProperties(var15, (com.google.javascript.rhino.jstype.StaticScope)var35, var40, var69);
    boolean var72 = var35.canBeCalled();
    boolean var73 = var35.isRegexpType();
    boolean var74 = var3.equals((java.lang.Object)var35);
    boolean var76 = var35.hasOwnProperty("RETURN");
    com.google.javascript.rhino.jstype.JSType var78 = var35.findPropertyType("{proxy:{1743833346}}");
    com.google.javascript.rhino.jstype.FunctionBuilder var79 = var1.copyFromOtherFunction(var35);
    com.google.javascript.rhino.jstype.JSType var81 = var35.findPropertyType("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test387"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    com.google.javascript.jscomp.MessageFormatter var10 = null;
    java.util.logging.Logger var11 = null;
    com.google.javascript.jscomp.LoggerErrorManager var12 = new com.google.javascript.jscomp.LoggerErrorManager(var10, var11);
    com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var12);
    com.google.javascript.jscomp.Scope var14 = var13.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var15 = null;
    com.google.javascript.jscomp.NodeTraversal var16 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var13, var15);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var18 = null;
    var17.setStripTypes(var18);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var20 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var21 = var20.getDirectedGraphNodes();
    java.util.List var22 = var20.getEdges();
    var17.setManageClosureDependencies(var22);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.script(var22);
    var16.traverseRoots(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var26 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var27 = var26.getDirectedGraphNodes();
    java.util.List var28 = var26.getEdges();
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    var29.setChainCalls(true);
    java.util.logging.Logger var32 = null;
    com.google.javascript.jscomp.LoggerErrorManager var33 = new com.google.javascript.jscomp.LoggerErrorManager(var32);
    var29.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var33);
    var29.setGatherCssNames(false);
    var5.<com.google.javascript.jscomp.SourceFile>initModules(var22, var28, var29);
    var29.setOptimizeArgumentsArray(true);
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getProvides();
    java.util.List var43 = var41.getRequires();
    com.google.javascript.jscomp.SourceAst var44 = null;
    com.google.javascript.rhino.InputId var45 = null;
    com.google.javascript.jscomp.CompilerInput var47 = new com.google.javascript.jscomp.CompilerInput(var44, var45, true);
    com.google.javascript.jscomp.JSModule var48 = var47.getModule();
    var41.addFirst(var47);
    var41.removeAll();
    java.util.Set var51 = var41.getAllDependencies();
    var29.setReplaceStringsReservedStrings(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test388"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    java.lang.String var20 = var14.getLendsName();
    com.google.javascript.rhino.JSTypeExpression var21 = var14.getTypedefType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test389"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.DefaultPassConfig var5 = new com.google.javascript.jscomp.DefaultPassConfig(var0);
    var0.setCollapseVariableDeclarations(true);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    boolean var25 = var23.hasFileOverview();
    boolean var26 = var23.hasReturnType();
    boolean var27 = var23.hasType();
    boolean var28 = var23.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var29 = var23.getVisibility();
    boolean var30 = var23.shouldPreserveTry();
    java.util.List var31 = var23.getExtendedInterfaces();
    java.util.List var32 = var23.getImplementedInterfaces();
    var0.setReplaceStringsConfiguration("", var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test390"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordMeaning("Unversioned directory");
    boolean var5 = var1.recordExport();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var9 = var7.getBooleanProp((-1));
    var7.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var13 = new com.google.javascript.rhino.JSTypeExpression(var7, "goog.abstractMethod");
    boolean var14 = var13.isOptionalArg();
    boolean var15 = var1.recordThrowType(var13);
    com.google.javascript.rhino.JSTypeExpression var16 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test391"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var6 = var5.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
    com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var13 = null;
    var12.setStripTypes(var13);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var16 = var15.getDirectedGraphNodes();
    java.util.List var17 = var15.getEdges();
    var12.setManageClosureDependencies(var17);
    boolean var19 = var12.isExternExportsEnabled();
    var12.setCollapsePropertiesOnExternTypes(false);
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
    var12.setAliasKeywords(true);
    var12.setRemoveDeadCode(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test392() {}
//   public void test392() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test392"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getDependencies();
//     com.google.javascript.jscomp.SourceAst var12 = null;
//     com.google.javascript.rhino.InputId var13 = null;
//     com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12, var13, true);
//     com.google.javascript.jscomp.JSModule var16 = var15.getModule();
//     var10.add(var15);
//     com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var10.addFirst(var19);
//     java.util.Set var21 = var10.getAllDependencies();
//     var10.removeAll();
//     com.google.javascript.jscomp.SourceAst var23 = null;
//     com.google.javascript.rhino.InputId var24 = null;
//     com.google.javascript.jscomp.CompilerInput var26 = new com.google.javascript.jscomp.CompilerInput(var23, var24, true);
//     com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var23, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var10.addFirst(var29);
//     com.google.javascript.jscomp.SourceAst var31 = null;
//     com.google.javascript.rhino.InputId var32 = null;
//     com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31, var32, true);
//     com.google.javascript.jscomp.SourceAst var35 = var34.getAst();
//     com.google.javascript.jscomp.JSModule var36 = null;
//     var34.setModule(var36);
//     var10.add(var34);
//     var3.setModule(var10);
//     com.google.javascript.jscomp.JSModule[] var40 = new com.google.javascript.jscomp.JSModule[] { var10};
//     com.google.javascript.jscomp.JSModuleGraph var41 = new com.google.javascript.jscomp.JSModuleGraph(var40);
//     java.util.List var42 = null;
//     com.google.javascript.jscomp.JSModule var44 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var45 = var44.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var46 = new com.google.javascript.jscomp.ComposeWarningsGuard(var45);
//     com.google.javascript.jscomp.JSModule[] var47 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var45);
//     com.google.javascript.jscomp.JSModuleGraph var48 = new com.google.javascript.jscomp.JSModuleGraph(var47);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var50 = var49.getDirectedGraphNodes();
//     java.lang.Iterable var51 = var49.getDirectedGraphNodes();
//     java.util.List var52 = var49.getGraphvizNodes();
//     com.google.javascript.rhino.JSDocInfoBuilder var54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var55 = var54.recordExpose();
//     boolean var57 = var54.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var62 = var61.getNext();
//     com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
//     com.google.javascript.rhino.InputId var64 = com.google.javascript.jscomp.NodeUtil.getInputId(var61);
//     com.google.javascript.rhino.jstype.JSType var65 = null;
//     var61.setJSType(var65);
//     com.google.javascript.rhino.JSDocInfo var67 = var54.build(var61);
//     java.lang.String var68 = var67.getFileOverview();
//     boolean var69 = var67.hasType();
//     java.util.List var70 = var67.getThrownTypes();
//     java.util.List var71 = var48.manageDependencies(var52, var70);
//     java.util.List var72 = var41.manageDependencies(var42, var71);
// 
//   }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test393"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    var0.setReportMissingOverride(var15);
    var0.setNameAnonymousFunctionsOnly(true);
    var0.setPreferLineBreakAtEndOfFile(false);
    boolean var21 = var0.getInferTypes();
    var0.setRewriteFunctionExpressions(true);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var0.getTweakProcessing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test394"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setAliasStringsBlacklist("BANG 0 [source_file: Unversioned directory]\n");
    var0.skipAllCompilerPasses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test395"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("LABEL_NAME hi!", "(STRING hi 0 [length: 2]\n)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test396() {}
//   public void test396() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test396"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getErrors();
//     var3.disableThreads();
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     var6.setChainCalls(true);
//     java.util.logging.Logger var9 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var10 = new com.google.javascript.jscomp.LoggerErrorManager(var9);
//     var6.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var10);
//     com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var13 = null;
//     var12.setStripTypes(var13);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var16 = var15.getDirectedGraphNodes();
//     java.util.List var17 = var15.getEdges();
//     var12.setManageClosureDependencies(var17);
//     var12.setDevirtualizePrototypeMethods(true);
//     var12.setCollapsePropertiesOnExternTypes(false);
//     var12.setShadowVariables(false);
//     com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var26 = null;
//     var25.setStripTypes(var26);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var29 = var28.getDirectedGraphNodes();
//     java.util.List var30 = var28.getEdges();
//     var25.setManageClosureDependencies(var30);
//     boolean var32 = var25.isExternExportsEnabled();
//     var25.setCheckCaja(false);
//     java.util.Set var35 = null;
//     var25.setReplaceStringsReservedStrings(var35);
//     com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var39 = var38.recordExpose();
//     boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var46 = var45.getNext();
//     com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
//     com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     var45.setJSType(var49);
//     com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
//     java.lang.String var52 = var51.getFileOverview();
//     java.util.Set var53 = var51.getModifies();
//     var25.setReplaceStringsReservedStrings(var53);
//     var25.setUnaliasableGlobals("");
//     com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var61 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make(var59, var61);
//     int var63 = var62.getCharno();
//     com.google.javascript.jscomp.CheckLevel var64 = var62.getDefaultLevel();
//     var25.setCheckGlobalThisLevel(var64);
//     var12.setCheckMissingGetCssNameLevel(var64);
//     com.google.javascript.jscomp.MessageFormatter var67 = null;
//     java.util.logging.Logger var68 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var69 = new com.google.javascript.jscomp.LoggerErrorManager(var67, var68);
//     com.google.javascript.jscomp.Compiler var70 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var69);
//     com.google.javascript.jscomp.Scope var71 = var70.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var72 = null;
//     com.google.javascript.jscomp.NodeTraversal var73 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var70, var72);
//     com.google.javascript.jscomp.Scope var74 = var73.getScope();
//     com.google.javascript.rhino.Node var75 = null;
//     com.google.javascript.jscomp.DiagnosticType var78 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var80 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var81 = com.google.javascript.jscomp.JSError.make(var78, var80);
//     com.google.javascript.jscomp.DiagnosticType var82 = var81.getType();
//     java.lang.String[] var84 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var85 = var73.makeError(var75, var82, var84);
//     var10.report(var64, var85);
//     var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var10);
//     boolean var88 = var3.acceptEcmaScript5();
// 
//   }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test397"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    boolean var25 = var23.isWhile();
    com.google.javascript.rhino.Node var26 = var23.getLastChild();
    com.google.javascript.rhino.Node var27 = var26.detachFromParent();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.paramList(var26);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test398"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.Collection var15 = var14.getAuthors();
    boolean var17 = var14.hasParameterType("goog.exportProperty");
    boolean var18 = var14.isExpose();
    java.lang.String var19 = var14.getBlockDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test399"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    java.lang.String var73 = var56.getDisplayName();
    com.google.javascript.rhino.Node var74 = var56.getSource();
    boolean var75 = var74.isScript();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var73.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test400"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var3 = var1.isConstantKey("2014/12/24 11:10");
    java.util.Collection var4 = var1.getAssertionFunctions();
    boolean var6 = var1.isConstant("Unversioned directory");
    com.google.javascript.jscomp.graph.GraphNode var7 = var0.createNode((java.lang.Object)var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var10 = var8.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    java.util.List var28 = var25.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var29 = var25.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var30 = var8.createDirectedGraphNode((java.lang.Object)var25);
    java.util.List var31 = var0.getNeighborNodes(var30);
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    boolean var39 = var32.isExternExportsEnabled();
    var32.setManageClosureDependencies(true);
    boolean var42 = var32.shouldColorizeErrorOutput();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var43 = var0.getDirectedGraphNode((java.lang.Object)var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.clearNodeAnnotations();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test401"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var3 = var1.recordConstructor();
    boolean var4 = var1.recordNoTypeCheck();
    java.util.Set var5 = null;
    boolean var6 = var1.recordModifies(var5);
    boolean var7 = var1.recordImplicitCast();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test402() {}
//   public void test402() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test402"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.jscomp.ClosureCodingConvention var1 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = var6.getNext();
//     com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
//     boolean var9 = var6.isOr();
//     java.lang.String var10 = var1.extractClassNameIfRequire(var2, var6);
//     boolean var11 = var6.isScript();
//     com.google.javascript.rhino.Node var12 = var6.getFirstChild();
//     java.lang.Object var14 = var12.getProp(153);
//     com.google.javascript.jscomp.ClosureCodingConvention var15 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var17 = var15.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var18 = var15.getAssertionFunctions();
//     boolean var20 = var15.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     int var24 = var22.getSourceOffset();
//     boolean var25 = var22.isTypeOf();
//     boolean var26 = var15.isVarArgsParameter(var22);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.ifNode(var0, var12, var22);
// 
//   }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test403"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var5 = var1.recordParameterDescription("InputId: InputId: ", "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.JSDocInfoBuilder var7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var8 = var7.recordExpose();
    boolean var9 = var7.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var11 = null;
    boolean var12 = var7.recordParameter("Unversioned directory", var11);
    com.google.javascript.rhino.JSTypeExpression var13 = null;
    boolean var15 = var7.recordThrowDescription(var13, "");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    com.google.javascript.rhino.Node var24 = var19.getChildAtIndex(1);
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    com.google.javascript.rhino.JSDocInfo var31 = var28.getJSDocInfo();
    com.google.javascript.rhino.Node var32 = var19.copyInformationFrom(var28);
    java.lang.Object var34 = null;
    var19.putProp(0, var34);
    com.google.javascript.rhino.JSTypeExpression var37 = new com.google.javascript.rhino.JSTypeExpression(var19, "()");
    com.google.javascript.rhino.JSTypeExpression var38 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var37);
    com.google.javascript.rhino.Node var39 = var37.getRoot();
    boolean var40 = var7.recordImplementedInterface(var37);
    boolean var41 = var1.recordType(var37);
    boolean var43 = var1.recordFileOverview("(LABEL_NAME hi!)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test404() {}
//   public void test404() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test404"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
//     var1.markText("(InputId: )", 100, 1, 3, 1);
//     com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var13 = var12.recordExpose();
//     boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = var19.getNext();
//     com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
//     com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     var19.setJSType(var23);
//     com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
//     java.lang.String var26 = var25.getFileOverview();
//     java.util.Set var27 = var25.getModifies();
//     boolean var28 = var1.recordModifies(var27);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = var32.getNext();
//     com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
//     boolean var35 = var32.isVarArgs();
//     com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var42 = var41.getNext();
//     com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
//     com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
//     com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
//     java.lang.Object var47 = null;
//     var32.putProp(0, var47);
//     com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
//     com.google.javascript.rhino.jstype.StaticScope var51 = null;
//     com.google.javascript.rhino.ErrorReporter var52 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
//     com.google.javascript.rhino.jstype.JSType var55 = null;
//     var53.unregisterPropertyOnType("Unversioned directory", var55);
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
//     com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
//     com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
//     boolean var64 = var1.recordImplementedInterface(var50);
//     boolean var65 = var1.recordExterns();
//     boolean var66 = var1.recordHiddenness();
//     com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var71 = var70.getNext();
//     com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
//     com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     var70.setJSType(var74);
//     boolean var76 = var70.isBlock();
//     com.google.javascript.rhino.Node var77 = var70.getParent();
//     boolean var78 = var70.isBreak();
//     com.google.javascript.rhino.Node var80 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var81 = var80.getNext();
//     com.google.javascript.rhino.InputId var82 = var80.getInputId();
//     boolean var83 = var80.isGetProp();
//     com.google.javascript.rhino.Node var84 = var70.clonePropsFrom(var80);
//     com.google.javascript.rhino.JSTypeExpression var86 = new com.google.javascript.rhino.JSTypeExpression(var80, "goog.exportSymbol");
//     boolean var88 = var1.recordThrowDescription(var86, "module$InputId: ");
//     
//     // Checks the contract:  equals-hashcode on var50 and var86
//     assertTrue("Contract failed: equals-hashcode on var50 and var86", var50.equals(var86) ? var50.hashCode() == var86.hashCode() : true);
//     
//     // Checks the contract:  equals-hashcode on var86 and var50
//     assertTrue("Contract failed: equals-hashcode on var86 and var50", var86.equals(var50) ? var86.hashCode() == var50.hashCode() : true);
// 
//   }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test405"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    var0.setFoldConstants(false);
    var0.setAssumeStrictThis(false);
    boolean var15 = var0.assumeStrictThis();
    com.google.javascript.jscomp.SourceMap.Format var16 = null;
    var0.setSourceMapFormat(var16);
    var0.resetWarningsGuard();
    var0.setRemoveUnusedClassProperties(false);
    var0.setRenamePrefixNamespace("goog.global");
    var0.setCollapseProperties(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test406"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     java.lang.String var3 = var2.toString();
//     java.lang.String var4 = var2.toString();
//     java.lang.String var5 = var2.toString();
//     java.lang.String var6 = var2.toString();
//     com.google.javascript.jscomp.CheckLevel var9 = null;
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var9, "Unversioned directory");
//     com.google.javascript.jscomp.DiagnosticType[] var12 = new com.google.javascript.jscomp.DiagnosticType[] { var11};
//     com.google.javascript.jscomp.DiagnosticGroup var13 = new com.google.javascript.jscomp.DiagnosticGroup(var12);
//     com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var15 = null;
//     var14.setStripTypes(var15);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var18 = var17.getDirectedGraphNodes();
//     java.util.List var19 = var17.getEdges();
//     var14.setManageClosureDependencies(var19);
//     boolean var21 = var14.isExternExportsEnabled();
//     var14.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var28 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make(var26, var28);
//     int var30 = var29.getCharno();
//     com.google.javascript.jscomp.CheckLevel var31 = var29.getDefaultLevel();
//     var14.setReportUnknownTypes(var31);
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var33 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var13, var31);
//     java.lang.String var34 = var13.toString();
//     com.google.javascript.jscomp.DiagnosticGroup[] var35 = new com.google.javascript.jscomp.DiagnosticGroup[] { var13};
//     com.google.javascript.jscomp.DiagnosticGroup var36 = new com.google.javascript.jscomp.DiagnosticGroup("hi!", var35);
//     com.google.javascript.jscomp.DiagnosticGroup var37 = new com.google.javascript.jscomp.DiagnosticGroup(var35);
//     com.google.javascript.jscomp.DiagnosticGroup var38 = new com.google.javascript.jscomp.DiagnosticGroup(var35);
//     boolean var39 = var2.enables(var38);
// 
//   }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test407"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.removeFirstChild();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    boolean var10 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var8);
    int var11 = var8.getLength();
    com.google.javascript.rhino.Node var12 = null;
    boolean var13 = var8.hasChild(var12);
    com.google.javascript.rhino.Node var14 = var6.useSourceInfoIfMissingFromForTree(var8);
    var8.setSourceFileForTesting("Unversioned directory");
    boolean var17 = var8.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var18 = var8.getStaticSourceFile();
    com.google.javascript.rhino.Node var19 = var1.srcref(var8);
    java.lang.String var20 = var1.toStringTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var1.getString();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "BANG 0 [source_file: Unversioned directory]\n"+ "'", var20.equals("BANG 0 [source_file: Unversioned directory]\n"));

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test408"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setTightenTypes(false);
    var0.setTweakToDoubleLiteral("2014/12/24 11:10", 10.0d);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    var15.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var15.setColorizeErrorOutput(true);
    var15.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var30 = null;
    var29.setStripTypes(var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var33 = var32.getDirectedGraphNodes();
    java.util.List var34 = var32.getEdges();
    var29.setManageClosureDependencies(var34);
    var29.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var40 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var41 = var40.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var42 = new com.google.javascript.jscomp.ComposeWarningsGuard(var41);
    com.google.javascript.jscomp.JSError var43 = null;
    com.google.javascript.jscomp.CheckLevel var44 = var42.level(var43);
    var29.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var42);
    var15.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var42);
    var15.setTweakToNumberLiteral("", (-1));
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    byte[] var54 = new byte[] { (byte)100};
    var50.setInputPropertyMapSerialized(var54);
    var50.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var58 = var50.getTracerMode();
    var15.setTracerMode(var58);
    var0.setTracerMode(var58);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var65 = var64.recordExpose();
    boolean var67 = var64.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.InputId var74 = com.google.javascript.jscomp.NodeUtil.getInputId(var71);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    var71.setJSType(var75);
    com.google.javascript.rhino.JSDocInfo var77 = var64.build(var71);
    java.util.List var78 = var77.getThrownTypes();
    java.lang.String var79 = var77.getDeprecationReason();
    java.lang.String var80 = var77.getReturnDescription();
    boolean var81 = var77.isImplicitCast();
    var62.setJSDocInfo(var77);
    com.google.javascript.rhino.Node var83 = var77.getAssociatedNode();
    boolean var84 = var58.equals((java.lang.Object)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "2014/12/24 11:10"+ "'", var79.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test409"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    java.lang.Iterable var2 = var1.siblings();
    var1.setCharno(1);
    boolean var5 = var1.isDo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test410"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
//     com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
//     var3.disableThreads();
//     com.google.javascript.jscomp.LightweightMessageFormatter var9 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
//     com.google.javascript.jscomp.JsAst var10 = null;
//     var3.replaceScript(var10);
// 
//   }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test411"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString("", 10, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test412"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateScript(var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test413"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isOr();
    boolean var7 = var3.isExprResult();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var9 = var8.getDirectives();
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.NodeUtil.newExpr(var8);
    boolean var11 = var10.isNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.getprop(var3, var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test414"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.paramList(var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isOptionalArg();
    java.lang.String var15 = var7.toString(false, false, true);
    boolean var16 = var7.isFromExterns();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.labelName("hi!");
    var7.addChildToFront(var18);
    com.google.javascript.rhino.Node var20 = var3.useSourceInfoIfMissingFrom(var18);
    boolean var21 = var3.isFunction();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    boolean var28 = var25.isVarArgs();
    com.google.javascript.rhino.Node var30 = var25.getChildAtIndex(1);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    com.google.javascript.rhino.JSDocInfo var37 = var34.getJSDocInfo();
    com.google.javascript.rhino.Node var38 = var25.copyInformationFrom(var34);
    java.lang.Object var40 = null;
    var25.putProp(0, var40);
    com.google.javascript.rhino.JSTypeExpression var43 = new com.google.javascript.rhino.JSTypeExpression(var25, "()");
    com.google.javascript.rhino.jstype.StaticScope var44 = null;
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var46.unregisterPropertyOnType("Unversioned directory", var48);
    com.google.javascript.rhino.jstype.JSType var50 = null;
    boolean var52 = var46.canPropertyBeDefined(var50, "BANG");
    com.google.javascript.rhino.jstype.JSType var53 = null;
    com.google.javascript.rhino.jstype.JSType[] var54 = new com.google.javascript.rhino.jstype.JSType[] { var53};
    com.google.javascript.rhino.Node var55 = var46.createParameters(var54);
    com.google.javascript.rhino.jstype.JSType var56 = var43.evaluate(var44, var46);
    com.google.javascript.rhino.ErrorReporter var57 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var59 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var58);
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    com.google.javascript.rhino.Node var65 = var61.srcrefTree(var63);
    boolean var66 = var63.isVarArgs();
    com.google.javascript.rhino.Node var68 = var63.getChildAtIndex(1);
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = var72.getNext();
    com.google.javascript.rhino.Node var74 = var70.srcrefTree(var72);
    com.google.javascript.rhino.JSDocInfo var75 = var72.getJSDocInfo();
    com.google.javascript.rhino.Node var76 = var63.copyInformationFrom(var72);
    java.lang.Object var78 = null;
    var63.putProp(0, var78);
    com.google.javascript.rhino.JSTypeExpression var81 = new com.google.javascript.rhino.JSTypeExpression(var63, "()");
    com.google.javascript.rhino.jstype.StaticScope var82 = null;
    com.google.javascript.rhino.ErrorReporter var83 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var84 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var83);
    com.google.javascript.rhino.jstype.JSType var86 = null;
    var84.unregisterPropertyOnType("Unversioned directory", var86);
    com.google.javascript.rhino.jstype.JSType var88 = null;
    boolean var90 = var84.canPropertyBeDefined(var88, "BANG");
    com.google.javascript.rhino.jstype.JSType var91 = null;
    com.google.javascript.rhino.jstype.JSType[] var92 = new com.google.javascript.rhino.jstype.JSType[] { var91};
    com.google.javascript.rhino.Node var93 = var84.createParameters(var92);
    com.google.javascript.rhino.jstype.JSType var94 = var81.evaluate(var82, var84);
    boolean var95 = var59.addVarArgs(var94);
    com.google.javascript.rhino.jstype.JSType var96 = var56.getLeastSupertype(var94);
    var3.setJSType(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "BANG"+ "'", var15.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test415"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.CompilerOptions var10 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var11 = null;
    var10.setStripTypes(var11);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var13 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var14 = var13.getDirectedGraphNodes();
    java.util.List var15 = var13.getEdges();
    var10.setManageClosureDependencies(var15);
    var10.setDevirtualizePrototypeMethods(true);
    var10.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var22 = null;
    var21.setBrokenClosureRequiresLevel(var22);
    var21.setLocale("");
    var21.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var28 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var29 = null;
    var28.setStripTypes(var29);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var32 = var31.getDirectedGraphNodes();
    java.util.List var33 = var31.getEdges();
    var28.setManageClosureDependencies(var33);
    boolean var35 = var28.isExternExportsEnabled();
    var28.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var40 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var42 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var43 = com.google.javascript.jscomp.JSError.make(var40, var42);
    int var44 = var43.getCharno();
    com.google.javascript.jscomp.CheckLevel var45 = var43.getDefaultLevel();
    var28.setReportUnknownTypes(var45);
    var21.setBrokenClosureRequiresLevel(var45);
    var10.setCheckUnreachableCode(var45);
    var0.setCheckGlobalNamesLevel(var45);
    var0.setTweakToDoubleLiteral("OFF", 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test416"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var8 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var7);
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isOr();
    java.lang.String var18 = var9.extractClassNameIfRequire(var10, var14);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var31.unregisterPropertyOnType("Unversioned directory", var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getDependencies();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var31.createFunctionTypeWithVarArgs(var35, var38);
    boolean var41 = var40.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.lang.Iterable var44 = var42.getDirectedGraphNodes();
    java.util.List var45 = var42.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var47 = null;
    var46.setStripTypes(var47);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var50 = var49.getDirectedGraphNodes();
    java.util.List var51 = var49.getEdges();
    var46.setManageClosureDependencies(var51);
    boolean var53 = var46.isExternExportsEnabled();
    var46.setCheckCaja(false);
    java.util.Set var56 = null;
    var46.setReplaceStringsReservedStrings(var56);
    var46.setAliasAllStrings(true);
    var46.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var62 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var63 = null;
    var62.setStripTypes(var63);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var66 = var65.getDirectedGraphNodes();
    java.util.List var67 = var65.getEdges();
    var62.setManageClosureDependencies(var67);
    boolean var69 = var62.isExternExportsEnabled();
    var62.setCheckCaja(false);
    var62.setGroupVariableDeclarations(true);
    java.util.Map var74 = var62.getDefineReplacements();
    var46.setPropertyInvalidationErrors(var74);
    var9.defineDelegateProxyPrototypeProperties(var20, (com.google.javascript.rhino.jstype.StaticScope)var40, var45, var74);
    boolean var77 = var40.canBeCalled();
    boolean var78 = var40.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var79 = var40.collapseUnion();
    boolean var80 = var40.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var81 = var40.getReturnType();
    com.google.javascript.rhino.JSDocInfo var83 = var40.getOwnPropertyJSDocInfo("function (): {1292906510}");
    com.google.javascript.rhino.jstype.FunctionType var84 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var85 = null;
    var0.applySubclassRelationship(var40, var84, var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test417"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    var0.setReserveRawExports(true);
    com.google.javascript.jscomp.DefaultPassConfig var16 = new com.google.javascript.jscomp.DefaultPassConfig(var0);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var19 = var17.isConstantKey("2014/12/24 11:10");
    java.util.Collection var20 = var17.getAssertionFunctions();
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var24.setJSType(var25);
    boolean var27 = var24.isScript();
    com.google.javascript.rhino.Node var28 = var24.removeFirstChild();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var32 = var31.isGetterDef();
    boolean var33 = var31.isAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.String var51 = var50.toStringTree();
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    boolean var59 = var55.getBooleanProp(100);
    int var60 = var55.getSideEffectFlags();
    boolean var61 = var55.isDefaultCase();
    com.google.javascript.rhino.Node var62 = new com.google.javascript.rhino.Node(1, var31, var50, var55);
    java.lang.String var63 = var17.extractClassNameIfProvide(var24, var55);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var66 = var65.isGetterDef();
    java.lang.String var70 = var65.toString(true, false, false);
    java.lang.Iterable var71 = var65.children();
    com.google.javascript.jscomp.CompilerOptions var72 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var73 = null;
    var72.setStripTypes(var73);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var75 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var76 = var75.getDirectedGraphNodes();
    java.util.List var77 = var75.getEdges();
    var72.setManageClosureDependencies(var77);
    boolean var79 = var72.isExternExportsEnabled();
    var72.setCheckCaja(false);
    var72.setGroupVariableDeclarations(true);
    java.util.Map var84 = var72.getDefineReplacements();
    var17.checkForCallingConventionDefiningCalls(var65, var84);
    var0.setTweakReplacements(var84);
    var0.setShadowVariables(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var51.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "LABEL_NAME hi!"+ "'", var70.equals("LABEL_NAME hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test418"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("BANG 0", "function (): {140836661}", var2);
// 
//   }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test419"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.StaticScope var32 = null;
    com.google.javascript.rhino.jstype.JSType var33 = var24.resolve(var31, var32);
    boolean var34 = var24.canBeCalled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var35 = var24.cloneWithoutArrowType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test420"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var51 = var49.getBooleanProp((-1));
    var49.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var49, "goog.abstractMethod");
    boolean var57 = var1.recordThrowDescription(var55, "STRING hi 0 [length: 2]\n");
    boolean var58 = var1.recordNoCompile();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    boolean var65 = var62.isVarArgs();
    com.google.javascript.rhino.Node var67 = var62.getChildAtIndex(1);
    com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var72 = var71.getNext();
    com.google.javascript.rhino.Node var73 = var69.srcrefTree(var71);
    com.google.javascript.rhino.JSDocInfo var74 = var71.getJSDocInfo();
    com.google.javascript.rhino.Node var75 = var62.copyInformationFrom(var71);
    java.lang.Object var77 = null;
    var62.putProp(0, var77);
    com.google.javascript.rhino.JSTypeExpression var80 = new com.google.javascript.rhino.JSTypeExpression(var62, "()");
    boolean var81 = var1.recordEnumParameterType(var80);
    boolean var82 = var1.recordExpose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test421"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    var0.setMarkAsCompiled(true);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    var13.setDevirtualizePrototypeMethods(true);
    var13.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var13.getTweakProcessing();
    var0.setTweakProcessing(var24);
    var0.setAcceptConstKeyword(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test422() {}
//   public void test422() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test422"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     boolean var8 = var5.isOr();
//     java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var11.unregisterPropertyOnType("Unversioned directory", var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var18 = var17.getDependencies();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
//     com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var22.unregisterPropertyOnType("Unversioned directory", var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var29 = var28.getDependencies();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
//     boolean var32 = var31.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var34 = var33.getDirectedGraphNodes();
//     java.lang.Iterable var35 = var33.getDirectedGraphNodes();
//     java.util.List var36 = var33.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var38 = null;
//     var37.setStripTypes(var38);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var41 = var40.getDirectedGraphNodes();
//     java.util.List var42 = var40.getEdges();
//     var37.setManageClosureDependencies(var42);
//     boolean var44 = var37.isExternExportsEnabled();
//     var37.setCheckCaja(false);
//     java.util.Set var47 = null;
//     var37.setReplaceStringsReservedStrings(var47);
//     var37.setAliasAllStrings(true);
//     var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var54 = null;
//     var53.setStripTypes(var54);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var57 = var56.getDirectedGraphNodes();
//     java.util.List var58 = var56.getEdges();
//     var53.setManageClosureDependencies(var58);
//     boolean var60 = var53.isExternExportsEnabled();
//     var53.setCheckCaja(false);
//     var53.setGroupVariableDeclarations(true);
//     java.util.Map var65 = var53.getDefineReplacements();
//     var37.setPropertyInvalidationErrors(var65);
//     var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
//     boolean var68 = var31.canBeCalled();
//     boolean var69 = var31.hasAnyTemplateInternal();
//     java.lang.String var70 = var31.toDebugHashCodeString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var3);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var5);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var6);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var18);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var19);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var20);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var29);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var30);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var31);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var32 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var33);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var34);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var35);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var36);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var40);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var41);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var42);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var44 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var56);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var57);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var58);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var60 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var65);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var68 == true);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var69 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var70 + "' != '" + "function (): {2060974850}"+ "'", var70.equals("function (): {2060974850}"));
// 
//   }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test423"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 1);
    com.google.javascript.rhino.Node var51 = var38.clonePropsFrom(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var51.setDouble(1.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test424"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var66 = var62.dereference();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test425"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setPreferLineBreakAtEndOfFile(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test426"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    int var5 = var3.getLineOfOffset(306);
    int var7 = var3.getColumnOfOffset(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test427"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.Node var10 = var1.createParameters(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    com.google.javascript.rhino.Node var20 = var15.getChildAtIndex(1);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.JSDocInfo var27 = var24.getJSDocInfo();
    com.google.javascript.rhino.Node var28 = var15.copyInformationFrom(var24);
    java.lang.Object var30 = null;
    var15.putProp(0, var30);
    com.google.javascript.rhino.JSTypeExpression var33 = new com.google.javascript.rhino.JSTypeExpression(var15, "()");
    com.google.javascript.rhino.jstype.StaticScope var34 = null;
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    var36.unregisterPropertyOnType("Unversioned directory", var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    boolean var42 = var36.canPropertyBeDefined(var40, "BANG");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.Node var45 = var36.createParameters(var44);
    com.google.javascript.rhino.jstype.JSType var46 = var33.evaluate(var34, var36);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var49 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var48);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
    java.lang.Object var68 = null;
    var53.putProp(0, var68);
    com.google.javascript.rhino.JSTypeExpression var71 = new com.google.javascript.rhino.JSTypeExpression(var53, "()");
    com.google.javascript.rhino.jstype.StaticScope var72 = null;
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    boolean var80 = var74.canPropertyBeDefined(var78, "BANG");
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.Node var83 = var74.createParameters(var82);
    com.google.javascript.rhino.jstype.JSType var84 = var71.evaluate(var72, var74);
    boolean var85 = var49.addVarArgs(var84);
    com.google.javascript.rhino.jstype.JSType var86 = var46.getLeastSupertype(var84);
    boolean var87 = var86.isNullType();
    boolean var88 = var1.declareType("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n", var86);
    boolean var89 = var1.shouldTolerateUndefinedValues();
    boolean var90 = var1.shouldTolerateUndefinedValues();
    java.lang.Iterable var92 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.jstype.JSType var94 = null;
    boolean var95 = var1.declareType("", var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test428"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.io.PrintStream var2 = null;
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler(var2);
    com.google.javascript.jscomp.CompilerOptions var4 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var5 = null;
    var4.setStripTypes(var5);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var8 = var7.getDirectedGraphNodes();
    java.util.List var9 = var7.getEdges();
    var4.setManageClosureDependencies(var9);
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var13 = var12.recordExpose();
    boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var19.setJSType(var23);
    com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
    java.lang.String var26 = var25.getFileOverview();
    java.util.Set var27 = var25.getModifies();
    java.util.List var28 = var25.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var30 = null;
    var29.setStripTypes(var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var33 = var32.getDirectedGraphNodes();
    java.util.List var34 = var32.getEdges();
    var29.setManageClosureDependencies(var34);
    var29.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var29.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var41 = null;
    var29.setSourceMapDetailLevel(var41);
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var9, var28, var29);
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var45 = null;
    var44.setStripTypes(var45);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var48 = var47.getDirectedGraphNodes();
    java.util.List var49 = var47.getEdges();
    var44.setManageClosureDependencies(var49);
    var44.setDevirtualizePrototypeMethods(true);
    var44.setCollapsePropertiesOnExternTypes(false);
    var44.setSourceMapOutputPath("()");
    var44.setExternExports(true);
    var44.setPreferLineBreakAtEndOfFile(true);
    var44.setRewriteNewDateGoogNow(false);
    var44.setDebugFunctionSideEffectsPath("OFF");
    com.google.javascript.jscomp.DiagnosticType var67 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var69 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var70 = com.google.javascript.jscomp.JSError.make(var67, var69);
    int var71 = var70.getCharno();
    com.google.javascript.jscomp.CheckLevel var72 = var70.getDefaultLevel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var73 = var0.isConnected((java.lang.Object)var9, (java.lang.Object)var44, (java.lang.Object)var72);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test429"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.lang.String var17 = var14.getDescription();
    boolean var18 = var14.isNoCompile();
    boolean var19 = var14.isDeprecated();
    java.lang.String var20 = var14.getDeprecationReason();
    java.lang.String var22 = var14.getDescriptionForParameter("(LABEL_NAME hi!)");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "2014/12/24 11:10"+ "'", var20.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test430"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    var0.setReserveRawExports(true);
    var0.setColorizeErrorOutput(true);
    var0.setDefineToBooleanLiteral("OFF", false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test431() {}
//   public void test431() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test431"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     boolean var2 = var1.hasVarArgs();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var5 = var4.isGetterDef();
//     boolean var6 = var4.isNE();
//     boolean var7 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
//     var4.removeProp(0);
//     com.google.javascript.rhino.Node var10 = var1.newParameterFromNode(var4);
//     com.google.javascript.rhino.Node var12 = var10.getChildAtIndex(100);
// 
//   }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test432"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var1 = var0.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.ErrorManager var3 = var0.getErrorManager();
    com.google.javascript.jscomp.LightweightMessageFormatter var4 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var5 = var0.languageMode();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var6 = var0.languageMode();
    com.google.javascript.jscomp.JSError[] var7 = var0.getWarnings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test433"); }


    com.google.javascript.jscomp.SourceFile var5 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var7 = var5.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5);
    java.io.Reader var9 = var5.getCodeReader();
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromReader("Unversioned directory.  at goog.abstractMethod line (unknown line) : (unknown column)", var9);
    com.google.javascript.jscomp.SourceFile var11 = com.google.javascript.jscomp.SourceFile.fromReader("function (): {2060974850}", var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test434"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    boolean var19 = var7.hasChildren();
    com.google.javascript.rhino.Node var20 = var7.getFirstChild();
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(1);
    boolean var23 = var22.isDefaultCase();
    var20.addChildrenToFront(var22);
    java.lang.Iterable var25 = var22.siblings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test435"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var37 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    com.google.javascript.rhino.Node var46 = var41.getChildAtIndex(1);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.JSDocInfo var53 = var50.getJSDocInfo();
    com.google.javascript.rhino.Node var54 = var41.copyInformationFrom(var50);
    java.lang.Object var56 = null;
    var41.putProp(0, var56);
    com.google.javascript.rhino.JSTypeExpression var59 = new com.google.javascript.rhino.JSTypeExpression(var41, "()");
    com.google.javascript.rhino.jstype.StaticScope var60 = null;
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    var62.unregisterPropertyOnType("Unversioned directory", var64);
    com.google.javascript.rhino.jstype.JSType var66 = null;
    boolean var68 = var62.canPropertyBeDefined(var66, "BANG");
    com.google.javascript.rhino.jstype.JSType var69 = null;
    com.google.javascript.rhino.jstype.JSType[] var70 = new com.google.javascript.rhino.jstype.JSType[] { var69};
    com.google.javascript.rhino.Node var71 = var62.createParameters(var70);
    com.google.javascript.rhino.jstype.JSType var72 = var59.evaluate(var60, var62);
    boolean var73 = var37.addVarArgs(var72);
    com.google.javascript.rhino.jstype.JSType var74 = var34.getLeastSupertype(var72);
    boolean var75 = var74.isObject();
    boolean var76 = var74.isNoType();
    boolean var77 = var74.isRegexpType();
    com.google.javascript.rhino.jstype.UnionType var78 = var74.toMaybeUnionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test436"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    var0.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var26 = var25.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    com.google.javascript.jscomp.JSError var28 = null;
    com.google.javascript.jscomp.CheckLevel var29 = var27.level(var28);
    var14.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.setTweakToNumberLiteral("", (-1));
    com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var36 = null;
    var35.setStripTypes(var36);
    byte[] var39 = new byte[] { (byte)100};
    var35.setInputPropertyMapSerialized(var39);
    var35.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var43 = var35.getTracerMode();
    var0.setTracerMode(var43);
    var0.setRemoveTryCatchFinally(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test437"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.Set var2 = var1.getThisAndAllDependencies();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test438"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("goog.exportProperty", "");
    com.google.javascript.jscomp.DiagnosticType[] var3 = new com.google.javascript.jscomp.DiagnosticType[] { var2};
    com.google.javascript.jscomp.DiagnosticGroup var4 = new com.google.javascript.jscomp.DiagnosticGroup(var3);
    com.google.javascript.jscomp.DiagnosticGroup var5 = new com.google.javascript.jscomp.DiagnosticGroup(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test439"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.Set var3 = var1.getThisAndAllDependencies();
    java.util.Set var4 = var1.getThisAndAllDependencies();
    com.google.javascript.jscomp.SourceAst var5 = null;
    com.google.javascript.rhino.InputId var6 = null;
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
    com.google.javascript.jscomp.JSModule var9 = var8.getModule();
    com.google.javascript.jscomp.SourceAst var10 = var8.getSourceAst();
    var1.remove(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test440"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 1);
    com.google.javascript.rhino.Node var51 = var38.clonePropsFrom(var50);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    int var55 = var53.getSourceOffset();
    com.google.javascript.rhino.Node var56 = var53.cloneNode();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    int var60 = var58.getSourceOffset();
    com.google.javascript.rhino.Node var61 = var58.cloneNode();
    var56.addChildrenToFront(var61);
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    com.google.javascript.rhino.InputId var69 = com.google.javascript.jscomp.NodeUtil.getInputId(var66);
    com.google.javascript.rhino.Node var70 = var56.useSourceInfoFrom(var66);
    com.google.javascript.jscomp.ClosureCodingConvention var71 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var73 = var71.isConstantKey("2014/12/24 11:10");
    java.util.Collection var74 = var71.getAssertionFunctions();
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var78 = var76.getBooleanProp((-1));
    var76.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var82 = new com.google.javascript.rhino.JSTypeExpression(var76, "goog.abstractMethod");
    boolean var83 = var71.isPrototypeAlias(var76);
    com.google.javascript.rhino.Node var85 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var71, "");
    com.google.javascript.rhino.Node var86 = var66.useSourceInfoIfMissingFrom(var85);
    boolean var87 = var66.isReturn();
    int var88 = var66.getLineno();
    com.google.javascript.rhino.Node var89 = var51.useSourceInfoIfMissingFrom(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test441"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    var0.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDevirtualizePrototypeMethods(true);
    var14.setCollapsePropertiesOnExternTypes(false);
    var14.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    boolean var34 = var27.isExternExportsEnabled();
    var27.setCheckCaja(false);
    java.util.Set var37 = null;
    var27.setReplaceStringsReservedStrings(var37);
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.lang.String var54 = var53.getFileOverview();
    java.util.Set var55 = var53.getModifies();
    var27.setReplaceStringsReservedStrings(var55);
    var27.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var61 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var63 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var64 = com.google.javascript.jscomp.JSError.make(var61, var63);
    int var65 = var64.getCharno();
    com.google.javascript.jscomp.CheckLevel var66 = var64.getDefaultLevel();
    var27.setCheckGlobalThisLevel(var66);
    var14.setCheckMissingGetCssNameLevel(var66);
    var0.setReportMissingOverride(var66);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var72 = var71.getDirectedGraphNodes();
    java.util.List var73 = var71.getEdges();
    var0.setReplaceStringsConfiguration("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", var73);
    var0.setProcessObjectPropertyString(false);
    var0.setLineBreak(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test442"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var3.isNull();
    boolean var18 = var3.isOr();
    boolean var19 = var3.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test443"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    java.util.List var10 = var1.getProvides();
    java.util.List var11 = var1.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var12 = new com.google.javascript.jscomp.ComposeWarningsGuard(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test444"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    var2.unregisterPropertyOnType("Unversioned directory", var4);
    var2.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isVarArgs();
    boolean var16 = var12.isFor();
    boolean var17 = var12.isNumber();
    com.google.javascript.rhino.Node var18 = var12.getNext();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
    com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
    java.lang.Object var37 = null;
    var22.putProp(0, var37);
    com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
    com.google.javascript.rhino.jstype.StaticScope var41 = null;
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    var43.unregisterPropertyOnType("Unversioned directory", var45);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    boolean var49 = var43.canPropertyBeDefined(var47, "BANG");
    com.google.javascript.rhino.jstype.JSType var50 = null;
    com.google.javascript.rhino.jstype.JSType[] var51 = new com.google.javascript.rhino.jstype.JSType[] { var50};
    com.google.javascript.rhino.Node var52 = var43.createParameters(var51);
    com.google.javascript.rhino.jstype.JSType var53 = var40.evaluate(var41, var43);
    com.google.javascript.rhino.jstype.JSType var54 = var53.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var55 = var54.dereference();
    boolean var56 = var54.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var57 = var2.createEnumType("STRING hi 0 [length: 2]\n", var12, var54);
    java.lang.String var58 = var57.getDisplayName();
    com.google.javascript.rhino.Node var59 = var57.getSource();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var61.unregisterPropertyOnType("Unversioned directory", var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.jscomp.JSModule var67 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var68 = var67.getDependencies();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.block(var68);
    com.google.javascript.rhino.jstype.FunctionType var70 = var61.createFunctionTypeWithVarArgs(var65, var68);
    boolean var71 = var70.hasAnyTemplateInternal();
    java.lang.Iterable var72 = var70.getAllExtendedInterfaces();
    boolean var73 = var57.isSubtype((com.google.javascript.rhino.jstype.JSType)var70);
    java.lang.String var74 = var57.getDisplayName();
    com.google.javascript.rhino.Node var75 = var57.getSource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var76 = com.google.javascript.rhino.ScriptRuntime.getMessage1("{proxy:{1743833346}}", (java.lang.Object)var57);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var58.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test445"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.JSDocInfo var21 = var10.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test446"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
    com.google.javascript.rhino.Node var10 = var1.createParameters(var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    com.google.javascript.rhino.Node var20 = var15.getChildAtIndex(1);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.JSDocInfo var27 = var24.getJSDocInfo();
    com.google.javascript.rhino.Node var28 = var15.copyInformationFrom(var24);
    java.lang.Object var30 = null;
    var15.putProp(0, var30);
    com.google.javascript.rhino.JSTypeExpression var33 = new com.google.javascript.rhino.JSTypeExpression(var15, "()");
    com.google.javascript.rhino.jstype.StaticScope var34 = null;
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    var36.unregisterPropertyOnType("Unversioned directory", var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    boolean var42 = var36.canPropertyBeDefined(var40, "BANG");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.Node var45 = var36.createParameters(var44);
    com.google.javascript.rhino.jstype.JSType var46 = var33.evaluate(var34, var36);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var49 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var48);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
    java.lang.Object var68 = null;
    var53.putProp(0, var68);
    com.google.javascript.rhino.JSTypeExpression var71 = new com.google.javascript.rhino.JSTypeExpression(var53, "()");
    com.google.javascript.rhino.jstype.StaticScope var72 = null;
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    boolean var80 = var74.canPropertyBeDefined(var78, "BANG");
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.Node var83 = var74.createParameters(var82);
    com.google.javascript.rhino.jstype.JSType var84 = var71.evaluate(var72, var74);
    boolean var85 = var49.addVarArgs(var84);
    com.google.javascript.rhino.jstype.JSType var86 = var46.getLeastSupertype(var84);
    boolean var87 = var86.isNullType();
    boolean var88 = var1.declareType("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n", var86);
    boolean var89 = var86.isNoType();
    boolean var90 = var86.isAllType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test447() {}
//   public void test447() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test447"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var3 = var1.getBooleanProp((-1));
//     var1.setSourceEncodedPosition(10);
//     java.lang.Appendable var6 = null;
//     var1.appendStringTree(var6);
// 
//   }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test448"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node((-1), (-1), 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var4 = var3.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test449"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    java.lang.String var79 = var73.getDisplayName();
    boolean var80 = var73.matchesStringContext();
    java.lang.Iterable var81 = var73.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.EnumElementType var82 = var73.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.ObjectType var83 = var73.getImplicitPrototype();
    com.google.javascript.rhino.jstype.JSType var85 = var83.getRestrictedTypeGivenToBooleanOutcome(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test450"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.jscomp.deps.SortedDependencies var42 = new com.google.javascript.jscomp.deps.SortedDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var45 = var44.recordExpose();
    boolean var47 = var44.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.InputId var54 = com.google.javascript.jscomp.NodeUtil.getInputId(var51);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var51.setJSType(var55);
    com.google.javascript.rhino.JSDocInfo var57 = var44.build(var51);
    java.lang.String var58 = var57.getFileOverview();
    java.util.Set var59 = var57.getModifies();
    java.util.List var60 = var57.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var61 = var57.getType();
    java.util.List var62 = var57.getImplementedInterfaces();
    java.util.List var63 = var42.getSortedDependenciesOf(var62);
    java.util.List var64 = var42.getInputsWithoutProvides();
    java.util.List var65 = var42.getInputsWithoutProvides();
    com.google.javascript.jscomp.deps.DependencyInfo var67 = var42.maybeGetInputProviding("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test451() {}
//   public void test451() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test451"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var7 = var5.getBooleanProp((-1));
//     var5.setSourceEncodedPosition(10);
//     com.google.javascript.rhino.JSTypeExpression var11 = new com.google.javascript.rhino.JSTypeExpression(var5, "goog.abstractMethod");
//     boolean var12 = var0.isPrototypeAlias(var5);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "");
//     com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = var18.getNext();
//     com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
//     boolean var21 = var18.wasEmptyNode();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = var25.getNext();
//     com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
//     com.google.javascript.rhino.Node var28 = var25.removeFirstChild();
//     var28.putIntProp(0, 100);
//     boolean var32 = var28.isTrue();
//     int var33 = var18.getIndexOfChild(var28);
//     com.google.javascript.jscomp.CodingConvention.Bind var35 = var0.describeFunctionBind(var18, true);
//     com.google.javascript.rhino.Node var36 = null;
//     com.google.javascript.jscomp.CodingConvention.Bind var38 = var0.describeFunctionBind(var36, false);
// 
//   }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test452"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setCheckControlStructures(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test453"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.util.List var54 = var53.getThrownTypes();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isOr();
    var53.setAssociatedNode(var58);
    boolean var63 = var53.isNoSideEffects();
    java.util.List var64 = var53.getThrownTypes();
    var36.setPropertyJSDocInfo("ERROR", var53);
    java.lang.String var66 = var53.getLendsName();
    boolean var67 = var53.hasReturnType();
    java.lang.String var68 = var53.getReturnDescription();
    java.lang.String var69 = var53.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "JSDocInfo"+ "'", var69.equals("JSDocInfo"));

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test454"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    int var8 = var3.getIndexOfChild(var7);
    boolean var9 = var7.isBlock();
    boolean var10 = var7.isNull();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test455"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var8 = var3.getNext();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var12 = var10.getBooleanProp((-1));
    var10.setSourceEncodedPosition(10);
    boolean var15 = var10.isContinue();
    boolean var16 = var10.isComma();
    com.google.javascript.rhino.Node var17 = var3.useSourceInfoFrom(var10);
    java.lang.String var18 = var3.getSourceFileName();
    boolean var19 = var3.hasMoreThanOneChild();
    com.google.javascript.jscomp.ClosureCodingConvention var20 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var21 = null;
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    boolean var28 = var25.isOr();
    java.lang.String var29 = var20.extractClassNameIfRequire(var21, var25);
    boolean var30 = var25.isScript();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.ifNode(var3, var25);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test456() {}
//   public void test456() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test456"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     com.google.javascript.jscomp.SourceAst var22 = null;
//     com.google.javascript.rhino.InputId var23 = null;
//     com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var22, var23, true);
//     com.google.javascript.jscomp.SourceAst var26 = var25.getAst();
//     com.google.javascript.jscomp.JSModule var27 = null;
//     var25.setModule(var27);
//     var1.add(var25);
//     boolean var31 = var1.removeByName("");
// 
//   }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test457"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    com.google.javascript.rhino.jstype.JSType var38 = var36.findPropertyType("function (): {1263056885}");
    com.google.javascript.rhino.jstype.FunctionType var39 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test458"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setDevirtualizePrototypeMethods(true);
    var0.resetWarningsGuard();
    var0.setProcessObjectPropertyString(true);
    var0.setGroupVariableDeclarations(false);
    java.util.Map var23 = var0.getDefineReplacements();
    var0.setDeadAssignmentElimination(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test459"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    java.util.Collection var17 = var14.getReferences();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test460() {}
//   public void test460() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test460"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var4 = var3.getNext();
//     com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
//     com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     var3.setJSType(var7);
//     boolean var9 = var3.isBlock();
//     com.google.javascript.rhino.Node var10 = var3.getNext();
//     boolean var11 = var3.isFromExterns();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     var15.setJSType(var19);
//     boolean var21 = var15.isBlock();
//     com.google.javascript.rhino.Node var22 = var15.getParent();
//     boolean var23 = var15.isBreak();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = var25.getNext();
//     com.google.javascript.rhino.InputId var27 = var25.getInputId();
//     boolean var28 = var25.isGetProp();
//     com.google.javascript.rhino.Node var29 = var15.clonePropsFrom(var25);
//     var29.setLineno(100);
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.Node.newNumber(0.0d);
//     var29.addChildToBack(var33);
//     com.google.javascript.rhino.Node var35 = var3.clonePropsFrom(var29);
//     com.google.javascript.rhino.Node.SideEffectFlags var36 = null;
//     var29.setSideEffectFlags(var36);
// 
//   }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test461"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.String var28 = var10.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var29 = var10.getJSDocInfo();
    com.google.javascript.rhino.jstype.ObjectType var30 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var10);
    com.google.javascript.jscomp.ClosureCodingConvention var31 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var33 = var31.isConstantKey("2014/12/24 11:10");
    java.util.Collection var34 = var31.getAssertionFunctions();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var38 = var36.getBooleanProp((-1));
    var36.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var42 = new com.google.javascript.rhino.JSTypeExpression(var36, "goog.abstractMethod");
    boolean var43 = var31.isPrototypeAlias(var36);
    var10.setSource(var36);
    boolean var45 = var36.isQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test462"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isNE();
    boolean var4 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    var1.removeProp(0);
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    int var10 = var8.getSourceOffset();
    var1.addChildToBack(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test463() {}
//   public void test463() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test463"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var2 = new com.google.javascript.rhino.Node(10, var1);
// 
//   }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test464"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setMarkNoSideEffectCalls(false);
    var0.setRewriteFunctionExpressions(true);
    var0.setSpecializeInitialModule(true);
    var0.setRenamePrefix("{proxy:{165630172}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test465"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setAmbiguateProperties(true);
    boolean var22 = var0.isExternExportsEnabled();
    boolean var23 = var0.isRemoveUnusedClassProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test466() {}
//   public void test466() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test466"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.rhino.InputId var9 = var6.getInputId();
//     java.util.Collection var10 = var6.getRequires();
// 
//   }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test467"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.lang.String var3 = var0.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.global"+ "'", var3.equals("goog.global"));

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test468"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    boolean var7 = var3.isSwitch();
    boolean var8 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    boolean var9 = var3.isFalse();
    boolean var10 = var3.isFor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test469"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    boolean var2 = var1.hasVarArgs();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var4);
    var4.forwardDeclareType("");
    boolean var8 = var4.shouldTolerateUndefinedValues();
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isOr();
    java.lang.String var18 = var9.extractClassNameIfRequire(var10, var14);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var31.unregisterPropertyOnType("Unversioned directory", var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getDependencies();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.block(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var31.createFunctionTypeWithVarArgs(var35, var38);
    boolean var41 = var40.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.lang.Iterable var44 = var42.getDirectedGraphNodes();
    java.util.List var45 = var42.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var46 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var47 = null;
    var46.setStripTypes(var47);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var49 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var50 = var49.getDirectedGraphNodes();
    java.util.List var51 = var49.getEdges();
    var46.setManageClosureDependencies(var51);
    boolean var53 = var46.isExternExportsEnabled();
    var46.setCheckCaja(false);
    java.util.Set var56 = null;
    var46.setReplaceStringsReservedStrings(var56);
    var46.setAliasAllStrings(true);
    var46.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var62 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var63 = null;
    var62.setStripTypes(var63);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var65 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var66 = var65.getDirectedGraphNodes();
    java.util.List var67 = var65.getEdges();
    var62.setManageClosureDependencies(var67);
    boolean var69 = var62.isExternExportsEnabled();
    var62.setCheckCaja(false);
    var62.setGroupVariableDeclarations(true);
    java.util.Map var74 = var62.getDefineReplacements();
    var46.setPropertyInvalidationErrors(var74);
    var9.defineDelegateProxyPrototypeProperties(var20, (com.google.javascript.rhino.jstype.StaticScope)var40, var45, var74);
    boolean var77 = var40.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var79 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var40, "BANG");
    com.google.javascript.rhino.jstype.FunctionType var80 = var40.toMaybeFunctionType();
    var80.clearCachedValues();
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var80};
    com.google.javascript.rhino.Node var83 = var4.createParametersWithVarArgs(var82);
    boolean var84 = var1.addRequiredParams(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test470"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    var2.unregisterPropertyOnType("Unversioned directory", var4);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.jscomp.JSModule var8 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var9 = var8.getDependencies();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.block(var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var2.createFunctionTypeWithVarArgs(var6, var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isVarArgs();
    com.google.javascript.rhino.Node var20 = var15.getChildAtIndex(1);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    com.google.javascript.rhino.JSDocInfo var27 = var24.getJSDocInfo();
    com.google.javascript.rhino.Node var28 = var15.copyInformationFrom(var24);
    java.lang.Object var30 = null;
    var15.putProp(0, var30);
    com.google.javascript.rhino.JSTypeExpression var33 = new com.google.javascript.rhino.JSTypeExpression(var15, "()");
    com.google.javascript.rhino.jstype.StaticScope var34 = null;
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    var36.unregisterPropertyOnType("Unversioned directory", var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    boolean var42 = var36.canPropertyBeDefined(var40, "BANG");
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
    com.google.javascript.rhino.Node var45 = var36.createParameters(var44);
    com.google.javascript.rhino.jstype.JSType var46 = var33.evaluate(var34, var36);
    com.google.javascript.rhino.jstype.JSType var47 = var46.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var48 = var47.dereference();
    boolean var49 = var48.isUnknownType();
    boolean var50 = var11.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var51 = com.google.javascript.rhino.ScriptRuntime.getMessage1("goog.exportSymbol", (java.lang.Object)var11);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test471() {}
//   public void test471() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test471"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = var17.getNext();
//     com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
//     boolean var20 = var17.isVarArgs();
//     com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
//     com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
//     com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
//     java.lang.Object var32 = null;
//     var17.putProp(0, var32);
//     com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
//     com.google.javascript.rhino.jstype.StaticScope var36 = null;
//     com.google.javascript.rhino.ErrorReporter var37 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     var38.unregisterPropertyOnType("Unversioned directory", var40);
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
//     com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
//     com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
//     boolean var49 = var13.addVarArgs(var48);
//     boolean var50 = var48.isEnumElementType();
//     com.google.javascript.rhino.ErrorReporter var51 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     var52.unregisterPropertyOnType("Unversioned directory", var54);
//     com.google.javascript.rhino.jstype.JSType var56 = null;
//     boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
//     com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
//     com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
//     com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
//     boolean var65 = var64.isStringObjectType();
//     com.google.common.base.Predicate var66 = null;
//     boolean var67 = var64.setValidator(var66);
// 
//   }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test472"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.setQuotedString();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.NodeUtil.newExpr(var6);
    boolean var9 = var6.isFalse();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.regexp(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test473"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setAliasAllStrings(true);
    var0.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var17 = null;
    var16.setStripTypes(var17);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var19 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var20 = var19.getDirectedGraphNodes();
    java.util.List var21 = var19.getEdges();
    var16.setManageClosureDependencies(var21);
    boolean var23 = var16.isExternExportsEnabled();
    var16.setCheckCaja(false);
    var16.setGroupVariableDeclarations(true);
    java.util.Map var28 = var16.getDefineReplacements();
    var0.setPropertyInvalidationErrors(var28);
    var0.setIdeMode(true);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var32 = var0.getAliasTransformationHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test474() {}
//   public void test474() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test474"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var2 = var1.recordExpose();
//     boolean var3 = var1.recordExterns();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = var7.getNext();
//     com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
//     boolean var10 = var7.isVarArgs();
//     boolean var11 = var7.isArrayLit();
//     com.google.javascript.rhino.Node var12 = var7.getNext();
//     var1.markTypeNode(var7, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     boolean var25 = var22.isVarArgs();
//     com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = var31.getNext();
//     com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
//     com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
//     com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
//     java.lang.Object var37 = null;
//     var22.putProp(0, var37);
//     com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
//     com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
//     boolean var42 = var1.recordBaseType(var40);
//     com.google.javascript.jscomp.MessageFormatter var43 = null;
//     java.util.logging.Logger var44 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
//     com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     com.google.javascript.jscomp.Region var50 = var46.getSourceRegion("", 0);
//     com.google.javascript.jscomp.CompilerInput var52 = var46.newExternInput("hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n");
// 
//   }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test475"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
    boolean var2 = var1.hasVarArgs();
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    com.google.javascript.rhino.JSDocInfo var9 = var6.getJSDocInfo();
    boolean var10 = var6.isWhile();
    boolean var11 = var6.isOnlyModifiesThisCall();
    boolean var12 = var6.isParamList();
    com.google.javascript.rhino.Node var13 = var1.newOptionalParameterFromNode(var6);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    var15.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    boolean var28 = var25.isVarArgs();
    boolean var29 = var25.isFor();
    boolean var30 = var25.isNumber();
    com.google.javascript.rhino.Node var31 = var25.getNext();
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    boolean var38 = var35.isVarArgs();
    com.google.javascript.rhino.Node var40 = var35.getChildAtIndex(1);
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    com.google.javascript.rhino.JSDocInfo var47 = var44.getJSDocInfo();
    com.google.javascript.rhino.Node var48 = var35.copyInformationFrom(var44);
    java.lang.Object var50 = null;
    var35.putProp(0, var50);
    com.google.javascript.rhino.JSTypeExpression var53 = new com.google.javascript.rhino.JSTypeExpression(var35, "()");
    com.google.javascript.rhino.jstype.StaticScope var54 = null;
    com.google.javascript.rhino.ErrorReporter var55 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
    com.google.javascript.rhino.jstype.JSType var58 = null;
    var56.unregisterPropertyOnType("Unversioned directory", var58);
    com.google.javascript.rhino.jstype.JSType var60 = null;
    boolean var62 = var56.canPropertyBeDefined(var60, "BANG");
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.jstype.JSType[] var64 = new com.google.javascript.rhino.jstype.JSType[] { var63};
    com.google.javascript.rhino.Node var65 = var56.createParameters(var64);
    com.google.javascript.rhino.jstype.JSType var66 = var53.evaluate(var54, var56);
    com.google.javascript.rhino.jstype.JSType var67 = var66.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var68 = var67.dereference();
    boolean var69 = var67.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var70 = var15.createEnumType("STRING hi 0 [length: 2]\n", var25, var67);
    boolean var71 = var70.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var72 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var72);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    var73.unregisterPropertyOnType("Unversioned directory", var75);
    com.google.javascript.rhino.jstype.JSType var77 = null;
    com.google.javascript.jscomp.JSModule var79 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var80 = var79.getDependencies();
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.block(var80);
    com.google.javascript.rhino.jstype.FunctionType var82 = var73.createFunctionTypeWithVarArgs(var77, var80);
    boolean var83 = var82.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var84 = var70.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var82);
    boolean var85 = var82.isNoType();
    com.google.javascript.rhino.jstype.JSType[] var86 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    boolean var87 = var1.addRequiredParams(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test476"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var16 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var16);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var18 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var17);
    var17.forwardDeclareType("");
    com.google.javascript.jscomp.JSModule var22 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var23 = var22.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var24 = new com.google.javascript.jscomp.ComposeWarningsGuard(var23);
    com.google.javascript.jscomp.JSModule[] var25 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var23);
    var17.setTemplateTypeNames(var23);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    boolean var84 = var83.matchesStringContext();
    com.google.javascript.rhino.jstype.JSType var85 = var17.createNullableType((com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.JSType var86 = var10.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType)var83);
    var86.clearResolved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test477"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setAliasStringsBlacklist("function (): {1509650176}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test478"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    boolean var16 = var6.hasScope();
    int var17 = var6.getLineNumber();
    com.google.javascript.rhino.Node var18 = var6.getCurrentNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test479"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setTightenTypes(false);
    var0.setTweakToDoubleLiteral("2014/12/24 11:10", 10.0d);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    var15.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var15.setColorizeErrorOutput(true);
    var15.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var30 = null;
    var29.setStripTypes(var30);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var32 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var33 = var32.getDirectedGraphNodes();
    java.util.List var34 = var32.getEdges();
    var29.setManageClosureDependencies(var34);
    var29.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var40 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var41 = var40.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var42 = new com.google.javascript.jscomp.ComposeWarningsGuard(var41);
    com.google.javascript.jscomp.JSError var43 = null;
    com.google.javascript.jscomp.CheckLevel var44 = var42.level(var43);
    var29.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var42);
    var15.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var42);
    var15.setTweakToNumberLiteral("", (-1));
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    byte[] var54 = new byte[] { (byte)100};
    var50.setInputPropertyMapSerialized(var54);
    var50.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var58 = var50.getTracerMode();
    var15.setTracerMode(var58);
    var0.setTracerMode(var58);
    java.lang.String var61 = var58.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "OFF"+ "'", var61.equals("OFF"));

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test480"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setCheckMissingGetCssNameBlacklist("Unversioned directory");
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var21 = null;
    var20.setBrokenClosureRequiresLevel(var21);
    var20.setLocale("");
    var20.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    boolean var34 = var27.isExternExportsEnabled();
    var27.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var41 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var42 = com.google.javascript.jscomp.JSError.make(var39, var41);
    int var43 = var42.getCharno();
    com.google.javascript.jscomp.CheckLevel var44 = var42.getDefaultLevel();
    var27.setReportUnknownTypes(var44);
    var20.setBrokenClosureRequiresLevel(var44);
    var0.setCheckMissingGetCssNameLevel(var44);
    com.google.javascript.jscomp.JSModule var50 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var51 = var50.getProvides();
    java.util.List var52 = var50.getRequires();
    com.google.javascript.jscomp.SourceAst var53 = null;
    com.google.javascript.rhino.InputId var54 = null;
    com.google.javascript.jscomp.CompilerInput var56 = new com.google.javascript.jscomp.CompilerInput(var53, var54, true);
    com.google.javascript.jscomp.JSModule var57 = var56.getModule();
    var50.addFirst(var56);
    java.util.List var59 = var50.getProvides();
    var0.setReplaceStringsConfiguration("InputId: ", var59);
    var0.setLocale("RETURN");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test481"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    var0.setMoveFunctionDeclarations(false);
    com.google.javascript.jscomp.PropertyRenamingPolicy var17 = null;
    var0.setPropertyRenaming(var17);
    var0.setClosurePass(false);
    var0.setLineBreak(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test482() {}
//   public void test482() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test482"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
//     com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var2 = null;
//     var1.setStripTypes(var2);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var5 = var4.getDirectedGraphNodes();
//     java.util.List var6 = var4.getEdges();
//     var1.setManageClosureDependencies(var6);
//     var1.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var13 = var12.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var14 = new com.google.javascript.jscomp.ComposeWarningsGuard(var13);
//     com.google.javascript.jscomp.JSError var15 = null;
//     com.google.javascript.jscomp.CheckLevel var16 = var14.level(var15);
//     var1.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var14);
//     com.google.javascript.jscomp.graph.GraphNode var18 = var0.getNode((java.lang.Object)var14);
//     var0.clearNodeAnnotations();
//     var0.popNodeAnnotations();
// 
//   }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test483"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    var2.setAliasKeywords(false);
    com.google.javascript.jscomp.DefaultPassConfig var7 = new com.google.javascript.jscomp.DefaultPassConfig(var2);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var7);
    com.google.javascript.jscomp.MessageFormatter var9 = null;
    java.util.logging.Logger var10 = null;
    com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
    com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var16 = new com.google.javascript.jscomp.ComposeWarningsGuard(var15);
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var20 = new com.google.javascript.jscomp.ComposeWarningsGuard(var19);
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var22 = null;
    var21.setStripTypes(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var25 = var24.getDirectedGraphNodes();
    java.util.List var26 = var24.getEdges();
    var21.setManageClosureDependencies(var26);
    boolean var28 = var21.isExternExportsEnabled();
    var21.setCollapsePropertiesOnExternTypes(false);
    var12.<com.google.javascript.jscomp.SourceFile>initModules(var15, var19, var21);
    com.google.javascript.jscomp.NodeTraversal.Callback var32 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var19, var32);
    com.google.javascript.jscomp.NodeTraversal.Callback var34 = null;
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(10);
    com.google.javascript.rhino.Node[] var37 = new com.google.javascript.rhino.Node[] { var36};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, var34, var37);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test484() {}
//   public void test484() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test484"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var9 = var3.getModule();
//     java.util.Collection var10 = var3.getRequires();
// 
//   }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test485"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getImplementedInterfaces();
    java.util.Collection var16 = var14.getTypeNodes();
    boolean var17 = var14.containsDeclaration();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getTypedefType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test486"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setShadowVariables(false);
    var0.setDefineToNumberLiteral("null(null)", 10);
    var0.setComputeFunctionSideEffects(false);
    var0.setAliasStringsBlacklist("function (): {944163309}");
    com.google.javascript.jscomp.parsing.Config.LanguageMode var21 = null;
    com.google.javascript.rhino.JSDocInfoBuilder var24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var25 = var24.recordExpose();
    boolean var27 = var24.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    com.google.javascript.rhino.InputId var34 = com.google.javascript.jscomp.NodeUtil.getInputId(var31);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var31.setJSType(var35);
    com.google.javascript.rhino.JSDocInfo var37 = var24.build(var31);
    java.lang.String var38 = var37.getFileOverview();
    java.util.Set var39 = var37.getModifies();
    com.google.javascript.jscomp.parsing.Config var40 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var21, false, var39);
    var0.setIdGenerators(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test487"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var12 = null;
    var11.setBrokenClosureRequiresLevel(var12);
    var11.setLocale("");
    var11.setLineBreak(false);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    boolean var25 = var18.isExternExportsEnabled();
    var18.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var32 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make(var30, var32);
    int var34 = var33.getCharno();
    com.google.javascript.jscomp.CheckLevel var35 = var33.getDefaultLevel();
    var18.setReportUnknownTypes(var35);
    var11.setBrokenClosureRequiresLevel(var35);
    var0.setCheckUnreachableCode(var35);
    java.util.Map var39 = var0.getTweakReplacements();
    var0.setTweakToBooleanLiteral("function (): {1292906510}", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test488"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    var0.setPropertyAffinity(false);
    var0.setRemoveDeadCode(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test489"); }


    com.google.javascript.rhino.jstype.JSType var1 = null;
    com.google.javascript.rhino.jstype.SimpleSlot var3 = new com.google.javascript.rhino.jstype.SimpleSlot("", var1, false);
    com.google.javascript.rhino.jstype.JSType var4 = var3.getType();
    boolean var5 = var3.isTypeInferred();
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    java.lang.String var7 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test490"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var5 = null;
    var0.setAliasTransformationHandler(var5);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.createFunctionTypeWithVarArgs(var12, var15);
    var0.setReplaceStringsFunctionDescriptions(var15);
    var0.setAliasableGlobals("(STRING hi 0 [length: 2]\n)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test491"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isOr();
    java.lang.String var11 = var2.extractClassNameIfRequire(var3, var7);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    boolean var34 = var33.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    java.util.List var38 = var35.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCheckCaja(false);
    java.util.Set var49 = null;
    var39.setReplaceStringsReservedStrings(var49);
    var39.setAliasAllStrings(true);
    var39.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var39.setPropertyInvalidationErrors(var67);
    var2.defineDelegateProxyPrototypeProperties(var13, (com.google.javascript.rhino.jstype.StaticScope)var33, var38, var67);
    boolean var70 = var33.canBeCalled();
    boolean var71 = var33.isRegexpType();
    boolean var72 = var1.equals((java.lang.Object)var33);
    boolean var74 = var33.hasOwnProperty("RETURN");
    com.google.javascript.rhino.jstype.JSType var76 = var33.findPropertyType("{proxy:{1743833346}}");
    com.google.javascript.rhino.jstype.BooleanLiteralSet var77 = var33.getPossibleToBooleanOutcomes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test492"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.enableExternExports(false);
    var0.setExtractPrototypeMemberDeclarations(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test493"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    int var5 = var3.getSourceOffset();
    com.google.javascript.rhino.Node var6 = var3.cloneNode();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    int var10 = var8.getSourceOffset();
    boolean var11 = var8.isAssignAdd();
    int var12 = var6.getIndexOfChild(var8);
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.InputId var16 = var14.getInputId();
    com.google.javascript.rhino.Node var17 = var6.useSourceInfoFrom(var14);
    int var18 = var6.getChildCount();
    com.google.javascript.rhino.Node[] var19 = new com.google.javascript.rhino.Node[] { var6};
    com.google.javascript.rhino.Node var20 = new com.google.javascript.rhino.Node((-1), var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var23 = new com.google.javascript.rhino.Node(0, var19, 3, (-19));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test494"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    boolean var38 = var18.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var39 = var18.collapseUnion();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test495"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    java.util.Collection var47 = var0.getAssertionFunctions();
    java.lang.String var48 = var0.getGlobalObject();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "");
    java.util.Collection var51 = var0.getAssertionFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "goog.global"+ "'", var48.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test496() {}
//   public void test496() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest3.test496"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var6 = var5.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     boolean var9 = var0.hasNode((java.lang.Object)var5);
//     double var10 = var5.getProgress();
//     com.google.javascript.jscomp.Scope var11 = var5.getTopScope();
//     com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var14 = var13.recordExpose();
//     boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = var20.getNext();
//     com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
//     com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var20.setJSType(var24);
//     com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
//     java.util.List var27 = var26.getImplementedInterfaces();
//     java.util.List var28 = null;
//     com.google.javascript.jscomp.CompilerOptions var29 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var30 = null;
//     var29.setStripTypes(var30);
//     var29.setAliasKeywords(false);
//     com.google.javascript.jscomp.DefaultPassConfig var34 = new com.google.javascript.jscomp.DefaultPassConfig(var29);
//     com.google.javascript.jscomp.Result var35 = var5.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var27, var28, var29);
// 
//   }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test497"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var8 = var1.recordMeaning("{proxy:{165630172}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test498"); }


    com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("InputId: ");
    com.google.javascript.jscomp.Region var3 = var1.getRegion(10);
    var1.setOriginalPath("(module$2014$12$24 11:10)");
    com.google.javascript.jscomp.parsing.Config.LanguageMode var8 = null;
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    com.google.javascript.jscomp.parsing.Config var27 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var8, false, var26);
    com.google.javascript.rhino.head.ErrorReporter var28 = null;
    java.util.logging.Logger var29 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.ParserRunner.parse((com.google.javascript.rhino.jstype.StaticSourceFile)var1, "BANG 0 [source_file: Unversioned directory]", var27, var28, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test499"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    com.google.javascript.rhino.Node var5 = var3.getAncestor(10);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isArrayLit();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var16 = var15.isGetterDef();
    var15.putIntProp((-1), 10);
    var9.addChildrenToFront(var15);
    int var21 = var15.getLength();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    com.google.javascript.rhino.Node var28 = var25.removeFirstChild();
    com.google.javascript.rhino.Node var29 = var15.useSourceInfoFromForTree(var25);
    boolean var30 = var15.isDebugger();
    com.google.javascript.rhino.Node var31 = var15.removeFirstChild();
    com.google.javascript.rhino.Node var32 = var3.srcrefTree(var15);
    boolean var33 = var15.isNoSideEffectsCall();
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var15, "function (): ?");
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var37 = var36.getDirectives();
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.NodeUtil.newExpr(var36);
    boolean var39 = var38.isNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.and(var15, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test500"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setCheckTypes(false);
    boolean var7 = var0.assumeClosuresOnlyCaptureReferences();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

}
