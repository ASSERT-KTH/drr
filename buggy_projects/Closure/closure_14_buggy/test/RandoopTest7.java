
import junit.framework.*;

public class RandoopTest7 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test1"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    boolean var48 = var1.recordNoShadow();
    boolean var49 = var1.recordExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test2"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("function (): {1852005172}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test3"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    boolean var70 = var31.isConstructor();
    com.google.javascript.rhino.JSDocInfoBuilder var72 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var73 = var72.recordExpose();
    boolean var75 = var72.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    com.google.javascript.rhino.InputId var82 = com.google.javascript.jscomp.NodeUtil.getInputId(var79);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    var79.setJSType(var83);
    com.google.javascript.rhino.JSDocInfo var85 = var72.build(var79);
    java.lang.String var86 = var85.getFileOverview();
    java.util.Set var87 = var85.getModifies();
    java.util.List var88 = var85.getImplementedInterfaces();
    var31.setImplementedInterfaces(var88);
    com.google.javascript.jscomp.ComposeWarningsGuard var90 = new com.google.javascript.jscomp.ComposeWarningsGuard(var88);
    com.google.javascript.jscomp.deps.SortedDependencies var91 = new com.google.javascript.jscomp.deps.SortedDependencies(var88);
    java.util.List var92 = var91.getSortedList();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.paramList(var92);
    com.google.javascript.jscomp.ComposeWarningsGuard var94 = new com.google.javascript.jscomp.ComposeWarningsGuard(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test4"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
    var1.sortInputsByDeps(var26);
    java.util.List var31 = var1.getDependencies();
    com.google.javascript.jscomp.SourceFile var35 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    int var37 = var35.getColumnOfOffset(10);
    var1.addFirst(var35);
    com.google.javascript.jscomp.JSModule var40 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var41 = var40.getDependencies();
    com.google.javascript.jscomp.SourceAst var42 = null;
    com.google.javascript.rhino.InputId var43 = null;
    com.google.javascript.jscomp.CompilerInput var45 = new com.google.javascript.jscomp.CompilerInput(var42, var43, true);
    com.google.javascript.jscomp.JSModule var46 = var45.getModule();
    var40.add(var45);
    com.google.javascript.jscomp.SourceFile var49 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var40.addFirst(var49);
    com.google.javascript.jscomp.Region var52 = var49.getRegion(100);
    var1.addFirst(var49);
    java.lang.String var54 = var49.getName();
    int var56 = var49.getColumnOfOffset(2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "()"+ "'", var54.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2147483647);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test5"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    com.google.javascript.rhino.Node var16 = var6.getEnclosingFunction();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.paramList(var19);
    var6.traverseRoots(var19);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    boolean var30 = var26.isSwitch();
    boolean var31 = var26.isIf();
    com.google.javascript.rhino.Node[] var32 = new com.google.javascript.rhino.Node[] { var26};
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(0, var32, 3, 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.traverseRoots(var32);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test6"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    var0.reportCodeChange();
    com.google.javascript.rhino.Node var2 = var0.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test7"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.util.List var20 = var19.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    var21.clearNodeAnnotations();
    java.util.List var24 = var21.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    var25.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var25.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var37 = null;
    var25.setSourceMapDetailLevel(var37);
    com.google.javascript.jscomp.CodingConvention var39 = var25.getCodingConvention();
    var25.setMarkNoSideEffectCalls(false);
    var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var20, var24, var25);
    com.google.javascript.rhino.JSDocInfoBuilder var45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var46 = var45.recordExpose();
    boolean var47 = var45.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var49 = null;
    boolean var50 = var45.recordParameter("Unversioned directory", var49);
    com.google.javascript.rhino.JSTypeExpression var51 = null;
    boolean var53 = var45.recordThrowDescription(var51, "");
    com.google.javascript.jscomp.SourceFile var58 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var45.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var58, 0, 0);
    java.io.Reader var62 = var58.getCodeReader();
    com.google.javascript.jscomp.SourceFile var63 = com.google.javascript.jscomp.SourceFile.fromReader("{proxy:{599688852}}", var62);
    com.google.javascript.rhino.Node var64 = var3.parse(var63);
    com.google.javascript.jscomp.CheckLevel var66 = null;
    com.google.javascript.jscomp.DiagnosticType var68 = com.google.javascript.jscomp.DiagnosticType.make("goog.abstractMethod", var66, "null(null)");
    com.google.javascript.jscomp.DiagnosticGroup var69 = com.google.javascript.jscomp.DiagnosticGroup.forType(var68);
    com.google.javascript.jscomp.DiagnosticType var72 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var74 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var75 = com.google.javascript.jscomp.JSError.make(var72, var74);
    int var76 = var75.getCharno();
    boolean var77 = var69.matches(var75);
    com.google.javascript.jscomp.DiagnosticType var80 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var82 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var83 = com.google.javascript.jscomp.JSError.make(var80, var82);
    com.google.javascript.jscomp.DiagnosticType var84 = var83.getType();
    int var85 = var83.getNodeLength();
    com.google.javascript.jscomp.CheckLevel var86 = var83.getDefaultLevel();
    int var87 = var83.getCharno();
    boolean var88 = var69.matches(var83);
    com.google.javascript.jscomp.CheckLevel var89 = var3.getErrorLevel(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test8"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setLooseTypes(false);
    var0.setGenerateExports(false);
    var0.setCheckMissingGetCssNameBlacklist("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test9"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isOr();
    boolean var7 = var3.isExprResult();
    com.google.javascript.rhino.Node var8 = var3.cloneTree();
    boolean var9 = var3.isLabel();
    com.google.javascript.rhino.JSDocInfo var10 = var3.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test10"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    com.google.javascript.jscomp.SourceAst var3 = null;
    com.google.javascript.rhino.InputId var4 = null;
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
    com.google.javascript.jscomp.JSModule var7 = var6.getModule();
    var1.add(var6);
    com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var1.addFirst(var10);
    java.util.Set var12 = var1.getAllDependencies();
    var1.removeAll();
    com.google.javascript.jscomp.SourceAst var14 = null;
    com.google.javascript.rhino.InputId var15 = null;
    com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var1.addFirst(var20);
    boolean var22 = var20.isExtern();
    com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
    java.lang.String var24 = var20.toString();
    boolean var25 = var20.isExtern();
    java.lang.String var26 = var20.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var24.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var26.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test11"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var8 = var1.recordNoSideEffects();
    boolean var9 = var1.recordConstancy();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    com.google.javascript.rhino.JSDocInfoBuilder var26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var27 = var26.recordExpose();
    boolean var28 = var26.recordExterns();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    boolean var36 = var32.isArrayLit();
    com.google.javascript.rhino.Node var37 = var32.getNext();
    var26.markTypeNode(var32, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var50 = var47.isVarArgs();
    com.google.javascript.rhino.Node var52 = var47.getChildAtIndex(1);
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = var56.getNext();
    com.google.javascript.rhino.Node var58 = var54.srcrefTree(var56);
    com.google.javascript.rhino.JSDocInfo var59 = var56.getJSDocInfo();
    com.google.javascript.rhino.Node var60 = var47.copyInformationFrom(var56);
    java.lang.Object var62 = null;
    var47.putProp(0, var62);
    com.google.javascript.rhino.JSTypeExpression var65 = new com.google.javascript.rhino.JSTypeExpression(var47, "()");
    com.google.javascript.rhino.JSTypeExpression var66 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var65);
    boolean var67 = var26.recordBaseType(var65);
    boolean var68 = var11.recordTypedef(var65);
    boolean var69 = var65.isVarArgs();
    boolean var70 = var1.recordThrowType(var65);
    boolean var72 = var1.recordReturnDescription("function (): {944163309}");
    boolean var73 = var1.recordDeprecated();
    boolean var75 = var1.recordMeaning("ECMASCRIPT3");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test12"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    var2.unregisterPropertyOnType("Unversioned directory", var4);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.jscomp.JSModule var8 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var9 = var8.getDependencies();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.block(var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var2.createFunctionTypeWithVarArgs(var6, var9);
    boolean var12 = var11.hasAnyTemplateInternal();
    java.lang.Iterable var13 = var11.getAllExtendedInterfaces();
    com.google.javascript.rhino.jstype.SimpleSlot var15 = new com.google.javascript.rhino.jstype.SimpleSlot("BANG 0", (com.google.javascript.rhino.jstype.JSType)var11, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test13"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    boolean var48 = var1.recordInterface();
    var1.recordOriginalCommentString("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var51 = var1.recordImplicitCast();
    boolean var52 = var1.isDescriptionRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test14"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("STRING hi 0 [length: 2]\n: RETURN");

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test15"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.util.List var54 = var53.getThrownTypes();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isOr();
    var53.setAssociatedNode(var58);
    boolean var63 = var53.isNoSideEffects();
    java.util.List var64 = var53.getThrownTypes();
    var36.setPropertyJSDocInfo("ERROR", var53);
    java.util.Collection var66 = var53.getTypeNodes();
    com.google.common.collect.ImmutableList var67 = var53.getTemplateTypeNames();
    boolean var68 = var53.isNoShadow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test16"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var69.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.jscomp.JSModule var80 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var81 = var80.getDependencies();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.block(var81);
    com.google.javascript.rhino.jstype.FunctionType var83 = var74.createFunctionTypeWithVarArgs(var78, var81);
    boolean var85 = var83.removeProperty("null(null)");
    var69.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var83);
    boolean var87 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    boolean var88 = var69.isRegexpType();
    int var89 = var69.getExtendedInterfacesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test17"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.ErrorFormat var7 = null;
    var0.setErrorFormat(var7);
    var0.setRenamePrefix("hi");
    var0.setAcceptConstKeyword(true);
    boolean var13 = var0.isRemoveUnusedClassProperties();
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getProvides();
    com.google.javascript.jscomp.CompilerInput var18 = var15.getByName("()");
    com.google.javascript.jscomp.SourceAst var19 = null;
    com.google.javascript.rhino.InputId var20 = null;
    com.google.javascript.jscomp.CompilerInput var22 = new com.google.javascript.jscomp.CompilerInput(var19, var20, true);
    com.google.javascript.jscomp.SourceAst var23 = var22.getAst();
    var15.add(var22);
    java.util.List var25 = var15.getDependencies();
    var0.setReplaceStringsFunctionDescriptions(var25);
    boolean var27 = var0.shouldColorizeErrorOutput();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test18"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    var0.setGenerateExports(false);
    var0.setRuntimeTypeCheckLogFunction("function (): {1263056885}");
    var0.setLooseTypes(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test19"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test20"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.Scope var7 = var6.getScope();
//     int var8 = var6.getLineNumber();
//     com.google.javascript.rhino.Node var9 = var6.getScopeRoot();
// 
//   }

  public void test21() {}
//   public void test21() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test21"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.JSType[] var9 = new com.google.javascript.rhino.jstype.JSType[] { var8};
//     com.google.javascript.rhino.Node var10 = var1.createParameters(var9);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var16 = var15.getNext();
//     com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
//     boolean var18 = var15.isVarArgs();
//     com.google.javascript.rhino.Node var20 = var15.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var25 = var24.getNext();
//     com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
//     com.google.javascript.rhino.JSDocInfo var27 = var24.getJSDocInfo();
//     com.google.javascript.rhino.Node var28 = var15.copyInformationFrom(var24);
//     java.lang.Object var30 = null;
//     var15.putProp(0, var30);
//     com.google.javascript.rhino.JSTypeExpression var33 = new com.google.javascript.rhino.JSTypeExpression(var15, "()");
//     com.google.javascript.rhino.jstype.StaticScope var34 = null;
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     com.google.javascript.rhino.jstype.JSType var38 = null;
//     var36.unregisterPropertyOnType("Unversioned directory", var38);
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     boolean var42 = var36.canPropertyBeDefined(var40, "BANG");
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.jstype.JSType[] var44 = new com.google.javascript.rhino.jstype.JSType[] { var43};
//     com.google.javascript.rhino.Node var45 = var36.createParameters(var44);
//     com.google.javascript.rhino.jstype.JSType var46 = var33.evaluate(var34, var36);
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var49 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var48);
//     com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var54 = var53.getNext();
//     com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
//     boolean var56 = var53.isVarArgs();
//     com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var63 = var62.getNext();
//     com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
//     com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
//     com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
//     java.lang.Object var68 = null;
//     var53.putProp(0, var68);
//     com.google.javascript.rhino.JSTypeExpression var71 = new com.google.javascript.rhino.JSTypeExpression(var53, "()");
//     com.google.javascript.rhino.jstype.StaticScope var72 = null;
//     com.google.javascript.rhino.ErrorReporter var73 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
//     com.google.javascript.rhino.jstype.JSType var76 = null;
//     var74.unregisterPropertyOnType("Unversioned directory", var76);
//     com.google.javascript.rhino.jstype.JSType var78 = null;
//     boolean var80 = var74.canPropertyBeDefined(var78, "BANG");
//     com.google.javascript.rhino.jstype.JSType var81 = null;
//     com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
//     com.google.javascript.rhino.Node var83 = var74.createParameters(var82);
//     com.google.javascript.rhino.jstype.JSType var84 = var71.evaluate(var72, var74);
//     boolean var85 = var49.addVarArgs(var84);
//     com.google.javascript.rhino.jstype.JSType var86 = var46.getLeastSupertype(var84);
//     boolean var87 = var86.isNullType();
//     boolean var88 = var1.declareType("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n", var86);
//     boolean var89 = var1.shouldTolerateUndefinedValues();
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.jstype.JSTypeNative var91 = null;
//     com.google.javascript.rhino.jstype.ObjectType var92 = var1.getNativeObjectType(var91);
// 
//   }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test22"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    var0.pushEdgeAnnotations();
    var0.pushEdgeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test23"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var12.isString();
    com.google.javascript.rhino.Node var18 = var10.useSourceInfoFromForTree(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.exprResult(var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test24"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.hasAnyTemplate();
    boolean var72 = var31.hasDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test25"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    java.lang.Iterable var36 = var24.getTypesWithProperty("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    com.google.javascript.rhino.Node var45 = var40.getChildAtIndex(1);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.JSDocInfo var52 = var49.getJSDocInfo();
    com.google.javascript.rhino.Node var53 = var40.copyInformationFrom(var49);
    java.lang.Object var55 = null;
    var40.putProp(0, var55);
    com.google.javascript.rhino.JSTypeExpression var58 = new com.google.javascript.rhino.JSTypeExpression(var40, "()");
    com.google.javascript.rhino.jstype.StaticScope var59 = null;
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var61.unregisterPropertyOnType("Unversioned directory", var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    boolean var67 = var61.canPropertyBeDefined(var65, "BANG");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.Node var70 = var61.createParameters(var69);
    com.google.javascript.rhino.jstype.JSType var71 = var58.evaluate(var59, var61);
    com.google.javascript.rhino.jstype.JSType var72 = var71.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.JSType var73 = var24.createDefaultObjectUnion(var72);
    boolean var74 = var73.matchesNumberContext();
    boolean var75 = var73.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test26"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    var0.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDevirtualizePrototypeMethods(true);
    var14.setCollapsePropertiesOnExternTypes(false);
    var14.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    boolean var34 = var27.isExternExportsEnabled();
    var27.setCheckCaja(false);
    java.util.Set var37 = null;
    var27.setReplaceStringsReservedStrings(var37);
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.lang.String var54 = var53.getFileOverview();
    java.util.Set var55 = var53.getModifies();
    var27.setReplaceStringsReservedStrings(var55);
    var27.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var61 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var63 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var64 = com.google.javascript.jscomp.JSError.make(var61, var63);
    int var65 = var64.getCharno();
    com.google.javascript.jscomp.CheckLevel var66 = var64.getDefaultLevel();
    var27.setCheckGlobalThisLevel(var66);
    var14.setCheckMissingGetCssNameLevel(var66);
    var0.setReportMissingOverride(var66);
    var0.setAliasExternals(true);
    com.google.javascript.jscomp.VariableRenamingPolicy var72 = null;
    var0.setVariableRenaming(var72);
    java.util.Map var74 = var0.getDefineReplacements();
    var0.skipAllCompilerPasses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test27"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var3 = var1.recordConstructor();
    boolean var4 = var1.recordNoTypeCheck();
    boolean var5 = var1.recordNoTypeCheck();
    boolean var7 = var1.hasParameter("BANG");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test28"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.returnNode();
    var0.setSourceFileForTesting("null(null)");
    boolean var3 = var0.isDo();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node.AncestorIterable var11 = var10.getAncestors();
    var0.addChildrenToFront(var10);
    int var13 = var0.getSourcePosition();
    com.google.javascript.rhino.jstype.StaticSourceFile var14 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test29"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var10 = var3.getParent();
    boolean var11 = var3.isBreak();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    boolean var16 = var13.isGetProp();
    com.google.javascript.rhino.Node var17 = var3.clonePropsFrom(var13);
    var17.setLineno(100);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var25 = var17.useSourceInfoIfMissingFrom(var24);
    boolean var26 = var25.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test30"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    var0.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var26 = var25.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    com.google.javascript.jscomp.JSError var28 = null;
    com.google.javascript.jscomp.CheckLevel var29 = var27.level(var28);
    var14.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var35 = null;
    var34.setStripTypes(var35);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.util.List var39 = var37.getEdges();
    var34.setManageClosureDependencies(var39);
    var34.setDevirtualizePrototypeMethods(true);
    var34.setCollapsePropertiesOnExternTypes(false);
    var34.setShadowVariables(false);
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    com.google.javascript.rhino.JSDocInfoBuilder var60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var61 = var60.recordExpose();
    boolean var63 = var60.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.InputId var70 = com.google.javascript.jscomp.NodeUtil.getInputId(var67);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var67.setJSType(var71);
    com.google.javascript.rhino.JSDocInfo var73 = var60.build(var67);
    java.lang.String var74 = var73.getFileOverview();
    java.util.Set var75 = var73.getModifies();
    var47.setReplaceStringsReservedStrings(var75);
    var47.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var81 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var83 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var84 = com.google.javascript.jscomp.JSError.make(var81, var83);
    int var85 = var84.getCharno();
    com.google.javascript.jscomp.CheckLevel var86 = var84.getDefaultLevel();
    var47.setCheckGlobalThisLevel(var86);
    var34.setCheckMissingGetCssNameLevel(var86);
    var0.setCheckProvides(var86);
    var0.setGatherCssNames(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test31() {}
//   public void test31() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test31"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var6 = var5.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     boolean var9 = var0.hasNode((java.lang.Object)var5);
//     double var10 = var5.getProgress();
//     com.google.javascript.jscomp.ErrorManager var11 = var5.getErrorManager();
//     com.google.javascript.jscomp.JSError[] var12 = var5.getWarnings();
//     com.google.javascript.jscomp.Result var13 = var5.getResult();
//     var5.rebuildInputsFromModules();
// 
//   }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test32"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var70 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var31, "BANG");
    com.google.javascript.rhino.jstype.FunctionType var71 = var31.toMaybeFunctionType();
    int var72 = var31.getMaxArguments();
    java.util.List var73 = var31.getSubTypes();
    com.google.javascript.rhino.JSDocInfo var75 = var31.getOwnPropertyJSDocInfo("LABEL_NAME hi!\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test33"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    var1.resetForTypeCheck();
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var37.unregisterPropertyOnType("Unversioned directory", var39);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    com.google.javascript.jscomp.JSModule var43 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var44 = var43.getDependencies();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.block(var44);
    com.google.javascript.rhino.jstype.FunctionType var46 = var37.createFunctionTypeWithVarArgs(var41, var44);
    boolean var48 = var46.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var49 = var46.toMaybeEnumType();
    boolean var50 = var46.isNumber();
    var46.clearCachedValues();
    boolean var52 = var46.hasDisplayName();
    java.lang.Iterable var53 = var46.getExtendedInterfaces();
    int var54 = var46.getMinArguments();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var55 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var57 = var55.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var60 = var59.recordExpose();
    boolean var62 = var59.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    com.google.javascript.rhino.InputId var69 = com.google.javascript.jscomp.NodeUtil.getInputId(var66);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    var66.setJSType(var70);
    com.google.javascript.rhino.JSDocInfo var72 = var59.build(var66);
    java.lang.String var73 = var72.getFileOverview();
    java.util.Set var74 = var72.getModifies();
    java.util.List var75 = var72.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var76 = var72.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var77 = var55.createDirectedGraphNode((java.lang.Object)var72);
    java.util.List var78 = var55.getGraphvizNodes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var79 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var46, var78);
      fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test34() {}
//   public void test34() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test34"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
//     com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var7 = var6.recordExpose();
//     boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = var13.getNext();
//     com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
//     com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     var13.setJSType(var17);
//     com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
//     java.util.List var20 = var19.getThrownTypes();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var22 = var21.getDirectedGraphNodes();
//     var21.clearNodeAnnotations();
//     java.util.List var24 = var21.getGraphvizEdges();
//     com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var26 = null;
//     var25.setStripTypes(var26);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var29 = var28.getDirectedGraphNodes();
//     java.util.List var30 = var28.getEdges();
//     var25.setManageClosureDependencies(var30);
//     var25.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var25.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var37 = null;
//     var25.setSourceMapDetailLevel(var37);
//     com.google.javascript.jscomp.CodingConvention var39 = var25.getCodingConvention();
//     var25.setMarkNoSideEffectCalls(false);
//     var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var20, var24, var25);
//     boolean var43 = var3.acceptConstKeyword();
//     java.util.Map var44 = var3.getInputsById();
//     com.google.javascript.jscomp.SourceFile var47 = com.google.javascript.jscomp.SourceFile.fromCode("BANG", "");
//     java.lang.String var48 = var47.getCode();
//     com.google.javascript.jscomp.SourceFile var51 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
//     int var53 = var51.getLineOfOffset(0);
//     int var55 = var51.getLineOfOffset(100);
//     com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var57 = null;
//     var56.setStripTypes(var57);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var59 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var60 = var59.getDirectedGraphNodes();
//     java.util.List var61 = var59.getEdges();
//     var56.setManageClosureDependencies(var61);
//     boolean var63 = var56.isExternExportsEnabled();
//     var56.setManageClosureDependencies(true);
//     boolean var66 = var56.shouldColorizeErrorOutput();
//     com.google.common.collect.Multimap var67 = null;
//     var56.setCustomPasses(var67);
//     var56.setPrettyPrint(false);
//     com.google.javascript.jscomp.VariableRenamingPolicy var71 = null;
//     var56.setVariableRenaming(var71);
//     var56.setDevirtualizePrototypeMethods(false);
//     com.google.javascript.jscomp.Result var75 = var3.compile(var47, var51, var56);
// 
//   }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test35"); }


    int var1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test36"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    var0.setCommonJSModulePathPrefix("(module$2014$12$24 11:10)");
    var0.setRuntimeTypeCheck(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test37"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    java.lang.String var1 = var0.getAbstractMethodName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "goog.abstractMethod"+ "'", var1.equals("goog.abstractMethod"));

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test38"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    boolean var7 = var3.isSwitch();
    boolean var8 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    boolean var9 = var3.isFalse();
    boolean var10 = var3.isCall();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test39() {}
//   public void test39() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test39"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     boolean var22 = var20.isExtern();
//     com.google.javascript.jscomp.SourceAst var23 = var20.getSourceAst();
//     var20.removeRequire("hi!: Unversioned directory");
// 
//   }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test40"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.jscomp.VariableRenamingPolicy var12 = null;
    var0.setVariableRenaming(var12);
    java.util.List var14 = null;
    var0.setSourceMapLocationMappings(var14);
    java.util.List var16 = null;
    var0.setSourceMapLocationMappings(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test41"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    java.lang.String var22 = var14.getVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test42() {}
//   public void test42() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test42"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     com.google.javascript.jscomp.CompilerInput var2 = null;
//     var1.add(var2);
// 
//   }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test43"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setLooseTypes(false);
    var0.setPropertyAffinity(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test44"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.lang.String var23 = var18.getMeaning();
    boolean var24 = var18.hasType();
    java.lang.String var25 = var18.getLendsName();
    boolean var26 = var18.isExport();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test45"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var5 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var5);
//     com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var8 = var3.getReverseAbstractInterpreter();
// 
//   }

  public void test46() {}
//   public void test46() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test46"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     int var4 = var3.getErrorCount();
//     int var5 = var3.getWarningCount();
//     var3.disableThreads();
//     java.lang.String var7 = var3.toSource();
// 
//   }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test47"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isPrivate("");
    com.google.javascript.jscomp.ClosureCodingConvention var45 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var33);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var50 = var49.hasOneChild();
    com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.returnNode();
    boolean var56 = var55.isArrayLit();
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    boolean var63 = var60.isVarArgs();
    boolean var64 = var60.isOptionalArg();
    com.google.javascript.rhino.Node var67 = new com.google.javascript.rhino.Node(0, var49, var54, var55, var60, 1, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var68 = var45.getObjectLiteralCast(var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test48"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.returnNode();
    var0.setSourceFileForTesting("null(null)");
    boolean var3 = var0.isDo();
    int var4 = var0.getSideEffectFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test49"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setRemoveUnusedLocalVars(true);
    var0.setCrossModuleCodeMotion(true);
    var0.setGenerateExports(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test50"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.JSDocInfoBuilder var76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var77 = var76.recordExpose();
    boolean var79 = var76.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    com.google.javascript.rhino.InputId var86 = com.google.javascript.jscomp.NodeUtil.getInputId(var83);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    var83.setJSType(var87);
    com.google.javascript.rhino.JSDocInfo var89 = var76.build(var83);
    java.lang.String var90 = var89.getFileOverview();
    java.util.Set var91 = var89.getModifies();
    java.util.List var92 = var89.getImplementedInterfaces();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.block(var92);
    com.google.javascript.jscomp.NodeTraversal.Callback var94 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var92, var94);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var96 = var3.languageMode();
    boolean var97 = var3.hasErrors();
    com.google.javascript.jscomp.Compiler.IntermediateState var98 = var3.getState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test51"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    int var16 = var6.getLineNumber();
    int var17 = var6.getLineNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test52"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = var10.getNext();
    com.google.javascript.rhino.Node var12 = var8.srcrefTree(var10);
    boolean var13 = var10.isVarArgs();
    com.google.javascript.rhino.Node var15 = var10.getChildAtIndex(1);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.JSDocInfo var22 = var19.getJSDocInfo();
    com.google.javascript.rhino.Node var23 = var10.copyInformationFrom(var19);
    java.lang.Object var25 = null;
    var10.putProp(0, var25);
    com.google.javascript.rhino.JSTypeExpression var28 = new com.google.javascript.rhino.JSTypeExpression(var10, "()");
    boolean var29 = var1.recordEnumParameterType(var28);
    boolean var30 = var1.isJavaDispatch();
    boolean var31 = var1.isPopulatedWithFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test53"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    double var10 = var5.getProgress();
    com.google.javascript.jscomp.ErrorManager var11 = var5.getErrorManager();
    com.google.javascript.jscomp.JSError[] var12 = var5.getWarnings();
    com.google.javascript.jscomp.JSError[] var13 = var5.getWarnings();
    boolean var14 = var5.acceptEcmaScript5();
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var15 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var16 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5, var15);
    java.util.logging.Logger var17 = null;
    com.google.javascript.jscomp.LoggerErrorManager var18 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var16, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test54"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    var3.parse();
    var3.processDefines();
    var3.parse();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test55"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    java.lang.Iterable var62 = var56.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test56"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var12 = null;
    var11.setStripTypes(var12);
    byte[] var15 = new byte[] { (byte)100};
    var11.setInputPropertyMapSerialized(var15);
    var0.setInputVariableMapSerialized(var15);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var18 = var0.getTracerMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test57"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = var77.getNext();
    com.google.javascript.rhino.Node var79 = var75.srcrefTree(var77);
    com.google.javascript.rhino.Node var80 = var77.removeFirstChild();
    boolean var81 = var56.defineElement("goog.abstractMethod", var77);
    boolean var82 = var56.matchesStringContext();
    com.google.javascript.rhino.Node var86 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var88 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var89 = var88.getNext();
    com.google.javascript.rhino.Node var90 = var86.srcrefTree(var88);
    boolean var91 = var88.isVarArgs();
    boolean var92 = var88.isOptionalArg();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var94 = new com.google.javascript.rhino.Node(0, var88, var93);
    boolean var95 = var93.isInc();
    boolean var96 = var56.defineElement("function (): {1292906510}", var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test58"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.JSTypeNative[] var91 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var92 = var24.createUnionType(var91);
    boolean var93 = var92.isNominalType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test59"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var4 = var2.isConstantKey("2014/12/24 11:10");
    java.lang.String var5 = var2.getAbstractMethodName();
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.getIdName();
    java.lang.String var8 = var1.toString();
    java.lang.String var9 = var1.getIdName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "goog.abstractMethod"+ "'", var5.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InputId: "+ "'", var8.equals("InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test60"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.isConsistentIdGenerator();
    int var20 = var14.getImplementedInterfaceCount();
    boolean var21 = var14.shouldPreserveTry();
    boolean var22 = var14.hasTypedefType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test61"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.util.List var20 = var19.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    var21.clearNodeAnnotations();
    java.util.List var24 = var21.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    var25.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var25.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var37 = null;
    var25.setSourceMapDetailLevel(var37);
    com.google.javascript.jscomp.CodingConvention var39 = var25.getCodingConvention();
    var25.setMarkNoSideEffectCalls(false);
    var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var20, var24, var25);
    boolean var43 = var3.acceptConstKeyword();
    com.google.javascript.jscomp.MessageFormatter var44 = null;
    java.util.logging.Logger var45 = null;
    com.google.javascript.jscomp.LoggerErrorManager var46 = new com.google.javascript.jscomp.LoggerErrorManager(var44, var45);
    com.google.javascript.jscomp.JSError[] var47 = var46.getErrors();
    var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test62"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    com.google.javascript.rhino.JSDocInfo var7 = var4.getJSDocInfo();
    boolean var8 = var4.isSwitch();
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var11 = var9.isConstantKey("2014/12/24 11:10");
    java.util.Collection var12 = var9.getAssertionFunctions();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var16.setJSType(var17);
    boolean var19 = var16.isScript();
    com.google.javascript.rhino.Node var20 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var24 = var23.isGetterDef();
    boolean var25 = var23.isAdd();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
    com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
    java.lang.String var43 = var42.toStringTree();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var51 = var47.getBooleanProp(100);
    int var52 = var47.getSideEffectFlags();
    boolean var53 = var47.isDefaultCase();
    com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(1, var23, var42, var47);
    java.lang.String var55 = var9.extractClassNameIfProvide(var16, var47);
    java.lang.String var56 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var16);
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    com.google.javascript.rhino.Node var62 = var58.srcrefTree(var60);
    boolean var63 = var58.isString();
    boolean var64 = var58.isNE();
    java.lang.String var65 = com.google.javascript.jscomp.NodeUtil.getSourceName(var58);
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    int var69 = var67.getSourceOffset();
    com.google.javascript.rhino.Node var73 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    int var78 = var73.getIndexOfChild(var77);
    int var79 = var67.getIndexOfChild(var73);
    com.google.javascript.rhino.Node var80 = new com.google.javascript.rhino.Node(100, var4, var16, var58, var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.var(var73);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var43.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test63"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isOr();
    var14.setAssociatedNode(var19);
    java.util.Set var24 = var14.getParameterNames();
    java.util.Collection var25 = var14.getAuthors();
    java.lang.String var26 = var14.getVersion();
    boolean var27 = var14.isNoCompile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test64"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("BANG");
//     java.lang.Appendable var2 = null;
//     var1.appendStringTree(var2);
// 
//   }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test65"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
    var0.setDefineToBooleanLiteral("", true);
    var0.setOutputJsStringUsage(true);
    var0.setNameAnonymousFunctionsOnly(false);
    var0.setTweakToStringLiteral("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n", "(module$2014$12$24 11:10)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test66"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    java.util.Set var1 = var0.getDirectives();
    boolean var2 = var0.wasEmptyNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test67"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    int var4 = var3.getWarningCount();
    com.google.javascript.rhino.Node var5 = var3.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test68"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    com.google.javascript.rhino.Node var11 = var6.getChildAtIndex(1);
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.JSDocInfo var18 = var15.getJSDocInfo();
    com.google.javascript.rhino.Node var19 = var6.copyInformationFrom(var15);
    java.lang.Object var21 = null;
    var6.putProp(0, var21);
    com.google.javascript.rhino.JSTypeExpression var24 = new com.google.javascript.rhino.JSTypeExpression(var6, "()");
    com.google.javascript.rhino.jstype.StaticScope var25 = null;
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    var27.unregisterPropertyOnType("Unversioned directory", var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    boolean var33 = var27.canPropertyBeDefined(var31, "BANG");
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var34};
    com.google.javascript.rhino.Node var36 = var27.createParameters(var35);
    com.google.javascript.rhino.jstype.JSType var37 = var24.evaluate(var25, var27);
    boolean var38 = var2.addVarArgs(var37);
    com.google.javascript.jscomp.ClosureCodingConvention var39 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var41 = var39.isConstantKey("2014/12/24 11:10");
    java.util.Collection var42 = var39.getAssertionFunctions();
    boolean var44 = var39.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isOptionalArg();
    java.lang.String var56 = var48.toString(false, false, true);
    java.util.List var57 = var39.identifyTypeDeclarationCall(var48);
    java.lang.String var58 = var39.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    int var62 = var60.getSourceOffset();
    com.google.javascript.rhino.Node var63 = var60.cloneNode();
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    int var67 = var65.getSourceOffset();
    com.google.javascript.rhino.Node var68 = var65.cloneNode();
    var63.addChildrenToFront(var68);
    com.google.javascript.jscomp.CodingConvention.Bind var71 = var39.describeFunctionBind(var63, true);
    com.google.javascript.rhino.Node var72 = var2.newOptionalParameterFromNode(var63);
    java.lang.Iterable var73 = var63.siblings();
    com.google.javascript.rhino.Node var75 = var63.getAncestor(0);
    boolean var76 = var75.isArrayLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "BANG"+ "'", var56.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test69"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    var27.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CheckLevel var45 = null;
    com.google.javascript.jscomp.DiagnosticType var47 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var45, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var48 = new com.google.javascript.jscomp.DiagnosticType[] { var47};
    com.google.javascript.jscomp.DiagnosticGroup var49 = new com.google.javascript.jscomp.DiagnosticGroup(var48);
    com.google.javascript.jscomp.CompilerOptions var50 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var51 = null;
    var50.setStripTypes(var51);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var53 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var54 = var53.getDirectedGraphNodes();
    java.util.List var55 = var53.getEdges();
    var50.setManageClosureDependencies(var55);
    boolean var57 = var50.isExternExportsEnabled();
    var50.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var62 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var64 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var65 = com.google.javascript.jscomp.JSError.make(var62, var64);
    int var66 = var65.getCharno();
    com.google.javascript.jscomp.CheckLevel var67 = var65.getDefaultLevel();
    var50.setReportUnknownTypes(var67);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var69 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var49, var67);
    com.google.javascript.jscomp.DiagnosticType var72 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var74 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var75 = com.google.javascript.jscomp.JSError.make(var72, var74);
    com.google.javascript.jscomp.CheckLevel var76 = var69.level(var75);
    var27.setAggressiveVarCheck(var76);
    java.lang.String var78 = var76.toString();
    java.lang.String var79 = var76.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "ERROR"+ "'", var78.equals("ERROR"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "ERROR"+ "'", var79.equals("ERROR"));

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test70"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.EnumElementType var64 = var63.toMaybeEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test71"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.nullNode();
//     boolean var3 = var2.isCatch();
//     boolean var4 = var2.isHook();
//     var1.validateStatement(var2);
// 
//   }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test72"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.jscomp.NodeTraversal.Callback var8 = null;
    com.google.javascript.jscomp.NodeTraversal var9 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var8);
    java.lang.String var10 = var9.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test73"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var7 = var1.withReturnType(var5, true);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var19 = var18.hasAnyTemplateInternal();
    java.lang.Iterable var20 = var18.getAllExtendedInterfaces();
    boolean var21 = var18.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var36 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var35);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    com.google.javascript.rhino.Node var45 = var40.getChildAtIndex(1);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.JSDocInfo var52 = var49.getJSDocInfo();
    com.google.javascript.rhino.Node var53 = var40.copyInformationFrom(var49);
    java.lang.Object var55 = null;
    var40.putProp(0, var55);
    com.google.javascript.rhino.JSTypeExpression var58 = new com.google.javascript.rhino.JSTypeExpression(var40, "()");
    com.google.javascript.rhino.jstype.StaticScope var59 = null;
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var61.unregisterPropertyOnType("Unversioned directory", var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    boolean var67 = var61.canPropertyBeDefined(var65, "BANG");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.Node var70 = var61.createParameters(var69);
    com.google.javascript.rhino.jstype.JSType var71 = var58.evaluate(var59, var61);
    boolean var72 = var36.addVarArgs(var71);
    boolean var73 = var71.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    com.google.javascript.rhino.jstype.JSType var77 = null;
    var75.unregisterPropertyOnType("Unversioned directory", var77);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    boolean var81 = var75.canPropertyBeDefined(var79, "BANG");
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.JSType[] var83 = new com.google.javascript.rhino.jstype.JSType[] { var82};
    com.google.javascript.rhino.Node var84 = var75.createParameters(var83);
    com.google.javascript.rhino.jstype.FunctionType var85 = var24.createConstructorType(var71, var83);
    com.google.javascript.rhino.jstype.JSType var87 = var85.getPropertyType("");
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var90 = var18.defineSynthesizedProperty("BANG 0\n    STRING hi 0 [length: 2]\n", var87, var89);
    com.google.javascript.rhino.jstype.JSType var91 = var18.getReturnType();
    boolean var92 = var18.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.ObjectType var93 = var18.getPrototype();
    com.google.javascript.rhino.jstype.ObjectType var94 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var18);
    com.google.javascript.rhino.jstype.FunctionBuilder var95 = var7.withReturnType((com.google.javascript.rhino.jstype.JSType)var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test74"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var41 = var40.isTry();
    boolean var42 = var40.isSwitch();
    boolean var43 = var33.isVarArgsParameter(var40);
    java.lang.String var44 = var33.getExportSymbolFunction();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isArrayLit();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var55 = var54.isGetterDef();
    var54.putIntProp((-1), 10);
    var48.addChildrenToFront(var54);
    boolean var60 = var54.wasEmptyNode();
    boolean var61 = var33.isVarArgsParameter(var54);
    java.lang.String var62 = var33.getDelegateSuperclassName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "goog.exportSymbol"+ "'", var44.equals("goog.exportSymbol"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test75"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    java.util.Collection var9 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.paramList(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test76"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isConstantKey("{proxy:{1612771089}}");
    java.lang.String var43 = var33.getExportPropertyFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "goog.exportProperty"+ "'", var43.equals("goog.exportProperty"));

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test77"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.warning("RETURN", "BANG");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test78"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    java.io.Reader var7 = var3.getCodeReader();
    var3.clearCachedSource();
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var3);
    java.nio.charset.Charset var11 = null;
    com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromFile("INHERITED", var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.setSourceFile(var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test79"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var6 = var5.build();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.Node.newNumber(10.0d);
    com.google.javascript.rhino.Node var9 = var5.newOptionalParameterFromNode(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test80"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = var36.getNext();
    com.google.javascript.rhino.Node var38 = var34.srcrefTree(var36);
    boolean var39 = var36.isVarArgs();
    boolean var40 = var36.isArrayLit();
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    boolean var47 = var44.isVarArgs();
    com.google.javascript.rhino.Node var49 = var44.getChildAtIndex(1);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    com.google.javascript.rhino.JSDocInfo var56 = var53.getJSDocInfo();
    com.google.javascript.rhino.Node var57 = var44.copyInformationFrom(var53);
    boolean var58 = var36.hasChild(var53);
    boolean var59 = var53.isNot();
    int var60 = var53.getChildCount();
    com.google.javascript.rhino.Node.AncestorIterable var61 = var53.getAncestors();
    boolean var62 = var53.isAssign();
    java.lang.Iterable var63 = var53.siblings();
    boolean var64 = var53.isInstanceOf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.catchNode(var24, var53);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test81"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var10 = var3.getNext();
    boolean var11 = var3.isFromExterns();
    boolean var12 = var3.isGetProp();
    boolean var13 = var3.isDebugger();
    boolean var14 = var3.isBreak();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test82"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var0.setNameReferenceGraphPath("BANG");
    var0.setGeneratePseudoNames(true);
    var0.setRecordFunctionInformation(true);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var18 = var0.getAliasTransformationHandler();
    com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var20 = null;
    var19.setStripTypes(var20);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var22 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var23 = var22.getDirectedGraphNodes();
    java.util.List var24 = var22.getEdges();
    var19.setManageClosureDependencies(var24);
    boolean var26 = var19.isExternExportsEnabled();
    var19.setCheckCaja(false);
    java.util.Set var29 = null;
    var19.setReplaceStringsReservedStrings(var29);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var35 = var32.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    com.google.javascript.rhino.InputId var42 = com.google.javascript.jscomp.NodeUtil.getInputId(var39);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var39.setJSType(var43);
    com.google.javascript.rhino.JSDocInfo var45 = var32.build(var39);
    java.lang.String var46 = var45.getFileOverview();
    java.util.Set var47 = var45.getModifies();
    var19.setReplaceStringsReservedStrings(var47);
    var19.setChainCalls(true);
    com.google.javascript.jscomp.CheckLevel var51 = null;
    var19.setReportMissingOverride(var51);
    var19.setInputDelimiter("{proxy:{599688852}}");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    byte[] var59 = new byte[] { (byte)100};
    var55.setInputPropertyMapSerialized(var59);
    var55.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var63 = var55.getTracerMode();
    var19.setTracerMode(var63);
    var0.setTracerMode(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test83"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var18 = var16.recordExterns();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isArrayLit();
    com.google.javascript.rhino.Node var27 = var22.getNext();
    var16.markTypeNode(var22, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    com.google.javascript.rhino.JSTypeExpression var56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var55);
    boolean var57 = var16.recordBaseType(var55);
    boolean var58 = var1.recordTypedef(var55);
    boolean var59 = var1.shouldParseDocumentation();
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var61.unregisterPropertyOnType("Unversioned directory", var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.jscomp.JSModule var67 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var68 = var67.getDependencies();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.block(var68);
    com.google.javascript.rhino.jstype.FunctionType var70 = var61.createFunctionTypeWithVarArgs(var65, var68);
    boolean var71 = var70.hasCachedValues();
    boolean var72 = var70.isFunctionPrototypeType();
    java.util.Set var73 = var70.getPropertyNames();
    boolean var74 = var1.recordModifies(var73);
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = var78.getNext();
    com.google.javascript.rhino.Node var80 = var76.srcrefTree(var78);
    boolean var81 = var78.isVarArgs();
    com.google.javascript.rhino.Node var83 = var78.getChildAtIndex(1);
    com.google.javascript.rhino.Node var85 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var87 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var88 = var87.getNext();
    com.google.javascript.rhino.Node var89 = var85.srcrefTree(var87);
    com.google.javascript.rhino.JSDocInfo var90 = var87.getJSDocInfo();
    com.google.javascript.rhino.Node var91 = var78.copyInformationFrom(var87);
    java.lang.Object var93 = null;
    var78.putProp(0, var93);
    com.google.javascript.rhino.JSTypeExpression var96 = new com.google.javascript.rhino.JSTypeExpression(var78, "()");
    com.google.javascript.rhino.JSTypeExpression var97 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var96);
    boolean var98 = var96.isOptionalArg();
    boolean var99 = var1.recordThisType(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test84"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setExtractPrototypeMemberDeclarations(true);
    var0.setConvertToDottedProperties(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test85"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.matchesObjectContext();
    com.google.javascript.rhino.jstype.JSType var64 = var58.getPropertyType("function (): {2142004661}");
    boolean var65 = var58.hasAnyTemplate();
    com.google.javascript.rhino.JSDocInfoBuilder var68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var69 = var68.recordExpose();
    boolean var71 = var68.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    com.google.javascript.rhino.InputId var78 = com.google.javascript.jscomp.NodeUtil.getInputId(var75);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    var75.setJSType(var79);
    com.google.javascript.rhino.JSDocInfo var81 = var68.build(var75);
    java.util.List var82 = var81.getThrownTypes();
    com.google.javascript.rhino.JSTypeExpression var83 = var81.getEnumParameterType();
    var58.setPropertyJSDocInfo("(InputId: )", var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test86"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    var1.setLineno(0);
    com.google.javascript.rhino.Node var4 = var1.getFirstChild();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    boolean var16 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var14);
    int var17 = var14.getLength();
    com.google.javascript.rhino.Node var18 = null;
    boolean var19 = var14.hasChild(var18);
    com.google.javascript.rhino.Node var20 = var12.useSourceInfoIfMissingFromForTree(var14);
    var14.setSourceFileForTesting("Unversioned directory");
    boolean var23 = var14.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var24 = var14.getStaticSourceFile();
    com.google.javascript.rhino.Node var25 = var7.srcref(var14);
    com.google.javascript.rhino.Node var26 = new com.google.javascript.rhino.Node(10, var25);
    boolean var27 = var25.isOr();
    com.google.javascript.rhino.Node var28 = var1.useSourceInfoIfMissingFromForTree(var25);
    com.google.javascript.jscomp.ClosureCodingConvention var29 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var31 = var29.isConstantKey("2014/12/24 11:10");
    java.util.Collection var32 = var29.getAssertionFunctions();
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    var36.setJSType(var37);
    boolean var39 = var36.isScript();
    com.google.javascript.rhino.Node var40 = var36.removeFirstChild();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var44 = var43.isGetterDef();
    boolean var45 = var43.isAdd();
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    boolean var52 = var49.isVarArgs();
    com.google.javascript.rhino.Node var54 = var49.getChildAtIndex(1);
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    com.google.javascript.rhino.JSDocInfo var61 = var58.getJSDocInfo();
    com.google.javascript.rhino.Node var62 = var49.copyInformationFrom(var58);
    java.lang.String var63 = var62.toStringTree();
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    boolean var71 = var67.getBooleanProp(100);
    int var72 = var67.getSideEffectFlags();
    boolean var73 = var67.isDefaultCase();
    com.google.javascript.rhino.Node var74 = new com.google.javascript.rhino.Node(1, var43, var62, var67);
    java.lang.String var75 = var29.extractClassNameIfProvide(var36, var67);
    java.util.Collection var76 = var29.getAssertionFunctions();
    java.lang.String var77 = var29.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var81 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var82 = null;
    var81.setJSType(var82);
    boolean var84 = var81.isScript();
    boolean var85 = var29.isVarArgsParameter(var81);
    var1.addChildToBack(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var63.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test87"); }


    com.google.javascript.jscomp.parsing.Config.LanguageMode var1 = null;
    com.google.javascript.rhino.JSDocInfoBuilder var4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var5 = var4.recordExpose();
    boolean var6 = var4.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var8 = null;
    boolean var9 = var4.recordParameter("Unversioned directory", var8);
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var12 = var4.recordThrowDescription(var10, "");
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordExpose();
    boolean var17 = var14.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.InputId var24 = com.google.javascript.jscomp.NodeUtil.getInputId(var21);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var21.setJSType(var25);
    com.google.javascript.rhino.JSDocInfo var27 = var14.build(var21);
    java.lang.String var28 = var27.getFileOverview();
    java.util.Set var29 = var27.getModifies();
    boolean var30 = var4.recordSuppressions(var29);
    com.google.javascript.jscomp.parsing.Config var31 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(true, var1, false, var29);
    com.google.javascript.jscomp.JSModule[] var32 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test88"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setRemoveClosureAsserts(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setAmbiguateProperties(true);
    boolean var22 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.MessageBundle var23 = null;
    var0.setMessageBundle(var23);
    var0.setDisambiguateProperties(true);
    var0.setTweakToDoubleLiteral("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", (-1.0d));
    var0.setProcessObjectPropertyString(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test89"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    java.lang.String var79 = var73.getDisplayName();
    boolean var80 = var73.matchesStringContext();
    java.lang.Iterable var81 = var73.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.ParameterizedType var82 = com.google.javascript.rhino.jstype.JSType.toMaybeParameterizedType((com.google.javascript.rhino.jstype.JSType)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var79.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test90"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isOr();
    boolean var7 = var3.isExprResult();
    com.google.javascript.rhino.Node var8 = var3.cloneTree();
    boolean var9 = var3.isLabel();
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    boolean var17 = var13.isArrayLit();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    boolean var35 = var13.hasChild(var30);
    boolean var36 = var13.isSwitch();
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    boolean var42 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var40);
    int var43 = var40.getLength();
    com.google.javascript.rhino.Node var44 = null;
    boolean var45 = var40.hasChild(var44);
    com.google.javascript.rhino.Node var46 = var38.useSourceInfoIfMissingFromForTree(var40);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    boolean var54 = var50.isArrayLit();
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var57 = var56.isGetterDef();
    var56.putIntProp((-1), 10);
    var50.addChildrenToFront(var56);
    boolean var62 = var40.hasChild(var50);
    com.google.javascript.jscomp.SourceFile var64 = com.google.javascript.jscomp.SourceFile.fromFile("module$WARNING _ BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var40.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.addChildBefore(var13, var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test91"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var10 = var3.getParent();
    boolean var11 = var3.isBreak();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    boolean var16 = var13.isGetProp();
    com.google.javascript.rhino.Node var17 = var3.clonePropsFrom(var13);
    var17.setLineno(100);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newNumber(0.0d);
    var17.addChildToBack(var21);
    boolean var23 = var17.isBreak();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test92"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    com.google.javascript.jscomp.CompilerOptions var68 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var69 = null;
    var68.setStripTypes(var69);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var71 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var72 = var71.getDirectedGraphNodes();
    java.util.List var73 = var71.getEdges();
    var68.setManageClosureDependencies(var73);
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.script(var73);
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.IR.paramList(var73);
    var31.setImplementedInterfaces(var73);
    boolean var78 = var31.hasCachedValues();
    boolean var79 = var31.isFunctionPrototypeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test93"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var4 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var5 = var4.recordExpose();
    boolean var7 = var4.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.InputId var14 = com.google.javascript.jscomp.NodeUtil.getInputId(var11);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var11.setJSType(var15);
    com.google.javascript.rhino.JSDocInfo var17 = var4.build(var11);
    java.lang.String var18 = var17.getFileOverview();
    java.util.Set var19 = var17.getModifies();
    java.util.List var20 = var17.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var21 = var17.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var22 = var0.createDirectedGraphNode((java.lang.Object)var17);
    boolean var23 = var17.isConsistentIdGenerator();
    boolean var24 = var17.isInterface();
    java.lang.String var25 = var17.getBlockDescription();
    java.lang.String var26 = var17.getFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test94"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    int var6 = var3.getLength();
    com.google.javascript.rhino.Node var7 = null;
    boolean var8 = var3.hasChild(var7);
    com.google.javascript.rhino.Node var9 = var1.useSourceInfoIfMissingFromForTree(var3);
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    boolean var17 = var13.isArrayLit();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var20 = var19.isGetterDef();
    var19.putIntProp((-1), 10);
    var13.addChildrenToFront(var19);
    boolean var25 = var3.hasChild(var13);
    com.google.javascript.jscomp.SourceFile var27 = com.google.javascript.jscomp.SourceFile.fromFile("module$WARNING _ BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var3.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Reader var29 = var27.getCodeReader();
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test95"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    java.lang.Iterable var6 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod: WARNING - \n");
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var7 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var7.clearEdgeAnnotations();
    java.lang.Iterable var9 = var7.getDirectedGraphNodes();
    java.util.List var10 = var7.getEdges();
    com.google.javascript.jscomp.JSModule[] var11 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var10);
    com.google.javascript.jscomp.JSModule[] var12 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var10);
    com.google.javascript.rhino.Node var13 = var1.createParametersWithVarArgs(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test96"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.lang.String var23 = var18.getMeaning();
    java.lang.String var24 = var18.getReturnDescription();
    boolean var25 = var18.hasThisType();
    boolean var26 = var18.isNoShadow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test97"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setProtectHiddenSideEffects(true);
    var0.setInlineGetters(false);
    var0.setDefineToBooleanLiteral("2014/12/24 11:10", false);
    var0.setPropertyAffinity(true);
    com.google.javascript.jscomp.SourceMap.Format var19 = null;
    var0.setSourceMapFormat(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test98"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var21.setJSType(var22);
    boolean var24 = var21.isScript();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var29 = var28.isGetterDef();
    boolean var30 = var28.isAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.String var48 = var47.toStringTree();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var56 = var52.getBooleanProp(100);
    int var57 = var52.getSideEffectFlags();
    boolean var58 = var52.isDefaultCase();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(1, var28, var47, var52);
    java.lang.String var60 = var14.extractClassNameIfProvide(var21, var52);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    var0.setDebugFunctionSideEffectsPath("");
    var0.setOptimizeCalls(true);
    com.google.javascript.jscomp.CssRenamingMap var66 = null;
    var0.setCssRenamingMap(var66);
    var0.setAssumeClosuresOnlyCaptureReferences(true);
    var0.setCoalesceVariableNames(false);
    var0.setInstrumentationTemplate("function (): {175702431}");
    var0.setRemoveUnusedLocalVars(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var48.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test99"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setCheckTypes(false);
    var0.setMoveFunctionDeclarations(true);
    var0.setLineBreak(true);
    com.google.javascript.jscomp.CheckLevel var18 = null;
    var0.setCheckRequires(var18);
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    var20.setChainCalls(true);
    var20.setInlineLocalFunctions(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var25 = var20.getLanguageIn();
    var0.setLanguageIn(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test100"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setAliasAllStrings(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var14 = null;
    var0.setTracerMode(var14);
    com.google.javascript.jscomp.JSModule var18 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var19 = var18.getProvides();
    java.util.List var20 = var18.getRequires();
    com.google.javascript.jscomp.SourceAst var21 = null;
    com.google.javascript.rhino.InputId var22 = null;
    com.google.javascript.jscomp.CompilerInput var24 = new com.google.javascript.jscomp.CompilerInput(var21, var22, true);
    com.google.javascript.jscomp.JSModule var25 = var24.getModule();
    var18.addFirst(var24);
    java.util.List var27 = var18.getProvides();
    var0.setReplaceStringsConfiguration("2014/12/24 11:10", var27);
    com.google.javascript.jscomp.Compiler var29 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var30 = var29.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var31 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var29);
    com.google.javascript.jscomp.ErrorManager var32 = var29.getErrorManager();
    com.google.javascript.jscomp.LightweightMessageFormatter var33 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var29);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var34 = var29.languageMode();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var35 = var29.languageMode();
    var0.setLanguageOut(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test101"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    com.google.javascript.rhino.jstype.FunctionType var37 = var36.toMaybeFunctionType();
    boolean var38 = var36.isAllType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test102"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("ERROR - (InputId: )\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test103"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var35.toMaybeFunctionType();
    boolean var63 = var35.isRecordType();
    com.google.javascript.rhino.jstype.TemplateType var64 = var35.toMaybeTemplateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test104"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var18 = var16.recordExterns();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isVarArgs();
    boolean var26 = var22.isArrayLit();
    com.google.javascript.rhino.Node var27 = var22.getNext();
    var16.markTypeNode(var22, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    com.google.javascript.rhino.JSTypeExpression var56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var55);
    boolean var57 = var16.recordBaseType(var55);
    boolean var58 = var1.recordTypedef(var55);
    boolean var59 = var1.shouldParseDocumentation();
    boolean var61 = var1.recordDeprecationReason("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test105"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    com.google.javascript.jscomp.CheckLevel var32 = null;
    var0.setCheckRequires(var32);
    var0.setExportTestFunctions(false);
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.CompilerOptions var38 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var39 = null;
    var38.setStripTypes(var39);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var41 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var42 = var41.getDirectedGraphNodes();
    java.util.List var43 = var41.getEdges();
    var38.setManageClosureDependencies(var43);
    var38.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var49 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var50 = var49.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var51 = new com.google.javascript.jscomp.ComposeWarningsGuard(var50);
    com.google.javascript.jscomp.JSError var52 = null;
    com.google.javascript.jscomp.CheckLevel var53 = var51.level(var52);
    var38.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var51);
    var38.setNameReferenceGraphPath("goog.exportSymbol");
    com.google.javascript.jscomp.CheckLevel var58 = null;
    com.google.javascript.jscomp.DiagnosticType var60 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var58, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var61 = new com.google.javascript.jscomp.DiagnosticType[] { var60};
    com.google.javascript.jscomp.DiagnosticGroup var62 = new com.google.javascript.jscomp.DiagnosticGroup(var61);
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var64 = null;
    var63.setStripTypes(var64);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var67 = var66.getDirectedGraphNodes();
    java.util.List var68 = var66.getEdges();
    var63.setManageClosureDependencies(var68);
    boolean var70 = var63.isExternExportsEnabled();
    var63.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var77 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var75, var77);
    int var79 = var78.getCharno();
    com.google.javascript.jscomp.CheckLevel var80 = var78.getDefaultLevel();
    var63.setReportUnknownTypes(var80);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var82 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var62, var80);
    var38.setReportMissingOverride(var80);
    var0.setCheckUnreachableCode(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test106"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     boolean var11 = var10.hasAnyTemplateInternal();
//     java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
//     boolean var13 = var10.isEmptyType();
//     com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     var18.unregisterPropertyOnType("Unversioned directory", var20);
//     var18.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = var28.getNext();
//     com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
//     boolean var31 = var28.isVarArgs();
//     boolean var32 = var28.isFor();
//     boolean var33 = var28.isNumber();
//     com.google.javascript.rhino.Node var34 = var28.getNext();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = var38.getNext();
//     com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
//     boolean var41 = var38.isVarArgs();
//     com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var48 = var47.getNext();
//     com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
//     com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
//     com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
//     java.lang.Object var53 = null;
//     var38.putProp(0, var53);
//     com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
//     com.google.javascript.rhino.jstype.StaticScope var57 = null;
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     var59.unregisterPropertyOnType("Unversioned directory", var61);
//     com.google.javascript.rhino.jstype.JSType var63 = null;
//     boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
//     com.google.javascript.rhino.jstype.JSType var66 = null;
//     com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
//     com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
//     com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
//     boolean var72 = var70.isConstructor();
//     com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
//     java.lang.String var74 = var73.getDisplayName();
//     com.google.javascript.rhino.Node var75 = var73.getSource();
//     com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
//     boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
//     boolean var79 = var73.isDateType();
//     com.google.javascript.rhino.jstype.ObjectType var80 = var73.getImplicitPrototype();
//     com.google.javascript.rhino.jstype.Visitor var81 = null;
//     java.lang.Object var82 = var73.visit(var81);
// 
//   }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test107"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.shouldParseDocumentation();
    boolean var5 = var1.recordParameterDescription("InputId: InputId: ", "\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.JSDocInfoBuilder var7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var8 = var7.recordExpose();
    boolean var9 = var7.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var11 = null;
    boolean var12 = var7.recordParameter("Unversioned directory", var11);
    com.google.javascript.rhino.JSTypeExpression var13 = null;
    boolean var15 = var7.recordThrowDescription(var13, "");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    com.google.javascript.rhino.Node var24 = var19.getChildAtIndex(1);
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    com.google.javascript.rhino.JSDocInfo var31 = var28.getJSDocInfo();
    com.google.javascript.rhino.Node var32 = var19.copyInformationFrom(var28);
    java.lang.Object var34 = null;
    var19.putProp(0, var34);
    com.google.javascript.rhino.JSTypeExpression var37 = new com.google.javascript.rhino.JSTypeExpression(var19, "()");
    com.google.javascript.rhino.JSTypeExpression var38 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var37);
    com.google.javascript.rhino.Node var39 = var37.getRoot();
    boolean var40 = var7.recordImplementedInterface(var37);
    boolean var41 = var1.recordType(var37);
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    boolean var48 = var45.isVarArgs();
    boolean var49 = var45.isArrayLit();
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
    boolean var67 = var45.hasChild(var62);
    boolean var68 = var62.isNot();
    int var69 = var62.getChildCount();
    com.google.javascript.rhino.Node.AncestorIterable var70 = var62.getAncestors();
    boolean var71 = var62.isAssign();
    var1.markTypeNode(var62, 3, 306, 0, (-1), false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test108"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var5, "Unversioned directory");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var8 = var0.getDirectedGraphNode((java.lang.Object)"hi!");
    var0.pushEdgeAnnotations();
    java.util.List var10 = var0.getGraphvizNodes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test109"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var8 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var7);
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var11 = var9.isConstantKey("2014/12/24 11:10");
    java.util.Collection var12 = var9.getAssertionFunctions();
    boolean var14 = var9.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isVarArgs();
    boolean var22 = var18.isOptionalArg();
    java.lang.String var26 = var18.toString(false, false, true);
    java.util.List var27 = var9.identifyTypeDeclarationCall(var18);
    java.lang.String var28 = var9.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var30.unregisterPropertyOnType("Unversioned directory", var32);
    var30.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.util.List var39 = var37.getEdges();
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    var40.setCheckCaja(false);
    var40.setGroupVariableDeclarations(true);
    java.util.Map var52 = var40.getDefineReplacements();
    var9.defineDelegateProxyPrototypeProperties(var30, var36, var39, var52);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    var55.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var61 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var9, var55);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var63 = var62.cloneTree();
    boolean var64 = var62.isVar();
    boolean var65 = var62.isAssignAdd();
    com.google.javascript.jscomp.type.FlowScope var66 = null;
    com.google.javascript.jscomp.type.FlowScope var68 = var61.getPreciserScopeKnowingConditionOutcome(var62, var66, false);
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var69 = var61.getFirst();
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var70 = var8.append((com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter)var61);
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var71 = var70.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "BANG"+ "'", var26.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test110"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
    var3.disableThreads();
    var3.disableThreads();
    com.google.javascript.jscomp.CodingConvention var97 = var3.getCodingConvention();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test111"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isGetProp();
    com.google.javascript.rhino.Node var4 = var1.getLastSibling();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    boolean var8 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var6);
    int var9 = var6.getLength();
    boolean var10 = var6.isInstanceOf();
    boolean var11 = var6.isName();
    com.google.javascript.rhino.Node var12 = var4.useSourceInfoIfMissingFrom(var6);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var14.unregisterPropertyOnType("Unversioned directory", var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var21 = var20.getDependencies();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.block(var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var14.createFunctionTypeWithVarArgs(var18, var21);
    boolean var24 = var23.hasAnyTemplateInternal();
    java.lang.Iterable var25 = var23.getAllExtendedInterfaces();
    boolean var26 = var23.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    boolean var39 = var37.removeProperty("null(null)");
    var23.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var37);
    int var41 = var37.getExtendedInterfacesCount();
    java.util.Set var42 = var37.getOwnPropertyNames();
    var4.setDirectives(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test112"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isArrayLit();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var21 = var20.isGetterDef();
    var20.putIntProp((-1), 10);
    var14.addChildrenToFront(var20);
    boolean var26 = var14.isDec();
    var10.addChildToBack(var14);
    boolean var28 = var10.isDebugger();
    boolean var29 = var10.isOptionalArg();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test113"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    com.google.javascript.jscomp.CheckLevel var15 = null;
    var0.setReportMissingOverride(var15);
    var0.setNameAnonymousFunctionsOnly(true);
    var0.setPreferLineBreakAtEndOfFile(false);
    boolean var21 = var0.getInferTypes();
    var0.setUnaliasableGlobals("(). (InputId: ) at (unknown source) line (unknown line) : (unknown column)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test114() {}
//   public void test114() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test114"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
//     com.google.javascript.jscomp.SourceAst var5 = null;
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
//     com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
//     var1.add(var8);
//     com.google.javascript.jscomp.SourceAst var11 = var8.getAst();
//     java.lang.String var12 = var8.toString();
// 
//   }

  public void test115() {}
//   public void test115() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test115"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     java.io.PrintStream var5 = null;
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var8 = null;
//     var7.setStripTypes(var8);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var11 = var10.getDirectedGraphNodes();
//     java.util.List var12 = var10.getEdges();
//     var7.setManageClosureDependencies(var12);
//     com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var16 = var15.recordExpose();
//     boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var22.setJSType(var26);
//     com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
//     java.lang.String var29 = var28.getFileOverview();
//     java.util.Set var30 = var28.getModifies();
//     java.util.List var31 = var28.getImplementedInterfaces();
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var33 = null;
//     var32.setStripTypes(var33);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var36 = var35.getDirectedGraphNodes();
//     java.util.List var37 = var35.getEdges();
//     var32.setManageClosureDependencies(var37);
//     var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var32.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
//     var32.setSourceMapDetailLevel(var44);
//     var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
//     com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var49 = null;
//     var48.setStripTypes(var49);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var52 = var51.getDirectedGraphNodes();
//     java.util.List var53 = var51.getEdges();
//     var48.setManageClosureDependencies(var53);
//     boolean var55 = var48.isExternExportsEnabled();
//     var48.setCheckCaja(false);
//     var48.setRemoveUnusedPrototypeProperties(true);
//     var48.setRemoveClosureAsserts(false);
//     com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var64 = var63.recordExpose();
//     boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var71 = var70.getNext();
//     com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
//     com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     var70.setJSType(var74);
//     com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
//     java.util.Collection var77 = var76.getAuthors();
//     com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
//     var48.setSourceMapLocationMappings((java.util.List)var78);
//     com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var81 = null;
//     var80.setStripTypes(var81);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var84 = var83.getDirectedGraphNodes();
//     java.util.List var85 = var83.getEdges();
//     var80.setManageClosureDependencies(var85);
//     var80.setDevirtualizePrototypeMethods(true);
//     var80.setInlineLocalVariables(false);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
//     boolean var92 = var80.getInferTypes();
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
//     var80.setAliasKeywords(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var96 = null;
//     var80.setRemoveUnusedVariable(var96);
// 
//   }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test116"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    boolean var5 = var1.recordConsistentIdGenerator();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var9 = var7.getBooleanProp((-1));
    var7.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var13 = new com.google.javascript.rhino.JSTypeExpression(var7, "goog.abstractMethod");
    boolean var14 = var1.recordThrowType(var13);
    boolean var15 = var1.recordExterns();
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var17.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    var17.markText("(InputId: )", 100, 1, 3, 1);
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var30 = var28.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var31 = null;
    boolean var33 = var28.recordThrowDescription(var31, "()");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    boolean var40 = var37.isVarArgs();
    com.google.javascript.rhino.Node var42 = var37.getChildAtIndex(1);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    com.google.javascript.rhino.JSDocInfo var49 = var46.getJSDocInfo();
    com.google.javascript.rhino.Node var50 = var37.copyInformationFrom(var46);
    java.lang.Object var52 = null;
    var37.putProp(0, var52);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var37, "()");
    boolean var56 = var28.recordEnumParameterType(var55);
    boolean var57 = var17.recordImplementedInterface(var55);
    boolean var58 = var1.recordImplementedInterface(var55);
    boolean var59 = var1.recordConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test117"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     var1.setTypedPercent(10.0d);
//     double var5 = var1.getTypedPercent();
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSSourceFile var7 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var8 = new com.google.javascript.jscomp.JSSourceFile[] { var7};
//     com.google.javascript.jscomp.JSSourceFile var9 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var10 = new com.google.javascript.jscomp.JSSourceFile[] { var9};
//     com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var12 = null;
//     var11.setStripTypes(var12);
//     var11.setAliasKeywords(false);
//     boolean var16 = var11.shouldColorizeErrorOutput();
//     com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.warning("()", "(InputId: )");
//     com.google.javascript.jscomp.DiagnosticType var22 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var24 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var25 = com.google.javascript.jscomp.JSError.make(var22, var24);
//     com.google.javascript.jscomp.JSError var26 = com.google.javascript.jscomp.JSError.make(var19, var24);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.Node.newNumber(0.0d);
//     boolean var29 = var26.equals((java.lang.Object)var28);
//     com.google.javascript.jscomp.CompilerOptions var30 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var31 = null;
//     var30.setStripTypes(var31);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var34 = var33.getDirectedGraphNodes();
//     java.util.List var35 = var33.getEdges();
//     var30.setManageClosureDependencies(var35);
//     boolean var37 = var30.isExternExportsEnabled();
//     var30.setCollapsePropertiesOnExternTypes(false);
//     var30.setTransformAMDToCJSModules(false);
//     var30.setInlineConstantVars(true);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var44 = var30.getLanguageIn();
//     com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var46 = null;
//     var45.setStripTypes(var46);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var49 = var48.getDirectedGraphNodes();
//     java.util.List var50 = var48.getEdges();
//     var45.setManageClosureDependencies(var50);
//     var45.setDevirtualizePrototypeMethods(true);
//     var45.setInlineLocalVariables(false);
//     com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.CheckLevel var57 = null;
//     var56.setBrokenClosureRequiresLevel(var57);
//     var56.setLocale("");
//     var56.setLineBreak(false);
//     com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var64 = null;
//     var63.setStripTypes(var64);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var67 = var66.getDirectedGraphNodes();
//     java.util.List var68 = var66.getEdges();
//     var63.setManageClosureDependencies(var68);
//     boolean var70 = var63.isExternExportsEnabled();
//     var63.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var77 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var75, var77);
//     int var79 = var78.getCharno();
//     com.google.javascript.jscomp.CheckLevel var80 = var78.getDefaultLevel();
//     var63.setReportUnknownTypes(var80);
//     var56.setBrokenClosureRequiresLevel(var80);
//     var45.setCheckUnreachableCode(var80);
//     var30.setReportUnknownTypes(var80);
//     com.google.javascript.jscomp.Compiler var85 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var86 = var85.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var87 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var85);
//     com.google.javascript.jscomp.ErrorManager var88 = var85.getErrorManager();
//     com.google.javascript.jscomp.LightweightMessageFormatter var89 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var85);
//     java.lang.String var90 = var26.format(var80, (com.google.javascript.jscomp.MessageFormatter)var89);
//     var11.setCheckUnreachableCode(var80);
//     var6.init(var8, var10, var11);
// 
//   }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test118"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    boolean var16 = var6.hasScope();
    com.google.javascript.rhino.Node var17 = var6.getEnclosingFunction();
    com.google.javascript.jscomp.Compiler var18 = var6.getCompiler();
    com.google.javascript.jscomp.Compiler var19 = var6.getCompiler();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    int var24 = var22.getSourceOffset();
    com.google.javascript.rhino.Node var25 = var22.cloneNode();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    int var29 = var27.getSourceOffset();
    boolean var30 = var27.isAssignAdd();
    int var31 = var25.getIndexOfChild(var27);
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.InputId var35 = var33.getInputId();
    com.google.javascript.rhino.Node var36 = var25.useSourceInfoFrom(var33);
    int var37 = var25.getChildCount();
    com.google.javascript.rhino.Node[] var38 = new com.google.javascript.rhino.Node[] { var25};
    com.google.javascript.rhino.Node var39 = new com.google.javascript.rhino.Node((-1), var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.traverseRoots(var38);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test119"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isOverride();
    boolean var18 = var14.isNoTypeCheck();
    java.lang.String var19 = var14.getReturnDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test120"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    var0.popEdgeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test121"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("Unversioned directory");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test122"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    java.util.Set var14 = var10.getOwnPropertyNames();
    var10.clearCachedValues();
    com.google.javascript.rhino.jstype.ObjectType var16 = var10.getPrototype();
    java.util.List var17 = var10.getSubTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test123"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var3 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     var4.unregisterPropertyOnType("Unversioned directory", var6);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getDependencies();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.block(var11);
//     com.google.javascript.rhino.jstype.FunctionType var13 = var4.createFunctionTypeWithVarArgs(var8, var11);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var16 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var15);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = var20.getNext();
//     com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
//     boolean var23 = var20.isVarArgs();
//     com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
//     com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
//     java.lang.Object var35 = null;
//     var20.putProp(0, var35);
//     com.google.javascript.rhino.JSTypeExpression var38 = new com.google.javascript.rhino.JSTypeExpression(var20, "()");
//     com.google.javascript.rhino.jstype.StaticScope var39 = null;
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     var41.unregisterPropertyOnType("Unversioned directory", var43);
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
//     com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
//     com.google.javascript.rhino.jstype.JSType var51 = var38.evaluate(var39, var41);
//     boolean var52 = var16.addVarArgs(var51);
//     boolean var53 = var51.isEnumElementType();
//     com.google.javascript.rhino.ErrorReporter var54 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     var55.unregisterPropertyOnType("Unversioned directory", var57);
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
//     com.google.javascript.rhino.jstype.JSType var62 = null;
//     com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
//     com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
//     com.google.javascript.rhino.jstype.FunctionType var65 = var4.createConstructorType(var51, var63);
//     com.google.javascript.rhino.jstype.JSType var67 = var65.getPropertyType("");
//     boolean var68 = var1.declareType("(module$2014$12$24 11:10)", var67);
//     com.google.javascript.rhino.jstype.JSType var73 = var1.createNamedType("module$", "()", (-1), 154);
//     com.google.javascript.rhino.ErrorReporter var74 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var76 = null;
//     var75.setResolveMode(var76);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var78 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var75);
//     com.google.javascript.rhino.jstype.ObjectType var79 = var75.createAnonymousObjectType();
//     com.google.javascript.rhino.jstype.EnumElementType var80 = var79.toMaybeEnumElementType();
//     boolean var81 = var79.isEnumElementType();
//     com.google.javascript.rhino.jstype.JSType var82 = null;
//     com.google.javascript.rhino.jstype.ParameterizedType var83 = var1.createParameterizedType(var79, var82);
//     com.google.javascript.rhino.jstype.ParameterizedType var84 = var83.toMaybeParameterizedType();
//     com.google.javascript.rhino.jstype.Visitor var85 = null;
//     java.lang.Object var86 = var83.visit(var85);
// 
//   }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test124"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.Node var73 = var69.getParametersNode();
    boolean var74 = var69.isNativeObjectType();
    com.google.common.collect.ImmutableList var75 = var69.getTemplateTypeNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test125"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, true);
    com.google.javascript.rhino.jstype.JSType var4 = var2.getType("");
    com.google.javascript.rhino.jstype.FunctionBuilder var5 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
    com.google.javascript.jscomp.ClosureCodingConvention var7 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var8 = null;
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    boolean var15 = var12.isOr();
    java.lang.String var16 = var7.extractClassNameIfRequire(var8, var12);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var18.createFunctionTypeWithVarArgs(var22, var25);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var36 = var35.getDependencies();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.block(var36);
    com.google.javascript.rhino.jstype.FunctionType var38 = var29.createFunctionTypeWithVarArgs(var33, var36);
    boolean var39 = var38.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.lang.Iterable var42 = var40.getDirectedGraphNodes();
    java.util.List var43 = var40.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var44 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var45 = null;
    var44.setStripTypes(var45);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var47 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var48 = var47.getDirectedGraphNodes();
    java.util.List var49 = var47.getEdges();
    var44.setManageClosureDependencies(var49);
    boolean var51 = var44.isExternExportsEnabled();
    var44.setCheckCaja(false);
    java.util.Set var54 = null;
    var44.setReplaceStringsReservedStrings(var54);
    var44.setAliasAllStrings(true);
    var44.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var60 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var61 = null;
    var60.setStripTypes(var61);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var63 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var64 = var63.getDirectedGraphNodes();
    java.util.List var65 = var63.getEdges();
    var60.setManageClosureDependencies(var65);
    boolean var67 = var60.isExternExportsEnabled();
    var60.setCheckCaja(false);
    var60.setGroupVariableDeclarations(true);
    java.util.Map var72 = var60.getDefineReplacements();
    var44.setPropertyInvalidationErrors(var72);
    var7.defineDelegateProxyPrototypeProperties(var18, (com.google.javascript.rhino.jstype.StaticScope)var38, var43, var72);
    boolean var75 = var38.canBeCalled();
    boolean var76 = var38.hasAnyTemplateInternal();
    var38.clearResolved();
    boolean var78 = var38.isReturnTypeInferred();
    boolean var79 = var38.canBeCalled();
    boolean var80 = var38.matchesUint32Context();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.overwriteDeclaredType("STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test126"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    com.google.javascript.rhino.Node var14 = var9.getChildAtIndex(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.JSDocInfo var21 = var18.getJSDocInfo();
    com.google.javascript.rhino.Node var22 = var9.copyInformationFrom(var18);
    java.lang.Object var24 = null;
    var9.putProp(0, var24);
    com.google.javascript.rhino.JSTypeExpression var27 = new com.google.javascript.rhino.JSTypeExpression(var9, "()");
    com.google.javascript.rhino.jstype.StaticScope var28 = null;
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var30.unregisterPropertyOnType("Unversioned directory", var32);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    boolean var36 = var30.canPropertyBeDefined(var34, "BANG");
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.Node var39 = var30.createParameters(var38);
    com.google.javascript.rhino.jstype.JSType var40 = var27.evaluate(var28, var30);
    com.google.javascript.rhino.jstype.JSType var41 = var40.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var42 = var41.dereference();
    java.util.Collection var43 = var1.getDirectImplementors(var42);
    com.google.javascript.rhino.ErrorReporter var44 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    boolean var59 = var56.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var61 = var56.getOwnSlot("(LABEL_NAME hi!)");
    boolean var62 = var56.isEnumElementType();
    boolean var63 = var56.isEnumElementType();
    boolean var65 = var56.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var66 = var56.isNoObjectType();
    java.lang.Iterable var67 = var56.getOwnImplementedInterfaces();
    var1.unregisterPropertyOnType("hi", (com.google.javascript.rhino.jstype.JSType)var56);
    boolean var69 = var56.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test127"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var16.isFunction();
    boolean var18 = var16.isFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test128"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var38 = var34.getBooleanProp(100);
    int var39 = var34.getSideEffectFlags();
    java.lang.String var40 = var0.extractClassNameIfProvide(var24, var34);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var41 = var34.getJsDocBuilderForNode();
    var34.putBooleanProp(3, true);
    com.google.javascript.rhino.Node var45 = var34.removeChildren();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test129"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.util.List var23 = var0.getGraphvizNodes();
    com.google.javascript.jscomp.graph.SubGraph var24 = var0.newSubGraph();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    int var29 = var27.getSourceOffset();
    com.google.javascript.rhino.Node var30 = var27.cloneNode();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    int var34 = var32.getSourceOffset();
    boolean var35 = var32.isAssignAdd();
    int var36 = var30.getIndexOfChild(var32);
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.InputId var40 = var38.getInputId();
    com.google.javascript.rhino.Node var41 = var30.useSourceInfoFrom(var38);
    int var42 = var30.getChildCount();
    com.google.javascript.rhino.Node[] var43 = new com.google.javascript.rhino.Node[] { var30};
    com.google.javascript.rhino.Node var44 = new com.google.javascript.rhino.Node((-1), var43);
    var44.detachChildren();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var46 = var0.getNodeDegree((java.lang.Object)var44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test130() {}
//   public void test130() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test130"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var1 = var0.getDirectedGraphNodes();
//     java.lang.Iterable var2 = var0.getDirectedGraphNodes();
//     var0.pushEdgeAnnotations();
//     java.lang.String var4 = var0.getName();
//     java.lang.Object var5 = null;
//     java.util.List var6 = var0.getNeighborNodes(var5);
// 
//   }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test131"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.lang.String var17 = var14.getDescription();
    boolean var18 = var14.isNoCompile();
    boolean var19 = var14.isDeprecated();
    boolean var20 = var14.isNoSideEffects();
    java.lang.String var21 = var14.getLicense();
    java.util.Collection var22 = var14.getReferences();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test132"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var10 = var9.isGetterDef();
    var9.putIntProp((-1), 10);
    var3.addChildrenToFront(var9);
    boolean var15 = var9.isNot();
    int var16 = var9.getSideEffectFlags();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var18.createFunctionTypeWithVarArgs(var22, var25);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var30 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.Object var49 = null;
    var34.putProp(0, var49);
    com.google.javascript.rhino.JSTypeExpression var52 = new com.google.javascript.rhino.JSTypeExpression(var34, "()");
    com.google.javascript.rhino.jstype.StaticScope var53 = null;
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.JSType var65 = var52.evaluate(var53, var55);
    boolean var66 = var30.addVarArgs(var65);
    boolean var67 = var65.isEnumElementType();
    boolean var68 = var65.isNullable();
    boolean var69 = var65.matchesNumberContext();
    boolean var70 = var27.differsFrom(var65);
    var9.setJSType((com.google.javascript.rhino.jstype.JSType)var27);
    boolean var72 = var27.isCheckedUnknownType();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var73 = var27.getPossibleToBooleanOutcomes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var74 = var27.getSuperClassConstructor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test133"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    com.google.javascript.rhino.JSDocInfoBuilder var22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var23 = var22.recordExpose();
    boolean var25 = var22.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.InputId var32 = com.google.javascript.jscomp.NodeUtil.getInputId(var29);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var29.setJSType(var33);
    com.google.javascript.rhino.JSDocInfo var35 = var22.build(var29);
    java.lang.String var36 = var35.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var37 = var35.getType();
    java.util.Set var38 = var35.getSuppressions();
    var0.setStripTypePrefixes(var38);
    var0.setRewriteFunctionExpressions(false);
    var0.setDeadAssignmentElimination(true);
    var0.setProcessCommonJSModules(false);
    var0.setIdeMode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test134"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    int var25 = var1.getDepth();
    com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var27 = var26.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
    com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
    var1.sortInputsByDeps(var26);
    com.google.javascript.jscomp.CodingConvention var31 = var26.getCodingConvention();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var32 = var26.languageMode();
    java.lang.String var33 = var26.getAstDotGraph();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test135"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = var26.removeFirstChild();
    var29.setQuotedString();
    boolean var31 = var0.hasNode((java.lang.Object)var29);
    java.util.Set var32 = var29.getDirectives();
    com.google.javascript.rhino.Node.AncestorIterable var33 = var29.getAncestors();
    var29.setCharno(153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test136"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.script(var12);
    var6.traverseRoots(var12);
    boolean var16 = var6.hasScope();
    com.google.javascript.rhino.Node var17 = var6.getEnclosingFunction();
    com.google.javascript.jscomp.Compiler var18 = var6.getCompiler();
    com.google.javascript.jscomp.Compiler var19 = var6.getCompiler();
    com.google.javascript.jscomp.Compiler.IntermediateState var20 = var19.getState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test137() {}
//   public void test137() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test137"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
//     com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
//     com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
//     double var9 = var3.getProgress();
//     com.google.javascript.jscomp.type.ReverseAbstractInterpreter var10 = var3.getReverseAbstractInterpreter();
// 
//   }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test138"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    com.google.javascript.rhino.jstype.ObjectType var80 = var73.getImplicitPrototype();
    com.google.javascript.rhino.jstype.ObjectType var81 = var73.getImplicitPrototype();
    boolean var82 = var73.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType var83 = var73.getImplicitPrototype();
    java.util.Set var84 = var73.getElements();
    boolean var85 = var73.isCheckedUnknownType();
    com.google.javascript.rhino.Node var86 = var73.getSource();
    boolean var87 = var73.matchesStringContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test139"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
    com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
    com.google.javascript.jscomp.JSModule var5 = null;
    var3.setModule(var5);
    com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
    com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
    com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var11 = var10.getDependencies();
    com.google.javascript.jscomp.SourceAst var12 = null;
    com.google.javascript.rhino.InputId var13 = null;
    com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12, var13, true);
    com.google.javascript.jscomp.JSModule var16 = var15.getModule();
    var10.add(var15);
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromFile("()");
    var10.addFirst(var19);
    java.util.Set var21 = var10.getAllDependencies();
    var10.removeAll();
    com.google.javascript.jscomp.SourceAst var23 = null;
    com.google.javascript.rhino.InputId var24 = null;
    com.google.javascript.jscomp.CompilerInput var26 = new com.google.javascript.jscomp.CompilerInput(var23, var24, true);
    com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var23, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var10.addFirst(var29);
    com.google.javascript.jscomp.SourceAst var31 = null;
    com.google.javascript.rhino.InputId var32 = null;
    com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31, var32, true);
    com.google.javascript.jscomp.SourceAst var35 = var34.getAst();
    com.google.javascript.jscomp.JSModule var36 = null;
    var34.setModule(var36);
    var10.add(var34);
    var3.setModule(var10);
    com.google.javascript.jscomp.SourceFile var43 = com.google.javascript.jscomp.SourceFile.fromCode("2014/12/24 11:10", "null(null)", "STRING hi 0 [length: 2]\n");
    var10.add(var43);
    var10.setDepth(154);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test140"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isEmptyType();
    com.google.javascript.rhino.Node var95 = var32.getParametersNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test141"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setDefineToBooleanLiteral("BANG", false);
    var0.setInlineGetters(false);
    boolean var17 = var0.isExternExportsEnabled();
    var0.setInlineFunctions(false);
    var0.setFoldConstants(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test142"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isVarArgs();
    com.google.javascript.rhino.Node var10 = var5.getChildAtIndex(1);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    com.google.javascript.rhino.JSDocInfo var17 = var14.getJSDocInfo();
    com.google.javascript.rhino.Node var18 = var5.copyInformationFrom(var14);
    com.google.javascript.rhino.Node[] var19 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node((-1), var19, 10, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var25 = new com.google.javascript.rhino.Node(1, var19, 154, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test143"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
//     var1.setResolveMode(var2);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.rhino.jstype.ObjectType var5 = var1.createAnonymousObjectType();
//     com.google.javascript.rhino.jstype.EnumElementType var6 = var5.toMaybeEnumElementType();
//     boolean var7 = var5.isEnumElementType();
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSType var11 = null;
//     var9.unregisterPropertyOnType("Unversioned directory", var11);
//     var9.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = var19.getNext();
//     com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
//     boolean var22 = var19.isVarArgs();
//     boolean var23 = var19.isFor();
//     boolean var24 = var19.isNumber();
//     com.google.javascript.rhino.Node var25 = var19.getNext();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     boolean var32 = var29.isVarArgs();
//     com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = var38.getNext();
//     com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
//     com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
//     com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
//     java.lang.Object var44 = null;
//     var29.putProp(0, var44);
//     com.google.javascript.rhino.JSTypeExpression var47 = new com.google.javascript.rhino.JSTypeExpression(var29, "()");
//     com.google.javascript.rhino.jstype.StaticScope var48 = null;
//     com.google.javascript.rhino.ErrorReporter var49 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
//     com.google.javascript.rhino.jstype.JSType var52 = null;
//     var50.unregisterPropertyOnType("Unversioned directory", var52);
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     boolean var56 = var50.canPropertyBeDefined(var54, "BANG");
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var57};
//     com.google.javascript.rhino.Node var59 = var50.createParameters(var58);
//     com.google.javascript.rhino.jstype.JSType var60 = var47.evaluate(var48, var50);
//     com.google.javascript.rhino.jstype.JSType var61 = var60.restrictByNotNullOrUndefined();
//     com.google.javascript.rhino.jstype.ObjectType var62 = var61.dereference();
//     boolean var63 = var61.isConstructor();
//     com.google.javascript.rhino.jstype.EnumType var64 = var9.createEnumType("STRING hi 0 [length: 2]\n", var19, var61);
//     boolean var65 = var64.matchesStringContext();
//     com.google.javascript.rhino.ErrorReporter var66 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
//     com.google.javascript.rhino.jstype.JSType var69 = null;
//     var67.unregisterPropertyOnType("Unversioned directory", var69);
//     com.google.javascript.rhino.jstype.JSType var71 = null;
//     com.google.javascript.jscomp.JSModule var73 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var74 = var73.getDependencies();
//     com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.block(var74);
//     com.google.javascript.rhino.jstype.FunctionType var76 = var67.createFunctionTypeWithVarArgs(var71, var74);
//     boolean var77 = var76.hasAnyTemplateInternal();
//     com.google.javascript.rhino.jstype.JSType.TypePair var78 = var64.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var76);
//     boolean var80 = var64.isPropertyInExterns("goog.exportSymbol");
//     com.google.javascript.rhino.jstype.EnumType var81 = var64.toMaybeEnumType();
//     com.google.javascript.rhino.jstype.JSType.TypePair var82 = var5.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType)var81);
//     boolean var83 = var81.isEnumType();
//     com.google.javascript.rhino.jstype.Visitor var84 = null;
//     java.lang.Object var85 = var81.visit(var84);
// 
//   }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test144"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("(LABEL_NAME hi!)");
    com.google.javascript.rhino.jstype.StaticSourceFile var2 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test145"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    int var2 = var1.getErrorCount();
    var1.setTypedPercent(10.0d);
    double var5 = var1.getTypedPercent();
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    var1.setTypedPercent(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10.0d);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test146"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getProvides();
    java.util.List var3 = var1.getRequires();
    com.google.javascript.jscomp.SourceAst var4 = null;
    com.google.javascript.rhino.InputId var5 = null;
    com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
    com.google.javascript.jscomp.JSModule var8 = var7.getModule();
    var1.addFirst(var7);
    var1.removeAll();
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    var1.addDependency(var12);
    com.google.javascript.jscomp.CompilerInput var16 = var1.getByName("function (): {2142004661}");
    java.util.List var17 = var1.getProvides();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test147"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.matchesNumberContext();
    com.google.javascript.rhino.jstype.FunctionType var66 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var62);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var69 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = var73.getNext();
    boolean var75 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var73);
    int var76 = var73.getLength();
    com.google.javascript.rhino.Node var77 = null;
    boolean var78 = var73.hasChild(var77);
    com.google.javascript.rhino.Node var79 = var71.useSourceInfoIfMissingFromForTree(var73);
    com.google.javascript.jscomp.CodingConvention.Bind var81 = var69.describeFunctionBind(var71, false);
    int var82 = var71.getSourcePosition();
    boolean var83 = var66.defineSynthesizedProperty("function (): {540092593}", var68, var71);
    boolean var84 = var66.isConstructor();
    boolean var85 = var66.hasReferenceName();
    java.lang.Iterable var86 = var66.getImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test148"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var9.isInc();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    boolean var13 = var12.isReturn();
    java.lang.String var14 = var9.checkTreeEquals(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    java.util.List var32 = var29.getImplementedInterfaces();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.block(var32);
    boolean var34 = var33.isFalse();
    boolean var35 = var33.isHook();
    com.google.javascript.rhino.Node var36 = var9.srcref(var33);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    boolean var45 = var41.isOptionalArg();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var47 = new com.google.javascript.rhino.Node(0, var41, var46);
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    boolean var54 = var49.isString();
    com.google.javascript.rhino.Node var55 = var47.useSourceInfoFromForTree(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = var60.getNext();
    int var62 = var60.getSourceOffset();
    com.google.javascript.rhino.Node var63 = var60.removeFirstChild();
    com.google.javascript.jscomp.graph.GraphNode var64 = var56.getNode((java.lang.Object)var60);
    boolean var65 = var49.hasChild(var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.sub(var9, var49);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test149"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var6 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var7 = var6.getDependencies();
//     var6.removeAll();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     var10.removeAll();
//     var6.addDependency(var10);
//     var3.setModule(var6);
//     int var15 = var3.getLineOffset(2147483647);
// 
//   }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test150"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    boolean var35 = var29.isAllType();
    com.google.javascript.rhino.jstype.ObjectType var36 = var29.getTypeOfThis();
    com.google.javascript.rhino.jstype.JSType var37 = var36.getIndexType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test151"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    boolean var18 = var14.isConstructor();
    com.google.javascript.rhino.JSTypeExpression var19 = var14.getBaseType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test152"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, false);
    com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var22 = var18.getType();
    boolean var23 = var18.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var24 = null;
    var18.setVisibility(var24);
    com.google.javascript.rhino.Node var26 = var18.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var27 = var3.getClassesDefinedByCall(var26);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.jscomp.JSModule var35 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var36 = var35.getDependencies();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.block(var36);
    com.google.javascript.rhino.jstype.FunctionType var38 = var29.createFunctionTypeWithVarArgs(var33, var36);
    boolean var39 = var38.hasAnyTemplateInternal();
    java.lang.Iterable var40 = var38.getAllExtendedInterfaces();
    boolean var41 = var38.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var43 = var38.getOwnSlot("(LABEL_NAME hi!)");
    boolean var44 = var38.isEnumElementType();
    boolean var45 = var38.isEnumElementType();
    boolean var47 = var38.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var38.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    var50.unregisterPropertyOnType("Unversioned directory", var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.block(var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var50.createFunctionTypeWithVarArgs(var54, var57);
    boolean var60 = var59.hasAnyTemplateInternal();
    java.lang.Iterable var61 = var59.getAllExtendedInterfaces();
    java.lang.Iterable var62 = var59.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var63 = null;
    var3.applySubclassRelationship(var38, var59, var63);
    boolean var65 = var38.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var66 = var2.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var38);
    com.google.javascript.rhino.jstype.EnumType var67 = var38.toMaybeEnumType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test153"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.jscomp.ClosureCodingConvention var34 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    boolean var40 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var38);
    int var41 = var38.getLength();
    com.google.javascript.rhino.Node var42 = null;
    boolean var43 = var38.hasChild(var42);
    com.google.javascript.rhino.Node var44 = var36.useSourceInfoIfMissingFromForTree(var38);
    com.google.javascript.jscomp.CodingConvention.Bind var46 = var34.describeFunctionBind(var36, false);
    java.lang.String var47 = var34.getExportPropertyFunction();
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.JSDocInfo var54 = var51.getJSDocInfo();
    boolean var55 = var51.isSwitch();
    boolean var56 = var51.isSyntheticBlock();
    boolean var57 = var51.isNumber();
    boolean var58 = var34.isPrototypeAlias(var51);
    boolean var59 = var51.isName();
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = var63.getNext();
    com.google.javascript.rhino.Node var65 = var61.srcrefTree(var63);
    boolean var66 = var63.isVarArgs();
    com.google.javascript.rhino.Node var68 = var63.getChildAtIndex(1);
    java.util.Collection var69 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var63);
    com.google.javascript.rhino.Node var71 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = var73.getNext();
    com.google.javascript.rhino.Node var75 = var71.srcrefTree(var73);
    boolean var77 = var73.getBooleanProp(100);
    int var78 = var73.getSideEffectFlags();
    boolean var79 = var73.isDefaultCase();
    com.google.javascript.rhino.jstype.JSType var80 = null;
    var73.setJSType(var80);
    boolean var82 = var63.isEquivalentTo(var73);
    boolean var83 = var73.isNot();
    java.lang.String var84 = var33.extractClassNameIfRequire(var51, var73);
    boolean var85 = var51.isNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "goog.exportProperty"+ "'", var47.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test154"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    com.google.javascript.jscomp.CompilerOptions var90 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var91 = null;
    var90.setStripTypes(var91);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var93 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var94 = var93.getDirectedGraphNodes();
    java.util.List var95 = var93.getEdges();
    var90.setManageClosureDependencies(var95);
    com.google.javascript.jscomp.ComposeWarningsGuard var97 = new com.google.javascript.jscomp.ComposeWarningsGuard(var95);
    var48.setImplementedInterfaces(var95);
    boolean var99 = var48.matchesUint32Context();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test155"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.disableRuntimeTypeCheck();
    var0.setInferTypes(false);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test156"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isEnumElementType();
    boolean var61 = var58.matchesStringContext();
    boolean var62 = var58.isRecordType();
    boolean var63 = var58.isNullable();
    com.google.javascript.rhino.jstype.JSType var64 = var58.autoboxesTo();
    boolean var65 = var58.canBeCalled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test157"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getMeaning();
    boolean var18 = var14.hasBaseType();
    int var19 = var14.getImplementedInterfaceCount();
    java.util.List var20 = var14.getThrownTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test158"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearNodeAnnotations();
    var0.clearEdgeAnnotations();
    java.lang.Object var3 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var4 = var0.getOutEdges(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test159"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    int var3 = var1.getDepth();
    var1.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var8 = var6.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var10 = null;
    boolean var11 = var6.recordParameter("Unversioned directory", var10);
    com.google.javascript.rhino.JSTypeExpression var12 = null;
    boolean var14 = var6.recordThrowDescription(var12, "");
    com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
    java.io.Reader var23 = var19.getCodeReader();
    var1.add(var19);
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    var1.addDependency(var26);
    com.google.javascript.jscomp.CompilerInput var29 = null;
    com.google.javascript.jscomp.SourceAst var30 = null;
    com.google.javascript.rhino.InputId var31 = null;
    com.google.javascript.jscomp.CompilerInput var33 = new com.google.javascript.jscomp.CompilerInput(var30, var31, true);
    com.google.javascript.jscomp.SourceAst var34 = var33.getAst();
    com.google.javascript.jscomp.JSModule var35 = null;
    var33.setModule(var35);
    com.google.javascript.jscomp.SourceAst var37 = var33.getSourceAst();
    com.google.javascript.jscomp.JSModule var38 = null;
    var33.setModule(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addAfter(var29, var33);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test160"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasCachedValues();
    java.util.Set var12 = var10.getPropertyNames();
    boolean var13 = var10.canBeCalled();
    java.lang.Iterable var14 = var10.getAllImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test161"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isObject();
    boolean var61 = var58.isInstanceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test162() {}
//   public void test162() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test162"); }
// 
// 
//     com.google.javascript.rhino.Node[] var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.arraylit(var0);
// 
//   }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test163"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    var9.removeAll();
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var13.removeAll();
    var9.addDependency(var13);
    java.util.List var16 = var9.getInputs();
    var0.setReplaceStringsConfiguration("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", var16);
    com.google.javascript.jscomp.deps.SortedDependencies var18 = new com.google.javascript.jscomp.deps.SortedDependencies(var16);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.lang.String var34 = var33.getFileOverview();
    java.util.Set var35 = var33.getModifies();
    java.lang.String var36 = var33.getDescription();
    boolean var37 = var33.isExpose();
    java.util.List var38 = var33.getThrownTypes();
    java.util.List var40 = var18.getDependenciesOf(var38, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test164"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    com.google.javascript.jscomp.CompilerOptions.TracerMode var15 = var0.getTracerMode();
    var0.setSkipAllPasses(false);
    com.google.javascript.jscomp.SourceMap.DetailLevel var18 = null;
    var0.setSourceMapDetailLevel(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test165() {}
//   public void test165() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test165"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var5);
//     java.lang.String var8 = var7.toString();
//     com.google.javascript.jscomp.CheckLevel var10 = null;
//     com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var10, "Unversioned directory");
//     com.google.javascript.jscomp.DiagnosticType[] var13 = new com.google.javascript.jscomp.DiagnosticType[] { var12};
//     com.google.javascript.jscomp.DiagnosticGroup var14 = new com.google.javascript.jscomp.DiagnosticGroup(var13);
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var16 = null;
//     var15.setStripTypes(var16);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var19 = var18.getDirectedGraphNodes();
//     java.util.List var20 = var18.getEdges();
//     var15.setManageClosureDependencies(var20);
//     boolean var22 = var15.isExternExportsEnabled();
//     var15.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var27 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var29 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var30 = com.google.javascript.jscomp.JSError.make(var27, var29);
//     int var31 = var30.getCharno();
//     com.google.javascript.jscomp.CheckLevel var32 = var30.getDefaultLevel();
//     var15.setReportUnknownTypes(var32);
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var34 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var14, var32);
//     com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var39 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make(var37, var39);
//     com.google.javascript.jscomp.CheckLevel var41 = var34.level(var40);
//     com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     var42.setBrokenClosureRequiresLevel(var43);
//     var42.setLocale("");
//     var42.setLineBreak(false);
//     com.google.javascript.jscomp.CompilerOptions var49 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var50 = null;
//     var49.setStripTypes(var50);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var52 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var53 = var52.getDirectedGraphNodes();
//     java.util.List var54 = var52.getEdges();
//     var49.setManageClosureDependencies(var54);
//     boolean var56 = var49.isExternExportsEnabled();
//     var49.setCollapsePropertiesOnExternTypes(false);
//     com.google.javascript.jscomp.DiagnosticType var61 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var63 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var64 = com.google.javascript.jscomp.JSError.make(var61, var63);
//     int var65 = var64.getCharno();
//     com.google.javascript.jscomp.CheckLevel var66 = var64.getDefaultLevel();
//     var49.setReportUnknownTypes(var66);
//     var42.setBrokenClosureRequiresLevel(var66);
//     int var69 = var66.ordinal();
//     com.google.javascript.jscomp.Compiler var70 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var71 = var70.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var72 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var70);
//     com.google.javascript.jscomp.LightweightMessageFormatter var73 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var70);
//     var73.setColorize(false);
//     java.lang.String var76 = var40.format(var66, (com.google.javascript.jscomp.MessageFormatter)var73);
//     int var77 = var40.getNodeSourceOffset();
//     com.google.javascript.jscomp.CheckLevel var78 = var7.level(var40);
//     com.google.javascript.jscomp.DiagnosticType var79 = var40.getType();
//     com.google.javascript.jscomp.CheckLevel var80 = null;
//     com.google.javascript.jscomp.MessageFormatter var81 = null;
//     java.util.logging.Logger var82 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var83 = new com.google.javascript.jscomp.LoggerErrorManager(var81, var82);
//     com.google.javascript.jscomp.Compiler var84 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var83);
//     com.google.javascript.jscomp.Scope var85 = var84.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var86 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var87 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var84, var86);
//     java.lang.String var88 = var40.format(var80, (com.google.javascript.jscomp.MessageFormatter)var87);
// 
//   }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test166"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var2 = var0.hasNode((java.lang.Object)1);
    java.util.List var3 = var0.getGraphvizEdges();
    java.lang.Iterable var4 = var0.getDirectedGraphNodes();
    com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var6 = var5.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    boolean var9 = var0.hasNode((java.lang.Object)var5);
    double var10 = var5.getProgress();
    com.google.javascript.jscomp.ErrorManager var11 = var5.getErrorManager();
    com.google.javascript.jscomp.JSError[] var12 = var5.getWarnings();
    com.google.javascript.jscomp.JSError[] var13 = var5.getWarnings();
    boolean var14 = var5.acceptEcmaScript5();
    com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var15 = null;
    com.google.javascript.jscomp.LightweightMessageFormatter var16 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5, var15);
    com.google.javascript.jscomp.LightweightMessageFormatter var17 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
    java.util.logging.Logger var18 = null;
    com.google.javascript.jscomp.LoggerErrorManager var19 = new com.google.javascript.jscomp.LoggerErrorManager((com.google.javascript.jscomp.MessageFormatter)var17, var18);
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var23 = new com.google.javascript.jscomp.ComposeWarningsGuard(var22);
    com.google.javascript.jscomp.Compiler var24 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var25 = var24.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var26 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var24);
    com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var31 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make(var29, var31);
    int var33 = var32.getCharno();
    com.google.javascript.jscomp.CheckLevel var34 = var32.getDefaultLevel();
    java.lang.String var35 = var26.formatError(var32);
    com.google.javascript.jscomp.CheckLevel var36 = var23.level(var32);
    com.google.javascript.jscomp.CheckLevel var37 = var32.getDefaultLevel();
    java.lang.String var38 = var17.formatError(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var35.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var38.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test167"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setAliasKeywords(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var5 = null;
    var0.setAliasTransformationHandler(var5);
    var0.setChainCalls(false);
    var0.setExternExports(false);
    var0.disableRuntimeTypeCheck();
    java.util.Set var12 = null;
    var0.setAliasableStrings(var12);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test168"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var7 = var6.hasOneChild();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    boolean var13 = var12.isArrayLit();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isOptionalArg();
    com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(0, var6, var11, var12, var17, 1, 100);
    java.lang.String var25 = var0.getSingletonGetterClassName(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    boolean var33 = var29.isArrayLit();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var36 = var35.isGetterDef();
    var35.putIntProp((-1), 10);
    var29.addChildrenToFront(var35);
    boolean var41 = var35.isNot();
    int var42 = var35.getSideEffectFlags();
    boolean var43 = var35.isAdd();
    com.google.javascript.jscomp.CodingConvention.Bind var45 = var0.describeFunctionBind(var35, true);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    int var50 = var48.getSourceOffset();
    com.google.javascript.rhino.Node var51 = var48.removeFirstChild();
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    boolean var57 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var55);
    int var58 = var55.getLength();
    com.google.javascript.rhino.Node var59 = null;
    boolean var60 = var55.hasChild(var59);
    com.google.javascript.rhino.Node var61 = var53.useSourceInfoIfMissingFromForTree(var55);
    var55.setSourceFileForTesting("Unversioned directory");
    boolean var64 = var55.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var65 = var55.getStaticSourceFile();
    com.google.javascript.rhino.Node var66 = var48.srcref(var55);
    com.google.javascript.rhino.Node var67 = new com.google.javascript.rhino.Node(10, var66);
    boolean var68 = var66.isOr();
    java.lang.String var69 = var66.getQualifiedName();
    com.google.javascript.rhino.Node[] var70 = new com.google.javascript.rhino.Node[] { var66};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.switchNode(var35, var70);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test169"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.block(var26);
    com.google.javascript.rhino.Node var43 = var42.cloneNode();
    boolean var44 = var43.isDefaultCase();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test170"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var2 = var1.recordExpose();
//     boolean var3 = var1.recordExterns();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = var7.getNext();
//     com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
//     boolean var10 = var7.isVarArgs();
//     boolean var11 = var7.isArrayLit();
//     com.google.javascript.rhino.Node var12 = var7.getNext();
//     var1.markTypeNode(var7, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var23 = var22.getNext();
//     com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
//     boolean var25 = var22.isVarArgs();
//     com.google.javascript.rhino.Node var27 = var22.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = var31.getNext();
//     com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
//     com.google.javascript.rhino.JSDocInfo var34 = var31.getJSDocInfo();
//     com.google.javascript.rhino.Node var35 = var22.copyInformationFrom(var31);
//     java.lang.Object var37 = null;
//     var22.putProp(0, var37);
//     com.google.javascript.rhino.JSTypeExpression var40 = new com.google.javascript.rhino.JSTypeExpression(var22, "()");
//     com.google.javascript.rhino.JSTypeExpression var41 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var40);
//     boolean var42 = var1.recordBaseType(var40);
//     com.google.javascript.jscomp.MessageFormatter var43 = null;
//     java.util.logging.Logger var44 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var45 = new com.google.javascript.jscomp.LoggerErrorManager(var43, var44);
//     com.google.javascript.jscomp.Compiler var46 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var45);
//     boolean var47 = var40.equals((java.lang.Object)var46);
//     java.lang.String var48 = var46.getAstDotGraph();
//     com.google.javascript.jscomp.Compiler var49 = new com.google.javascript.jscomp.Compiler();
//     var49.reportCodeChange();
//     com.google.javascript.jscomp.Compiler.IntermediateState var51 = var49.getState();
//     var46.setState(var51);
//     com.google.javascript.jscomp.Compiler.CodeBuilder var53 = null;
//     com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var60 = var59.getNext();
//     com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
//     boolean var62 = var59.isVarArgs();
//     boolean var63 = var59.isOptionalArg();
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(0, var59, var64);
//     com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var69 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var70 = var69.getNext();
//     com.google.javascript.rhino.Node var71 = var67.srcrefTree(var69);
//     boolean var72 = var67.isString();
//     com.google.javascript.rhino.Node var73 = var65.useSourceInfoFromForTree(var67);
//     int var74 = var73.getLength();
//     var46.toSource(var53, 2, var73);
// 
//   }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test171"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getExportPropertyFunction();
    boolean var22 = var0.isValidEnumKey("InputId: ");
    java.util.Collection var23 = var0.getAssertionFunctions();
    java.lang.String var24 = var0.getGlobalObject();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var28 = var26.getBooleanProp((-1));
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.Node var35 = var32.removeFirstChild();
    com.google.javascript.rhino.Node var36 = var26.useSourceInfoFromForTree(var32);
    boolean var37 = var32.isDec();
    java.lang.String var41 = var32.toString(false, false, true);
    boolean var42 = var32.isStringKey();
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    boolean var46 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var44);
    int var47 = var44.getLength();
    boolean var48 = var44.isInstanceOf();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.returnNode();
    var49.setSourceFileForTesting("null(null)");
    com.google.javascript.rhino.Node var52 = var49.cloneNode();
    var44.addChildToFront(var49);
    java.lang.String var54 = var0.extractClassNameIfProvide(var32, var44);
    boolean var55 = var44.isSyntheticBlock();
    java.util.Collection var56 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "goog.global"+ "'", var24.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "BANG"+ "'", var41.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test172"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var60 = var58.isEquivalentTo(var59);
    boolean var61 = var58.matchesStringContext();
    boolean var62 = var58.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test173"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    var24.setCharno(100);
    com.google.javascript.rhino.Node var36 = var24.getAncestor(0);
    boolean var37 = var36.isParamList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test174"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isFunctionPrototypeType();
    boolean var95 = var32.hasCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test175"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    com.google.javascript.rhino.JSDocInfoBuilder var22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var23 = var22.recordExpose();
    boolean var25 = var22.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.InputId var32 = com.google.javascript.jscomp.NodeUtil.getInputId(var29);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var29.setJSType(var33);
    com.google.javascript.rhino.JSDocInfo var35 = var22.build(var29);
    java.lang.String var36 = var35.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var37 = var35.getType();
    java.util.Set var38 = var35.getSuppressions();
    var0.setStripTypePrefixes(var38);
    com.google.javascript.jscomp.CssRenamingMap var40 = null;
    var0.setCssRenamingMap(var40);
    var0.setReplaceStringsPlaceholderToken("module$InputId: InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test176"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    boolean var4 = var1.isNE();
    int var5 = var1.getChildCount();
    com.google.javascript.jscomp.JSModule var8 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var9 = var8.getDependencies();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.block(var9);
    var1.putProp(0, (java.lang.Object)var9);
    com.google.javascript.jscomp.ClosureCodingConvention var12 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var14 = var12.isConstantKey("2014/12/24 11:10");
    java.util.Collection var15 = var12.getAssertionFunctions();
    com.google.javascript.rhino.Node var19 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var19.setJSType(var20);
    boolean var22 = var19.isScript();
    com.google.javascript.rhino.Node var23 = var19.removeFirstChild();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var27 = var26.isGetterDef();
    boolean var28 = var26.isAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.String var46 = var45.toStringTree();
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var54 = var50.getBooleanProp(100);
    int var55 = var50.getSideEffectFlags();
    boolean var56 = var50.isDefaultCase();
    com.google.javascript.rhino.Node var57 = new com.google.javascript.rhino.Node(1, var26, var45, var50);
    java.lang.String var58 = var12.extractClassNameIfProvide(var19, var50);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var61 = var60.isGetterDef();
    boolean var62 = var60.isNE();
    boolean var63 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var60);
    com.google.javascript.rhino.Node var64 = var19.clonePropsFrom(var60);
    var60.setType((-1));
    com.google.javascript.rhino.Node var67 = var60.cloneNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.propdef(var1, var67);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var46.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test177"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    boolean var35 = var29.matchesInt32Context();
    var29.clearCachedValues();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var37 = var29.cloneWithoutArrowType();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test178"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isVarArgs();
    boolean var9 = var5.isOptionalArg();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(0, var5, var10);
    var10.setSourceEncodedPositionForTree(0);
    boolean var14 = var10.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateExpression(var10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test179"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    java.lang.String var20 = var14.getLendsName();
    boolean var21 = var14.isNoShadow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test180"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var7.unregisterPropertyOnType("Unversioned directory", var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    boolean var13 = var7.canPropertyBeDefined(var11, "BANG");
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.jstype.JSType[] var15 = new com.google.javascript.rhino.jstype.JSType[] { var14};
    com.google.javascript.rhino.Node var16 = var7.createParameters(var15);
    boolean var17 = var5.addRequiredParams(var15);
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    java.lang.String var29 = var21.toString(false, false, true);
    com.google.javascript.rhino.Node var30 = var5.newOptionalParameterFromNode(var21);
    com.google.javascript.rhino.Node var34 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.Node.newNumber(1.0d, 0, 10);
    int var39 = var34.getIndexOfChild(var38);
    boolean var40 = var38.isBlock();
    com.google.javascript.rhino.Node var41 = var5.newParameterFromNode(var38);
    com.google.javascript.jscomp.SourceFile var44 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    java.lang.String var46 = var44.getLine((-1));
    java.lang.String var47 = var44.getCode();
    var41.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var44);
    boolean var49 = var41.isQualifiedName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "BANG"+ "'", var29.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "()"+ "'", var46.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "()"+ "'", var47.equals("()"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test181"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.JSDocInfoBuilder var76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var77 = var76.recordExpose();
    boolean var79 = var76.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    com.google.javascript.rhino.InputId var86 = com.google.javascript.jscomp.NodeUtil.getInputId(var83);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    var83.setJSType(var87);
    com.google.javascript.rhino.JSDocInfo var89 = var76.build(var83);
    java.lang.String var90 = var89.getFileOverview();
    java.util.Set var91 = var89.getModifies();
    java.util.List var92 = var89.getImplementedInterfaces();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.block(var92);
    com.google.javascript.jscomp.NodeTraversal.Callback var94 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var92, var94);
    boolean var96 = var3.isIdeMode();
    com.google.javascript.jscomp.Scope var97 = var3.getTopScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test182() {}
//   public void test182() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test182"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     boolean var2 = var0.hasNode((java.lang.Object)1);
//     java.util.List var3 = var0.getGraphvizEdges();
//     java.lang.Iterable var4 = var0.getDirectedGraphNodes();
//     com.google.javascript.jscomp.Compiler var5 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var6 = var5.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     com.google.javascript.jscomp.LightweightMessageFormatter var8 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var5);
//     boolean var9 = var0.hasNode((java.lang.Object)var5);
//     double var10 = var5.getProgress();
//     com.google.javascript.jscomp.Scope var11 = var5.getTopScope();
//     com.google.javascript.jscomp.JSError[] var12 = var5.getWarnings();
// 
//   }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test183"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var27.isString();
    int var33 = var27.getSourcePosition();
    boolean var34 = var20.isEquivalentTo(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test184"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getProvides();
//     com.google.javascript.jscomp.CompilerInput var13 = var10.getByName("()");
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.SourceAst var18 = var17.getAst();
//     var10.add(var17);
//     var3.setModule(var10);
//     boolean var21 = var3.isExtern();
//     com.google.javascript.jscomp.MessageFormatter var22 = null;
//     java.util.logging.Logger var23 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var24 = new com.google.javascript.jscomp.LoggerErrorManager(var22, var23);
//     com.google.javascript.jscomp.Compiler var25 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var24);
//     com.google.javascript.jscomp.Scope var26 = var25.getTopScope();
//     com.google.javascript.rhino.Node var27 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var25);
// 
//   }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test185"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.matchesObjectContext();
    com.google.javascript.rhino.jstype.JSType var64 = var58.getPropertyType("function (): {2142004661}");
    int var65 = var58.getPropertiesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2147483647);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test186"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.putIntProp(0, 100);
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    int var13 = var11.getSourceOffset();
    com.google.javascript.rhino.Node var14 = var11.removeFirstChild();
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    boolean var20 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var18);
    int var21 = var18.getLength();
    com.google.javascript.rhino.Node var22 = null;
    boolean var23 = var18.hasChild(var22);
    com.google.javascript.rhino.Node var24 = var16.useSourceInfoIfMissingFromForTree(var18);
    var18.setSourceFileForTesting("Unversioned directory");
    boolean var27 = var18.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var28 = var18.getStaticSourceFile();
    com.google.javascript.rhino.Node var29 = var11.srcref(var18);
    java.lang.String var30 = var11.toStringTree();
    boolean var31 = var11.isFromExterns();
    var6.addChildrenToFront(var11);
    boolean var33 = var11.isComma();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "BANG 0 [source_file: Unversioned directory]\n"+ "'", var30.equals("BANG 0 [source_file: Unversioned directory]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test187"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.enableExternExports(false);
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var12 = null;
    var0.setAliasTransformationHandler(var12);
    var0.setComputeFunctionSideEffects(false);
    com.google.javascript.jscomp.CheckLevel var17 = null;
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var17, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var20 = new com.google.javascript.jscomp.DiagnosticType[] { var19};
    com.google.javascript.jscomp.DiagnosticGroup var21 = new com.google.javascript.jscomp.DiagnosticGroup(var20);
    com.google.javascript.jscomp.CompilerOptions var22 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var23 = null;
    var22.setStripTypes(var23);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var25 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var26 = var25.getDirectedGraphNodes();
    java.util.List var27 = var25.getEdges();
    var22.setManageClosureDependencies(var27);
    boolean var29 = var22.isExternExportsEnabled();
    var22.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var22.setReportUnknownTypes(var39);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var41 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var21, var39);
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var46 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var47 = com.google.javascript.jscomp.JSError.make(var44, var46);
    com.google.javascript.jscomp.CheckLevel var48 = var41.level(var47);
    var0.setBrokenClosureRequiresLevel(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test188"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    java.lang.String var59 = var58.getReferenceName();
    boolean var60 = var58.isEnumElementType();
    com.google.javascript.rhino.jstype.JSType var62 = var58.findPropertyType("(STRING hi 0 [length: 2]\n)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var59.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test189"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var1, "");
    com.google.javascript.jscomp.CheckLevel var5 = null;
    com.google.javascript.jscomp.DiagnosticType var7 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var5, "");
    int var8 = var3.compareTo(var7);
    com.google.javascript.jscomp.MessageFormatter var9 = null;
    java.util.logging.Logger var10 = null;
    com.google.javascript.jscomp.LoggerErrorManager var11 = new com.google.javascript.jscomp.LoggerErrorManager(var9, var10);
    com.google.javascript.jscomp.Compiler var12 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var11);
    com.google.javascript.jscomp.Scope var13 = var12.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var14 = null;
    com.google.javascript.jscomp.NodeTraversal var15 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var12, var14);
    com.google.javascript.jscomp.Scope var16 = var15.getScope();
    int var17 = var15.getLineNumber();
    com.google.javascript.rhino.Node var18 = var15.getCurrentNode();
    com.google.javascript.rhino.Node var19 = var15.getEnclosingFunction();
    com.google.javascript.rhino.Node var20 = null;
    com.google.javascript.jscomp.DiagnosticType var23 = com.google.javascript.jscomp.DiagnosticType.disabled("{proxy:{599688852}}", "Unversioned directory");
    com.google.javascript.jscomp.CheckLevel var28 = null;
    com.google.javascript.jscomp.DiagnosticType var30 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var28, "Unversioned directory");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    boolean var39 = var35.getBooleanProp(100);
    int var40 = var35.getSideEffectFlags();
    com.google.javascript.jscomp.CheckLevel var42 = null;
    com.google.javascript.jscomp.DiagnosticType var44 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var42, "");
    com.google.javascript.jscomp.CheckLevel var46 = null;
    com.google.javascript.jscomp.DiagnosticType var48 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var46, "");
    int var49 = var44.compareTo(var48);
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = var54.getNext();
    boolean var56 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var54);
    int var57 = var54.getLength();
    com.google.javascript.rhino.Node var58 = null;
    boolean var59 = var54.hasChild(var58);
    com.google.javascript.rhino.Node var60 = var52.useSourceInfoIfMissingFromForTree(var54);
    var54.setSourceFileForTesting("Unversioned directory");
    boolean var63 = var54.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var64 = var54.getStaticSourceFile();
    com.google.javascript.jscomp.DiagnosticType var67 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
    com.google.javascript.jscomp.MessageFormatter var68 = null;
    java.util.logging.Logger var69 = null;
    com.google.javascript.jscomp.LoggerErrorManager var70 = new com.google.javascript.jscomp.LoggerErrorManager(var68, var69);
    com.google.javascript.jscomp.Compiler var71 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var70);
    com.google.javascript.jscomp.Scope var72 = var71.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var73 = null;
    com.google.javascript.jscomp.NodeTraversal var74 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var71, var73);
    com.google.javascript.jscomp.Scope var75 = var74.getScope();
    com.google.javascript.rhino.Node var76 = null;
    com.google.javascript.jscomp.DiagnosticType var79 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var81 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var82 = com.google.javascript.jscomp.JSError.make(var79, var81);
    com.google.javascript.jscomp.DiagnosticType var83 = var82.getType();
    java.lang.String[] var85 = new java.lang.String[] { "LABEL_NAME hi!"};
    com.google.javascript.jscomp.JSError var86 = var74.makeError(var76, var83, var85);
    com.google.javascript.jscomp.JSError var87 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var54, var67, var85);
    com.google.javascript.jscomp.JSError var88 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var35, var44, var85);
    com.google.javascript.jscomp.JSError var89 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", (-1), 100, var30, var85);
    var15.report(var20, var23, var85);
    com.google.javascript.jscomp.JSError var91 = com.google.javascript.jscomp.JSError.make(var7, var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test190"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var51 = var49.getBooleanProp((-1));
    var49.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var49, "goog.abstractMethod");
    boolean var57 = var1.recordThrowDescription(var55, "STRING hi 0 [length: 2]\n");
    boolean var58 = var1.recordNoCompile();
    boolean var60 = var1.recordBlockDescription("CONTINUE");
    var1.markText("function (): {1204057807}", (-19), 2, (-1), 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test191() {}
//   public void test191() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test191"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newNumber(0.0d, 10, 0);
//     com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var7 = var6.recordExpose();
//     boolean var8 = var6.recordExterns();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = var12.getNext();
//     com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
//     boolean var15 = var12.isVarArgs();
//     boolean var16 = var12.isArrayLit();
//     com.google.javascript.rhino.Node var17 = var12.getNext();
//     var6.markTypeNode(var12, 10, 100, 0, 0, false);
//     boolean var24 = var12.isCall();
//     var12.setLineno(2);
//     int var27 = var4.getIndexOfChild(var12);
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = var31.getNext();
//     com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
//     com.google.javascript.rhino.InputId var34 = com.google.javascript.jscomp.NodeUtil.getInputId(var31);
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     var31.setJSType(var35);
//     boolean var37 = var31.isBlock();
//     com.google.javascript.rhino.Node var38 = var31.getParent();
//     boolean var39 = var31.isBreak();
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.function(var0, var4, var31);
// 
//   }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test192"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     int var2 = var1.getErrorCount();
//     int var3 = var1.getErrorCount();
//     com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var8 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make(var6, var8);
//     com.google.javascript.jscomp.DiagnosticType var10 = var9.getType();
//     int var11 = var9.getNodeLength();
//     com.google.javascript.jscomp.CheckLevel var12 = var9.getDefaultLevel();
//     com.google.javascript.jscomp.Compiler var13 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var14 = var13.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var15 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var13);
//     com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var20 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make(var18, var20);
//     int var22 = var21.getCharno();
//     com.google.javascript.jscomp.CheckLevel var23 = var21.getDefaultLevel();
//     java.lang.String var24 = var15.formatError(var21);
//     var1.println(var12, var21);
// 
//   }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test193"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setDisambiguateProperties(true);
    var0.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var0.setNameReferenceGraphPath("BANG");
    var0.setGeneratePseudoNames(true);
    var0.setRecordFunctionInformation(true);
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var21 = var19.recordExterns();
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = var25.getNext();
    com.google.javascript.rhino.Node var27 = var23.srcrefTree(var25);
    boolean var28 = var25.isVarArgs();
    boolean var29 = var25.isArrayLit();
    com.google.javascript.rhino.Node var30 = var25.getNext();
    var19.markTypeNode(var25, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var40 = var38.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var42 = null;
    boolean var43 = var38.recordParameter("Unversioned directory", var42);
    com.google.javascript.rhino.JSTypeExpression var44 = null;
    boolean var46 = var38.recordThrowDescription(var44, "");
    com.google.javascript.rhino.JSDocInfoBuilder var48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var49 = var48.recordExpose();
    boolean var51 = var48.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.InputId var58 = com.google.javascript.jscomp.NodeUtil.getInputId(var55);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var55.setJSType(var59);
    com.google.javascript.rhino.JSDocInfo var61 = var48.build(var55);
    java.lang.String var62 = var61.getFileOverview();
    java.util.Set var63 = var61.getModifies();
    boolean var64 = var38.recordSuppressions(var63);
    boolean var65 = var19.recordModifies(var63);
    var0.setStripNamePrefixes(var63);
    java.util.Set var67 = null;
    var0.setStripNameSuffixes(var67);
    var0.setExternExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test194"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.jscomp.ClosureCodingConvention var11 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var12 = null;
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    boolean var19 = var16.isOr();
    java.lang.String var20 = var11.extractClassNameIfRequire(var12, var16);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.unregisterPropertyOnType("Unversioned directory", var35);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.jscomp.JSModule var39 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var40 = var39.getDependencies();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.block(var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var33.createFunctionTypeWithVarArgs(var37, var40);
    boolean var43 = var42.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.lang.Iterable var46 = var44.getDirectedGraphNodes();
    java.util.List var47 = var44.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    java.util.Set var58 = null;
    var48.setReplaceStringsReservedStrings(var58);
    var48.setAliasAllStrings(true);
    var48.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var64 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var65 = null;
    var64.setStripTypes(var65);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var67 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var68 = var67.getDirectedGraphNodes();
    java.util.List var69 = var67.getEdges();
    var64.setManageClosureDependencies(var69);
    boolean var71 = var64.isExternExportsEnabled();
    var64.setCheckCaja(false);
    var64.setGroupVariableDeclarations(true);
    java.util.Map var76 = var64.getDefineReplacements();
    var48.setPropertyInvalidationErrors(var76);
    var11.defineDelegateProxyPrototypeProperties(var22, (com.google.javascript.rhino.jstype.StaticScope)var42, var47, var76);
    boolean var79 = var42.canBeCalled();
    boolean var80 = var42.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var82 = var42.getSlot("hi!");
    java.lang.String var83 = var42.getNormalizedReferenceName();
    java.util.List var84 = var42.getSubTypes();
    boolean var86 = var42.removeProperty("LinkedGraph");
    boolean var87 = var42.isReturnTypeInferred();
    java.lang.Iterable var88 = var42.getOwnImplementedInterfaces();
    com.google.javascript.rhino.jstype.SimpleSlot var90 = new com.google.javascript.rhino.jstype.SimpleSlot("BANG 0 [source_file: Unversioned directory]\n", (com.google.javascript.rhino.jstype.JSType)var42, true);
    com.google.javascript.rhino.jstype.JSType var91 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test195"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var71 = var31.getSlot("hi!");
    java.lang.String var72 = var31.getNormalizedReferenceName();
    com.google.javascript.rhino.JSDocInfoBuilder var75 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var76 = var75.recordExpose();
    boolean var78 = var75.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var80 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var82 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = var82.getNext();
    com.google.javascript.rhino.Node var84 = var80.srcrefTree(var82);
    com.google.javascript.rhino.InputId var85 = com.google.javascript.jscomp.NodeUtil.getInputId(var82);
    com.google.javascript.rhino.jstype.JSType var86 = null;
    var82.setJSType(var86);
    com.google.javascript.rhino.JSDocInfo var88 = var75.build(var82);
    java.util.List var89 = var88.getThrownTypes();
    java.lang.String var90 = var88.getDeprecationReason();
    var31.setPropertyJSDocInfo("InputId: ", var88);
    boolean var92 = var31.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "2014/12/24 11:10"+ "'", var90.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test196() {}
//   public void test196() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test196"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
//     var1.markText("(InputId: )", 100, 1, 3, 1);
//     com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var13 = var12.recordExpose();
//     boolean var15 = var12.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = var19.getNext();
//     com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
//     com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     var19.setJSType(var23);
//     com.google.javascript.rhino.JSDocInfo var25 = var12.build(var19);
//     java.lang.String var26 = var25.getFileOverview();
//     java.util.Set var27 = var25.getModifies();
//     boolean var28 = var1.recordModifies(var27);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = var32.getNext();
//     com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
//     boolean var35 = var32.isVarArgs();
//     com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var42 = var41.getNext();
//     com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
//     com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
//     com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
//     java.lang.Object var47 = null;
//     var32.putProp(0, var47);
//     com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
//     com.google.javascript.rhino.jstype.StaticScope var51 = null;
//     com.google.javascript.rhino.ErrorReporter var52 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
//     com.google.javascript.rhino.jstype.JSType var55 = null;
//     var53.unregisterPropertyOnType("Unversioned directory", var55);
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     boolean var59 = var53.canPropertyBeDefined(var57, "BANG");
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.rhino.jstype.JSType[] var61 = new com.google.javascript.rhino.jstype.JSType[] { var60};
//     com.google.javascript.rhino.Node var62 = var53.createParameters(var61);
//     com.google.javascript.rhino.jstype.JSType var63 = var50.evaluate(var51, var53);
//     boolean var64 = var1.recordImplementedInterface(var50);
//     boolean var65 = var1.isConstructorRecorded();
//     java.util.List var66 = null;
//     boolean var67 = var1.recordTemplateTypeNames(var66);
// 
//   }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test197"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var2.setMoocherDropping(true);
    com.google.javascript.jscomp.DependencyOptions var6 = var2.setMoocherDropping(false);
    com.google.javascript.jscomp.DependencyOptions var8 = var2.setMoocherDropping(false);
    com.google.javascript.jscomp.DependencyOptions var10 = var8.setDependencySorting(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test198"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var2 = var1.isGetterDef();
    boolean var3 = var1.isGetProp();
    int var4 = var1.getType();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var6.isString();
    int var12 = var6.getSourcePosition();
    com.google.javascript.rhino.Node var13 = var6.cloneTree();
    com.google.javascript.rhino.Node[] var14 = new com.google.javascript.rhino.Node[] { var13};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.switchNode(var1, var14);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test199"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    com.google.javascript.rhino.JSDocInfoBuilder var76 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var77 = var76.recordExpose();
    boolean var79 = var76.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var81 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var83 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var84 = var83.getNext();
    com.google.javascript.rhino.Node var85 = var81.srcrefTree(var83);
    com.google.javascript.rhino.InputId var86 = com.google.javascript.jscomp.NodeUtil.getInputId(var83);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    var83.setJSType(var87);
    com.google.javascript.rhino.JSDocInfo var89 = var76.build(var83);
    java.lang.String var90 = var89.getFileOverview();
    java.util.Set var91 = var89.getModifies();
    java.util.List var92 = var89.getImplementedInterfaces();
    com.google.javascript.rhino.Node var93 = com.google.javascript.rhino.IR.block(var92);
    com.google.javascript.jscomp.NodeTraversal.Callback var94 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var92, var94);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var96 = var3.languageMode();
    int var97 = var3.getErrorCount();
    com.google.javascript.jscomp.NodeTraversal.Callback var98 = null;
    com.google.javascript.jscomp.NodeTraversal var99 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 1);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test200"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("module$");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test201"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.jscomp.JSModuleGraph var18 = new com.google.javascript.jscomp.JSModuleGraph(var17);
    com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var21 = var20.getProvides();
    java.util.List var22 = var20.getInputs();
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getProvides();
    java.util.List var26 = var24.getRequires();
    java.util.Set var27 = var24.getAllDependencies();
    java.lang.String var28 = var24.toString();
    var20.addDependency(var24);
    com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var32 = var31.getDependencies();
    var31.removeAll();
    boolean var34 = var18.dependsOn(var20, var31);
    com.google.javascript.jscomp.JSModule var36 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var37 = var36.getDependencies();
    int var38 = var36.getDepth();
    var36.clearAsts();
    com.google.javascript.jscomp.JSModule var41 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var42 = var41.getDependencies();
    int var43 = var41.getDepth();
    var41.clearAsts();
    boolean var45 = var18.dependsOn(var36, var41);
    java.util.List var46 = var36.getDependencies();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Unversioned directory"+ "'", var28.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test202"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var9 = var8.recordExpose();
    boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var15.setJSType(var19);
    com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
    java.lang.String var22 = var21.getFileOverview();
    java.util.Set var23 = var21.getModifies();
    java.util.List var24 = var21.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var25 = var21.getType();
    boolean var26 = var21.isConsistentIdGenerator();
    java.lang.String var27 = var21.getDeprecationReason();
    var3.setJSDocInfo(var21);
    java.util.Collection var29 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.neg(var3);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "2014/12/24 11:10"+ "'", var27.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test203"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    var80.setOptimizeParameters(true);
    var80.setLocale("function (): {1529715975}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test204() {}
//   public void test204() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test204"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
//     com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
//     com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
//     int var9 = var3.getWarningCount();
//     com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var12 = var11.recordExpose();
//     boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var19 = var18.getNext();
//     com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
//     com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     var18.setJSType(var22);
//     com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
//     java.util.List var25 = var24.getThrownTypes();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     boolean var32 = var29.isOr();
//     var24.setAssociatedNode(var29);
//     java.util.Set var34 = var24.getParameterNames();
//     java.util.Collection var35 = var24.getAuthors();
//     java.lang.String var36 = var24.getVersion();
//     java.util.List var37 = var24.getThrownTypes();
//     com.google.javascript.jscomp.NodeTraversal.Callback var38 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, var37, var38);
//     com.google.javascript.jscomp.CodingConvention var40 = var3.getCodingConvention();
// 
//   }

  public void test205() {}
//   public void test205() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test205"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     boolean var5 = var0.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     boolean var13 = var9.isOptionalArg();
//     java.lang.String var17 = var9.toString(false, false, true);
//     java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
//     java.lang.String var19 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = var21.getNext();
//     int var23 = var21.getSourceOffset();
//     com.google.javascript.rhino.Node var24 = var21.cloneNode();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     int var28 = var26.getSourceOffset();
//     com.google.javascript.rhino.Node var29 = var26.cloneNode();
//     var24.addChildrenToFront(var29);
//     com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
//     com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     boolean var35 = var33.isConstant("module$2014$12$24 11:10");
//     boolean var38 = var33.isExported("Unversioned directory", false);
//     boolean var40 = var33.isConstantKey("function (): {540092593}");
//     boolean var42 = var33.isPrivate("LABEL_NAME hi!");
//     boolean var44 = var33.isPrivate("");
//     boolean var46 = var33.isValidEnumKey("");
//     java.lang.String var47 = var33.getGlobalObject();
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.string("function (): {1292906510}");
//     java.lang.Object var51 = var49.getProp(306);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var52 = var33.getClassesDefinedByCall(var49);
// 
//   }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test206"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    boolean var5 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var3);
    int var6 = var3.getLength();
    com.google.javascript.rhino.Node var7 = null;
    boolean var8 = var3.hasChild(var7);
    com.google.javascript.rhino.Node var9 = var1.useSourceInfoIfMissingFromForTree(var3);
    var3.setSourceFileForTesting("Unversioned directory");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test207"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getReturnDescription();
    boolean var18 = var14.isNoSideEffects();
    var14.setDeprecated(false);
    int var21 = var14.getImplementedInterfaceCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test208"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var10 = var3.getNext();
    boolean var11 = var3.isFromExterns();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    int var15 = var13.getSourceOffset();
    boolean var16 = var13.isNE();
    int var17 = var13.getChildCount();
    boolean var18 = var3.isEquivalentToTyped(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test209"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var3 = var2.isBreak();
    var2.setSourceEncodedPosition(2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test210"); }


    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.Node.newString(2, "function (): {1466095799}", 0, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.var(var4);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test211"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var46.unregisterPropertyOnType("Unversioned directory", var48);
    var46.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var52 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var46);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var54 = var53.cloneTree();
    boolean var55 = var53.isVar();
    boolean var56 = var53.isAssignAdd();
    com.google.javascript.jscomp.type.FlowScope var57 = null;
    com.google.javascript.jscomp.type.FlowScope var59 = var52.getPreciserScopeKnowingConditionOutcome(var53, var57, false);
    var53.setType(306);
    com.google.javascript.rhino.Node var62 = var53.getLastSibling();
    boolean var63 = var62.isTrue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test212"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    boolean var29 = var24.isAllType();
    com.google.javascript.rhino.jstype.ObjectType var30 = var24.toObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test213"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.FunctionType var13 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test214"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var49 = var48.isGetterDef();
    boolean var50 = var48.isNE();
    boolean var51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var48);
    com.google.javascript.rhino.Node var52 = var7.clonePropsFrom(var48);
    var48.detachChildren();
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.InputId var60 = com.google.javascript.jscomp.NodeUtil.getInputId(var57);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var57.setJSType(var61);
    boolean var63 = var57.isBlock();
    com.google.javascript.rhino.Node var64 = var57.getNext();
    boolean var65 = var57.isQualifiedName();
    com.google.javascript.rhino.Node var66 = var48.useSourceInfoIfMissingFrom(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test215"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.recordNoAlias();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test216"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var70 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var31, "BANG");
    boolean var71 = var31.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var73 = var31.getRestrictedTypeGivenToBooleanOutcome(false);
    java.lang.Iterable var74 = var31.getAllImplementedInterfaces();
    boolean var75 = var31.isCheckedUnknownType();
    java.lang.Iterable var76 = var31.getCtorImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test217() {}
//   public void test217() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test217"); }
// 
// 
//     com.google.javascript.rhino.Node[] var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.paramList(var0);
// 
//   }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test218"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    com.google.javascript.rhino.Node var9 = var4.getChildAtIndex(1);
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.JSDocInfo var16 = var13.getJSDocInfo();
    com.google.javascript.rhino.Node var17 = var4.copyInformationFrom(var13);
    com.google.javascript.rhino.Node[] var18 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node((-1), var18, 10, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.block(var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test219"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var1.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var14, 0, 0);
    java.io.Reader var18 = var14.getCodeReader();
    com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var21 = var20.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test220"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    com.google.javascript.rhino.InputId var8 = com.google.javascript.jscomp.NodeUtil.getInputId(var5);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var5.setJSType(var9);
    var5.setCharno(153);
    com.google.javascript.rhino.Node[] var13 = new com.google.javascript.rhino.Node[] { var5};
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(100, var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(2, var13, 153, 153);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test221"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.setQuotedString();
    boolean var8 = var6.isTry();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test222"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(0, 3, 153);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test223"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.lang.String var17 = var14.getDescription();
    boolean var18 = var14.isExpose();
    boolean var19 = var14.isDeprecated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test224"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    var0.setOutputJsStringUsage(false);

  }

  public void test225() {}
//   public void test225() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test225"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     var7.setJSType(var8);
//     boolean var10 = var7.isScript();
//     com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
//     boolean var15 = var14.isGetterDef();
//     boolean var16 = var14.isAdd();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var21 = var20.getNext();
//     com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
//     boolean var23 = var20.isVarArgs();
//     com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
//     com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
//     java.lang.String var34 = var33.toStringTree();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = var38.getNext();
//     com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
//     boolean var42 = var38.getBooleanProp(100);
//     int var43 = var38.getSideEffectFlags();
//     boolean var44 = var38.isDefaultCase();
//     com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
//     java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
//     java.util.Collection var47 = var0.getAssertionFunctions();
//     java.lang.String var48 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var52 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.jstype.JSType var53 = null;
//     var52.setJSType(var53);
//     boolean var55 = var52.isScript();
//     boolean var56 = var0.isVarArgsParameter(var52);
//     com.google.javascript.jscomp.ClosureCodingConvention var57 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var58 = null;
//     com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var63 = var62.getNext();
//     com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
//     boolean var65 = var62.isOr();
//     java.lang.String var66 = var57.extractClassNameIfRequire(var58, var62);
//     boolean var67 = var62.isScript();
//     com.google.javascript.rhino.Node var68 = var62.getFirstChild();
//     com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var71 = var70.getNext();
//     int var72 = var70.getSourceOffset();
//     com.google.javascript.rhino.Node var73 = var70.cloneNode();
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var74 = var73.getJsDocBuilderForNode();
//     com.google.javascript.rhino.Node var75 = var62.clonePropsFrom(var73);
//     boolean var76 = var73.isDebugger();
//     java.util.List var77 = var0.identifyTypeDeclarationCall(var73);
// 
//   }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test226"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var23 = var21.getBooleanProp((-1));
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.Node var30 = var27.removeFirstChild();
    com.google.javascript.rhino.Node var31 = var21.useSourceInfoFromForTree(var27);
    var31.setLength(2);
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    boolean var37 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var35);
    java.lang.String var38 = var31.checkTreeEquals(var35);
    com.google.javascript.jscomp.CodingConvention.Bind var40 = var0.describeFunctionBind(var31, true);
    com.google.javascript.rhino.Node var41 = null;
    int var42 = var31.getIndexOfChild(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var38.equals("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test227"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.jscomp.deps.SortedDependencies var42 = new com.google.javascript.jscomp.deps.SortedDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var45 = var44.recordExpose();
    boolean var47 = var44.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    com.google.javascript.rhino.InputId var54 = com.google.javascript.jscomp.NodeUtil.getInputId(var51);
    com.google.javascript.rhino.jstype.JSType var55 = null;
    var51.setJSType(var55);
    com.google.javascript.rhino.JSDocInfo var57 = var44.build(var51);
    java.lang.String var58 = var57.getFileOverview();
    java.util.Set var59 = var57.getModifies();
    java.util.List var60 = var57.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var61 = var57.getType();
    java.util.List var62 = var57.getImplementedInterfaces();
    java.util.List var63 = var42.getSortedDependenciesOf(var62);
    java.util.List var64 = var42.getInputsWithoutProvides();
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    int var68 = var66.getSourceOffset();
    boolean var69 = var66.isNE();
    int var70 = var66.getChildCount();
    com.google.javascript.jscomp.JSModule var73 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var74 = var73.getDependencies();
    com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.block(var74);
    var66.putProp(0, (java.lang.Object)var74);
    java.util.List var78 = var42.getDependenciesOf(var74, true);
    java.util.List var79 = var42.getSortedList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test228"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    java.lang.String var20 = var0.getExportPropertyFunction();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    boolean var26 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var24);
    int var27 = var24.getLength();
    com.google.javascript.rhino.Node var28 = null;
    boolean var29 = var24.hasChild(var28);
    com.google.javascript.rhino.Node var30 = var22.useSourceInfoIfMissingFromForTree(var24);
    var24.setSourceFileForTesting("Unversioned directory");
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var36 = var33.copyInformationFrom(var35);
    java.lang.String var37 = var0.extractClassNameIfProvide(var24, var33);
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var45 = var43.getBooleanProp((-1));
    var43.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var49 = new com.google.javascript.rhino.JSTypeExpression(var43, "goog.abstractMethod");
    boolean var50 = var38.isPrototypeAlias(var43);
    boolean var51 = var43.isThrow();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.sub(var33, var43);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test229"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    var14.setDeprecated(false);
    boolean var21 = var14.isInterface();
    boolean var23 = var14.hasParameterType("hi!: Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test230() {}
//   public void test230() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test230"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.Result var5 = var3.getResult();
//     com.google.javascript.jscomp.SourceMap var6 = var3.getSourceMap();
//     double var7 = var3.getProgress();
//     com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.warning("goog.global", "CONTINUE");
//     com.google.javascript.jscomp.MessageFormatter var14 = null;
//     java.util.logging.Logger var15 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var16 = new com.google.javascript.jscomp.LoggerErrorManager(var14, var15);
//     com.google.javascript.jscomp.Compiler var17 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var16);
//     com.google.javascript.jscomp.Scope var18 = var17.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var19 = null;
//     com.google.javascript.jscomp.NodeTraversal var20 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var17, var19);
//     com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var22 = null;
//     var21.setStripTypes(var22);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var25 = var24.getDirectedGraphNodes();
//     java.util.List var26 = var24.getEdges();
//     var21.setManageClosureDependencies(var26);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.script(var26);
//     var20.traverseRoots(var26);
//     com.google.javascript.rhino.Node var30 = var20.getEnclosingFunction();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.continueNode();
//     com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.disabled("(LABEL_NAME hi!)", "()");
//     com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var40 = var39.getNext();
//     boolean var41 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var39);
//     int var42 = var39.getLength();
//     com.google.javascript.rhino.Node var43 = null;
//     boolean var44 = var39.hasChild(var43);
//     com.google.javascript.rhino.Node var45 = var37.useSourceInfoIfMissingFromForTree(var39);
//     var39.setSourceFileForTesting("Unversioned directory");
//     boolean var48 = var39.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var49 = var39.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var52 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var53 = null;
//     java.util.logging.Logger var54 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
//     com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
//     com.google.javascript.jscomp.Scope var57 = var56.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var58 = null;
//     com.google.javascript.jscomp.NodeTraversal var59 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var56, var58);
//     com.google.javascript.jscomp.Scope var60 = var59.getScope();
//     com.google.javascript.rhino.Node var61 = null;
//     com.google.javascript.jscomp.DiagnosticType var64 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var66 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var67 = com.google.javascript.jscomp.JSError.make(var64, var66);
//     com.google.javascript.jscomp.DiagnosticType var68 = var67.getType();
//     java.lang.String[] var70 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var71 = var59.makeError(var61, var68, var70);
//     com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var39, var52, var70);
//     var20.report(var31, var34, var70);
//     com.google.javascript.jscomp.JSError var74 = com.google.javascript.jscomp.JSError.make("module$InputId: ", 0, 3, var13, var70);
//     com.google.javascript.jscomp.CheckLevel var75 = var3.getErrorLevel(var74);
// 
//   }

  public void test231() {}
//   public void test231() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test231"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.thisNode();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.Node.newString(0, "hi!");
//     boolean var7 = var6.hasOneChild();
//     com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
//     boolean var13 = var12.isArrayLit();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var18 = var17.getNext();
//     com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
//     boolean var20 = var17.isVarArgs();
//     boolean var21 = var17.isOptionalArg();
//     com.google.javascript.rhino.Node var24 = new com.google.javascript.rhino.Node(0, var6, var11, var12, var17, 1, 100);
//     int var25 = var17.getSourceOffset();
//     com.google.javascript.rhino.Node var26 = var2.useSourceInfoFromForTree(var17);
//     boolean var27 = var26.isThrow();
//     var1.validateRoot(var26);
// 
//   }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test232"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isArrayLit();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var21 = var20.isGetterDef();
    var20.putIntProp((-1), 10);
    var14.addChildrenToFront(var20);
    boolean var26 = var4.hasChild(var14);
    com.google.javascript.jscomp.SourceFile var28 = com.google.javascript.jscomp.SourceFile.fromFile("module$WARNING _ BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var4.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var28);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.InputId var33 = var31.getInputId();
    boolean var34 = var31.isGetProp();
    boolean var35 = var31.isAdd();
    com.google.javascript.rhino.Node var36 = new com.google.javascript.rhino.Node(0, var4, var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test233"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     boolean var7 = var0.isExternExportsEnabled();
//     var0.setCheckCaja(false);
//     var0.setTightenTypes(false);
//     var0.setTweakToDoubleLiteral("2014/12/24 11:10", 10.0d);
//     var0.setRemoveUnusedLocalVars(true);
//     var0.setReplaceStringsPlaceholderToken("null(null)");
//     com.google.javascript.jscomp.CompilerOptions.Reach var19 = null;
//     var0.setRemoveUnusedVariables(var19);
// 
//   }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test234"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("", "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test235"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var4 = var3.hasOneChild();
    com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    boolean var10 = var9.isArrayLit();
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    boolean var17 = var14.isVarArgs();
    boolean var18 = var14.isOptionalArg();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
    boolean var22 = var8.isDelProp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var24 = var8.getExistingIntProp((-1));
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test236"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    var0.setCheckControlStructures(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var34 = var0.getLanguageIn();
    var0.setPreferLineBreakAtEndOfFile(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test237"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSType var8 = var1.getType("2014/12/24 11:10");
    com.google.javascript.rhino.ErrorReporter var9 = var1.getErrorReporter();
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    boolean var18 = var15.isOr();
    java.lang.String var19 = var10.extractClassNameIfRequire(var11, var15);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    com.google.javascript.jscomp.JSModule var27 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var28 = var27.getDependencies();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.block(var28);
    com.google.javascript.rhino.jstype.FunctionType var30 = var21.createFunctionTypeWithVarArgs(var25, var28);
    com.google.javascript.rhino.ErrorReporter var31 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    var32.unregisterPropertyOnType("Unversioned directory", var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.jscomp.JSModule var38 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var39 = var38.getDependencies();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.block(var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var32.createFunctionTypeWithVarArgs(var36, var39);
    boolean var42 = var41.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.lang.Iterable var45 = var43.getDirectedGraphNodes();
    java.util.List var46 = var43.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var47 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var48 = null;
    var47.setStripTypes(var48);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.util.List var52 = var50.getEdges();
    var47.setManageClosureDependencies(var52);
    boolean var54 = var47.isExternExportsEnabled();
    var47.setCheckCaja(false);
    java.util.Set var57 = null;
    var47.setReplaceStringsReservedStrings(var57);
    var47.setAliasAllStrings(true);
    var47.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var63 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var64 = null;
    var63.setStripTypes(var64);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var66 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var67 = var66.getDirectedGraphNodes();
    java.util.List var68 = var66.getEdges();
    var63.setManageClosureDependencies(var68);
    boolean var70 = var63.isExternExportsEnabled();
    var63.setCheckCaja(false);
    var63.setGroupVariableDeclarations(true);
    java.util.Map var75 = var63.getDefineReplacements();
    var47.setPropertyInvalidationErrors(var75);
    var10.defineDelegateProxyPrototypeProperties(var21, (com.google.javascript.rhino.jstype.StaticScope)var41, var46, var75);
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var41);
    com.google.javascript.rhino.JSDocInfo var79 = var41.getJSDocInfo();
    com.google.javascript.rhino.jstype.FunctionType var80 = var41.toMaybeFunctionType();
    boolean var81 = var80.hasAnyTemplate();
    com.google.javascript.rhino.ErrorReporter var82 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var82);
    com.google.javascript.rhino.jstype.JSType var85 = null;
    var83.unregisterPropertyOnType("Unversioned directory", var85);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    com.google.javascript.jscomp.JSModule var89 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var90 = var89.getDependencies();
    com.google.javascript.rhino.Node var91 = com.google.javascript.rhino.IR.block(var90);
    com.google.javascript.rhino.jstype.FunctionType var92 = var83.createFunctionTypeWithVarArgs(var87, var90);
    boolean var93 = var92.hasCachedValues();
    java.util.Set var94 = var92.getPropertyNames();
    var92.clearCachedValues();
    boolean var96 = var92.isUnknownType();
    java.util.List var97 = var92.getSubTypes();
    boolean var98 = var80.hasEqualCallType(var92);
    boolean var99 = var80.isNativeObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test238"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    boolean var51 = var48.isNullable();
    boolean var52 = var48.matchesNumberContext();
    boolean var53 = var10.differsFrom(var48);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    com.google.javascript.rhino.jstype.JSType var90 = var89.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var91 = var90.dereference();
    boolean var92 = var91.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var93 = var91.getParameterType();
    boolean var95 = var91.hasOwnProperty("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var96 = var10.resolve(var54, (com.google.javascript.rhino.jstype.StaticScope)var91);
    boolean var97 = var91.isVoidType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test239"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    boolean var51 = var48.isNullable();
    boolean var52 = var48.matchesNumberContext();
    boolean var53 = var10.differsFrom(var48);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    com.google.javascript.rhino.jstype.JSType var90 = var89.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var91 = var90.dereference();
    boolean var92 = var91.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var93 = var91.getParameterType();
    boolean var95 = var91.hasOwnProperty("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var96 = var10.resolve(var54, (com.google.javascript.rhino.jstype.StaticScope)var91);
    com.google.javascript.rhino.jstype.JSType var97 = var91.getParameterType();
    boolean var98 = var91.isNumber();
    com.google.javascript.rhino.jstype.ObjectType var99 = var91.toObjectType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test240"); }


    java.io.PrintStream var0 = null;
    com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
    com.google.javascript.jscomp.CompilerOptions var2 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var3 = null;
    var2.setStripTypes(var3);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var5 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var6 = var5.getDirectedGraphNodes();
    java.util.List var7 = var5.getEdges();
    var2.setManageClosureDependencies(var7);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var13 = var10.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.InputId var20 = com.google.javascript.jscomp.NodeUtil.getInputId(var17);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var17.setJSType(var21);
    com.google.javascript.rhino.JSDocInfo var23 = var10.build(var17);
    java.lang.String var24 = var23.getFileOverview();
    java.util.Set var25 = var23.getModifies();
    java.util.List var26 = var23.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var27 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var28 = null;
    var27.setStripTypes(var28);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var30 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var31 = var30.getDirectedGraphNodes();
    java.util.List var32 = var30.getEdges();
    var27.setManageClosureDependencies(var32);
    var27.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var27.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var39 = null;
    var27.setSourceMapDetailLevel(var39);
    var1.<com.google.javascript.jscomp.SourceFile>initModules(var7, var26, var27);
    com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var43 = null;
    var42.setStripTypes(var43);
    var42.setAliasKeywords(false);
    com.google.javascript.jscomp.DefaultPassConfig var47 = new com.google.javascript.jscomp.DefaultPassConfig(var42);
    var1.setPassConfig((com.google.javascript.jscomp.PassConfig)var47);
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    var50.unregisterPropertyOnType("Unversioned directory", var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.block(var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var50.createFunctionTypeWithVarArgs(var54, var57);
    boolean var60 = var59.hasAnyTemplateInternal();
    java.lang.Iterable var61 = var59.getAllExtendedInterfaces();
    boolean var62 = var59.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var64 = var59.getOwnSlot("(LABEL_NAME hi!)");
    boolean var65 = var59.isEnumElementType();
    boolean var66 = var59.isEnumElementType();
    boolean var68 = var59.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var69 = var59.isStringValueType();
    com.google.common.collect.ImmutableList var70 = var59.getTemplateTypeNames();
    com.google.javascript.jscomp.NodeTraversal.Callback var71 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var1, (java.util.List)var70, var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test241"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var20 = var14.hasTypedefType();
    java.lang.String var21 = var14.getFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test242"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var21.unregisterPropertyOnType("Unversioned directory", var23);
    var21.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    boolean var38 = var31.isExternExportsEnabled();
    var31.setCheckCaja(false);
    var31.setGroupVariableDeclarations(true);
    java.util.Map var43 = var31.getDefineReplacements();
    var0.defineDelegateProxyPrototypeProperties(var21, var27, var30, var43);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    var46.unregisterPropertyOnType("Unversioned directory", var48);
    var46.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var52 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var46);
    boolean var54 = var46.hasNamespace("LABEL_NAME hi!");
    var46.clearNamedTypes();
    com.google.javascript.rhino.ErrorReporter var56 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    var57.unregisterPropertyOnType("Unversioned directory", var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.jscomp.JSModule var63 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var64 = var63.getDependencies();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.block(var64);
    com.google.javascript.rhino.jstype.FunctionType var66 = var57.createFunctionTypeWithVarArgs(var61, var64);
    boolean var67 = var66.hasAnyTemplateInternal();
    java.lang.Iterable var68 = var66.getAllExtendedInterfaces();
    boolean var69 = var66.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.jscomp.JSModule var77 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var78 = var77.getDependencies();
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.block(var78);
    com.google.javascript.rhino.jstype.FunctionType var80 = var71.createFunctionTypeWithVarArgs(var75, var78);
    boolean var82 = var80.removeProperty("null(null)");
    var66.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var80);
    int var84 = var80.getExtendedInterfacesCount();
    java.util.Set var85 = var80.getOwnPropertyNames();
    java.lang.Iterable var86 = var80.getCtorImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var87 = null;
    com.google.javascript.rhino.jstype.StaticScope var88 = null;
    com.google.javascript.rhino.jstype.JSType var89 = var80.resolve(var87, var88);
    boolean var90 = var80.isResolved();
    com.google.javascript.rhino.jstype.JSType var91 = var46.createNullableType((com.google.javascript.rhino.jstype.JSType)var80);
    com.google.javascript.rhino.jstype.FunctionBuilder var92 = new com.google.javascript.rhino.jstype.FunctionBuilder(var46);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var93 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var46);
    boolean var94 = var93.hasVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test243"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0, false);
    com.google.javascript.rhino.jstype.JSType var7 = var2.createNamedType("hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n", "hi!", 2, 100);
    boolean var9 = var2.hasNamespace("hi!: BANG 0\n    STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test244"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    boolean var5 = var1.recordIdGenerator();
    com.google.javascript.rhino.JSDocInfoBuilder var7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var8 = var7.recordExpose();
    boolean var9 = var7.recordExterns();
    boolean var10 = var7.recordNoShadow();
    boolean var12 = var7.recordReturnDescription("()");
    boolean var14 = var7.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var18 = var17.recordExpose();
    boolean var19 = var17.recordExterns();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isArrayLit();
    com.google.javascript.rhino.Node var28 = var23.getNext();
    var17.markTypeNode(var23, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.JSTypeExpression var57 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var56);
    boolean var58 = var17.recordBaseType(var56);
    com.google.javascript.jscomp.MessageFormatter var59 = null;
    java.util.logging.Logger var60 = null;
    com.google.javascript.jscomp.LoggerErrorManager var61 = new com.google.javascript.jscomp.LoggerErrorManager(var59, var60);
    com.google.javascript.jscomp.Compiler var62 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var61);
    boolean var63 = var56.equals((java.lang.Object)var62);
    boolean var64 = var7.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var56);
    boolean var65 = var1.recordThrowType(var56);
    boolean var66 = var1.isInterfaceRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test245"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    java.lang.String var17 = var14.getMeaning();
    boolean var18 = var14.hasBaseType();
    int var19 = var14.getImplementedInterfaceCount();
    boolean var20 = var14.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test246"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    var24.setCharno(100);
    com.google.javascript.rhino.Node var36 = var24.getAncestor(0);
    boolean var37 = var36.isGetElem();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.returnNode();
    var38.setSourceFileForTesting("null(null)");
    boolean var41 = var38.isDo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.sheq(var36, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test247"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = var26.removeFirstChild();
    var29.setQuotedString();
    boolean var31 = var0.hasNode((java.lang.Object)var29);
    java.util.Set var32 = var29.getDirectives();
    com.google.javascript.rhino.JSDocInfo var33 = var29.getJSDocInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test248"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isTrue();
    boolean var6 = var1.isSwitch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test249"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.nullNode();
    var0.setVarArgs(false);
    var0.addSuppression("(hi)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test250() {}
//   public void test250() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test250"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     int var5 = var3.getLineOfOffset(2);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
//     com.google.javascript.jscomp.SourceAst var7 = var6.getAst();
//     java.util.Collection var8 = var6.getProvides();
// 
//   }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test251"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var4 = null;
    boolean var6 = var1.recordThrowDescription(var4, "()");
    boolean var8 = var1.recordFileOverview("BANG 0\n    STRING hi 0 [length: 2]\n");
    boolean var9 = var1.recordConsistentIdGenerator();
    boolean var10 = var1.recordNoSideEffects();
    boolean var12 = var1.recordBlockDescription("STRING hi 0 [length: 2]\n.<hi>");
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    var13.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var13.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var25 = null;
    var13.setSourceMapDetailLevel(var25);
    com.google.javascript.jscomp.CodingConvention var27 = var13.getCodingConvention();
    var13.setMarkNoSideEffectCalls(false);
    var13.setAssumeStrictThis(false);
    com.google.javascript.rhino.JSDocInfoBuilder var33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var34 = var33.recordExpose();
    boolean var36 = var33.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    com.google.javascript.rhino.InputId var43 = com.google.javascript.jscomp.NodeUtil.getInputId(var40);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var40.setJSType(var44);
    com.google.javascript.rhino.JSDocInfo var46 = var33.build(var40);
    java.util.Collection var47 = var46.getAuthors();
    com.google.common.collect.ImmutableList var48 = var46.getTemplateTypeNames();
    java.util.Set var49 = var46.getModifies();
    var13.setStripTypes(var49);
    boolean var51 = var1.recordModifies(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test252"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.removeFirstChild();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    boolean var11 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var9);
    int var12 = var9.getLength();
    com.google.javascript.rhino.Node var13 = null;
    boolean var14 = var9.hasChild(var13);
    com.google.javascript.rhino.Node var15 = var7.useSourceInfoIfMissingFromForTree(var9);
    var9.setSourceFileForTesting("Unversioned directory");
    boolean var18 = var9.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var19 = var9.getStaticSourceFile();
    com.google.javascript.rhino.Node var20 = var2.srcref(var9);
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var20);
    boolean var22 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test253() {}
//   public void test253() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test253"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.unregisterPropertyOnType("Unversioned directory", var3);
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var8 = var7.getDependencies();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
//     var1.clearTemplateTypeNames();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var16 = null;
//     var15.setResolveMode(var16);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var18 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var15);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var19 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var15);
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     var21.unregisterPropertyOnType("Unversioned directory", var23);
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     boolean var27 = var21.canPropertyBeDefined(var25, "BANG");
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.jstype.JSType[] var29 = new com.google.javascript.rhino.jstype.JSType[] { var28};
//     com.google.javascript.rhino.Node var30 = var21.createParameters(var29);
//     boolean var31 = var19.addRequiredParams(var29);
//     com.google.javascript.rhino.Node var32 = var13.createParameters(var29);
//     com.google.javascript.rhino.Node var33 = var1.createParametersWithVarArgs(var29);
// 
//   }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test254"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    java.lang.Iterable var62 = var35.getAllExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test255"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    int var19 = var14.getParameterCount();
    java.lang.String var20 = var14.getLendsName();
    boolean var21 = var14.isExterns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test256"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setAmbiguateProperties(false);
    boolean var14 = var0.assumeStrictThis();
    com.google.javascript.jscomp.CompilerOptions.TracerMode var15 = var0.getTracerMode();
    var0.skipAllCompilerPasses();
    var0.setCheckSymbols(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test257"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setChainCalls(true);
    var0.setGenerateExports(false);
    com.google.javascript.jscomp.CheckLevel var34 = null;
    var0.setBrokenClosureRequiresLevel(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test258"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    boolean var7 = var0.isSuperClassReference("goog.abstractMethod");
    com.google.javascript.rhino.Node var11 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var11.setJSType(var12);
    boolean var14 = var11.isScript();
    com.google.javascript.rhino.Node var15 = var11.removeFirstChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var16 = var0.getDelegateRelationship(var11);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.lang.String var18 = var17.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "goog.global"+ "'", var18.equals("goog.global"));

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test259"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.removeFirstChild();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    boolean var10 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var8);
    int var11 = var8.getLength();
    com.google.javascript.rhino.Node var12 = null;
    boolean var13 = var8.hasChild(var12);
    com.google.javascript.rhino.Node var14 = var6.useSourceInfoIfMissingFromForTree(var8);
    var8.setSourceFileForTesting("Unversioned directory");
    boolean var17 = var8.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var18 = var8.getStaticSourceFile();
    com.google.javascript.rhino.Node var19 = var1.srcref(var8);
    boolean var20 = var19.isVarArgs();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test260"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    java.lang.String var13 = var0.getDelegateSuperclassName();
    boolean var15 = var0.isSuperClassReference("goog.abstractMethod: WARNING - \n");
    java.lang.String var16 = var0.getDelegateSuperclassName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test261"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.voidNode(var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test262"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    com.google.javascript.rhino.jstype.JSType var61 = var58.getPropertyType("(2014/12/24 11:10)");
    boolean var62 = var58.hasCachedValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test263"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("function (): {944163309}");

  }

  public void test264() {}
//   public void test264() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test264"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     com.google.javascript.jscomp.CompilerInput var4 = var1.getByName("()");
//     com.google.javascript.jscomp.SourceAst var5 = null;
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var5, var6, true);
//     com.google.javascript.jscomp.SourceAst var9 = var8.getAst();
//     var1.add(var8);
//     com.google.javascript.jscomp.CompilerInput var11 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var8);
// 
//   }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test265"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setRemoveAbstractMethods(true);
    var0.enableRuntimeTypeCheck("BANG");
    var0.setColorizeErrorOutput(true);
    var0.setReplaceStringsPlaceholderToken("function (): {869482344}");
    var0.setAliasStringsBlacklist("");

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test266"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var3 = var1.getBooleanProp((-1));
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    com.google.javascript.rhino.Node var10 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var11 = var1.useSourceInfoFromForTree(var7);
    var11.setLength(2);
    boolean var14 = var11.isAssign();
    var11.setOptionalArg(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test267"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = var26.removeFirstChild();
    var29.setQuotedString();
    boolean var31 = var0.hasNode((java.lang.Object)var29);
    com.google.javascript.jscomp.Compiler var32 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var33 = var32.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var34 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var32);
    com.google.javascript.jscomp.DiagnosticType var37 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var39 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var40 = com.google.javascript.jscomp.JSError.make(var37, var39);
    int var41 = var40.getCharno();
    com.google.javascript.jscomp.CheckLevel var42 = var40.getDefaultLevel();
    java.lang.String var43 = var34.formatError(var40);
    com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var48 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var49 = com.google.javascript.jscomp.JSError.make(var46, var48);
    java.lang.String var50 = var34.formatWarning(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var51 = var0.getDirectedPredNodes((java.lang.Object)var34);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var43.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var50.equals("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test268"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var49 = var48.isGetterDef();
    boolean var50 = var48.isNE();
    boolean var51 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var48);
    com.google.javascript.rhino.Node var52 = var7.clonePropsFrom(var48);
    var48.setType((-1));
    boolean var55 = var48.isFalse();
    com.google.javascript.rhino.Node var56 = var48.cloneNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test269"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.jscomp.JSModule var65 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var66 = var65.getDependencies();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.block(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var59.createFunctionTypeWithVarArgs(var63, var66);
    boolean var69 = var68.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType.TypePair var70 = var56.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType)var68);
    boolean var72 = var56.isPropertyInExterns("goog.exportSymbol");
    boolean var73 = var56.isOrdinaryFunction();
    com.google.javascript.rhino.jstype.EnumElementType var74 = var56.getElementsType();
    com.google.javascript.rhino.jstype.JSType var75 = var56.getIndexType();
    com.google.javascript.rhino.jstype.EnumType var76 = var56.toMaybeEnumType();
    boolean var77 = var56.isStringValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test270"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    boolean var3 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var1);
    int var4 = var1.getLength();
    boolean var5 = var1.isTrue();
    boolean var6 = var1.isAnd();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.neg(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test271"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.isConsistentIdGenerator();
    java.lang.String var20 = var14.getDeprecationReason();
    com.google.javascript.rhino.JSDocInfoBuilder var22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var23 = var22.recordExpose();
    boolean var25 = var22.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.InputId var32 = com.google.javascript.jscomp.NodeUtil.getInputId(var29);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    var29.setJSType(var33);
    com.google.javascript.rhino.JSDocInfo var35 = var22.build(var29);
    java.lang.String var36 = var35.getFileOverview();
    boolean var37 = var35.hasFileOverview();
    boolean var38 = var35.hasReturnType();
    boolean var39 = var35.hasType();
    boolean var40 = var35.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var41 = var35.getVisibility();
    var14.setVisibility(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "2014/12/24 11:10"+ "'", var20.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test272"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
    var3.disableThreads();
    var3.disableThreads();
    com.google.javascript.jscomp.JSError[] var97 = var3.getMessages();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var98 = var3.languageMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test273"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.hasReferenceName();
    com.google.javascript.rhino.jstype.FunctionType var66 = var62.toMaybeFunctionType();
    com.google.javascript.rhino.JSDocInfoBuilder var68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var69 = var68.recordExpose();
    boolean var70 = var68.recordExterns();
    com.google.javascript.rhino.Node var72 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = var74.getNext();
    com.google.javascript.rhino.Node var76 = var72.srcrefTree(var74);
    boolean var77 = var74.isVarArgs();
    boolean var78 = var74.isArrayLit();
    com.google.javascript.rhino.Node var79 = var74.getNext();
    var68.markTypeNode(var74, 10, 100, 0, 0, false);
    boolean var86 = var74.hasChildren();
    com.google.javascript.rhino.Node var87 = var74.getFirstChild();
    boolean var88 = var66.equals((java.lang.Object)var87);
    boolean var89 = var66.isOrdinaryFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test274"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    com.google.javascript.jscomp.Scope var8 = var3.getTopScope();
    int var9 = var3.getErrorCount();
    com.google.javascript.jscomp.Scope var10 = var3.getTopScope();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test275"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var15 = var13.recordExterns();
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    boolean var23 = var19.isArrayLit();
    com.google.javascript.rhino.Node var24 = var19.getNext();
    var13.markTypeNode(var19, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var33 = var32.recordExpose();
    boolean var34 = var32.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var36 = null;
    boolean var37 = var32.recordParameter("Unversioned directory", var36);
    com.google.javascript.rhino.JSTypeExpression var38 = null;
    boolean var40 = var32.recordThrowDescription(var38, "");
    com.google.javascript.rhino.JSDocInfoBuilder var42 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var43 = var42.recordExpose();
    boolean var45 = var42.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.InputId var52 = com.google.javascript.jscomp.NodeUtil.getInputId(var49);
    com.google.javascript.rhino.jstype.JSType var53 = null;
    var49.setJSType(var53);
    com.google.javascript.rhino.JSDocInfo var55 = var42.build(var49);
    java.lang.String var56 = var55.getFileOverview();
    java.util.Set var57 = var55.getModifies();
    boolean var58 = var32.recordSuppressions(var57);
    boolean var59 = var13.recordModifies(var57);
    var0.setStripNamePrefixes(var57);
    var0.setAliasExternals(true);
    var0.setProcessCommonJSModules(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test276"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.util.List var20 = var19.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    var21.clearNodeAnnotations();
    java.util.List var24 = var21.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    var25.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var25.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var37 = null;
    var25.setSourceMapDetailLevel(var37);
    com.google.javascript.jscomp.CodingConvention var39 = var25.getCodingConvention();
    var25.setMarkNoSideEffectCalls(false);
    var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var20, var24, var25);
    com.google.javascript.jscomp.LightweightMessageFormatter var43 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
    com.google.javascript.rhino.JSDocInfoBuilder var45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var46 = var45.recordExpose();
    boolean var48 = var45.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    com.google.javascript.rhino.InputId var55 = com.google.javascript.jscomp.NodeUtil.getInputId(var52);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    var52.setJSType(var56);
    com.google.javascript.rhino.JSDocInfo var58 = var45.build(var52);
    java.lang.String var59 = var58.getFileOverview();
    boolean var60 = var58.hasFileOverview();
    boolean var61 = var58.hasReturnType();
    boolean var62 = var58.hasType();
    boolean var63 = var58.isHidden();
    boolean var64 = var58.isInterface();
    com.google.common.collect.ImmutableList var65 = var58.getTemplateTypeNames();
    com.google.javascript.jscomp.NodeTraversal.Callback var66 = null;
    com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var3, (java.util.List)var65, var66);
    com.google.javascript.jscomp.LightweightMessageFormatter var68 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test277"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    com.google.javascript.jscomp.JSModule var13 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var14 = var13.getDependencies();
    int var15 = var13.getDepth();
    var13.clearAsts();
    com.google.javascript.rhino.JSDocInfoBuilder var18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var19 = var18.recordExpose();
    boolean var20 = var18.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var22 = null;
    boolean var23 = var18.recordParameter("Unversioned directory", var22);
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var26 = var18.recordThrowDescription(var24, "");
    com.google.javascript.jscomp.SourceFile var31 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var18.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var31, 0, 0);
    java.io.Reader var35 = var31.getCodeReader();
    var13.add(var31);
    int var37 = var13.getDepth();
    com.google.javascript.jscomp.Compiler var38 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var39 = var38.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var40 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var38);
    com.google.javascript.jscomp.ErrorManager var41 = var38.getErrorManager();
    var13.sortInputsByDeps(var38);
    java.util.List var43 = var13.getDependencies();
    var0.setReplaceStringsFunctionDescriptions(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test278"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var61 = var58.matchesUint32Context();
    com.google.javascript.rhino.jstype.JSType var63 = var58.findPropertyType("STRING hi 0 [length: 2]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test279"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var1, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticGroup var4 = com.google.javascript.jscomp.DiagnosticGroup.forType(var3);
    com.google.javascript.jscomp.DiagnosticGroup var5 = com.google.javascript.jscomp.DiagnosticGroup.forType(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test280"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var4 = var2.isConstantKey("2014/12/24 11:10");
    java.lang.String var5 = var2.getAbstractMethodName();
    boolean var6 = var1.equals((java.lang.Object)var5);
    java.lang.String var7 = var1.getIdName();
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var11 = var9.isConstantKey("2014/12/24 11:10");
    java.util.Collection var12 = var9.getAssertionFunctions();
    com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var16.setJSType(var17);
    boolean var19 = var16.isScript();
    com.google.javascript.rhino.Node var20 = var16.removeFirstChild();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var24 = var23.isGetterDef();
    boolean var25 = var23.isAdd();
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    boolean var32 = var29.isVarArgs();
    com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
    com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
    java.lang.String var43 = var42.toStringTree();
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    boolean var51 = var47.getBooleanProp(100);
    int var52 = var47.getSideEffectFlags();
    boolean var53 = var47.isDefaultCase();
    com.google.javascript.rhino.Node var54 = new com.google.javascript.rhino.Node(1, var23, var42, var47);
    java.lang.String var55 = var9.extractClassNameIfProvide(var16, var47);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var58 = var57.isGetterDef();
    boolean var59 = var57.isNE();
    boolean var60 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var57);
    com.google.javascript.rhino.Node var61 = var16.clonePropsFrom(var57);
    boolean var62 = var61.isThis();
    com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(3, var61, 10, 3);
    boolean var66 = var1.equals((java.lang.Object)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "goog.abstractMethod"+ "'", var5.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var43.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test281"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var6 = var4.withReturnType(var5);
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var8.unregisterPropertyOnType("Unversioned directory", var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.jscomp.JSModule var14 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var15 = var14.getDependencies();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var8.createFunctionTypeWithVarArgs(var12, var15);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var20 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    com.google.javascript.rhino.Node var29 = var24.getChildAtIndex(1);
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    com.google.javascript.rhino.JSDocInfo var36 = var33.getJSDocInfo();
    com.google.javascript.rhino.Node var37 = var24.copyInformationFrom(var33);
    java.lang.Object var39 = null;
    var24.putProp(0, var39);
    com.google.javascript.rhino.JSTypeExpression var42 = new com.google.javascript.rhino.JSTypeExpression(var24, "()");
    com.google.javascript.rhino.jstype.StaticScope var43 = null;
    com.google.javascript.rhino.ErrorReporter var44 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var44);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    var45.unregisterPropertyOnType("Unversioned directory", var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    boolean var51 = var45.canPropertyBeDefined(var49, "BANG");
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.Node var54 = var45.createParameters(var53);
    com.google.javascript.rhino.jstype.JSType var55 = var42.evaluate(var43, var45);
    boolean var56 = var20.addVarArgs(var55);
    boolean var57 = var55.isEnumElementType();
    boolean var58 = var55.isNullable();
    boolean var59 = var55.matchesNumberContext();
    boolean var60 = var17.differsFrom(var55);
    com.google.javascript.rhino.jstype.FunctionBuilder var61 = var4.withReturnType((com.google.javascript.rhino.jstype.JSType)var17);
    com.google.javascript.rhino.jstype.TemplateType var62 = var17.toMaybeTemplateType();
    boolean var63 = var17.isReturnTypeInferred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test282"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.setRewriteNewDateGoogNow(false);
    var0.setDebugFunctionSideEffectsPath("OFF");
    var0.setInlineLocalFunctions(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test283"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    byte[] var4 = new byte[] { (byte)100};
    var0.setInputPropertyMapSerialized(var4);
    var0.setSyntheticBlockEndMarker("(LABEL_NAME hi!)");
    com.google.javascript.jscomp.DefaultPassConfig var8 = new com.google.javascript.jscomp.DefaultPassConfig(var0);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var9 = var0.getLanguageOut();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test284"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.ErrorFormat var7 = null;
    var0.setErrorFormat(var7);
    var0.setRenamePrefix("hi");
    var0.setAcceptConstKeyword(true);
    boolean var13 = var0.isRemoveUnusedClassProperties();
    com.google.javascript.jscomp.DependencyOptions var14 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var16 = var14.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var18 = var16.setMoocherDropping(true);
    com.google.javascript.jscomp.DependencyOptions var20 = var18.setDependencyPruning(false);
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var22 = null;
    var21.setStripTypes(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var25 = var24.getDirectedGraphNodes();
    java.util.List var26 = var24.getEdges();
    var21.setManageClosureDependencies(var26);
    var21.setDevirtualizePrototypeMethods(true);
    var21.setInlineLocalVariables(false);
    var21.setFoldConstants(false);
    var21.setAssumeStrictThis(false);
    boolean var36 = var21.assumeStrictThis();
    com.google.javascript.jscomp.SourceMap.Format var37 = null;
    var21.setSourceMapFormat(var37);
    var21.resetWarningsGuard();
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    var40.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var40.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var52 = null;
    var40.setSourceMapDetailLevel(var52);
    var40.setInlineLocalFunctions(true);
    com.google.javascript.rhino.JSDocInfoBuilder var57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var58 = var57.recordExpose();
    boolean var60 = var57.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = var64.getNext();
    com.google.javascript.rhino.Node var66 = var62.srcrefTree(var64);
    com.google.javascript.rhino.InputId var67 = com.google.javascript.jscomp.NodeUtil.getInputId(var64);
    com.google.javascript.rhino.jstype.JSType var68 = null;
    var64.setJSType(var68);
    com.google.javascript.rhino.JSDocInfo var70 = var57.build(var64);
    java.lang.String var71 = var70.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var72 = var70.getType();
    java.util.Set var73 = var70.getSuppressions();
    var40.setExtraAnnotationNames(var73);
    var21.setExtraAnnotationNames(var73);
    com.google.javascript.jscomp.DependencyOptions var76 = var18.setEntryPoints((java.util.Collection)var73);
    var0.setDependencyOptions(var76);
    com.google.javascript.jscomp.DependencyOptions var79 = var76.setMoocherDropping(false);
    com.google.javascript.jscomp.DependencyOptions var81 = var76.setDependencyPruning(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test285"); }


    com.google.javascript.jscomp.CheckLevel var1 = null;
    com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var1, "Unversioned directory");
    com.google.javascript.jscomp.DiagnosticType[] var4 = new com.google.javascript.jscomp.DiagnosticType[] { var3};
    com.google.javascript.jscomp.DiagnosticGroup var5 = new com.google.javascript.jscomp.DiagnosticGroup(var4);
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var7 = null;
    var6.setStripTypes(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    java.util.List var11 = var9.getEdges();
    var6.setManageClosureDependencies(var11);
    boolean var13 = var6.isExternExportsEnabled();
    var6.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var18 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var20 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var21 = com.google.javascript.jscomp.JSError.make(var18, var20);
    int var22 = var21.getCharno();
    com.google.javascript.jscomp.CheckLevel var23 = var21.getDefaultLevel();
    var6.setReportUnknownTypes(var23);
    com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var25 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var5, var23);
    com.google.javascript.jscomp.WarningsGuard[] var26 = new com.google.javascript.jscomp.WarningsGuard[] { var25};
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test286"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var35 = null;
    var34.setResolveMode(var35);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var37 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var34);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    boolean var44 = var41.isVarArgs();
    com.google.javascript.rhino.Node var46 = var41.getChildAtIndex(1);
    java.util.Collection var47 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var41);
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = var51.getNext();
    com.google.javascript.rhino.Node var53 = var49.srcrefTree(var51);
    boolean var55 = var51.getBooleanProp(100);
    int var56 = var51.getSideEffectFlags();
    boolean var57 = var51.isDefaultCase();
    com.google.javascript.rhino.jstype.JSType var58 = null;
    var51.setJSType(var58);
    boolean var60 = var41.isEquivalentTo(var51);
    boolean var61 = var51.isNot();
    com.google.javascript.jscomp.type.FlowScope var62 = null;
    com.google.javascript.jscomp.type.FlowScope var64 = var37.getPreciserScopeKnowingConditionOutcome(var51, var62, false);
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var69 = var68.hasOneChild();
    com.google.javascript.rhino.Node var73 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.returnNode();
    boolean var75 = var74.isArrayLit();
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var79 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var80 = var79.getNext();
    com.google.javascript.rhino.Node var81 = var77.srcrefTree(var79);
    boolean var82 = var79.isVarArgs();
    boolean var83 = var79.isOptionalArg();
    com.google.javascript.rhino.Node var86 = new com.google.javascript.rhino.Node(0, var68, var73, var74, var79, 1, 100);
    java.lang.String var87 = var74.getQualifiedName();
    boolean var88 = var74.isFor();
    boolean var89 = var74.isDo();
    com.google.javascript.jscomp.type.FlowScope var90 = null;
    com.google.javascript.jscomp.type.FlowScope var92 = var37.getPreciserScopeKnowingConditionOutcome(var74, var90, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test287"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var1.hasNamespace("goog.abstractMethod: null(null)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test288"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var35 = null;
    var34.setResolveMode(var35);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var37 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var34);
    java.lang.String var38 = var0.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "goog.global"+ "'", var38.equals("goog.global"));

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test289"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var1 = var0.cloneTree();
    java.lang.String var2 = com.google.javascript.jscomp.NodeUtil.getSourceName(var0);
    var0.putBooleanProp(153, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test290"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = null;
    var14.setVisibility(var20);
    com.google.javascript.rhino.Node var22 = var14.getAssociatedNode();
    java.lang.String var23 = var14.getMeaning();
    boolean var24 = var14.isInterface();
    java.lang.String var25 = var14.getDescription();
    boolean var26 = var14.isDeprecated();
    int var27 = var14.getExtendedInterfacesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test291"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    boolean var90 = var48.isEmptyType();
    com.google.javascript.rhino.Node var91 = var48.getParametersNode();
    java.lang.Iterable var92 = var48.getOwnImplementedInterfaces();
    com.google.javascript.rhino.JSDocInfo var94 = var48.getOwnPropertyJSDocInfo("module$");
    java.lang.Iterable var95 = var48.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test292"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getType();
    boolean var19 = var14.isConsistentIdGenerator();
    int var20 = var14.getImplementedInterfaceCount();
    java.util.List var21 = var14.getImplementedInterfaces();
    boolean var23 = var14.hasDescriptionForParameter("Unversioned directory");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test293"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var4 = var0.newSubGraph();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    var19.setDeprecated(false);
    boolean var22 = var19.isNoAlias();
    boolean var23 = var19.hasThisType();
    java.lang.String var24 = var19.getVersion();
    com.google.javascript.jscomp.graph.GraphNode var25 = var0.getNode((java.lang.Object)var19);
    java.lang.String var26 = var19.getLicense();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test294"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "()");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test295"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.matchesObjectContext();
    com.google.javascript.rhino.JSDocInfo var64 = var58.getOwnPropertyJSDocInfo("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test296"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    boolean var6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var4);
    int var7 = var4.getLength();
    com.google.javascript.rhino.Node var8 = null;
    boolean var9 = var4.hasChild(var8);
    com.google.javascript.rhino.Node var10 = var2.useSourceInfoIfMissingFromForTree(var4);
    com.google.javascript.jscomp.CodingConvention.Bind var12 = var0.describeFunctionBind(var2, false);
    int var13 = var2.getSourcePosition();
    boolean var14 = var2.isTrue();
    com.google.javascript.rhino.Node var15 = null;
    com.google.javascript.jscomp.ClosureCodingConvention var16 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var18 = var16.isConstantKey("2014/12/24 11:10");
    com.google.javascript.jscomp.ClosureCodingConvention var19 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var16);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.Node.newNumber(1.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var22 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var24 = var22.isConstantKey("2014/12/24 11:10");
    java.util.Collection var25 = var22.getAssertionFunctions();
    java.lang.String var26 = var22.getAbstractMethodName();
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = var31.getNext();
    com.google.javascript.rhino.Node var33 = var29.srcrefTree(var31);
    boolean var34 = var31.isVarArgs();
    boolean var35 = var31.isOptionalArg();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var37 = new com.google.javascript.rhino.Node(0, var31, var36);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var38 = var22.getClassesDefinedByCall(var31);
    com.google.javascript.jscomp.ClosureCodingConvention var39 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var41 = var39.isConstantKey("2014/12/24 11:10");
    java.util.Collection var42 = var39.getAssertionFunctions();
    boolean var44 = var39.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    boolean var52 = var48.isOptionalArg();
    java.lang.String var56 = var48.toString(false, false, true);
    java.util.List var57 = var39.identifyTypeDeclarationCall(var48);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var58 = var22.getClassesDefinedByCall(var48);
    java.lang.String var59 = var19.extractClassNameIfRequire(var21, var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.forIn(var2, var15, var48);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "goog.abstractMethod"+ "'", var26.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "BANG"+ "'", var56.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test297"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var68 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var11);
    boolean var69 = var68.hasVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test298() {}
//   public void test298() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test298"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var1 = null;
//     var0.setStripTypes(var1);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var4 = var3.getDirectedGraphNodes();
//     java.util.List var5 = var3.getEdges();
//     var0.setManageClosureDependencies(var5);
//     var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     var0.setColorizeErrorOutput(true);
//     com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
//     var0.setSourceMapDetailLevel(var12);
//     com.google.javascript.jscomp.CodingConvention var14 = var0.getCodingConvention();
//     var0.setMarkNoSideEffectCalls(false);
//     var0.resetWarningsGuard();
//     var0.setReserveRawExports(false);
//     var0.setLabelRenaming(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var22 = null;
//     var0.setRemoveUnusedVariables(var22);
// 
//   }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test299"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    int var2 = var1.getErrorCount();
    var1.setTypedPercent(10.0d);
    var1.setTypedPercent(1.0d);
    com.google.javascript.jscomp.JSError[] var7 = var1.getErrors();
    var1.setTypedPercent(1.0d);
    com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test300"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setGroupVariableDeclarations(false);
    var0.setInferTypes(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var36 = var35.getGraphvizEdges();
    var0.setReplaceStringsConfiguration("hi!", var36);
    var0.setInputDelimiter("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var0.setLocale("{160498324}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test301"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.JSType var31 = var24.getReturnType();
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.unregisterPropertyOnType("Unversioned directory", var35);
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.jscomp.JSModule var39 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var40 = var39.getDependencies();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.block(var40);
    com.google.javascript.rhino.jstype.FunctionType var42 = var33.createFunctionTypeWithVarArgs(var37, var40);
    boolean var43 = var42.hasAnyTemplateInternal();
    java.lang.Iterable var44 = var42.getAllExtendedInterfaces();
    boolean var45 = var42.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var58 = var56.removeProperty("null(null)");
    var42.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var56);
    java.lang.String var60 = var42.getDisplayName();
    com.google.javascript.rhino.jstype.JSType var61 = var42.collapseUnion();
    var24.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test302"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.lang.Iterable var29 = var24.getOwnImplementedInterfaces();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var32 = null;
    var31.setResolveMode(var32);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var34 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var31);
    com.google.javascript.rhino.ErrorReporter var35 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    var36.unregisterPropertyOnType("Unversioned directory", var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.jscomp.JSModule var42 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var43 = var42.getDependencies();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.block(var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var36.createFunctionTypeWithVarArgs(var40, var43);
    boolean var46 = var45.hasAnyTemplateInternal();
    java.lang.Iterable var47 = var45.getAllExtendedInterfaces();
    boolean var48 = var45.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    var50.unregisterPropertyOnType("Unversioned directory", var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.block(var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var50.createFunctionTypeWithVarArgs(var54, var57);
    boolean var61 = var59.removeProperty("null(null)");
    var45.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var59);
    com.google.javascript.rhino.jstype.JSType var64 = var31.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var59, "hi!");
    boolean var65 = var59.matchesInt32Context();
    var59.clearCachedValues();
    boolean var67 = var24.canTestForEqualityWith((com.google.javascript.rhino.jstype.JSType)var59);
    com.google.javascript.rhino.jstype.ObjectType var68 = var24.getTypeOfThis();
    boolean var69 = var24.isArrayType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test303"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var34 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var36 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var37 = com.google.javascript.jscomp.JSError.make(var34, var36);
    int var38 = var37.getCharno();
    com.google.javascript.jscomp.CheckLevel var39 = var37.getDefaultLevel();
    var0.setCheckGlobalThisLevel(var39);
    com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var42 = null;
    var41.setStripTypes(var42);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var44 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var45 = var44.getDirectedGraphNodes();
    java.util.List var46 = var44.getEdges();
    var41.setManageClosureDependencies(var46);
    boolean var48 = var41.isExternExportsEnabled();
    var41.setCheckCaja(false);
    java.util.Set var51 = null;
    var41.setReplaceStringsReservedStrings(var51);
    com.google.javascript.rhino.JSDocInfoBuilder var54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var55 = var54.recordExpose();
    boolean var57 = var54.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var61 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = var61.getNext();
    com.google.javascript.rhino.Node var63 = var59.srcrefTree(var61);
    com.google.javascript.rhino.InputId var64 = com.google.javascript.jscomp.NodeUtil.getInputId(var61);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var61.setJSType(var65);
    com.google.javascript.rhino.JSDocInfo var67 = var54.build(var61);
    java.lang.String var68 = var67.getFileOverview();
    java.util.Set var69 = var67.getModifies();
    var41.setReplaceStringsReservedStrings(var69);
    var41.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var75 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var77 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make(var75, var77);
    int var79 = var78.getCharno();
    com.google.javascript.jscomp.CheckLevel var80 = var78.getDefaultLevel();
    var41.setCheckGlobalThisLevel(var80);
    var0.setBrokenClosureRequiresLevel(var80);
    var0.setGeneratePseudoNames(true);
    var0.setAppNameStr("BANG 0\n    STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test304"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.jscomp.CompilerOptions var48 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var49 = null;
    var48.setStripTypes(var49);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var51 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var52 = var51.getDirectedGraphNodes();
    java.util.List var53 = var51.getEdges();
    var48.setManageClosureDependencies(var53);
    boolean var55 = var48.isExternExportsEnabled();
    var48.setCheckCaja(false);
    var48.setRemoveUnusedPrototypeProperties(true);
    var48.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var64 = var63.recordExpose();
    boolean var66 = var63.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var68 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var70 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var71 = var70.getNext();
    com.google.javascript.rhino.Node var72 = var68.srcrefTree(var70);
    com.google.javascript.rhino.InputId var73 = com.google.javascript.jscomp.NodeUtil.getInputId(var70);
    com.google.javascript.rhino.jstype.JSType var74 = null;
    var70.setJSType(var74);
    com.google.javascript.rhino.JSDocInfo var76 = var63.build(var70);
    java.util.Collection var77 = var76.getAuthors();
    com.google.common.collect.ImmutableList var78 = var76.getTemplateTypeNames();
    var48.setSourceMapLocationMappings((java.util.List)var78);
    com.google.javascript.jscomp.CompilerOptions var80 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var81 = null;
    var80.setStripTypes(var81);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var83 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var84 = var83.getDirectedGraphNodes();
    java.util.List var85 = var83.getEdges();
    var80.setManageClosureDependencies(var85);
    var80.setDevirtualizePrototypeMethods(true);
    var80.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var91 = var80.getTweakProcessing();
    boolean var92 = var80.getInferTypes();
    var3.<com.google.javascript.jscomp.SourceFile>initModules(var31, (java.util.List)var78, var80);
    com.google.javascript.jscomp.CodingConvention var94 = var3.getCodingConvention();
    int var95 = var3.getErrorCount();
    java.lang.String var96 = var3.toSource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.processDefines();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test305"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var2.setMoocherDropping(true);
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.lang.String var20 = var19.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var21 = var19.getType();
    java.util.Set var22 = var19.getSuppressions();
    com.google.javascript.jscomp.DependencyOptions var23 = var2.setEntryPoints((java.util.Collection)var22);
    com.google.javascript.jscomp.DependencyOptions var25 = var2.setDependencySorting(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test306"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    byte[] var4 = new byte[] { (byte)100};
    var0.setInputPropertyMapSerialized(var4);
    var0.setAssumeClosuresOnlyCaptureReferences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test307"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.jscomp.Region var7 = var3.getSourceRegion("2014/12/24 11:10", 0);
    var3.disableThreads();
    com.google.javascript.jscomp.LightweightMessageFormatter var9 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
    com.google.javascript.jscomp.ClosureCodingConvention var10 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var12 = var10.isConstantKey("2014/12/24 11:10");
    java.util.Collection var13 = var10.getAssertionFunctions();
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var17.setJSType(var18);
    boolean var20 = var17.isScript();
    com.google.javascript.rhino.Node var21 = var17.removeFirstChild();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var25 = var24.isGetterDef();
    boolean var26 = var24.isAdd();
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    boolean var33 = var30.isVarArgs();
    com.google.javascript.rhino.Node var35 = var30.getChildAtIndex(1);
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = var39.getNext();
    com.google.javascript.rhino.Node var41 = var37.srcrefTree(var39);
    com.google.javascript.rhino.JSDocInfo var42 = var39.getJSDocInfo();
    com.google.javascript.rhino.Node var43 = var30.copyInformationFrom(var39);
    java.lang.String var44 = var43.toStringTree();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var52 = var48.getBooleanProp(100);
    int var53 = var48.getSideEffectFlags();
    boolean var54 = var48.isDefaultCase();
    com.google.javascript.rhino.Node var55 = new com.google.javascript.rhino.Node(1, var24, var43, var48);
    java.lang.String var56 = var10.extractClassNameIfProvide(var17, var48);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.Node.newString("", (-1), 1);
    com.google.javascript.rhino.Node var61 = var48.clonePropsFrom(var60);
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.Node.newString(0, "(LABEL_NAME hi!)", 0, (-1));
    boolean var67 = var66.isEmpty();
    boolean var68 = var61.hasChild(var66);
    com.google.javascript.jscomp.NodeTraversal.Callback var69 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var3, var66, var69);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var44.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test308"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.BooleanLiteralSet var31 = var24.getPossibleToBooleanOutcomes();
    boolean var33 = var24.hasOwnProperty("hi!");
    com.google.javascript.rhino.Node var34 = var24.getParametersNode();
    var34.putIntProp(306, (-19));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test309"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceAst var7 = var3.getSourceAst();
//     com.google.javascript.jscomp.SourceAst var8 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var11 = var10.getDependencies();
//     com.google.javascript.jscomp.SourceAst var12 = null;
//     com.google.javascript.rhino.InputId var13 = null;
//     com.google.javascript.jscomp.CompilerInput var15 = new com.google.javascript.jscomp.CompilerInput(var12, var13, true);
//     com.google.javascript.jscomp.JSModule var16 = var15.getModule();
//     var10.add(var15);
//     com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var10.addFirst(var19);
//     java.util.Set var21 = var10.getAllDependencies();
//     var10.removeAll();
//     com.google.javascript.jscomp.SourceAst var23 = null;
//     com.google.javascript.rhino.InputId var24 = null;
//     com.google.javascript.jscomp.CompilerInput var26 = new com.google.javascript.jscomp.CompilerInput(var23, var24, true);
//     com.google.javascript.jscomp.CompilerInput var29 = new com.google.javascript.jscomp.CompilerInput(var23, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var10.addFirst(var29);
//     com.google.javascript.jscomp.SourceAst var31 = null;
//     com.google.javascript.rhino.InputId var32 = null;
//     com.google.javascript.jscomp.CompilerInput var34 = new com.google.javascript.jscomp.CompilerInput(var31, var32, true);
//     com.google.javascript.jscomp.SourceAst var35 = var34.getAst();
//     com.google.javascript.jscomp.JSModule var36 = null;
//     var34.setModule(var36);
//     var10.add(var34);
//     var3.setModule(var10);
//     int var41 = var3.getLineOffset(21);
// 
//   }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test310"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.jscomp.graph.GraphNode var4 = var0.createNode((java.lang.Object)var3);
    boolean var5 = var3.isTypeOf();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.exprResult(var3);
    com.google.javascript.rhino.Node var7 = var3.removeFirstChild();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test311"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.JSError[] var4 = var3.getMessages();
    com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var7 = var6.recordExpose();
    boolean var9 = var6.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    com.google.javascript.rhino.InputId var16 = com.google.javascript.jscomp.NodeUtil.getInputId(var13);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var13.setJSType(var17);
    com.google.javascript.rhino.JSDocInfo var19 = var6.build(var13);
    java.util.List var20 = var19.getThrownTypes();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    var21.clearNodeAnnotations();
    java.util.List var24 = var21.getGraphvizEdges();
    com.google.javascript.jscomp.CompilerOptions var25 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var26 = null;
    var25.setStripTypes(var26);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var28 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var29 = var28.getDirectedGraphNodes();
    java.util.List var30 = var28.getEdges();
    var25.setManageClosureDependencies(var30);
    var25.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var25.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var37 = null;
    var25.setSourceMapDetailLevel(var37);
    com.google.javascript.jscomp.CodingConvention var39 = var25.getCodingConvention();
    var25.setMarkNoSideEffectCalls(false);
    var3.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var20, var24, var25);
    com.google.javascript.jscomp.LightweightMessageFormatter var43 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3);
    boolean var44 = var3.hasErrors();
    var3.rebuildInputsFromModules();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test312"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = var2.getNext();
    int var4 = var2.getSourceOffset();
    com.google.javascript.rhino.Node var5 = var2.cloneNode();
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    int var9 = var7.getSourceOffset();
    com.google.javascript.rhino.Node var10 = var7.cloneNode();
    var5.addChildrenToFront(var10);
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(10, var5, (-1), 100);
    var14.setLength(306);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.NodeUtil.newExpr(var14);
    com.google.javascript.rhino.Node var18 = var14.getParent();
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    int var22 = var20.getSourceOffset();
    com.google.javascript.rhino.Node var23 = var20.removeFirstChild();
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    boolean var29 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var27);
    int var30 = var27.getLength();
    com.google.javascript.rhino.Node var31 = null;
    boolean var32 = var27.hasChild(var31);
    com.google.javascript.rhino.Node var33 = var25.useSourceInfoIfMissingFromForTree(var27);
    var27.setSourceFileForTesting("Unversioned directory");
    boolean var36 = var27.isWith();
    com.google.javascript.rhino.jstype.StaticSourceFile var37 = var27.getStaticSourceFile();
    com.google.javascript.rhino.Node var38 = var20.srcref(var27);
    java.lang.String var39 = var20.toStringTree();
    boolean var40 = var20.isFromExterns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.regexp(var18, var20);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "BANG 0 [source_file: Unversioned directory]\n"+ "'", var39.equals("BANG 0 [source_file: Unversioned directory]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test313"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var7 = var5.getBooleanProp((-1));
    var5.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var11 = new com.google.javascript.rhino.JSTypeExpression(var5, "goog.abstractMethod");
    boolean var12 = var0.isPrototypeAlias(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.throwNode(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test314"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.jstype.JSType var35 = var34.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.dereference();
    boolean var37 = var36.isUnknownType();
    com.google.javascript.rhino.JSDocInfoBuilder var40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var41 = var40.recordExpose();
    boolean var43 = var40.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.InputId var50 = com.google.javascript.jscomp.NodeUtil.getInputId(var47);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var47.setJSType(var51);
    com.google.javascript.rhino.JSDocInfo var53 = var40.build(var47);
    java.util.List var54 = var53.getThrownTypes();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isOr();
    var53.setAssociatedNode(var58);
    boolean var63 = var53.isNoSideEffects();
    java.util.List var64 = var53.getThrownTypes();
    var36.setPropertyJSDocInfo("ERROR", var53);
    java.util.Collection var66 = var53.getTypeNodes();
    java.lang.String var68 = var53.getDescriptionForParameter("function (): {540092593}");
    boolean var69 = var53.hasThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test315"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    var2.generateReport();
    double var4 = var2.getTypedPercent();
    var2.setTypedPercent(0.0d);
    com.google.javascript.jscomp.JSError[] var7 = var2.getErrors();
    var2.setTypedPercent(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test316"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("module$InputId: InputId: ", "function (): ?");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test317"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    int var28 = var24.getExtendedInterfacesCount();
    java.util.Set var29 = var24.getOwnPropertyNames();
    java.lang.Iterable var30 = var24.getCtorImplementedInterfaces();
    com.google.javascript.rhino.jstype.JSType var31 = var24.getReturnType();
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var33.unregisterPropertyOnType("Unversioned directory", var35);
    var33.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    boolean var46 = var43.isVarArgs();
    boolean var47 = var43.isFor();
    boolean var48 = var43.isNumber();
    com.google.javascript.rhino.Node var49 = var43.getNext();
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    com.google.javascript.rhino.Node var58 = var53.getChildAtIndex(1);
    com.google.javascript.rhino.Node var60 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var62 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var63 = var62.getNext();
    com.google.javascript.rhino.Node var64 = var60.srcrefTree(var62);
    com.google.javascript.rhino.JSDocInfo var65 = var62.getJSDocInfo();
    com.google.javascript.rhino.Node var66 = var53.copyInformationFrom(var62);
    java.lang.Object var68 = null;
    var53.putProp(0, var68);
    com.google.javascript.rhino.JSTypeExpression var71 = new com.google.javascript.rhino.JSTypeExpression(var53, "()");
    com.google.javascript.rhino.jstype.StaticScope var72 = null;
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    boolean var80 = var74.canPropertyBeDefined(var78, "BANG");
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.jstype.JSType[] var82 = new com.google.javascript.rhino.jstype.JSType[] { var81};
    com.google.javascript.rhino.Node var83 = var74.createParameters(var82);
    com.google.javascript.rhino.jstype.JSType var84 = var71.evaluate(var72, var74);
    com.google.javascript.rhino.jstype.JSType var85 = var84.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var86 = var85.dereference();
    boolean var87 = var85.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var88 = var33.createEnumType("STRING hi 0 [length: 2]\n", var43, var85);
    com.google.javascript.rhino.JSDocInfo var89 = var88.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var90 = var88.getElementsType();
    boolean var91 = var90.isNominalType();
    java.lang.String var92 = var90.toString();
    boolean var94 = var90.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.JSType.TypePair var95 = var24.getTypesUnderEquality((com.google.javascript.rhino.jstype.JSType)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var92.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test318"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setRemoveClosureAsserts(false);
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var16 = var14.isConstantKey("2014/12/24 11:10");
    java.util.Collection var17 = var14.getAssertionFunctions();
    com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var21.setJSType(var22);
    boolean var24 = var21.isScript();
    com.google.javascript.rhino.Node var25 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var29 = var28.isGetterDef();
    boolean var30 = var28.isAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.String var48 = var47.toStringTree();
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var52 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = var52.getNext();
    com.google.javascript.rhino.Node var54 = var50.srcrefTree(var52);
    boolean var56 = var52.getBooleanProp(100);
    int var57 = var52.getSideEffectFlags();
    boolean var58 = var52.isDefaultCase();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(1, var28, var47, var52);
    java.lang.String var60 = var14.extractClassNameIfProvide(var21, var52);
    var0.setCodingConvention((com.google.javascript.jscomp.CodingConvention)var14);
    var0.setDebugFunctionSideEffectsPath("");
    var0.setOptimizeCalls(true);
    com.google.javascript.jscomp.CssRenamingMap var66 = null;
    var0.setCssRenamingMap(var66);
    var0.setConvertToDottedProperties(false);
    var0.setRewriteFunctionExpressions(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var48.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test319"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.rhino.JSDocInfoBuilder var13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var14 = var13.recordExpose();
    boolean var16 = var13.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.InputId var23 = com.google.javascript.jscomp.NodeUtil.getInputId(var20);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var20.setJSType(var24);
    com.google.javascript.rhino.JSDocInfo var26 = var13.build(var20);
    java.lang.String var27 = var26.getFileOverview();
    java.util.Set var28 = var26.getModifies();
    var0.setReplaceStringsReservedStrings(var28);
    var0.setUnaliasableGlobals("");
    var0.setCheckControlStructures(false);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var34 = var0.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var35 = var0.getLanguageOut();
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var36 = null;
    var0.setAliasTransformationHandler(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test320"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newString("", (-1), 1);
    com.google.javascript.rhino.Node var51 = var38.clonePropsFrom(var50);
    java.lang.String var52 = var50.getString();
    boolean var53 = var50.isObjectLit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test321"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    com.google.javascript.rhino.jstype.JSType var61 = var58.getPropertyType("(2014/12/24 11:10)");
    boolean var63 = var58.isPropertyTypeInferred("");
    boolean var65 = var58.isPropertyTypeInferred("module$function (): {140836661}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test322"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    var3.unregisterPropertyOnType("Unversioned directory", var5);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var10 = var9.getDependencies();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.block(var10);
    com.google.javascript.rhino.jstype.FunctionType var12 = var3.createFunctionTypeWithVarArgs(var7, var10);
    boolean var13 = var12.hasAnyTemplateInternal();
    java.lang.Iterable var14 = var12.getAllExtendedInterfaces();
    boolean var15 = var12.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.jscomp.JSModule var24 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var25 = var24.getDependencies();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.block(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var18.createFunctionTypeWithVarArgs(var22, var25);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var30 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    com.google.javascript.rhino.Node var39 = var34.getChildAtIndex(1);
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = var43.getNext();
    com.google.javascript.rhino.Node var45 = var41.srcrefTree(var43);
    com.google.javascript.rhino.JSDocInfo var46 = var43.getJSDocInfo();
    com.google.javascript.rhino.Node var47 = var34.copyInformationFrom(var43);
    java.lang.Object var49 = null;
    var34.putProp(0, var49);
    com.google.javascript.rhino.JSTypeExpression var52 = new com.google.javascript.rhino.JSTypeExpression(var34, "()");
    com.google.javascript.rhino.jstype.StaticScope var53 = null;
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.JSType var65 = var52.evaluate(var53, var55);
    boolean var66 = var30.addVarArgs(var65);
    boolean var67 = var65.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.FunctionType var79 = var18.createConstructorType(var65, var77);
    com.google.javascript.rhino.jstype.JSType var81 = var79.getPropertyType("");
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var84 = var12.defineSynthesizedProperty("BANG 0\n    STRING hi 0 [length: 2]\n", var81, var83);
    com.google.javascript.rhino.jstype.JSType var85 = var12.getReturnType();
    boolean var86 = var85.canBeCalled();
    boolean var87 = var85.matchesNumberContext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var88 = var0.getWeight((java.lang.Object)var87);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test323"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    java.util.logging.Logger var7 = null;
    com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var7);
    com.google.javascript.jscomp.JSError[] var9 = var8.getWarnings();
    var3.setErrorManager((com.google.javascript.jscomp.ErrorManager)var8);
    com.google.javascript.jscomp.JSError[] var11 = var8.getErrors();
    var8.generateReport();
    var8.setTypedPercent(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test324"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
    com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var9 = var8.recordExpose();
    boolean var11 = var8.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = var15.getNext();
    com.google.javascript.rhino.Node var17 = var13.srcrefTree(var15);
    com.google.javascript.rhino.InputId var18 = com.google.javascript.jscomp.NodeUtil.getInputId(var15);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    var15.setJSType(var19);
    com.google.javascript.rhino.JSDocInfo var21 = var8.build(var15);
    java.lang.String var22 = var21.getFileOverview();
    com.google.javascript.rhino.JSDocInfo.Visibility var23 = null;
    var21.setVisibility(var23);
    boolean var25 = var21.isDeprecated();
    java.util.List var26 = var21.getExtendedInterfaces();
    var6.traverseRoots(var26);
    java.lang.String var28 = var6.getSourceName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test325"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var70 = var31.getTypeOfThis();
    boolean var71 = var70.isNumberValueType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test326"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isOr();
    java.lang.String var11 = var2.extractClassNameIfRequire(var3, var7);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    boolean var34 = var33.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    java.util.List var38 = var35.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCheckCaja(false);
    java.util.Set var49 = null;
    var39.setReplaceStringsReservedStrings(var49);
    var39.setAliasAllStrings(true);
    var39.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var39.setPropertyInvalidationErrors(var67);
    var2.defineDelegateProxyPrototypeProperties(var13, (com.google.javascript.rhino.jstype.StaticScope)var33, var38, var67);
    boolean var70 = var33.canBeCalled();
    boolean var71 = var33.isRegexpType();
    boolean var72 = var1.equals((java.lang.Object)var33);
    boolean var74 = var33.hasOwnProperty("RETURN");
    java.lang.String var75 = var33.getNormalizedReferenceName();
    boolean var76 = var33.isGlobalThisType();
    com.google.javascript.rhino.jstype.JSType var77 = var33.getReturnType();
    boolean var78 = var33.hasImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test327"); }
// 
// 
//     java.lang.Class var0 = null;
//     java.lang.Enum var2 = java.lang.Enum.<java.lang.Enum>valueOf(var0, "hi!: Unversioned directory");
// 
//   }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test328"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var8 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var0, var7);
    com.google.javascript.jscomp.ClosureCodingConvention var9 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var11 = var9.isConstantKey("2014/12/24 11:10");
    java.util.Collection var12 = var9.getAssertionFunctions();
    boolean var14 = var9.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    boolean var21 = var18.isVarArgs();
    boolean var22 = var18.isOptionalArg();
    java.lang.String var26 = var18.toString(false, false, true);
    java.util.List var27 = var9.identifyTypeDeclarationCall(var18);
    java.lang.String var28 = var9.getDelegateSuperclassName();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var30.unregisterPropertyOnType("Unversioned directory", var32);
    var30.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var38 = var37.getDirectedGraphNodes();
    java.util.List var39 = var37.getEdges();
    com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var41 = null;
    var40.setStripTypes(var41);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var44 = var43.getDirectedGraphNodes();
    java.util.List var45 = var43.getEdges();
    var40.setManageClosureDependencies(var45);
    boolean var47 = var40.isExternExportsEnabled();
    var40.setCheckCaja(false);
    var40.setGroupVariableDeclarations(true);
    java.util.Map var52 = var40.getDefineReplacements();
    var9.defineDelegateProxyPrototypeProperties(var30, var36, var39, var52);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    var55.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var61 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var9, var55);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var63 = var62.cloneTree();
    boolean var64 = var62.isVar();
    boolean var65 = var62.isAssignAdd();
    com.google.javascript.jscomp.type.FlowScope var66 = null;
    com.google.javascript.jscomp.type.FlowScope var68 = var61.getPreciserScopeKnowingConditionOutcome(var62, var66, false);
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var69 = var61.getFirst();
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var70 = var8.append((com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter)var61);
    com.google.javascript.jscomp.ClosureCodingConvention var71 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var73 = var71.isConstantKey("2014/12/24 11:10");
    java.util.Collection var74 = var71.getAssertionFunctions();
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = null;
    com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var76 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var71, var75);
    com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter var77 = var70.append((com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter)var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "BANG"+ "'", var26.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test329"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var9.unregisterPropertyOnType("Unversioned directory", var11);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.block(var16);
    com.google.javascript.rhino.jstype.FunctionType var18 = var9.createFunctionTypeWithVarArgs(var13, var16);
    boolean var20 = var18.removeProperty("null(null)");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var24 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    boolean var32 = var26.canPropertyBeDefined(var30, "BANG");
    com.google.javascript.rhino.jstype.JSType var33 = null;
    com.google.javascript.rhino.jstype.JSType[] var34 = new com.google.javascript.rhino.jstype.JSType[] { var33};
    com.google.javascript.rhino.Node var35 = var26.createParameters(var34);
    boolean var36 = var24.addRequiredParams(var34);
    com.google.javascript.rhino.jstype.FunctionType var37 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var18, false, var34);
    boolean var38 = var18.isAllType();
    java.lang.Iterable var39 = var18.getImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test330"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    java.lang.String var33 = var15.getDisplayName();
    com.google.javascript.rhino.jstype.JSType var35 = var15.getRestrictedTypeGivenToBooleanOutcome(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var36 = var1.withReturnType((com.google.javascript.rhino.jstype.JSType)var15);
    boolean var37 = var15.matchesInt32Context();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test331"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isOr();
    java.lang.String var11 = var2.extractClassNameIfRequire(var3, var7);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    boolean var34 = var33.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    java.util.List var38 = var35.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCheckCaja(false);
    java.util.Set var49 = null;
    var39.setReplaceStringsReservedStrings(var49);
    var39.setAliasAllStrings(true);
    var39.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var39.setPropertyInvalidationErrors(var67);
    var2.defineDelegateProxyPrototypeProperties(var13, (com.google.javascript.rhino.jstype.StaticScope)var33, var38, var67);
    boolean var70 = var33.canBeCalled();
    boolean var71 = var33.isRegexpType();
    boolean var72 = var1.equals((java.lang.Object)var33);
    boolean var74 = var33.hasOwnProperty("RETURN");
    com.google.javascript.rhino.jstype.JSType var76 = var33.findPropertyType("{proxy:{1743833346}}");
    java.lang.Iterable var77 = var33.getParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test332"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.Node var6 = var3.removeFirstChild();
    var6.setQuotedString();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.NodeUtil.newExpr(var6);
    com.google.javascript.rhino.JSDocInfoBuilder var10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var11 = var10.recordExpose();
    boolean var12 = var10.recordExterns();
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    boolean var19 = var16.isVarArgs();
    boolean var20 = var16.isArrayLit();
    com.google.javascript.rhino.Node var21 = var16.getNext();
    var10.markTypeNode(var16, 10, 100, 0, 0, false);
    var16.setOptionalArg(true);
    var8.addChildToFront(var16);
    boolean var31 = var16.isVar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test333() {}
//   public void test333() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test333"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
//     com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
//     com.google.javascript.rhino.jstype.JSType var5 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var6 = var4.withReturnType(var5);
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var9 = null;
//     var8.setResolveMode(var9);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var11 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var8);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var12 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var8);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var14.unregisterPropertyOnType("Unversioned directory", var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     boolean var20 = var14.canPropertyBeDefined(var18, "BANG");
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.jstype.JSType[] var22 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.Node var23 = var14.createParameters(var22);
//     boolean var24 = var12.addRequiredParams(var22);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = var28.getNext();
//     com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
//     boolean var31 = var28.isVarArgs();
//     boolean var32 = var28.isOptionalArg();
//     java.lang.String var36 = var28.toString(false, false, true);
//     com.google.javascript.rhino.Node var37 = var12.newOptionalParameterFromNode(var28);
//     com.google.javascript.rhino.JSDocInfoBuilder var39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var40 = var39.recordExpose();
//     boolean var41 = var39.recordExterns();
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var46 = var45.getNext();
//     com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
//     boolean var48 = var45.isVarArgs();
//     boolean var49 = var45.isArrayLit();
//     com.google.javascript.rhino.Node var50 = var45.getNext();
//     var39.markTypeNode(var45, 10, 100, 0, 0, false);
//     boolean var57 = var45.isCall();
//     com.google.javascript.rhino.Node var58 = var12.newParameterFromNode(var45);
//     com.google.javascript.rhino.jstype.FunctionBuilder var59 = var4.withSourceNode(var45);
//     com.google.javascript.rhino.jstype.FunctionType var60 = var59.build();
// 
//   }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test334"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.lang.String var3 = var0.getAbstractMethodName();
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.rhino.jstype.FunctionType var5 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var6 = null;
    var0.applySubclassRelationship(var4, var5, var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.JSDocInfo var14 = var11.getJSDocInfo();
    boolean var15 = var11.isWhile();
    boolean var16 = var11.isOnlyModifiesThisCall();
    com.google.javascript.jscomp.CodingConvention.Bind var18 = var0.describeFunctionBind(var11, false);
    java.util.Collection var19 = var0.getIndirectlyDeclaredProperties();
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var25 = var24.getNext();
    com.google.javascript.rhino.Node var26 = var22.srcrefTree(var24);
    boolean var27 = var24.isVarArgs();
    boolean var28 = var24.isOptionalArg();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var30 = new com.google.javascript.rhino.Node(0, var24, var29);
    boolean var31 = var29.isQualifiedName();
    com.google.javascript.rhino.Node var32 = var29.cloneNode();
    java.lang.String var33 = var32.toString();
    com.google.javascript.jscomp.CodingConvention.Bind var35 = var0.describeFunctionBind(var32, true);
    int var36 = var32.getSideEffectFlags();
    var32.setOptionalArg(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.abstractMethod"+ "'", var3.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "RETURN"+ "'", var33.equals("RETURN"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test335"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    boolean var58 = var56.isFunctionPrototypeType();
    boolean var59 = var56.matchesObjectContext();
    com.google.javascript.rhino.Node var63 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = var65.getNext();
    com.google.javascript.rhino.Node var67 = var63.srcrefTree(var65);
    boolean var68 = var65.isVarArgs();
    boolean var69 = var65.isOptionalArg();
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var71 = new com.google.javascript.rhino.Node(0, var65, var70);
    com.google.javascript.rhino.Node var73 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = var75.getNext();
    com.google.javascript.rhino.Node var77 = var73.srcrefTree(var75);
    boolean var78 = var73.isString();
    com.google.javascript.rhino.Node var79 = var71.useSourceInfoFromForTree(var73);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var80 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var81 = var80.getDirectedGraphNodes();
    java.util.List var82 = var80.getEdges();
    com.google.javascript.rhino.Node var84 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var85 = var84.getNext();
    int var86 = var84.getSourceOffset();
    com.google.javascript.rhino.Node var87 = var84.removeFirstChild();
    com.google.javascript.jscomp.graph.GraphNode var88 = var80.getNode((java.lang.Object)var84);
    boolean var89 = var73.hasChild(var84);
    var84.addSuppression("INHERITED");
    boolean var92 = var56.defineElement("hi", var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test336() {}
//   public void test336() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test336"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var0, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     int var7 = var6.getNumLines();
// 
//   }

  public void test337() {}
//   public void test337() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test337"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = var6.getNext();
//     boolean var8 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var6);
//     int var9 = var6.getLength();
//     com.google.javascript.rhino.Node var10 = null;
//     boolean var11 = var6.hasChild(var10);
//     com.google.javascript.rhino.Node var12 = var4.useSourceInfoIfMissingFromForTree(var6);
//     com.google.javascript.jscomp.CodingConvention.Bind var14 = var2.describeFunctionBind(var4, false);
//     int var15 = var4.getSourcePosition();
//     boolean var16 = var4.isTrue();
//     boolean var17 = var4.isWhile();
//     var1.validateRoot(var4);
// 
//   }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test338"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.lang.String var3 = var0.getAbstractMethodName();
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.rhino.jstype.FunctionType var5 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var6 = null;
    var0.applySubclassRelationship(var4, var5, var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    com.google.javascript.rhino.JSDocInfo var14 = var11.getJSDocInfo();
    boolean var15 = var11.isWhile();
    boolean var16 = var11.isOnlyModifiesThisCall();
    com.google.javascript.jscomp.CodingConvention.Bind var18 = var0.describeFunctionBind(var11, false);
    boolean var21 = var0.isExported("", false);
    java.lang.String var22 = var0.getExportPropertyFunction();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "goog.abstractMethod"+ "'", var3.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "goog.exportProperty"+ "'", var22.equals("goog.exportProperty"));

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test339"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    boolean var20 = var3.isThis();
    java.lang.String var21 = var3.toStringTree();
    boolean var22 = var3.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var21.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test340() {}
//   public void test340() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test340"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     int var3 = var1.getDepth();
//     var1.clearAsts();
//     com.google.javascript.rhino.JSDocInfoBuilder var6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var7 = var6.recordExpose();
//     boolean var8 = var6.recordExterns();
//     com.google.javascript.rhino.JSTypeExpression var10 = null;
//     boolean var11 = var6.recordParameter("Unversioned directory", var10);
//     com.google.javascript.rhino.JSTypeExpression var12 = null;
//     boolean var14 = var6.recordThrowDescription(var12, "");
//     com.google.javascript.jscomp.SourceFile var19 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
//     var6.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var19, 0, 0);
//     java.io.Reader var23 = var19.getCodeReader();
//     var1.add(var19);
//     int var25 = var1.getDepth();
//     com.google.javascript.jscomp.Compiler var26 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var27 = var26.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var28 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var26);
//     com.google.javascript.jscomp.ErrorManager var29 = var26.getErrorManager();
//     var1.sortInputsByDeps(var26);
//     com.google.javascript.jscomp.CodingConvention var31 = var26.getCodingConvention();
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var32 = var26.languageMode();
//     java.util.Map var33 = var26.getInputsById();
// 
//   }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test341"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isInterface();
    com.google.javascript.rhino.JSDocInfoBuilder var19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var20 = var19.recordExpose();
    boolean var22 = var19.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.InputId var29 = com.google.javascript.jscomp.NodeUtil.getInputId(var26);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var26.setJSType(var30);
    com.google.javascript.rhino.JSDocInfo var32 = var19.build(var26);
    java.lang.String var33 = var32.getFileOverview();
    boolean var34 = var32.hasFileOverview();
    boolean var35 = var32.hasReturnType();
    boolean var36 = var32.hasType();
    boolean var37 = var32.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var38 = var32.getVisibility();
    var14.setVisibility(var38);
    boolean var40 = var14.isConstant();
    java.lang.String var41 = var14.getDescription();
    com.google.javascript.rhino.JSTypeExpression var42 = var14.getReturnType();
    var14.setDeprecated(true);
    com.google.javascript.rhino.JSTypeExpression var45 = var14.getTypedefType();
    com.google.javascript.rhino.Node var46 = var14.getAssociatedNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test342"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    var0.setTweakToBooleanLiteral("", false);
    var0.setCheckSuspiciousCode(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test343"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.jstype.StaticScope var27 = null;
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var29.unregisterPropertyOnType("Unversioned directory", var31);
    com.google.javascript.rhino.jstype.JSType var33 = null;
    boolean var35 = var29.canPropertyBeDefined(var33, "BANG");
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var36};
    com.google.javascript.rhino.Node var38 = var29.createParameters(var37);
    com.google.javascript.rhino.jstype.JSType var39 = var26.evaluate(var27, var29);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var42 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = var46.getNext();
    com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
    boolean var49 = var46.isVarArgs();
    com.google.javascript.rhino.Node var51 = var46.getChildAtIndex(1);
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var56 = var55.getNext();
    com.google.javascript.rhino.Node var57 = var53.srcrefTree(var55);
    com.google.javascript.rhino.JSDocInfo var58 = var55.getJSDocInfo();
    com.google.javascript.rhino.Node var59 = var46.copyInformationFrom(var55);
    java.lang.Object var61 = null;
    var46.putProp(0, var61);
    com.google.javascript.rhino.JSTypeExpression var64 = new com.google.javascript.rhino.JSTypeExpression(var46, "()");
    com.google.javascript.rhino.jstype.StaticScope var65 = null;
    com.google.javascript.rhino.ErrorReporter var66 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var66);
    com.google.javascript.rhino.jstype.JSType var69 = null;
    var67.unregisterPropertyOnType("Unversioned directory", var69);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    boolean var73 = var67.canPropertyBeDefined(var71, "BANG");
    com.google.javascript.rhino.jstype.JSType var74 = null;
    com.google.javascript.rhino.jstype.JSType[] var75 = new com.google.javascript.rhino.jstype.JSType[] { var74};
    com.google.javascript.rhino.Node var76 = var67.createParameters(var75);
    com.google.javascript.rhino.jstype.JSType var77 = var64.evaluate(var65, var67);
    boolean var78 = var42.addVarArgs(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var39.getLeastSupertype(var77);
    var1.registerPropertyOnType("BANG 0\n    STRING hi 0 [length: 2]\n", var39);
    var1.clearTemplateTypeNames();
    com.google.javascript.rhino.jstype.FunctionParamBuilder var82 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var83 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var84 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var83);
    com.google.javascript.rhino.jstype.JSType var86 = null;
    var84.unregisterPropertyOnType("Unversioned directory", var86);
    var84.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.jstype.JSTypeNative[] var90 = com.google.javascript.rhino.jstype.JSTypeNative.values();
    com.google.javascript.rhino.jstype.JSType var91 = var84.createUnionType(var90);
    com.google.javascript.rhino.jstype.JSType var92 = var1.createUnionType(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test344"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.String var17 = var16.toStringTree();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.paramList(var16);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var17.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test345"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    boolean var21 = var14.hasDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test346"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setAssumeStrictThis(false);
    var0.setConvertToDottedProperties(false);
    var0.setGenerateExports(true);
    var0.setDefineToNumberLiteral("(InputId: )", 154);
    boolean var16 = var0.assumeStrictThis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test347"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var12 = null;
    var0.setSourceMapDetailLevel(var12);
    var0.setCollapseAnonymousFunctions(false);
    var0.setMarkNoSideEffectCalls(false);
    var0.setChainCalls(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test348"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isOr();
    java.lang.String var11 = var2.extractClassNameIfRequire(var3, var7);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    boolean var34 = var33.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    java.util.List var38 = var35.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCheckCaja(false);
    java.util.Set var49 = null;
    var39.setReplaceStringsReservedStrings(var49);
    var39.setAliasAllStrings(true);
    var39.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var39.setPropertyInvalidationErrors(var67);
    var2.defineDelegateProxyPrototypeProperties(var13, (com.google.javascript.rhino.jstype.StaticScope)var33, var38, var67);
    boolean var70 = var33.canBeCalled();
    boolean var71 = var33.isRegexpType();
    boolean var72 = var1.equals((java.lang.Object)var33);
    boolean var74 = var33.hasOwnProperty("RETURN");
    boolean var75 = var33.isReturnTypeInferred();
    com.google.javascript.rhino.jstype.JSType var76 = var33.getParameterType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test349"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getExportPropertyFunction();
    boolean var22 = var0.isValidEnumKey("InputId: ");
    boolean var24 = var0.isPrivate("goog.abstractMethod");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isArrayLit();
    com.google.javascript.rhino.Node var33 = var28.getNext();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var37 = var35.getBooleanProp((-1));
    var35.setSourceEncodedPosition(10);
    boolean var40 = var35.isContinue();
    boolean var41 = var35.isComma();
    com.google.javascript.rhino.Node var42 = var28.useSourceInfoFrom(var35);
    var28.putIntProp(0, 3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var46 = var0.getObjectLiteralCast(var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test350"); }


    com.google.javascript.jscomp.DependencyOptions var0 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var2 = var0.setDependencySorting(false);
    com.google.javascript.jscomp.DependencyOptions var4 = var2.setDependencyPruning(true);
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    int var13 = var11.getSourceOffset();
    com.google.javascript.rhino.Node var14 = var11.cloneNode();
    var9.addChildrenToFront(var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    com.google.javascript.rhino.InputId var22 = com.google.javascript.jscomp.NodeUtil.getInputId(var19);
    com.google.javascript.rhino.Node var23 = var9.useSourceInfoFrom(var19);
    com.google.javascript.rhino.JSDocInfoBuilder var25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var26 = var25.recordExpose();
    boolean var28 = var25.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    com.google.javascript.rhino.InputId var35 = com.google.javascript.jscomp.NodeUtil.getInputId(var32);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var32.setJSType(var36);
    com.google.javascript.rhino.JSDocInfo var38 = var25.build(var32);
    java.util.Collection var39 = var38.getAuthors();
    java.util.Set var40 = var38.getModifies();
    var9.setDirectives(var40);
    com.google.javascript.jscomp.DependencyOptions var42 = var2.setEntryPoints((java.util.Collection)var40);
    com.google.javascript.jscomp.DependencyOptions var44 = var2.setDependencyPruning(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test351"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordExpose();
    boolean var17 = var14.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.InputId var24 = com.google.javascript.jscomp.NodeUtil.getInputId(var21);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var21.setJSType(var25);
    com.google.javascript.rhino.JSDocInfo var27 = var14.build(var21);
    java.lang.String var28 = var27.getFileOverview();
    java.util.Set var29 = var27.getModifies();
    java.util.List var30 = var27.getImplementedInterfaces();
    var0.setSourceMapLocationMappings(var30);
    java.util.Map var32 = var0.getTweakReplacements();
    var0.setCoalesceVariableNames(true);
    var0.setNameReferenceReportPath("STRING hi 0 [length: 2]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test352() {}
//   public void test352() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test352"); }
// 
// 
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newString(0, "hi!");
//     boolean var4 = var3.hasOneChild();
//     com.google.javascript.rhino.Node var8 = new com.google.javascript.rhino.Node(1, 0, 100);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
//     boolean var10 = var9.isArrayLit();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = var14.getNext();
//     com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
//     boolean var17 = var14.isVarArgs();
//     boolean var18 = var14.isOptionalArg();
//     com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(0, var3, var8, var9, var14, 1, 100);
//     boolean var22 = var9.isTry();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var25 = var24.isTry();
//     boolean var26 = var24.isSwitch();
//     boolean var27 = var24.isHook();
//     com.google.javascript.jscomp.ClosureCodingConvention var28 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var30 = var28.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var31 = var28.getAssertionFunctions();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var35 = var33.getBooleanProp((-1));
//     var33.setSourceEncodedPosition(10);
//     com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var33, "goog.abstractMethod");
//     boolean var40 = var28.isPrototypeAlias(var33);
//     com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var28, "");
//     com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var47 = var46.getNext();
//     com.google.javascript.rhino.Node var48 = var44.srcrefTree(var46);
//     boolean var49 = var46.wasEmptyNode();
//     com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var54 = var53.getNext();
//     com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
//     com.google.javascript.rhino.Node var56 = var53.removeFirstChild();
//     var56.putIntProp(0, 100);
//     boolean var60 = var56.isTrue();
//     int var61 = var46.getIndexOfChild(var56);
//     com.google.javascript.jscomp.CodingConvention.Bind var63 = var28.describeFunctionBind(var46, true);
//     boolean var64 = var46.isCatch();
//     var9.replaceChild(var24, var46);
// 
//   }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test353"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isFunctionPrototypeType();
    boolean var95 = var32.canBeCalled();
    var32.clearCachedValues();
    boolean var97 = var32.isReturnTypeInferred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test354() {}
//   public void test354() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test354"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getProvides();
//     java.util.List var3 = var1.getRequires();
//     com.google.javascript.jscomp.SourceAst var4 = null;
//     com.google.javascript.rhino.InputId var5 = null;
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, true);
//     com.google.javascript.jscomp.JSModule var8 = var7.getModule();
//     var1.addFirst(var7);
//     com.google.javascript.jscomp.CompilerInput var12 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var7, "module$2014$12$24 11:10", true);
// 
//   }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test355"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var5.isGetterDef();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.Node.newString(0, "hi!");
    boolean var11 = var10.hasOneChild();
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    boolean var17 = var16.isArrayLit();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    boolean var25 = var21.isOptionalArg();
    com.google.javascript.rhino.Node var28 = new com.google.javascript.rhino.Node(0, var10, var15, var16, var21, 1, 100);
    java.lang.String var29 = var16.getQualifiedName();
    boolean var30 = var16.isHook();
    int var31 = var16.getSourceOffset();
    var16.removeProp(1);
    com.google.javascript.rhino.Node var34 = var5.useSourceInfoFrom(var16);
    boolean var35 = var34.isLabelName();
    boolean var36 = var34.isParamList();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.number(10.0d);
    boolean var39 = var34.hasChild(var38);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.number(0.0d);
    com.google.javascript.rhino.JSDocInfoBuilder var43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var44 = var43.recordExpose();
    boolean var46 = var43.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.InputId var53 = com.google.javascript.jscomp.NodeUtil.getInputId(var50);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var50.setJSType(var54);
    com.google.javascript.rhino.JSDocInfo var56 = var43.build(var50);
    java.util.List var57 = var56.getThrownTypes();
    java.lang.String var58 = var56.getDeprecationReason();
    java.lang.String var59 = var56.getReturnDescription();
    boolean var60 = var56.isImplicitCast();
    var41.setJSDocInfo(var56);
    com.google.javascript.rhino.Node var62 = var56.getAssociatedNode();
    java.util.Set var63 = var56.getParameterNames();
    var34.setDirectives(var63);
    com.google.javascript.rhino.Node var65 = var34.getFirstChild();
    var65.setType(154);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "2014/12/24 11:10"+ "'", var58.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test356"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make(var12, var14);
    int var16 = var15.getCharno();
    com.google.javascript.jscomp.CheckLevel var17 = var15.getDefaultLevel();
    var0.setReportUnknownTypes(var17);
    var0.setAmbiguateProperties(true);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    var21.pushEdgeAnnotations();
    java.lang.Iterable var24 = var21.getDirectedGraphNodes();
    com.google.javascript.jscomp.CheckLevel var26 = null;
    com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var26, "Unversioned directory");
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var29 = var21.getDirectedGraphNode((java.lang.Object)"hi!");
    java.util.List var30 = var21.getGraphvizEdges();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    var0.setSourceMapLocationMappings(var30);
    var0.setRuntimeTypeCheck(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test357"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var15.unregisterPropertyOnType("Unversioned directory", var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.jscomp.JSModule var21 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var22 = var21.getDependencies();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.block(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var15.createFunctionTypeWithVarArgs(var19, var22);
    boolean var26 = var24.removeProperty("null(null)");
    var10.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var24);
    java.lang.String var28 = var10.getDisplayName();
    com.google.javascript.rhino.JSDocInfo var29 = var10.getJSDocInfo();
    boolean var30 = var10.isRecordType();
    java.lang.Iterable var31 = var10.getParameters();
    com.google.javascript.rhino.jstype.JSType var33 = var10.findPropertyType("function (): {869482344}");
    com.google.javascript.rhino.jstype.BooleanLiteralSet var34 = var10.getPossibleToBooleanOutcomes();
    com.google.javascript.rhino.jstype.ObjectType.Property var36 = var10.getSlot("{proxy:{165630172}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test358"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.wasEmptyNode();
    com.google.javascript.rhino.JSDocInfoBuilder var9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var10 = var9.recordExpose();
    boolean var12 = var9.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = var16.getNext();
    com.google.javascript.rhino.Node var18 = var14.srcrefTree(var16);
    com.google.javascript.rhino.InputId var19 = com.google.javascript.jscomp.NodeUtil.getInputId(var16);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var16.setJSType(var20);
    com.google.javascript.rhino.JSDocInfo var22 = var9.build(var16);
    java.lang.String var23 = var22.getFileOverview();
    java.util.Set var24 = var22.getModifies();
    java.util.List var25 = var22.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var26 = var22.getType();
    boolean var27 = var22.isConsistentIdGenerator();
    java.lang.String var28 = var22.getDeprecationReason();
    var4.setJSDocInfo(var22);
    boolean var30 = var4.isCatch();
    com.google.javascript.rhino.Node[] var31 = new com.google.javascript.rhino.Node[] { var4};
    com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node(154, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.arraylit(var31);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "2014/12/24 11:10"+ "'", var28.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test359() {}
//   public void test359() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test359"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.neg(var0);
// 
//   }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test360"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    int var2 = var1.getErrorCount();
    double var3 = var1.getTypedPercent();
    com.google.javascript.jscomp.MessageFormatter var4 = null;
    java.util.logging.Logger var5 = null;
    com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var4, var5);
    com.google.javascript.jscomp.CheckLevel var7 = null;
    com.google.javascript.jscomp.Compiler var8 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var9 = var8.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var10 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var8);
    com.google.javascript.jscomp.DiagnosticType var13 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var15 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var16 = com.google.javascript.jscomp.JSError.make(var13, var15);
    int var17 = var16.getCharno();
    com.google.javascript.jscomp.CheckLevel var18 = var16.getDefaultLevel();
    java.lang.String var19 = var10.formatError(var16);
    int var20 = var16.getLineNumber();
    var6.report(var7, var16);
    com.google.javascript.jscomp.DiagnosticType var22 = var16.getType();
    com.google.javascript.jscomp.CheckLevel var23 = var16.getDefaultLevel();
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make(var26, var28);
    com.google.javascript.jscomp.DiagnosticType var30 = var29.getType();
    int var31 = var29.getNodeLength();
    com.google.javascript.jscomp.CheckLevel var32 = var29.getDefaultLevel();
    int var33 = var29.getNodeLength();
    var1.report(var23, var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var19.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test361"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.cloneNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    int var28 = var26.getSourceOffset();
    com.google.javascript.rhino.Node var29 = var26.cloneNode();
    var24.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
    com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var35 = var33.isConstant("module$2014$12$24 11:10");
    boolean var38 = var33.isExported("Unversioned directory", false);
    boolean var40 = var33.isConstantKey("function (): {540092593}");
    boolean var42 = var33.isPrivate("LABEL_NAME hi!");
    boolean var44 = var33.isValidEnumKey("");
    boolean var46 = var33.isValidEnumKey("function (): ?");
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.Node.newNumber(0.0d, 3, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var51 = var33.isOptionalParameter(var50);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test362"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var36 = var1.recordHiddenness();
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    com.google.javascript.rhino.Node var45 = var40.getChildAtIndex(1);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.JSDocInfo var52 = var49.getJSDocInfo();
    com.google.javascript.rhino.Node var53 = var40.copyInformationFrom(var49);
    java.lang.Object var55 = null;
    var40.putProp(0, var55);
    com.google.javascript.rhino.JSTypeExpression var58 = new com.google.javascript.rhino.JSTypeExpression(var40, "()");
    com.google.javascript.rhino.Node var59 = var58.getRoot();
    com.google.javascript.rhino.Node var60 = var58.getRoot();
    boolean var61 = var1.recordReturnType(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test363() {}
//   public void test363() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test363"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
//     com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
//     com.google.javascript.rhino.jstype.FunctionBuilder var4 = var1.forConstructor();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var7 = var6.getNext();
//     int var8 = var6.getSourceOffset();
//     boolean var9 = var6.isNE();
//     java.lang.String var10 = com.google.javascript.jscomp.NodeUtil.getSourceName(var6);
//     com.google.javascript.rhino.Node var11 = var6.cloneTree();
//     com.google.javascript.rhino.jstype.FunctionBuilder var12 = var4.withParamsNode(var11);
//     com.google.javascript.rhino.jstype.FunctionType var13 = var12.build();
// 
//   }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test364"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    java.lang.String var73 = var56.getDisplayName();
    boolean var74 = var56.isUnknownType();
    com.google.javascript.rhino.jstype.EnumElementType var75 = var56.getElementsType();
    boolean var76 = var56.matchesUint32Context();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var73.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test365"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var7.setJSType(var8);
    boolean var10 = var7.isScript();
    com.google.javascript.rhino.Node var11 = var7.removeFirstChild();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var15 = var14.isGetterDef();
    boolean var16 = var14.isAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.String var34 = var33.toStringTree();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var42 = var38.getBooleanProp(100);
    int var43 = var38.getSideEffectFlags();
    boolean var44 = var38.isDefaultCase();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, var14, var33, var38);
    java.lang.String var46 = var0.extractClassNameIfProvide(var7, var38);
    java.util.Collection var47 = var0.getAssertionFunctions();
    java.lang.String var48 = var0.getGlobalObject();
    java.lang.String var49 = var0.getDelegateSuperclassName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var34.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "goog.global"+ "'", var48.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test366"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    java.lang.String var19 = var14.getDescriptionForParameter("");
    boolean var20 = var14.hasEnumParameterType();
    java.util.List var21 = var14.getExtendedInterfaces();
    boolean var22 = var14.isNoShadow();
    com.google.javascript.rhino.JSDocInfo.Visibility var23 = var14.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test367"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    var3.reportCodeChange();
    com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
    com.google.javascript.jscomp.NodeTraversal.Callback var7 = null;
    com.google.javascript.jscomp.NodeTraversal var8 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test368"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setCheckTypes(false);
    var0.setRemoveUnusedClassProperties(true);
    var0.setAliasExternals(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test369"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    var18.unregisterPropertyOnType("Unversioned directory", var20);
    var18.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    boolean var31 = var28.isVarArgs();
    boolean var32 = var28.isFor();
    boolean var33 = var28.isNumber();
    com.google.javascript.rhino.Node var34 = var28.getNext();
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.jstype.StaticScope var57 = null;
    com.google.javascript.rhino.ErrorReporter var58 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    var59.unregisterPropertyOnType("Unversioned directory", var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    boolean var65 = var59.canPropertyBeDefined(var63, "BANG");
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.jstype.JSType[] var67 = new com.google.javascript.rhino.jstype.JSType[] { var66};
    com.google.javascript.rhino.Node var68 = var59.createParameters(var67);
    com.google.javascript.rhino.jstype.JSType var69 = var56.evaluate(var57, var59);
    com.google.javascript.rhino.jstype.JSType var70 = var69.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var71 = var70.dereference();
    boolean var72 = var70.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var73 = var18.createEnumType("STRING hi 0 [length: 2]\n", var28, var70);
    java.lang.String var74 = var73.getDisplayName();
    com.google.javascript.rhino.Node var75 = var73.getSource();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.stringKey("hi!");
    boolean var78 = var10.defineInferredProperty("", (com.google.javascript.rhino.jstype.JSType)var73, var77);
    boolean var79 = var73.isDateType();
    boolean var80 = var73.matchesNumberContext();
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var85 = var83.getBooleanProp((-1));
    com.google.javascript.rhino.Node var87 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var89 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var90 = var89.getNext();
    com.google.javascript.rhino.Node var91 = var87.srcrefTree(var89);
    com.google.javascript.rhino.Node var92 = var89.removeFirstChild();
    com.google.javascript.rhino.Node var93 = var83.useSourceInfoFromForTree(var89);
    boolean var94 = var73.defineElement("", var89);
    boolean var95 = var73.matchesNumberContext();
    com.google.javascript.rhino.jstype.JSType var96 = var73.autoboxesTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var74.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test370"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    com.google.javascript.rhino.Node var91 = var3.getAncestor(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test371"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var5 = var3.getLineOfOffset(2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3);
    java.io.Reader var7 = var3.getCodeReader();
    var3.clearCachedSource();
    com.google.javascript.jscomp.JsAst var9 = new com.google.javascript.jscomp.JsAst(var3);
    com.google.javascript.rhino.InputId var10 = var9.getInputId();
    com.google.javascript.rhino.Node var14 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var14.setJSType(var15);
    boolean var17 = var14.isScript();
    com.google.javascript.jscomp.SourceFile var21 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    int var23 = var21.getLineOfOffset(2);
    var14.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile)var21);
    com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var21);
    var9.setSourceFile(var21);
    com.google.javascript.jscomp.SourceFile var27 = var9.getSourceFile();
    var9.clearAst();
    com.google.javascript.jscomp.SourceFile var29 = var9.getSourceFile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test372"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var4 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var5 = com.google.javascript.jscomp.JSError.make(var2, var4);
    int var6 = var5.getCharno();
    int var7 = var5.getNodeSourceOffset();
    int var8 = var5.getNodeSourceOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test373"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setTransformAMDToCJSModules(false);
    var0.setInlineConstantVars(true);
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var14 = var0.getLanguageIn();
    var0.setLabelRenaming(false);
    com.google.javascript.jscomp.CompilerOptions var17 = new com.google.javascript.jscomp.CompilerOptions();
    var17.setChainCalls(true);
    var17.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var23 = var17.isRemoveUnusedClassProperties();
    var17.setDisambiguateProperties(true);
    var17.setTweakToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", true);
    var17.setNameReferenceGraphPath("BANG");
    com.google.javascript.jscomp.CompilerOptions var31 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var32 = null;
    var31.setStripTypes(var32);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var34 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var35 = var34.getDirectedGraphNodes();
    java.util.List var36 = var34.getEdges();
    var31.setManageClosureDependencies(var36);
    var31.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var31.setColorizeErrorOutput(true);
    var31.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var45 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var46 = null;
    var45.setStripTypes(var46);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var48 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var49 = var48.getDirectedGraphNodes();
    java.util.List var50 = var48.getEdges();
    var45.setManageClosureDependencies(var50);
    var45.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var58 = new com.google.javascript.jscomp.ComposeWarningsGuard(var57);
    com.google.javascript.jscomp.JSError var59 = null;
    com.google.javascript.jscomp.CheckLevel var60 = var58.level(var59);
    var45.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var58);
    var31.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var58);
    var31.setTweakToNumberLiteral("", (-1));
    com.google.javascript.jscomp.CompilerOptions var66 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var67 = null;
    var66.setStripTypes(var67);
    byte[] var70 = new byte[] { (byte)100};
    var66.setInputPropertyMapSerialized(var70);
    var66.setRemoveTryCatchFinally(true);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var74 = var66.getTracerMode();
    var31.setTracerMode(var74);
    var17.setTracerMode(var74);
    var0.setTracerMode(var74);
    var0.setRemoveUnusedVars(false);
    var0.setAliasStringsBlacklist("{proxy:{1743833346}}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test374"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.JSDocInfo var6 = var3.getJSDocInfo();
    com.google.javascript.rhino.Node var7 = var3.getLastSibling();
    boolean var8 = var7.isSyntheticBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test375"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var11 = var0.getTweakProcessing();
    var0.setCollapseVariableDeclarations(false);
    var0.setCommonJSModulePathPrefix("function (): {540092593}");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var16 = var0.getLanguageIn();
    com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var17 = var0.getAliasTransformationHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test376"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    java.lang.String var20 = var14.getOriginalCommentString();
    boolean var21 = var14.isConstant();
    boolean var22 = var14.isIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test377"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.util.List var1 = var0.getGraphvizEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.jscomp.graph.GraphNode var4 = var0.createNode((java.lang.Object)var3);
    var0.clearNodeAnnotations();
    var0.pushEdgeAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test378"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.wasEmptyNode();
    boolean var7 = var3.isNE();
    int var8 = var3.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test379"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    boolean var19 = var14.shouldPreserveTry();
    com.google.javascript.rhino.JSDocInfo.Visibility var20 = var14.getVisibility();
    com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var22 = null;
    var21.setStripTypes(var22);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var24 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var25 = var24.getDirectedGraphNodes();
    java.util.List var26 = var24.getEdges();
    var21.setManageClosureDependencies(var26);
    var21.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var34 = new com.google.javascript.jscomp.ComposeWarningsGuard(var33);
    com.google.javascript.jscomp.JSError var35 = null;
    com.google.javascript.jscomp.CheckLevel var36 = var34.level(var35);
    var21.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var34);
    boolean var38 = var20.equals((java.lang.Object)var34);
    int var39 = var20.ordinal();
    java.lang.Class var40 = var20.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test380"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasCachedValues();
    java.util.Set var12 = var10.getPropertyNames();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var14.unregisterPropertyOnType("Unversioned directory", var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var21 = var20.getDependencies();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.block(var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var14.createFunctionTypeWithVarArgs(var18, var21);
    boolean var24 = var23.hasAnyTemplateInternal();
    java.lang.Iterable var25 = var23.getAllExtendedInterfaces();
    boolean var26 = var23.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var28 = var23.getOwnSlot("(LABEL_NAME hi!)");
    boolean var29 = var23.isEnumElementType();
    boolean var30 = var23.isEnumElementType();
    var10.matchConstraint((com.google.javascript.rhino.jstype.ObjectType)var23);
    com.google.javascript.rhino.Node var32 = var10.getParametersNode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test381"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getDelegateSuperclassName();
    boolean var22 = var0.isSuperClassReference("");
    boolean var24 = var0.isSuperClassReference("(STRING hi 0 [length: 2]\n)");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    boolean var33 = var29.isWhile();
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    int var40 = var39.getSourceOffset();
    com.google.javascript.rhino.Node var43 = new com.google.javascript.rhino.Node((-1), var29, var39, 3, 2);
    boolean var44 = var0.isVarArgsParameter(var39);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.labelName("hi!");
    com.google.javascript.rhino.Node var48 = var45.copyInformationFrom(var47);
    com.google.javascript.rhino.Node var51 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var53 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var54 = var53.getNext();
    com.google.javascript.rhino.Node var55 = var51.srcrefTree(var53);
    boolean var56 = var53.isVarArgs();
    boolean var57 = var53.isOptionalArg();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(0, var53, var58);
    boolean var60 = var53.isNE();
    java.lang.String var61 = var0.extractClassNameIfRequire(var45, var53);
    java.lang.String var62 = var0.getAbstractMethodName();
    java.util.Collection var63 = var0.getAssertionFunctions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "goog.abstractMethod"+ "'", var62.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test382"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordDeprecated();
    boolean var8 = var1.recordNoAlias();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test383"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var9 = null;
    var8.setStripTypes(var9);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var11 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var12 = var11.getDirectedGraphNodes();
    java.util.List var13 = var11.getEdges();
    var8.setManageClosureDependencies(var13);
    var0.setManageClosureDependencies(var13);
    var0.setCrossModuleCodeMotion(true);
    com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var19 = null;
    var18.setStripTypes(var19);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var21 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var22 = var21.getDirectedGraphNodes();
    java.util.List var23 = var21.getEdges();
    var18.setManageClosureDependencies(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.script(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.paramList(var23);
    var0.setManageClosureDependencies(var23);
    com.google.javascript.jscomp.ClosureCodingConvention var28 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var29 = null;
    com.google.javascript.rhino.Node var31 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = var33.getNext();
    com.google.javascript.rhino.Node var35 = var31.srcrefTree(var33);
    boolean var36 = var33.isOr();
    java.lang.String var37 = var28.extractClassNameIfRequire(var29, var33);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    com.google.javascript.rhino.ErrorReporter var49 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    var50.unregisterPropertyOnType("Unversioned directory", var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.jscomp.JSModule var56 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var57 = var56.getDependencies();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.block(var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var50.createFunctionTypeWithVarArgs(var54, var57);
    boolean var60 = var59.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var61 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var62 = var61.getDirectedGraphNodes();
    java.lang.Iterable var63 = var61.getDirectedGraphNodes();
    java.util.List var64 = var61.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var65 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var66 = null;
    var65.setStripTypes(var66);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var68 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var69 = var68.getDirectedGraphNodes();
    java.util.List var70 = var68.getEdges();
    var65.setManageClosureDependencies(var70);
    boolean var72 = var65.isExternExportsEnabled();
    var65.setCheckCaja(false);
    java.util.Set var75 = null;
    var65.setReplaceStringsReservedStrings(var75);
    var65.setAliasAllStrings(true);
    var65.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var81 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var82 = null;
    var81.setStripTypes(var82);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var84 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var85 = var84.getDirectedGraphNodes();
    java.util.List var86 = var84.getEdges();
    var81.setManageClosureDependencies(var86);
    boolean var88 = var81.isExternExportsEnabled();
    var81.setCheckCaja(false);
    var81.setGroupVariableDeclarations(true);
    java.util.Map var93 = var81.getDefineReplacements();
    var65.setPropertyInvalidationErrors(var93);
    var28.defineDelegateProxyPrototypeProperties(var39, (com.google.javascript.rhino.jstype.StaticScope)var59, var64, var93);
    var0.setPropertyInvalidationErrors(var93);
    var0.setPreferLineBreakAtEndOfFile(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test384() {}
//   public void test384() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test384"); }
// 
// 
//     com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
//     java.lang.String var1 = var0.getAstDotGraph();
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.ErrorManager var3 = var0.getErrorManager();
//     com.google.javascript.jscomp.LightweightMessageFormatter var4 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
//     com.google.javascript.jscomp.JSError[] var5 = var0.getErrors();
//     com.google.javascript.jscomp.SourceFile.Generator var7 = null;
//     com.google.javascript.jscomp.SourceFile var8 = com.google.javascript.jscomp.SourceFile.fromGenerator("BANG", var7);
//     boolean var9 = var8.isExtern();
//     com.google.javascript.jscomp.JsAst var10 = new com.google.javascript.jscomp.JsAst(var8);
//     var0.replaceScript(var10);
// 
//   }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test385"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    var5.setDevirtualizePrototypeMethods(true);
    var5.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions var16 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var17 = null;
    var16.setStripTypes(var17);
    byte[] var20 = new byte[] { (byte)100};
    var16.setInputPropertyMapSerialized(var20);
    var5.setInputVariableMapSerialized(var20);
    var0.setInputVariableMapSerialized(var20);
    var0.setNameReferenceGraphPath("InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test386"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasCachedValues();
    java.util.Set var12 = var10.getPropertyNames();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var14.unregisterPropertyOnType("Unversioned directory", var16);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var21 = var20.getDependencies();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.block(var21);
    com.google.javascript.rhino.jstype.FunctionType var23 = var14.createFunctionTypeWithVarArgs(var18, var21);
    boolean var24 = var23.hasAnyTemplateInternal();
    java.lang.Iterable var25 = var23.getAllExtendedInterfaces();
    boolean var26 = var23.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var28 = var23.getOwnSlot("(LABEL_NAME hi!)");
    boolean var29 = var23.isEnumElementType();
    boolean var30 = var23.isEnumElementType();
    var10.matchConstraint((com.google.javascript.rhino.jstype.ObjectType)var23);
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    boolean var38 = var35.isVarArgs();
    com.google.javascript.rhino.Node var40 = var35.getChildAtIndex(1);
    com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var44 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = var44.getNext();
    com.google.javascript.rhino.Node var46 = var42.srcrefTree(var44);
    com.google.javascript.rhino.JSDocInfo var47 = var44.getJSDocInfo();
    com.google.javascript.rhino.Node var48 = var35.copyInformationFrom(var44);
    boolean var49 = var35.isVoid();
    boolean var50 = var35.isNull();
    boolean var51 = var23.equals((java.lang.Object)var35);
    com.google.javascript.rhino.jstype.JSType var53 = var23.getRestrictedTypeGivenToBooleanOutcome(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test387"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    java.util.Collection var3 = var0.getNodes();
    java.util.List var4 = var0.getGraphvizEdges();
    java.util.List var5 = var0.getGraphvizEdges();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test388"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    boolean var92 = var32.hasInstanceType();
    com.google.javascript.rhino.Node var93 = var32.getSource();
    boolean var94 = var32.isFunctionPrototypeType();
    boolean var95 = var32.canBeCalled();
    boolean var96 = var32.isGlobalThisType();
    com.google.javascript.rhino.jstype.JSType var97 = var32.getParameterType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test389"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordExpose();
    boolean var17 = var14.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    com.google.javascript.rhino.InputId var24 = com.google.javascript.jscomp.NodeUtil.getInputId(var21);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var21.setJSType(var25);
    com.google.javascript.rhino.JSDocInfo var27 = var14.build(var21);
    java.lang.String var28 = var27.getFileOverview();
    java.util.Set var29 = var27.getModifies();
    java.util.List var30 = var27.getImplementedInterfaces();
    var0.setSourceMapLocationMappings(var30);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var33 = var32.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test390"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    boolean var17 = var12.isGetterDef();
    boolean var18 = var12.isWith();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test391"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    com.google.javascript.jscomp.PropertyRenamingPolicy var12 = null;
    var0.setPropertyRenaming(var12);
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var17 = new com.google.javascript.jscomp.ComposeWarningsGuard(var16);
    com.google.javascript.jscomp.JSError var18 = null;
    com.google.javascript.jscomp.CheckLevel var19 = var17.level(var18);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test392() {}
//   public void test392() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test392"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var4);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var6 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var7 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var6);
//     com.google.javascript.jscomp.CompilerOptions var8 = null;
//     var3.initOptions(var8);
// 
//   }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test393"); }


    com.google.javascript.rhino.Node var3 = new com.google.javascript.rhino.Node(100, 0, 100);
    com.google.javascript.rhino.Node var4 = var3.getNext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test394() {}
//   public void test394() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test394"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setChainCalls(true);
//     var0.setTweakToDoubleLiteral("hi!", 0.0d);
//     boolean var6 = var0.isRemoveUnusedClassProperties();
//     var0.setDisambiguateProperties(true);
//     var0.setRenamePrefixNamespace("Node tree inequality:\nTree1:\nSTRING_KEY Unversioned directory 0 [length: 2]\n\n\nTree2:\nBANG 0\n    STRING hi 0 [length: 2]\n\n\nSubtree1: STRING_KEY Unversioned directory 0 [length: 2]\n\n\nSubtree2: BANG 0\n    STRING hi 0 [length: 2]\n");
//     var0.setInlineFunctions(true);
//     var0.setPrettyPrint(true);
//     java.util.Set var15 = null;
//     var0.setExtraAnnotationNames(var15);
// 
//   }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test395"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    java.util.Collection var3 = var0.getAssertionFunctions();
    boolean var5 = var0.isConstant("Unversioned directory");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    boolean var13 = var9.isOptionalArg();
    java.lang.String var17 = var9.toString(false, false, true);
    java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
    java.lang.String var19 = var0.getDelegateSuperclassName();
    java.lang.String var20 = var0.getExportPropertyFunction();
    boolean var22 = var0.isValidEnumKey("InputId: ");
    java.lang.String var23 = var0.getGlobalObject();
    com.google.javascript.rhino.Node var24 = null;
    boolean var25 = var0.isOptionalParameter(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "BANG"+ "'", var17.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "goog.exportProperty"+ "'", var20.equals("goog.exportProperty"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "goog.global"+ "'", var23.equals("goog.global"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test396() {}
//   public void test396() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test396"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     int var4 = var3.getErrorCount();
//     int var5 = var3.getWarningCount();
//     var3.disableThreads();
//     com.google.javascript.jscomp.Scope var7 = var3.getTopScope();
//     com.google.javascript.jscomp.JSError var8 = null;
//     com.google.javascript.jscomp.CheckLevel var9 = var3.getErrorLevel(var8);
// 
//   }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test397"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.Node var15 = var11.srcrefTree(var13);
    boolean var16 = var13.isVarArgs();
    com.google.javascript.rhino.Node var18 = var13.getChildAtIndex(1);
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.JSDocInfo var25 = var22.getJSDocInfo();
    com.google.javascript.rhino.Node var26 = var13.copyInformationFrom(var22);
    java.lang.Object var28 = null;
    var13.putProp(0, var28);
    com.google.javascript.rhino.JSTypeExpression var31 = new com.google.javascript.rhino.JSTypeExpression(var13, "()");
    com.google.javascript.rhino.JSTypeExpression var32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var31);
    com.google.javascript.rhino.Node var33 = var31.getRoot();
    boolean var34 = var1.recordImplementedInterface(var31);
    boolean var35 = var1.isJavaDispatch();
    boolean var36 = var1.recordConstancy();
    boolean var37 = var1.recordIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test398"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.matchesObjectContext();
    com.google.javascript.rhino.jstype.JSType var63 = var58.autoboxesTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test399"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    boolean var11 = var8.isVarArgs();
    com.google.javascript.rhino.Node var13 = var8.getChildAtIndex(1);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    com.google.javascript.rhino.JSDocInfo var20 = var17.getJSDocInfo();
    com.google.javascript.rhino.Node var21 = var8.copyInformationFrom(var17);
    java.lang.Object var23 = null;
    var8.putProp(0, var23);
    com.google.javascript.rhino.JSTypeExpression var26 = new com.google.javascript.rhino.JSTypeExpression(var8, "()");
    com.google.javascript.rhino.JSTypeExpression var27 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var26);
    boolean var28 = var1.recordExtendedInterface(var26);
    com.google.javascript.jscomp.SourceFile var31 = new com.google.javascript.jscomp.SourceFile("()");
    var1.markName("module$2014$12$24 11:10", (com.google.javascript.rhino.jstype.StaticSourceFile)var31, 1, 1);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var38 = var36.getBooleanProp((-1));
    var36.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var42 = new com.google.javascript.rhino.JSTypeExpression(var36, "goog.abstractMethod");
    boolean var43 = var1.recordEnumParameterType(var42);
    boolean var44 = var1.isConstructorRecorded();
    boolean var46 = var1.addAuthor("FALSE\n");
    com.google.javascript.rhino.JSDocInfoBuilder var49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var50 = var49.recordExpose();
    boolean var51 = var49.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var53 = null;
    boolean var54 = var49.recordParameter("Unversioned directory", var53);
    com.google.javascript.rhino.JSTypeExpression var55 = null;
    boolean var57 = var49.recordThrowDescription(var55, "");
    com.google.javascript.jscomp.SourceFile var62 = com.google.javascript.jscomp.SourceFile.fromCode("goog.abstractMethod", "hi!", "()");
    var49.markName("", (com.google.javascript.rhino.jstype.StaticSourceFile)var62, 0, 0);
    var1.markName("(module$2014$12$24 11:10)", (com.google.javascript.rhino.jstype.StaticSourceFile)var62, 153, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test400"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    com.google.javascript.jscomp.ClosureCodingConvention var17 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    boolean var25 = var22.isOr();
    java.lang.String var26 = var17.extractClassNameIfRequire(var18, var22);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.jscomp.JSModule var34 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var35 = var34.getDependencies();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.block(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var28.createFunctionTypeWithVarArgs(var32, var35);
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var39.unregisterPropertyOnType("Unversioned directory", var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var46 = var45.getDependencies();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
    boolean var49 = var48.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var50 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var51 = var50.getDirectedGraphNodes();
    java.lang.Iterable var52 = var50.getDirectedGraphNodes();
    java.util.List var53 = var50.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var54 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var55 = null;
    var54.setStripTypes(var55);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var57 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var58 = var57.getDirectedGraphNodes();
    java.util.List var59 = var57.getEdges();
    var54.setManageClosureDependencies(var59);
    boolean var61 = var54.isExternExportsEnabled();
    var54.setCheckCaja(false);
    java.util.Set var64 = null;
    var54.setReplaceStringsReservedStrings(var64);
    var54.setAliasAllStrings(true);
    var54.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var70 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var71 = null;
    var70.setStripTypes(var71);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var73 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var74 = var73.getDirectedGraphNodes();
    java.util.List var75 = var73.getEdges();
    var70.setManageClosureDependencies(var75);
    boolean var77 = var70.isExternExportsEnabled();
    var70.setCheckCaja(false);
    var70.setGroupVariableDeclarations(true);
    java.util.Map var82 = var70.getDefineReplacements();
    var54.setPropertyInvalidationErrors(var82);
    var17.defineDelegateProxyPrototypeProperties(var28, (com.google.javascript.rhino.jstype.StaticScope)var48, var53, var82);
    boolean var85 = var48.canBeCalled();
    boolean var86 = var48.isUnknownType();
    com.google.javascript.rhino.jstype.ObjectType.Property var88 = var48.getSlot("hi!");
    var3.setJSType((com.google.javascript.rhino.jstype.JSType)var48);
    boolean var90 = var48.isEmptyType();
    com.google.javascript.rhino.Node var91 = var48.getParametersNode();
    boolean var92 = var91.isNE();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test401"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.paramList(var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isOptionalArg();
    java.lang.String var15 = var7.toString(false, false, true);
    boolean var16 = var7.isFromExterns();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.labelName("hi!");
    var7.addChildToFront(var18);
    com.google.javascript.rhino.Node var20 = var3.useSourceInfoIfMissingFrom(var18);
    var20.setType(153);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "BANG"+ "'", var15.equals("BANG"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test402"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    com.google.javascript.rhino.JSTypeExpression var16 = var14.getType();
    java.util.Collection var17 = var14.getMarkers();
    boolean var18 = var14.isNoShadow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test403"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var3.isSwitch();
    int var27 = var3.getSideEffectFlags();
    com.google.javascript.rhino.JSDocInfo var28 = var3.getJSDocInfo();
    var3.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var34 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = var34.getNext();
    com.google.javascript.rhino.Node var36 = var32.srcrefTree(var34);
    boolean var37 = var34.isVarArgs();
    boolean var38 = var34.isArrayLit();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var41 = var40.isGetterDef();
    var40.putIntProp((-1), 10);
    var34.addChildrenToFront(var40);
    int var46 = var40.getLength();
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    com.google.javascript.rhino.Node var53 = var50.removeFirstChild();
    com.google.javascript.rhino.Node var54 = var40.useSourceInfoFromForTree(var50);
    com.google.javascript.rhino.Node var55 = var3.copyInformationFrom(var40);
    var55.setIsSyntheticBlock(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test404"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    var4.unregisterPropertyOnType("Unversioned directory", var6);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.jscomp.JSModule var10 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var11 = var10.getDependencies();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.block(var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var4.createFunctionTypeWithVarArgs(var8, var11);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var16 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    boolean var23 = var20.isVarArgs();
    com.google.javascript.rhino.Node var25 = var20.getChildAtIndex(1);
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = var29.getNext();
    com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
    com.google.javascript.rhino.JSDocInfo var32 = var29.getJSDocInfo();
    com.google.javascript.rhino.Node var33 = var20.copyInformationFrom(var29);
    java.lang.Object var35 = null;
    var20.putProp(0, var35);
    com.google.javascript.rhino.JSTypeExpression var38 = new com.google.javascript.rhino.JSTypeExpression(var20, "()");
    com.google.javascript.rhino.jstype.StaticScope var39 = null;
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    var41.unregisterPropertyOnType("Unversioned directory", var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    boolean var47 = var41.canPropertyBeDefined(var45, "BANG");
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.jstype.JSType[] var49 = new com.google.javascript.rhino.jstype.JSType[] { var48};
    com.google.javascript.rhino.Node var50 = var41.createParameters(var49);
    com.google.javascript.rhino.jstype.JSType var51 = var38.evaluate(var39, var41);
    boolean var52 = var16.addVarArgs(var51);
    boolean var53 = var51.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var57 = null;
    var55.unregisterPropertyOnType("Unversioned directory", var57);
    com.google.javascript.rhino.jstype.JSType var59 = null;
    boolean var61 = var55.canPropertyBeDefined(var59, "BANG");
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var62};
    com.google.javascript.rhino.Node var64 = var55.createParameters(var63);
    com.google.javascript.rhino.jstype.FunctionType var65 = var4.createConstructorType(var51, var63);
    com.google.javascript.rhino.jstype.JSType var67 = var65.getPropertyType("");
    boolean var68 = var1.declareType("(module$2014$12$24 11:10)", var67);
    com.google.javascript.rhino.jstype.JSType var73 = var1.createNamedType("module$", "()", (-1), 154);
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var76 = null;
    var75.setResolveMode(var76);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var78 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var75);
    com.google.javascript.rhino.jstype.ObjectType var79 = var75.createAnonymousObjectType();
    com.google.javascript.rhino.jstype.EnumElementType var80 = var79.toMaybeEnumElementType();
    boolean var81 = var79.isEnumElementType();
    com.google.javascript.rhino.jstype.JSType var82 = null;
    com.google.javascript.rhino.jstype.ParameterizedType var83 = var1.createParameterizedType(var79, var82);
    com.google.javascript.rhino.jstype.JSType var84 = var83.getParameterType();
    com.google.javascript.rhino.jstype.ParameterizedType var85 = var83.toMaybeParameterizedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test405() {}
//   public void test405() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test405"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var0);
// 
//   }

  public void test406() {}
//   public void test406() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test406"); }
// 
// 
//     com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var1 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var0);
//     boolean var2 = var1.hasVarArgs();
//     com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var5 = var3.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var6 = var3.getAssertionFunctions();
//     boolean var8 = var3.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var13 = var12.getNext();
//     com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
//     boolean var15 = var12.isVarArgs();
//     boolean var16 = var12.isOptionalArg();
//     java.lang.String var20 = var12.toString(false, false, true);
//     java.util.List var21 = var3.identifyTypeDeclarationCall(var12);
//     java.lang.String var22 = var3.getDelegateSuperclassName();
//     com.google.javascript.rhino.ErrorReporter var23 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var24.unregisterPropertyOnType("Unversioned directory", var26);
//     var24.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.rhino.jstype.StaticScope var30 = null;
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var31 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var32 = var31.getDirectedGraphNodes();
//     java.util.List var33 = var31.getEdges();
//     com.google.javascript.jscomp.CompilerOptions var34 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var35 = null;
//     var34.setStripTypes(var35);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var37 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var38 = var37.getDirectedGraphNodes();
//     java.util.List var39 = var37.getEdges();
//     var34.setManageClosureDependencies(var39);
//     boolean var41 = var34.isExternExportsEnabled();
//     var34.setCheckCaja(false);
//     var34.setGroupVariableDeclarations(true);
//     java.util.Map var46 = var34.getDefineReplacements();
//     var3.defineDelegateProxyPrototypeProperties(var24, var30, var33, var46);
//     com.google.javascript.rhino.ErrorReporter var48 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var48);
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     var49.unregisterPropertyOnType("Unversioned directory", var51);
//     var49.identifyNonNullableName("2014/12/24 11:10");
//     com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter var55 = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter((com.google.javascript.jscomp.CodingConvention)var3, var49);
//     com.google.javascript.rhino.ErrorReporter var56 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var56);
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     var57.unregisterPropertyOnType("Unversioned directory", var59);
//     com.google.javascript.rhino.jstype.JSType var61 = null;
//     com.google.javascript.jscomp.JSModule var63 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var64 = var63.getDependencies();
//     com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.block(var64);
//     com.google.javascript.rhino.jstype.FunctionType var66 = var57.createFunctionTypeWithVarArgs(var61, var64);
//     boolean var68 = var66.removeProperty("null(null)");
//     com.google.javascript.rhino.jstype.EnumType var69 = var66.toMaybeEnumType();
//     boolean var70 = var66.isNumber();
//     com.google.javascript.rhino.jstype.JSType[] var71 = new com.google.javascript.rhino.jstype.JSType[] { var66};
//     com.google.javascript.rhino.Node var72 = var49.createOptionalParameters(var71);
//     boolean var73 = var1.addOptionalParams(var71);
// 
//   }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test407"); }


    com.google.javascript.rhino.jstype.JSTypeRegistry var0 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var1 = new com.google.javascript.rhino.jstype.FunctionBuilder(var0);
    com.google.javascript.rhino.jstype.FunctionBuilder var3 = var1.setIsConstructor(true);
    com.google.javascript.rhino.jstype.FunctionBuilder var4 = var3.forConstructor();
    com.google.javascript.rhino.jstype.FunctionBuilder var5 = var4.forConstructor();
    com.google.javascript.rhino.Node var6 = null;
    com.google.javascript.rhino.jstype.FunctionBuilder var7 = var5.withSourceNode(var6);
    com.google.javascript.rhino.jstype.FunctionBuilder var9 = var5.withName("JSDocInfo");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test408"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    java.lang.Iterable var72 = var31.getAllExtendedInterfaces();
    boolean var73 = var31.isInstanceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test409"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    var3.reportCodeChange();
    com.google.javascript.jscomp.Scope var6 = var3.getTopScope();
    com.google.javascript.jscomp.JSError[] var7 = var3.getWarnings();
    java.lang.String var8 = var3.getAstDotGraph();
    java.lang.String var9 = var3.getAstDotGraph();
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var13 = var11.recordExterns();
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    boolean var21 = var17.isArrayLit();
    com.google.javascript.rhino.Node var22 = var17.getNext();
    var11.markTypeNode(var17, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var33 = var32.getNext();
    com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
    boolean var35 = var32.isVarArgs();
    com.google.javascript.rhino.Node var37 = var32.getChildAtIndex(1);
    com.google.javascript.rhino.Node var39 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var42 = var41.getNext();
    com.google.javascript.rhino.Node var43 = var39.srcrefTree(var41);
    com.google.javascript.rhino.JSDocInfo var44 = var41.getJSDocInfo();
    com.google.javascript.rhino.Node var45 = var32.copyInformationFrom(var41);
    java.lang.Object var47 = null;
    var32.putProp(0, var47);
    com.google.javascript.rhino.JSTypeExpression var50 = new com.google.javascript.rhino.JSTypeExpression(var32, "()");
    com.google.javascript.rhino.JSTypeExpression var51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var50);
    boolean var52 = var11.recordBaseType(var50);
    com.google.javascript.jscomp.MessageFormatter var53 = null;
    java.util.logging.Logger var54 = null;
    com.google.javascript.jscomp.LoggerErrorManager var55 = new com.google.javascript.jscomp.LoggerErrorManager(var53, var54);
    com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var55);
    boolean var57 = var50.equals((java.lang.Object)var56);
    com.google.javascript.jscomp.Region var60 = var56.getSourceRegion("", 0);
    double var61 = var56.getProgress();
    com.google.javascript.jscomp.Compiler.IntermediateState var62 = var56.getState();
    var3.setState(var62);
    com.google.javascript.jscomp.SourceMap var64 = var3.getSourceMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test410"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var18 = var14.hasType();
    var14.setDeprecated(false);
    boolean var21 = var14.hasReturnType();
    boolean var23 = var14.hasDescriptionForParameter("2014/12/24 11:10");
    boolean var24 = var14.isExpose();
    boolean var25 = var14.isNoShadow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test411"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var8 = var1.recordNoSideEffects();
    boolean var9 = var1.recordConstancy();
    boolean var10 = var1.recordJavaDispatch();
    com.google.javascript.rhino.JSDocInfoBuilder var12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var12.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = var19.getNext();
    com.google.javascript.rhino.Node var21 = var17.srcrefTree(var19);
    boolean var22 = var19.isVarArgs();
    com.google.javascript.rhino.Node var24 = var19.getChildAtIndex(1);
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    com.google.javascript.rhino.JSDocInfo var31 = var28.getJSDocInfo();
    com.google.javascript.rhino.Node var32 = var19.copyInformationFrom(var28);
    java.lang.Object var34 = null;
    var19.putProp(0, var34);
    com.google.javascript.rhino.JSTypeExpression var37 = new com.google.javascript.rhino.JSTypeExpression(var19, "()");
    com.google.javascript.rhino.JSTypeExpression var38 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var37);
    boolean var39 = var12.recordExtendedInterface(var37);
    com.google.javascript.jscomp.SourceFile var42 = new com.google.javascript.jscomp.SourceFile("()");
    var12.markName("module$2014$12$24 11:10", (com.google.javascript.rhino.jstype.StaticSourceFile)var42, 1, 1);
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var49 = var47.getBooleanProp((-1));
    var47.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var53 = new com.google.javascript.rhino.JSTypeExpression(var47, "goog.abstractMethod");
    boolean var54 = var12.recordEnumParameterType(var53);
    boolean var55 = var1.recordType(var53);
    com.google.javascript.rhino.JSTypeExpression var56 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test412"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setColorizeErrorOutput(true);
    var0.setRemoveDeadCode(true);
    com.google.javascript.jscomp.CompilerOptions var14 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var15 = null;
    var14.setStripTypes(var15);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var17 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var18 = var17.getDirectedGraphNodes();
    java.util.List var19 = var17.getEdges();
    var14.setManageClosureDependencies(var19);
    var14.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var25 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var26 = var25.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var27 = new com.google.javascript.jscomp.ComposeWarningsGuard(var26);
    com.google.javascript.jscomp.JSError var28 = null;
    com.google.javascript.jscomp.CheckLevel var29 = var27.level(var28);
    var14.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var27);
    var0.setTweakToNumberLiteral("", (-1));
    var0.setGatherCssNames(false);
    var0.setAliasExternals(false);
    com.google.javascript.jscomp.SourceMap.Format var39 = null;
    var0.setSourceMapFormat(var39);
    var0.setAssumeClosuresOnlyCaptureReferences(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test413"); }


    com.google.javascript.rhino.InputId var1 = new com.google.javascript.rhino.InputId("");
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isOr();
    java.lang.String var11 = var2.extractClassNameIfRequire(var3, var7);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var13.unregisterPropertyOnType("Unversioned directory", var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.jscomp.JSModule var19 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var20 = var19.getDependencies();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.block(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var13.createFunctionTypeWithVarArgs(var17, var20);
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.jscomp.JSModule var30 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var31 = var30.getDependencies();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.block(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var24.createFunctionTypeWithVarArgs(var28, var31);
    boolean var34 = var33.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.lang.Iterable var37 = var35.getDirectedGraphNodes();
    java.util.List var38 = var35.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCheckCaja(false);
    java.util.Set var49 = null;
    var39.setReplaceStringsReservedStrings(var49);
    var39.setAliasAllStrings(true);
    var39.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var55 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var56 = null;
    var55.setStripTypes(var56);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var58 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var59 = var58.getDirectedGraphNodes();
    java.util.List var60 = var58.getEdges();
    var55.setManageClosureDependencies(var60);
    boolean var62 = var55.isExternExportsEnabled();
    var55.setCheckCaja(false);
    var55.setGroupVariableDeclarations(true);
    java.util.Map var67 = var55.getDefineReplacements();
    var39.setPropertyInvalidationErrors(var67);
    var2.defineDelegateProxyPrototypeProperties(var13, (com.google.javascript.rhino.jstype.StaticScope)var33, var38, var67);
    boolean var70 = var33.canBeCalled();
    boolean var71 = var33.isRegexpType();
    boolean var72 = var1.equals((java.lang.Object)var33);
    boolean var74 = var33.hasOwnProperty("RETURN");
    java.util.Set var75 = var33.getOwnPropertyNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test414"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setNameAnonymousFunctionsOnly(false);
    com.google.javascript.jscomp.CheckLevel var9 = null;
    var0.setCheckGlobalThisLevel(var9);
    var0.setMarkAsCompiled(true);
    com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var14 = null;
    var13.setStripTypes(var14);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var16 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var17 = var16.getDirectedGraphNodes();
    java.util.List var18 = var16.getEdges();
    var13.setManageClosureDependencies(var18);
    var13.setDevirtualizePrototypeMethods(true);
    var13.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var24 = var13.getTweakProcessing();
    var0.setTweakProcessing(var24);
    var0.setDeadAssignmentElimination(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test415"); }


    com.google.javascript.jscomp.DiagnosticGroups var0 = new com.google.javascript.jscomp.DiagnosticGroups();
    com.google.javascript.jscomp.DiagnosticGroup var2 = var0.forName("hi!: BANG 0\\n    STRING hi 0 [length: 2]\\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test416"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    boolean var15 = var10.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test417"); }


    com.google.javascript.jscomp.MessageFormatter var0 = null;
    java.util.logging.Logger var1 = null;
    com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
    com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
    com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
    com.google.javascript.jscomp.CompilerOptions var5 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var6 = null;
    var5.setStripTypes(var6);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var8 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var9 = var8.getDirectedGraphNodes();
    java.util.List var10 = var8.getEdges();
    var5.setManageClosureDependencies(var10);
    boolean var12 = var5.isExternExportsEnabled();
    var5.setCheckCaja(false);
    var5.setRemoveUnusedPrototypeProperties(true);
    var5.setRemoveClosureAsserts(false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var23 = var20.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var25 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = var27.getNext();
    com.google.javascript.rhino.Node var29 = var25.srcrefTree(var27);
    com.google.javascript.rhino.InputId var30 = com.google.javascript.jscomp.NodeUtil.getInputId(var27);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var27.setJSType(var31);
    com.google.javascript.rhino.JSDocInfo var33 = var20.build(var27);
    java.util.Collection var34 = var33.getAuthors();
    com.google.common.collect.ImmutableList var35 = var33.getTemplateTypeNames();
    var5.setSourceMapLocationMappings((java.util.List)var35);
    com.google.javascript.rhino.JSDocInfoBuilder var38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var39 = var38.recordExpose();
    boolean var41 = var38.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var46 = var45.getNext();
    com.google.javascript.rhino.Node var47 = var43.srcrefTree(var45);
    com.google.javascript.rhino.InputId var48 = com.google.javascript.jscomp.NodeUtil.getInputId(var45);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var45.setJSType(var49);
    com.google.javascript.rhino.JSDocInfo var51 = var38.build(var45);
    java.lang.String var52 = var51.getFileOverview();
    java.util.Set var53 = var51.getModifies();
    java.util.List var54 = var51.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var55 = var51.getType();
    java.util.List var56 = var51.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var57 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var58 = null;
    var57.setStripTypes(var58);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var60 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var61 = var60.getDirectedGraphNodes();
    java.util.List var62 = var60.getEdges();
    var57.setManageClosureDependencies(var62);
    var57.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.JSModule var68 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var69 = var68.getDependencies();
    com.google.javascript.jscomp.ComposeWarningsGuard var70 = new com.google.javascript.jscomp.ComposeWarningsGuard(var69);
    com.google.javascript.jscomp.JSError var71 = null;
    com.google.javascript.jscomp.CheckLevel var72 = var70.level(var71);
    var57.addWarningsGuard((com.google.javascript.jscomp.WarningsGuard)var70);
    var3.<com.google.javascript.jscomp.SourceFile>initModules((java.util.List)var35, var56, var57);
    var3.parse();
    com.google.javascript.jscomp.JSError[] var76 = var3.getMessages();
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var77 = var3.languageMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test418"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setAssumeStrictThis(false);
    var0.setConvertToDottedProperties(false);
    var0.setGenerateExports(true);
    var0.setGenerateExports(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test419() {}
//   public void test419() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test419"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     int var4 = var3.getErrorCount();
//     int var5 = var3.getWarningCount();
//     var3.parse();
// 
//   }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test420"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var63 = var58.isPropertyTypeDeclared("ERROR");
    boolean var65 = var58.isPropertyTypeInferred("FALSE\n");
    boolean var66 = var58.isFunctionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test421"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    boolean var17 = var10.isEnumElementType();
    boolean var19 = var10.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var20 = var10.isStringValueType();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var25 = null;
    var23.unregisterPropertyOnType("Unversioned directory", var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.block(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var23.createFunctionTypeWithVarArgs(var27, var30);
    boolean var34 = var32.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var35 = var32.toMaybeEnumType();
    boolean var36 = var32.isNumber();
    java.lang.Iterable var37 = var32.getImplementedInterfaces();
    com.google.javascript.jscomp.ClosureCodingConvention var38 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var40 = var38.isConstantKey("2014/12/24 11:10");
    java.util.Collection var41 = var38.getAssertionFunctions();
    com.google.javascript.rhino.Node var45 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var45.setJSType(var46);
    boolean var48 = var45.isScript();
    com.google.javascript.rhino.Node var49 = var45.removeFirstChild();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var53 = var52.isGetterDef();
    boolean var54 = var52.isAdd();
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.String var72 = var71.toStringTree();
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    boolean var80 = var76.getBooleanProp(100);
    int var81 = var76.getSideEffectFlags();
    boolean var82 = var76.isDefaultCase();
    com.google.javascript.rhino.Node var83 = new com.google.javascript.rhino.Node(1, var52, var71, var76);
    java.lang.String var84 = var38.extractClassNameIfProvide(var45, var76);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var87 = var86.isGetterDef();
    boolean var88 = var86.isNE();
    boolean var89 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var86);
    com.google.javascript.rhino.Node var90 = var45.clonePropsFrom(var86);
    boolean var91 = var10.defineDeclaredProperty("BANG 0\n    STRING hi 0 [length: 2]\n", (com.google.javascript.rhino.jstype.JSType)var32, var86);
    com.google.javascript.rhino.jstype.JSType var92 = var86.getJSType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var72.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test422"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    java.lang.Iterable var36 = var24.getTypesWithProperty("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var41 = var40.getNext();
    com.google.javascript.rhino.Node var42 = var38.srcrefTree(var40);
    boolean var43 = var40.isVarArgs();
    com.google.javascript.rhino.Node var45 = var40.getChildAtIndex(1);
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = var49.getNext();
    com.google.javascript.rhino.Node var51 = var47.srcrefTree(var49);
    com.google.javascript.rhino.JSDocInfo var52 = var49.getJSDocInfo();
    com.google.javascript.rhino.Node var53 = var40.copyInformationFrom(var49);
    java.lang.Object var55 = null;
    var40.putProp(0, var55);
    com.google.javascript.rhino.JSTypeExpression var58 = new com.google.javascript.rhino.JSTypeExpression(var40, "()");
    com.google.javascript.rhino.jstype.StaticScope var59 = null;
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    var61.unregisterPropertyOnType("Unversioned directory", var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    boolean var67 = var61.canPropertyBeDefined(var65, "BANG");
    com.google.javascript.rhino.jstype.JSType var68 = null;
    com.google.javascript.rhino.jstype.JSType[] var69 = new com.google.javascript.rhino.jstype.JSType[] { var68};
    com.google.javascript.rhino.Node var70 = var61.createParameters(var69);
    com.google.javascript.rhino.jstype.JSType var71 = var58.evaluate(var59, var61);
    com.google.javascript.rhino.jstype.JSType var72 = var71.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.JSType var73 = var24.createDefaultObjectUnion(var72);
    com.google.javascript.rhino.jstype.JSType var74 = var72.restrictByNotNullOrUndefined();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test423"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    var0.setRemoveUnusedPrototypeProperties(true);
    var0.setCheckTypes(false);
    var0.setMoveFunctionDeclarations(true);
    var0.setLineBreak(true);
    var0.setAliasAllStrings(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test424"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    com.google.javascript.rhino.Node var58 = var56.getSource();
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    var60.unregisterPropertyOnType("Unversioned directory", var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.jscomp.JSModule var66 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var67 = var66.getDependencies();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.block(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var60.createFunctionTypeWithVarArgs(var64, var67);
    boolean var70 = var69.hasAnyTemplateInternal();
    java.lang.Iterable var71 = var69.getAllExtendedInterfaces();
    boolean var72 = var56.isSubtype((com.google.javascript.rhino.jstype.JSType)var69);
    com.google.javascript.rhino.Node var75 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var78 = var77.getNext();
    com.google.javascript.rhino.Node var79 = var75.srcrefTree(var77);
    com.google.javascript.rhino.Node var80 = var77.removeFirstChild();
    boolean var81 = var56.defineElement("goog.abstractMethod", var77);
    com.google.javascript.rhino.jstype.FunctionType var82 = var56.getConstructor();
    com.google.javascript.rhino.Node var83 = var56.getSource();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test425"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test426"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test427() {}
//   public void test427() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test427"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var2 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
//     com.google.javascript.jscomp.ClosureCodingConvention var3 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var4 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = var8.getNext();
//     com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
//     boolean var11 = var8.isOr();
//     java.lang.String var12 = var3.extractClassNameIfRequire(var4, var8);
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     var14.unregisterPropertyOnType("Unversioned directory", var16);
//     com.google.javascript.rhino.jstype.JSType var18 = null;
//     com.google.javascript.jscomp.JSModule var20 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var21 = var20.getDependencies();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.block(var21);
//     com.google.javascript.rhino.jstype.FunctionType var23 = var14.createFunctionTypeWithVarArgs(var18, var21);
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     var25.unregisterPropertyOnType("Unversioned directory", var27);
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var32 = var31.getDependencies();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.block(var32);
//     com.google.javascript.rhino.jstype.FunctionType var34 = var25.createFunctionTypeWithVarArgs(var29, var32);
//     boolean var35 = var34.hasAnyTemplateInternal();
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var36 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var37 = var36.getDirectedGraphNodes();
//     java.lang.Iterable var38 = var36.getDirectedGraphNodes();
//     java.util.List var39 = var36.getGraphvizNodes();
//     com.google.javascript.jscomp.CompilerOptions var40 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var41 = null;
//     var40.setStripTypes(var41);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var43 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var44 = var43.getDirectedGraphNodes();
//     java.util.List var45 = var43.getEdges();
//     var40.setManageClosureDependencies(var45);
//     boolean var47 = var40.isExternExportsEnabled();
//     var40.setCheckCaja(false);
//     java.util.Set var50 = null;
//     var40.setReplaceStringsReservedStrings(var50);
//     var40.setAliasAllStrings(true);
//     var40.setAliasableGlobals("STRING hi 0 [length: 2]\n");
//     com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var57 = null;
//     var56.setStripTypes(var57);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var59 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var60 = var59.getDirectedGraphNodes();
//     java.util.List var61 = var59.getEdges();
//     var56.setManageClosureDependencies(var61);
//     boolean var63 = var56.isExternExportsEnabled();
//     var56.setCheckCaja(false);
//     var56.setGroupVariableDeclarations(true);
//     java.util.Map var68 = var56.getDefineReplacements();
//     var40.setPropertyInvalidationErrors(var68);
//     var3.defineDelegateProxyPrototypeProperties(var14, (com.google.javascript.rhino.jstype.StaticScope)var34, var39, var68);
//     boolean var71 = var34.canBeCalled();
//     boolean var72 = var34.isUnknownType();
//     com.google.javascript.rhino.jstype.ObjectType.Property var74 = var34.getSlot("hi!");
//     java.lang.String var75 = var34.getNormalizedReferenceName();
//     java.lang.String var76 = var34.toDebugHashCodeString();
//     boolean var77 = var34.isVoidType();
//     com.google.javascript.rhino.jstype.JSType var79 = var34.findPropertyType("BANG 0\n    STRING hi 0 [length: 2]\n");
//     com.google.javascript.rhino.jstype.ObjectType var80 = var34.getTypeOfThis();
//     com.google.javascript.rhino.jstype.JSType[] var81 = null;
//     com.google.javascript.rhino.jstype.FunctionType var82 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var34, var81);
// 
//   }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test428"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.util.List var15 = var14.getThrownTypes();
    java.lang.String var16 = var14.getDeprecationReason();
    boolean var17 = var14.hasType();
    com.google.javascript.rhino.JSTypeExpression var18 = var14.getThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "2014/12/24 11:10"+ "'", var16.equals("2014/12/24 11:10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test429"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    com.google.javascript.rhino.JSTypeExpression var7 = null;
    boolean var9 = var1.recordThrowDescription(var7, "");
    com.google.javascript.rhino.JSDocInfoBuilder var11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var12 = var11.recordExpose();
    boolean var14 = var11.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.InputId var21 = com.google.javascript.jscomp.NodeUtil.getInputId(var18);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var18.setJSType(var22);
    com.google.javascript.rhino.JSDocInfo var24 = var11.build(var18);
    java.lang.String var25 = var24.getFileOverview();
    java.util.Set var26 = var24.getModifies();
    boolean var27 = var1.recordSuppressions(var26);
    com.google.javascript.jscomp.ClosureCodingConvention var28 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var30 = var28.isConstantKey("2014/12/24 11:10");
    java.util.Collection var31 = var28.getAssertionFunctions();
    com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(1, 0, 100);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    var35.setJSType(var36);
    boolean var38 = var35.isScript();
    com.google.javascript.rhino.Node var39 = var35.removeFirstChild();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.labelName("hi!");
    boolean var43 = var42.isGetterDef();
    boolean var44 = var42.isAdd();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.String var62 = var61.toStringTree();
    com.google.javascript.rhino.Node var64 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var66 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = var66.getNext();
    com.google.javascript.rhino.Node var68 = var64.srcrefTree(var66);
    boolean var70 = var66.getBooleanProp(100);
    int var71 = var66.getSideEffectFlags();
    boolean var72 = var66.isDefaultCase();
    com.google.javascript.rhino.Node var73 = new com.google.javascript.rhino.Node(1, var42, var61, var66);
    java.lang.String var74 = var28.extractClassNameIfProvide(var35, var66);
    boolean var77 = var28.isExported("module$2014$12$24 11:10", false);
    com.google.javascript.rhino.Node var79 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var81 = var79.getBooleanProp((-1));
    var79.setSourceEncodedPosition(10);
    boolean var84 = var79.isContinue();
    boolean var85 = var79.isGetterDef();
    boolean var86 = var28.isVarArgsParameter(var79);
    com.google.javascript.rhino.JSDocInfo var87 = var1.build(var79);
    com.google.javascript.rhino.JSTypeExpression var89 = var87.getParameterType("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var87.setDeprecated(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "BANG 0\n    STRING hi 0 [length: 2]\n"+ "'", var62.equals("BANG 0\n    STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test430"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    int var5 = var3.getSourceOffset();
    com.google.javascript.rhino.Node var6 = var3.cloneNode();
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    int var10 = var8.getSourceOffset();
    com.google.javascript.rhino.Node var11 = var8.cloneNode();
    var6.addChildrenToFront(var11);
    com.google.javascript.rhino.Node var15 = new com.google.javascript.rhino.Node(10, var6, (-1), 100);
    var15.setLength(306);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.NodeUtil.newExpr(var15);
    com.google.javascript.rhino.Node var19 = var15.getParent();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var22 = new com.google.javascript.rhino.Node(1, var15, 1, 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test431"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    boolean var62 = var58.isPropertyTypeInferred("");
    com.google.javascript.rhino.jstype.EnumElementType var63 = var58.toMaybeEnumElementType();
    com.google.javascript.rhino.jstype.ObjectType var64 = var63.getImplicitPrototype();
    com.google.javascript.rhino.jstype.ObjectType var65 = var63.getImplicitPrototype();
    boolean var66 = var63.matchesStringContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test432"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var17 = var14.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var18 = var14.getVisibility();
    boolean var19 = var14.isIdGenerator();
    com.google.javascript.rhino.JSTypeExpression var20 = var14.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test433() {}
//   public void test433() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test433"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var3 = var2.recordExpose();
//     boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var9.setJSType(var13);
//     com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
//     java.lang.String var16 = var15.getFileOverview();
//     java.util.Set var17 = var15.getModifies();
//     java.util.List var18 = var15.getImplementedInterfaces();
//     com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
//     boolean var20 = var15.containsDeclaration();
//     com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
//     var15.setVisibility(var21);
//     com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
//     boolean var25 = var23.isWhile();
//     com.google.javascript.rhino.Node var26 = var23.getLastChild();
//     com.google.javascript.rhino.Node var27 = var26.detachFromParent();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var32 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var33 = var32.getNext();
//     com.google.javascript.rhino.Node var34 = var30.srcrefTree(var32);
//     boolean var35 = var32.isVarArgs();
//     boolean var36 = var32.isOptionalArg();
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var38 = new com.google.javascript.rhino.Node(0, var32, var37);
//     com.google.javascript.rhino.Node var40 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var42 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var43 = var42.getNext();
//     com.google.javascript.rhino.Node var44 = var40.srcrefTree(var42);
//     boolean var45 = var40.isString();
//     com.google.javascript.rhino.Node var46 = var38.useSourceInfoFromForTree(var40);
//     int var47 = var46.getLength();
//     var26.addChildToBack(var46);
//     com.google.javascript.rhino.Node var49 = null;
//     var46.addChildToBack(var49);
// 
//   }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test434"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var14.setDeprecated(false);
    boolean var17 = var14.isNoSideEffects();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test435"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setChainCalls(true);
    var0.setTweakToDoubleLiteral("hi!", 0.0d);
    boolean var6 = var0.isRemoveUnusedClassProperties();
    var0.setCheckSymbols(false);
    var0.setInlineLocalFunctions(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test436"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    boolean var51 = var48.isNullable();
    boolean var52 = var48.matchesNumberContext();
    boolean var53 = var10.differsFrom(var48);
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.Node var56 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = var58.getNext();
    com.google.javascript.rhino.Node var60 = var56.srcrefTree(var58);
    boolean var61 = var58.isVarArgs();
    com.google.javascript.rhino.Node var63 = var58.getChildAtIndex(1);
    com.google.javascript.rhino.Node var65 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var67 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var68 = var67.getNext();
    com.google.javascript.rhino.Node var69 = var65.srcrefTree(var67);
    com.google.javascript.rhino.JSDocInfo var70 = var67.getJSDocInfo();
    com.google.javascript.rhino.Node var71 = var58.copyInformationFrom(var67);
    java.lang.Object var73 = null;
    var58.putProp(0, var73);
    com.google.javascript.rhino.JSTypeExpression var76 = new com.google.javascript.rhino.JSTypeExpression(var58, "()");
    com.google.javascript.rhino.jstype.StaticScope var77 = null;
    com.google.javascript.rhino.ErrorReporter var78 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var78);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    var79.unregisterPropertyOnType("Unversioned directory", var81);
    com.google.javascript.rhino.jstype.JSType var83 = null;
    boolean var85 = var79.canPropertyBeDefined(var83, "BANG");
    com.google.javascript.rhino.jstype.JSType var86 = null;
    com.google.javascript.rhino.jstype.JSType[] var87 = new com.google.javascript.rhino.jstype.JSType[] { var86};
    com.google.javascript.rhino.Node var88 = var79.createParameters(var87);
    com.google.javascript.rhino.jstype.JSType var89 = var76.evaluate(var77, var79);
    com.google.javascript.rhino.jstype.JSType var90 = var89.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var91 = var90.dereference();
    boolean var92 = var91.isUnknownType();
    com.google.javascript.rhino.jstype.JSType var93 = var91.getParameterType();
    boolean var95 = var91.hasOwnProperty("WARNING - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.JSType var96 = var10.resolve(var54, (com.google.javascript.rhino.jstype.StaticScope)var91);
    java.util.Set var97 = var10.getPropertyNames();
    boolean var98 = var10.isUnionType();
    com.google.javascript.rhino.jstype.TemplateType var99 = var10.toMaybeTemplateType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test437"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setInlineLocalVariables(false);
    var0.setDevirtualizePrototypeMethods(false);
    com.google.javascript.jscomp.CodingConvention var5 = var0.getCodingConvention();
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var7 = null;
    var6.setStripTypes(var7);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var9 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var10 = var9.getDirectedGraphNodes();
    java.util.List var11 = var9.getEdges();
    var6.setManageClosureDependencies(var11);
    boolean var13 = var6.isExternExportsEnabled();
    var6.setCollapsePropertiesOnExternTypes(false);
    var6.setProtectHiddenSideEffects(true);
    var6.setLineLengthThreshold((-19));
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var21 = null;
    var20.setStripTypes(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var24 = var23.getDirectedGraphNodes();
    java.util.List var25 = var23.getEdges();
    var20.setManageClosureDependencies(var25);
    var20.setDevirtualizePrototypeMethods(true);
    var20.setInlineLocalVariables(false);
    com.google.javascript.jscomp.CompilerOptions.TweakProcessing var31 = var20.getTweakProcessing();
    var20.setCollapseVariableDeclarations(false);
    var20.setCommonJSModulePathPrefix("function (): {540092593}");
    com.google.javascript.jscomp.CompilerOptions.LanguageMode var36 = var20.getLanguageIn();
    var6.setLanguageIn(var36);
    var0.setLanguageOut(var36);
    com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var40 = null;
    var39.setStripTypes(var40);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var42 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var43 = var42.getDirectedGraphNodes();
    java.util.List var44 = var42.getEdges();
    var39.setManageClosureDependencies(var44);
    boolean var46 = var39.isExternExportsEnabled();
    var39.setCollapsePropertiesOnExternTypes(false);
    com.google.javascript.jscomp.DiagnosticType var51 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var53 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var54 = com.google.javascript.jscomp.JSError.make(var51, var53);
    int var55 = var54.getCharno();
    com.google.javascript.jscomp.CheckLevel var56 = var54.getDefaultLevel();
    var39.setReportUnknownTypes(var56);
    var0.setCheckUnreachableCode(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test438"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var5 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    boolean var12 = var9.isVarArgs();
    com.google.javascript.rhino.Node var14 = var9.getChildAtIndex(1);
    com.google.javascript.rhino.Node var16 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var19 = var18.getNext();
    com.google.javascript.rhino.Node var20 = var16.srcrefTree(var18);
    com.google.javascript.rhino.JSDocInfo var21 = var18.getJSDocInfo();
    com.google.javascript.rhino.Node var22 = var9.copyInformationFrom(var18);
    java.lang.Object var24 = null;
    var9.putProp(0, var24);
    com.google.javascript.rhino.JSTypeExpression var27 = new com.google.javascript.rhino.JSTypeExpression(var9, "()");
    com.google.javascript.rhino.jstype.StaticScope var28 = null;
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var30.unregisterPropertyOnType("Unversioned directory", var32);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    boolean var36 = var30.canPropertyBeDefined(var34, "BANG");
    com.google.javascript.rhino.jstype.JSType var37 = null;
    com.google.javascript.rhino.jstype.JSType[] var38 = new com.google.javascript.rhino.jstype.JSType[] { var37};
    com.google.javascript.rhino.Node var39 = var30.createParameters(var38);
    com.google.javascript.rhino.jstype.JSType var40 = var27.evaluate(var28, var30);
    com.google.javascript.rhino.jstype.JSType var41 = var40.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var42 = var41.dereference();
    java.util.Collection var43 = var1.getDirectImplementors(var42);
    com.google.javascript.rhino.ErrorReporter var44 = var1.getErrorReporter();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    boolean var59 = var56.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var61 = var56.getOwnSlot("(LABEL_NAME hi!)");
    boolean var62 = var56.isEnumElementType();
    boolean var63 = var56.isEnumElementType();
    boolean var65 = var56.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    boolean var66 = var56.isNoObjectType();
    java.lang.Iterable var67 = var56.getOwnImplementedInterfaces();
    var1.unregisterPropertyOnType("hi", (com.google.javascript.rhino.jstype.JSType)var56);
    boolean var69 = var56.isConstructor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test439"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var10 = var3.getParent();
    boolean var11 = var3.isBreak();
    com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = var13.getNext();
    com.google.javascript.rhino.InputId var15 = var13.getInputId();
    boolean var16 = var13.isGetProp();
    com.google.javascript.rhino.Node var17 = var3.clonePropsFrom(var13);
    var17.setLineno(100);
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    int var23 = var21.getSourceOffset();
    com.google.javascript.rhino.Node var24 = var21.removeFirstChild();
    com.google.javascript.rhino.Node var25 = var17.useSourceInfoIfMissingFrom(var24);
    java.util.Collection var26 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var24);
    boolean var27 = var24.isTypeOf();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test440"); }


    long var1 = com.google.javascript.rhino.ScriptRuntime.testUint32String("STRING hi 0 [length: 2]\n: RETURN");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1L));

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test441"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    com.google.javascript.jscomp.ClosureCodingConvention var62 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    java.util.Collection var63 = var62.getIndirectlyDeclaredProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test442"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("function (): {895662728}", ' ');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test443"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setRemoveUnusedLocalVars(false);
    com.google.javascript.jscomp.MessageFormatter var13 = null;
    java.util.logging.Logger var14 = null;
    com.google.javascript.jscomp.LoggerErrorManager var15 = new com.google.javascript.jscomp.LoggerErrorManager(var13, var14);
    com.google.javascript.jscomp.Compiler var16 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var15);
    var0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler)var15);
    var0.setTweakToNumberLiteral("ERROR - (InputId: )\n", 1);
    var0.setCheckSuspiciousCode(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test444() {}
//   public void test444() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test444"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var2 = var1.getDependencies();
//     com.google.javascript.jscomp.SourceAst var3 = null;
//     com.google.javascript.rhino.InputId var4 = null;
//     com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput(var3, var4, true);
//     com.google.javascript.jscomp.JSModule var7 = var6.getModule();
//     var1.add(var6);
//     com.google.javascript.jscomp.SourceFile var10 = com.google.javascript.jscomp.SourceFile.fromFile("()");
//     var1.addFirst(var10);
//     java.util.Set var12 = var1.getAllDependencies();
//     var1.removeAll();
//     com.google.javascript.jscomp.SourceAst var14 = null;
//     com.google.javascript.rhino.InputId var15 = null;
//     com.google.javascript.jscomp.CompilerInput var17 = new com.google.javascript.jscomp.CompilerInput(var14, var15, true);
//     com.google.javascript.jscomp.CompilerInput var20 = new com.google.javascript.jscomp.CompilerInput(var14, "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
//     var1.addFirst(var20);
//     com.google.javascript.jscomp.SourceAst var22 = null;
//     com.google.javascript.rhino.InputId var23 = null;
//     com.google.javascript.jscomp.CompilerInput var25 = new com.google.javascript.jscomp.CompilerInput(var22, var23, true);
//     com.google.javascript.jscomp.SourceAst var26 = var25.getAst();
//     com.google.javascript.jscomp.JSModule var27 = null;
//     var25.setModule(var27);
//     var1.add(var25);
//     com.google.javascript.rhino.InputId var31 = new com.google.javascript.rhino.InputId("LABEL_NAME hi!");
//     com.google.javascript.jscomp.CompilerInput var33 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var25, var31, false);
// 
//   }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test445"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isOverride();
    var14.addSuppression("{proxy:{1743833346}}");
    com.google.javascript.rhino.JSDocInfoBuilder var21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var22 = var21.recordExpose();
    boolean var24 = var21.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    com.google.javascript.rhino.InputId var31 = com.google.javascript.jscomp.NodeUtil.getInputId(var28);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var28.setJSType(var32);
    com.google.javascript.rhino.JSDocInfo var34 = var21.build(var28);
    java.lang.String var35 = var34.getFileOverview();
    boolean var37 = var34.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var38 = var34.getVisibility();
    var14.setVisibility(var38);
    java.lang.String var40 = var14.getLicense();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test446"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    boolean var10 = var5.isScript();
    com.google.javascript.rhino.Node var11 = var5.getFirstChild();
    boolean var12 = var5.isExprResult();
    boolean var13 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test447"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    boolean var7 = var3.isAssignAdd();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test448"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearEdgeAnnotations();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    java.util.List var3 = var0.getEdges();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var4 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithEdgeAnnotations();
    com.google.javascript.jscomp.ClosureCodingConvention var5 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var7 = var5.isConstantKey("2014/12/24 11:10");
    java.util.Collection var8 = var5.getAssertionFunctions();
    boolean var10 = var5.isConstant("Unversioned directory");
    com.google.javascript.jscomp.graph.GraphNode var11 = var4.createNode((java.lang.Object)var10);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var12 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    boolean var14 = var12.hasNode((java.lang.Object)1);
    com.google.javascript.rhino.JSDocInfoBuilder var16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var17 = var16.recordExpose();
    boolean var19 = var16.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    com.google.javascript.rhino.InputId var26 = com.google.javascript.jscomp.NodeUtil.getInputId(var23);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var23.setJSType(var27);
    com.google.javascript.rhino.JSDocInfo var29 = var16.build(var23);
    java.lang.String var30 = var29.getFileOverview();
    java.util.Set var31 = var29.getModifies();
    java.util.List var32 = var29.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var33 = var29.getType();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var34 = var12.createDirectedGraphNode((java.lang.Object)var29);
    java.util.List var35 = var4.getNeighborNodes(var34);
    java.util.List var36 = var0.getNeighborNodes(var34);
    var0.clearEdgeAnnotations();
    java.util.List var38 = var0.getEdges();
    java.lang.String var39 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "LinkedGraph"+ "'", var39.equals("LinkedGraph"));

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test449"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    com.google.javascript.rhino.InputId var6 = com.google.javascript.jscomp.NodeUtil.getInputId(var3);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    var3.setJSType(var7);
    boolean var9 = var3.isBlock();
    com.google.javascript.rhino.Node var10 = var3.getNext();
    boolean var11 = var3.isFromExterns();
    boolean var12 = var3.isGetProp();
    boolean var13 = var3.isArrayLit();
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = null;
    com.google.javascript.rhino.jstype.FunctionParamBuilder var15 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var14);
    boolean var16 = var15.hasVarArgs();
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    boolean var24 = var20.isWhile();
    boolean var25 = var20.isOnlyModifiesThisCall();
    boolean var26 = var20.isParamList();
    com.google.javascript.rhino.Node var27 = var15.newOptionalParameterFromNode(var20);
    com.google.javascript.rhino.Node var28 = var27.getParent();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.comma(var3, var27);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test450"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setDefineToBooleanLiteral("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n", false);
    var0.setCommonJSModulePathPrefix("(InputId: )");
    var0.setInlineFunctions(true);
    com.google.common.collect.Multimap var10 = null;
    var0.setCustomPasses(var10);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test451"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setCheckCaja(false);
    java.util.Set var10 = null;
    var0.setReplaceStringsReservedStrings(var10);
    var0.setReserveRawExports(false);
    var0.setRemoveUnusedPrototypeProperties(false);
    var0.setFoldConstants(false);
    var0.setRewriteNewDateGoogNow(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test452"); }


    com.google.javascript.jscomp.Compiler var0 = new com.google.javascript.jscomp.Compiler();
    java.lang.String var1 = var0.getAstDotGraph();
    com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.LightweightMessageFormatter var3 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var0);
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var8 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var9 = com.google.javascript.jscomp.JSError.make(var6, var8);
    int var10 = var9.getCharno();
    com.google.javascript.jscomp.CheckLevel var11 = var9.getDefaultLevel();
    java.lang.String var12 = var3.formatError(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"+ "'", var12.equals("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n"));

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test453"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var11 = var10.hasAnyTemplateInternal();
    java.lang.Iterable var12 = var10.getAllExtendedInterfaces();
    boolean var13 = var10.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var15 = var10.getOwnSlot("(LABEL_NAME hi!)");
    boolean var16 = var10.isEnumElementType();
    java.lang.Iterable var17 = var10.getOwnImplementedInterfaces();
    boolean var18 = var10.isNativeObjectType();
    boolean var19 = var10.hasAnyTemplateInternal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test454"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    boolean var7 = var3.isArrayLit();
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    com.google.javascript.rhino.Node var16 = var11.getChildAtIndex(1);
    com.google.javascript.rhino.Node var18 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = var20.getNext();
    com.google.javascript.rhino.Node var22 = var18.srcrefTree(var20);
    com.google.javascript.rhino.JSDocInfo var23 = var20.getJSDocInfo();
    com.google.javascript.rhino.Node var24 = var11.copyInformationFrom(var20);
    boolean var25 = var3.hasChild(var20);
    boolean var26 = var3.isSwitch();
    var3.removeProp(0);
    boolean var29 = var3.isVarArgs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test455"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasFileOverview();
    boolean var17 = var14.hasReturnType();
    boolean var19 = var14.hasParameter("BANG 0\n    STRING hi 0 [length: 2]\n");
    var14.setLicense("goog.abstractMethod");
    boolean var22 = var14.isConstant();
    boolean var24 = var14.hasDescriptionForParameter("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    java.lang.String var25 = var14.getLicense();
    java.lang.String var26 = var14.getBlockDescription();
    boolean var27 = var14.isOverride();
    boolean var28 = var14.hasBaseType();
    java.lang.String var29 = var14.getFileOverview();
    com.google.common.collect.ImmutableList var30 = var14.getTemplateTypeNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "goog.abstractMethod"+ "'", var25.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test456"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("Unversioned directory");
    boolean var2 = var1.isNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test457"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    var14.setDeprecated(false);
    java.lang.String var17 = var14.getMeaning();
    boolean var18 = var14.hasModifies();
    java.lang.String var19 = var14.getMeaning();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test458"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = var7.getNext();
    com.google.javascript.rhino.Node var9 = var5.srcrefTree(var7);
    boolean var10 = var7.isVarArgs();
    boolean var11 = var7.isArrayLit();
    com.google.javascript.rhino.Node var12 = var7.getNext();
    var1.markTypeNode(var7, 10, 100, 0, 0, false);
    com.google.javascript.rhino.JSDocInfoBuilder var20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var21 = var20.recordExpose();
    boolean var22 = var20.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var24 = null;
    boolean var25 = var20.recordParameter("Unversioned directory", var24);
    com.google.javascript.rhino.JSTypeExpression var26 = null;
    boolean var28 = var20.recordThrowDescription(var26, "");
    com.google.javascript.rhino.JSDocInfoBuilder var30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var31 = var30.recordExpose();
    boolean var33 = var30.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = var37.getNext();
    com.google.javascript.rhino.Node var39 = var35.srcrefTree(var37);
    com.google.javascript.rhino.InputId var40 = com.google.javascript.jscomp.NodeUtil.getInputId(var37);
    com.google.javascript.rhino.jstype.JSType var41 = null;
    var37.setJSType(var41);
    com.google.javascript.rhino.JSDocInfo var43 = var30.build(var37);
    java.lang.String var44 = var43.getFileOverview();
    java.util.Set var45 = var43.getModifies();
    boolean var46 = var20.recordSuppressions(var45);
    boolean var47 = var1.recordModifies(var45);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
    boolean var51 = var49.getBooleanProp((-1));
    var49.setSourceEncodedPosition(10);
    com.google.javascript.rhino.JSTypeExpression var55 = new com.google.javascript.rhino.JSTypeExpression(var49, "goog.abstractMethod");
    boolean var57 = var1.recordThrowDescription(var55, "STRING hi 0 [length: 2]\n");
    boolean var58 = var1.recordNoSideEffects();
    boolean var60 = var1.recordReturnDescription("InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test459"); }


    com.google.javascript.jscomp.DiagnosticType var2 = com.google.javascript.jscomp.DiagnosticType.disabled("function (): {1204057807}", "(LABEL_NAME hi!): ()");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test460"); }


    com.google.javascript.jscomp.AstValidator var0 = new com.google.javascript.jscomp.AstValidator();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    com.google.javascript.rhino.Node var8 = var4.srcrefTree(var6);
    boolean var9 = var6.isVarArgs();
    boolean var10 = var6.isOptionalArg();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node(0, var6, var11);
    var11.setSourceEncodedPositionForTree(0);
    int var15 = var11.getChildCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.process(var1, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test461"); }


    com.google.javascript.rhino.jstype.TernaryValue var1 = com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test462"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    boolean var12 = var10.removeProperty("null(null)");
    com.google.javascript.rhino.jstype.EnumType var13 = var10.toMaybeEnumType();
    boolean var14 = var10.isNumber();
    java.lang.Iterable var15 = var10.getImplementedInterfaces();
    boolean var16 = var10.hasAnyTemplate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test463"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    com.google.javascript.rhino.jstype.ObjectType var70 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType)var31, "BANG");
    boolean var71 = var31.isUnknownType();
    int var72 = var31.getMaxArguments();
    boolean var73 = var31.isEnumType();
    java.util.List var74 = var31.getSubTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test464"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    var0.pushEdgeAnnotations();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var8 = var5.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.InputId var15 = com.google.javascript.jscomp.NodeUtil.getInputId(var12);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    var12.setJSType(var16);
    com.google.javascript.rhino.JSDocInfo var18 = var5.build(var12);
    java.lang.String var19 = var18.getFileOverview();
    java.util.Set var20 = var18.getModifies();
    java.util.List var21 = var18.getImplementedInterfaces();
    com.google.javascript.jscomp.graph.GraphNode var22 = var0.getNode((java.lang.Object)var18);
    java.lang.String var23 = var18.getMeaning();
    boolean var24 = var18.hasFileOverview();
    boolean var25 = var18.isConstant();
    java.util.Set var26 = var18.getParameterNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test465"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.JSDocInfoBuilder var2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var2.recordExpose();
    boolean var5 = var2.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var10 = var9.getNext();
    com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
    com.google.javascript.rhino.InputId var12 = com.google.javascript.jscomp.NodeUtil.getInputId(var9);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var9.setJSType(var13);
    com.google.javascript.rhino.JSDocInfo var15 = var2.build(var9);
    java.lang.String var16 = var15.getFileOverview();
    java.util.Set var17 = var15.getModifies();
    java.util.List var18 = var15.getImplementedInterfaces();
    com.google.javascript.rhino.JSTypeExpression var19 = var15.getType();
    boolean var20 = var15.containsDeclaration();
    com.google.javascript.rhino.JSDocInfo.Visibility var21 = null;
    var15.setVisibility(var21);
    com.google.javascript.rhino.Node var23 = var15.getAssociatedNode();
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var24 = var0.getClassesDefinedByCall(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var26.unregisterPropertyOnType("Unversioned directory", var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.jscomp.JSModule var32 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var33 = var32.getDependencies();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.block(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var26.createFunctionTypeWithVarArgs(var30, var33);
    boolean var36 = var35.hasAnyTemplateInternal();
    java.lang.Iterable var37 = var35.getAllExtendedInterfaces();
    boolean var38 = var35.isEmptyType();
    com.google.javascript.rhino.jstype.ObjectType.Property var40 = var35.getOwnSlot("(LABEL_NAME hi!)");
    boolean var41 = var35.isEnumElementType();
    boolean var42 = var35.isEnumElementType();
    boolean var44 = var35.removeProperty("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    var35.clearCachedValues();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    var47.unregisterPropertyOnType("Unversioned directory", var49);
    com.google.javascript.rhino.jstype.JSType var51 = null;
    com.google.javascript.jscomp.JSModule var53 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var54 = var53.getDependencies();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.block(var54);
    com.google.javascript.rhino.jstype.FunctionType var56 = var47.createFunctionTypeWithVarArgs(var51, var54);
    boolean var57 = var56.hasAnyTemplateInternal();
    java.lang.Iterable var58 = var56.getAllExtendedInterfaces();
    java.lang.Iterable var59 = var56.getCtorImplementedInterfaces();
    com.google.javascript.jscomp.CodingConvention.SubclassType var60 = null;
    var0.applySubclassRelationship(var35, var56, var60);
    com.google.javascript.jscomp.ClosureCodingConvention var62 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    com.google.javascript.jscomp.ClosureCodingConvention var63 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test466"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    com.google.javascript.rhino.JSTypeExpression var5 = null;
    boolean var6 = var1.recordParameter("Unversioned directory", var5);
    boolean var7 = var1.recordNoSideEffects();
    boolean var8 = var1.recordNoSideEffects();
    boolean var9 = var1.isInterfaceRecorded();
    boolean var10 = var1.isDescriptionRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test467"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    boolean var7 = var1.canPropertyBeDefined(var5, "BANG");
    java.lang.Iterable var9 = var1.getEachReferenceTypeWithProperty("Unversioned directory");
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    boolean var21 = var20.hasAnyTemplateInternal();
    java.lang.Iterable var22 = var20.getAllExtendedInterfaces();
    boolean var23 = var20.isEmptyType();
    java.util.Set var24 = var20.getOwnPropertyNames();
    com.google.javascript.rhino.jstype.JSType var25 = var1.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType)var20);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var26 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    var28.unregisterPropertyOnType("Unversioned directory", var30);
    var28.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    boolean var42 = var38.isFor();
    boolean var43 = var38.isNumber();
    com.google.javascript.rhino.Node var44 = var38.getNext();
    com.google.javascript.rhino.Node var46 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var49 = var48.getNext();
    com.google.javascript.rhino.Node var50 = var46.srcrefTree(var48);
    boolean var51 = var48.isVarArgs();
    com.google.javascript.rhino.Node var53 = var48.getChildAtIndex(1);
    com.google.javascript.rhino.Node var55 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var58 = var57.getNext();
    com.google.javascript.rhino.Node var59 = var55.srcrefTree(var57);
    com.google.javascript.rhino.JSDocInfo var60 = var57.getJSDocInfo();
    com.google.javascript.rhino.Node var61 = var48.copyInformationFrom(var57);
    java.lang.Object var63 = null;
    var48.putProp(0, var63);
    com.google.javascript.rhino.JSTypeExpression var66 = new com.google.javascript.rhino.JSTypeExpression(var48, "()");
    com.google.javascript.rhino.jstype.StaticScope var67 = null;
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var71 = null;
    var69.unregisterPropertyOnType("Unversioned directory", var71);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    boolean var75 = var69.canPropertyBeDefined(var73, "BANG");
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.jstype.JSType[] var77 = new com.google.javascript.rhino.jstype.JSType[] { var76};
    com.google.javascript.rhino.Node var78 = var69.createParameters(var77);
    com.google.javascript.rhino.jstype.JSType var79 = var66.evaluate(var67, var69);
    com.google.javascript.rhino.jstype.JSType var80 = var79.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var81 = var80.dereference();
    boolean var82 = var80.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var83 = var28.createEnumType("STRING hi 0 [length: 2]\n", var38, var80);
    com.google.javascript.rhino.JSDocInfo var84 = var83.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var85 = var83.getElementsType();
    boolean var86 = var85.isNominalType();
    java.lang.String var87 = var85.toString();
    java.lang.String var88 = var85.getReferenceName();
    com.google.javascript.rhino.jstype.JSType var89 = var85.autoboxesTo();
    boolean var91 = var85.hasProperty("function (): {1509650176}");
    boolean var92 = var26.addVarArgs((com.google.javascript.rhino.jstype.JSType)var85);
    boolean var93 = var85.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var87.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var88.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test468"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var2 = null;
    var1.setResolveMode(var2);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var4 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var1);
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    var6.unregisterPropertyOnType("Unversioned directory", var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.jscomp.JSModule var12 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var13 = var12.getDependencies();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var6.createFunctionTypeWithVarArgs(var10, var13);
    boolean var16 = var15.hasAnyTemplateInternal();
    java.lang.Iterable var17 = var15.getAllExtendedInterfaces();
    boolean var18 = var15.isEmptyType();
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var20.unregisterPropertyOnType("Unversioned directory", var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.jscomp.JSModule var26 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var27 = var26.getDependencies();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.block(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var20.createFunctionTypeWithVarArgs(var24, var27);
    boolean var31 = var29.removeProperty("null(null)");
    var15.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var29);
    com.google.javascript.rhino.jstype.JSType var34 = var1.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType)var29, "hi!");
    var1.resetForTypeCheck();
    com.google.javascript.jscomp.JSModule var37 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var38 = var37.getProvides();
    java.util.List var39 = var37.getRequires();
    com.google.javascript.rhino.Node var40 = var1.createParametersWithVarArgs(var39);
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    var43.unregisterPropertyOnType("Unversioned directory", var45);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.jscomp.JSModule var49 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var50 = var49.getDependencies();
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.block(var50);
    com.google.javascript.rhino.jstype.FunctionType var52 = var43.createFunctionTypeWithVarArgs(var47, var50);
    boolean var53 = var52.hasAnyTemplateInternal();
    java.lang.Iterable var54 = var52.getAllExtendedInterfaces();
    boolean var55 = var52.isEmptyType();
    java.util.Set var56 = var52.getOwnPropertyNames();
    boolean var57 = var52.isEmptyType();
    boolean var58 = var1.declareType("\u001B[35mWARNING\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", (com.google.javascript.rhino.jstype.JSType)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var60 = var52.getTopMostDefiningType("BANG 0 [source_file: Unversioned directory]\n");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test469"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    boolean var2 = var0.isConstantKey("2014/12/24 11:10");
    boolean var4 = var0.isConstantKey("(InputId: )");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test470"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    boolean var57 = var56.matchesStringContext();
    boolean var58 = var56.matchesObjectContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test471"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var2 = var1.getDependencies();
    var1.removeAll();
    com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var5.removeAll();
    var1.addDependency(var5);
    java.util.List var8 = var1.getInputs();
    java.lang.String var9 = var1.getName();
    var1.clearAsts();
    java.lang.String var11 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Unversioned directory"+ "'", var9.equals("Unversioned directory"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Unversioned directory"+ "'", var11.equals("Unversioned directory"));

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test472"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var8 = var7.getDependencies();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var1.createFunctionTypeWithVarArgs(var5, var8);
    com.google.javascript.rhino.ErrorReporter var11 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var13 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var17 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var18 = var17.getNext();
    com.google.javascript.rhino.Node var19 = var15.srcrefTree(var17);
    boolean var20 = var17.isVarArgs();
    com.google.javascript.rhino.Node var22 = var17.getChildAtIndex(1);
    com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var27 = var26.getNext();
    com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
    com.google.javascript.rhino.JSDocInfo var29 = var26.getJSDocInfo();
    com.google.javascript.rhino.Node var30 = var17.copyInformationFrom(var26);
    java.lang.Object var32 = null;
    var17.putProp(0, var32);
    com.google.javascript.rhino.JSTypeExpression var35 = new com.google.javascript.rhino.JSTypeExpression(var17, "()");
    com.google.javascript.rhino.jstype.StaticScope var36 = null;
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    var38.unregisterPropertyOnType("Unversioned directory", var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    boolean var44 = var38.canPropertyBeDefined(var42, "BANG");
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.jstype.JSType[] var46 = new com.google.javascript.rhino.jstype.JSType[] { var45};
    com.google.javascript.rhino.Node var47 = var38.createParameters(var46);
    com.google.javascript.rhino.jstype.JSType var48 = var35.evaluate(var36, var38);
    boolean var49 = var13.addVarArgs(var48);
    boolean var50 = var48.isEnumElementType();
    com.google.javascript.rhino.ErrorReporter var51 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var51);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    var52.unregisterPropertyOnType("Unversioned directory", var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    boolean var58 = var52.canPropertyBeDefined(var56, "BANG");
    com.google.javascript.rhino.jstype.JSType var59 = null;
    com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var59};
    com.google.javascript.rhino.Node var61 = var52.createParameters(var60);
    com.google.javascript.rhino.jstype.FunctionType var62 = var1.createConstructorType(var48, var60);
    com.google.javascript.rhino.jstype.JSType var64 = var62.getPropertyType("");
    boolean var65 = var62.matchesNumberContext();
    com.google.javascript.rhino.jstype.ObjectType.Property var67 = var62.getSlot("()");
    java.lang.Iterable var68 = var62.getImplementedInterfaces();
    boolean var69 = var62.hasInstanceType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test473"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    boolean var7 = var0.isExternExportsEnabled();
    var0.setManageClosureDependencies(true);
    boolean var10 = var0.shouldColorizeErrorOutput();
    com.google.common.collect.Multimap var11 = null;
    var0.setCustomPasses(var11);
    var0.setPrettyPrint(false);
    com.google.javascript.jscomp.VariableRenamingPolicy var15 = null;
    var0.setVariableRenaming(var15);
    var0.setDevirtualizePrototypeMethods(false);
    var0.setAliasableGlobals("null(null)");
    var0.setDisambiguateProperties(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test474"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var3 = var1.recordExterns();
    boolean var4 = var1.isConstructorRecorded();
    boolean var5 = var1.isConstructorRecorded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test475() {}
//   public void test475() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test475"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var5 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var6 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var3, var5);
//     com.google.javascript.rhino.JSDocInfoBuilder var8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var9 = var8.recordExpose();
//     boolean var10 = var8.recordExterns();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var15 = var14.getNext();
//     com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
//     boolean var17 = var14.isVarArgs();
//     boolean var18 = var14.isArrayLit();
//     com.google.javascript.rhino.Node var19 = var14.getNext();
//     var8.markTypeNode(var14, 10, 100, 0, 0, false);
//     com.google.javascript.rhino.Node var27 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var29 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var30 = var29.getNext();
//     com.google.javascript.rhino.Node var31 = var27.srcrefTree(var29);
//     boolean var32 = var29.isVarArgs();
//     com.google.javascript.rhino.Node var34 = var29.getChildAtIndex(1);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var39 = var38.getNext();
//     com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
//     com.google.javascript.rhino.JSDocInfo var41 = var38.getJSDocInfo();
//     com.google.javascript.rhino.Node var42 = var29.copyInformationFrom(var38);
//     java.lang.Object var44 = null;
//     var29.putProp(0, var44);
//     com.google.javascript.rhino.JSTypeExpression var47 = new com.google.javascript.rhino.JSTypeExpression(var29, "()");
//     com.google.javascript.rhino.JSTypeExpression var48 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var47);
//     boolean var49 = var8.recordBaseType(var47);
//     com.google.javascript.jscomp.MessageFormatter var50 = null;
//     java.util.logging.Logger var51 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var52 = new com.google.javascript.jscomp.LoggerErrorManager(var50, var51);
//     com.google.javascript.jscomp.Compiler var53 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var52);
//     boolean var54 = var47.equals((java.lang.Object)var53);
//     java.lang.String var55 = var53.getAstDotGraph();
//     com.google.javascript.jscomp.Compiler var56 = new com.google.javascript.jscomp.Compiler();
//     var56.reportCodeChange();
//     com.google.javascript.jscomp.Compiler.IntermediateState var58 = var56.getState();
//     var53.setState(var58);
//     var3.setState(var58);
//     boolean var61 = var3.isIdeMode();
// 
//   }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test476"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDevirtualizePrototypeMethods(true);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setSourceMapOutputPath("()");
    var0.setExternExports(true);
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.setRewriteNewDateGoogNow(false);
    com.google.javascript.jscomp.CompilerOptions var20 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var21 = null;
    var20.setStripTypes(var21);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var23 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var24 = var23.getDirectedGraphNodes();
    java.util.List var25 = var23.getEdges();
    var20.setManageClosureDependencies(var25);
    com.google.javascript.jscomp.JSModule var29 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var30 = var29.getDependencies();
    var29.removeAll();
    com.google.javascript.jscomp.JSModule var33 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    var33.removeAll();
    var29.addDependency(var33);
    java.util.List var36 = var29.getInputs();
    var20.setReplaceStringsConfiguration("\u001B[31mERROR\u001B[39m - BANG 0\n    STRING hi 0 [length: 2]\n\n", var36);
    com.google.javascript.jscomp.deps.SortedDependencies var38 = new com.google.javascript.jscomp.deps.SortedDependencies(var36);
    java.util.List var39 = var38.getInputsWithoutProvides();
    var0.setReplaceStringsConfiguration("DiagnosticGroup<hi!>", var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test477"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var4 = var1.recordParameterDescription("Unversioned directory", "2014/12/24 11:10");
    boolean var5 = var1.recordIdGenerator();
    com.google.javascript.rhino.JSDocInfoBuilder var7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var8 = var7.recordExpose();
    boolean var9 = var7.recordExterns();
    boolean var10 = var7.recordNoShadow();
    boolean var12 = var7.recordReturnDescription("()");
    boolean var14 = var7.recordDeprecationReason("BANG");
    com.google.javascript.rhino.JSDocInfoBuilder var17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var18 = var17.recordExpose();
    boolean var19 = var17.recordExterns();
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var24 = var23.getNext();
    com.google.javascript.rhino.Node var25 = var21.srcrefTree(var23);
    boolean var26 = var23.isVarArgs();
    boolean var27 = var23.isArrayLit();
    com.google.javascript.rhino.Node var28 = var23.getNext();
    var17.markTypeNode(var23, 10, 100, 0, 0, false);
    com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var39 = var38.getNext();
    com.google.javascript.rhino.Node var40 = var36.srcrefTree(var38);
    boolean var41 = var38.isVarArgs();
    com.google.javascript.rhino.Node var43 = var38.getChildAtIndex(1);
    com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var48 = var47.getNext();
    com.google.javascript.rhino.Node var49 = var45.srcrefTree(var47);
    com.google.javascript.rhino.JSDocInfo var50 = var47.getJSDocInfo();
    com.google.javascript.rhino.Node var51 = var38.copyInformationFrom(var47);
    java.lang.Object var53 = null;
    var38.putProp(0, var53);
    com.google.javascript.rhino.JSTypeExpression var56 = new com.google.javascript.rhino.JSTypeExpression(var38, "()");
    com.google.javascript.rhino.JSTypeExpression var57 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var56);
    boolean var58 = var17.recordBaseType(var56);
    com.google.javascript.jscomp.MessageFormatter var59 = null;
    java.util.logging.Logger var60 = null;
    com.google.javascript.jscomp.LoggerErrorManager var61 = new com.google.javascript.jscomp.LoggerErrorManager(var59, var60);
    com.google.javascript.jscomp.Compiler var62 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var61);
    boolean var63 = var56.equals((java.lang.Object)var62);
    boolean var64 = var7.recordParameter("BANG 0 [source_file: Unversioned directory]\n", var56);
    boolean var65 = var1.recordThrowType(var56);
    boolean var66 = var1.isConstructorRecorded();
    boolean var67 = var1.recordInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test478"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var1 = var0.getDirectedGraphNodes();
    java.util.List var2 = var0.getEdges();
    java.lang.Iterable var3 = var0.getDirectedGraphNodes();
    com.google.javascript.rhino.JSDocInfoBuilder var5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var6 = var5.recordExpose();
    boolean var7 = var5.recordExterns();
    boolean var8 = var5.recordNoShadow();
    boolean var10 = var5.recordReturnDescription("()");
    boolean var12 = var5.recordFileOverview("{proxy:{1743833346}}");
    boolean var13 = var5.recordJavaDispatch();
    com.google.javascript.jscomp.graph.GraphNode var14 = var0.getNode((java.lang.Object)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test479"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    var63.unregisterPropertyOnType("Unversioned directory", var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.jscomp.JSModule var69 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var70 = var69.getDependencies();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.block(var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var63.createFunctionTypeWithVarArgs(var67, var70);
    boolean var73 = var72.hasAnyTemplateInternal();
    java.lang.Iterable var74 = var72.getAllExtendedInterfaces();
    boolean var75 = var72.isNominalConstructor();
    boolean var76 = var58.isSubtype((com.google.javascript.rhino.jstype.JSType)var72);
    boolean var78 = var58.isPropertyTypeDeclared("ERROR - BANG 0\n    STRING hi 0 [length: 2]\n\n");
    com.google.javascript.rhino.jstype.EnumElementType var79 = var58.toMaybeEnumElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test480"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var6 = var5.getNext();
    com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
    boolean var8 = var5.isOr();
    java.lang.String var9 = var0.extractClassNameIfRequire(var1, var5);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var11.unregisterPropertyOnType("Unversioned directory", var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.jscomp.JSModule var17 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var18 = var17.getDependencies();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.block(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var11.createFunctionTypeWithVarArgs(var15, var18);
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var22.unregisterPropertyOnType("Unversioned directory", var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.jscomp.JSModule var28 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var29 = var28.getDependencies();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var22.createFunctionTypeWithVarArgs(var26, var29);
    boolean var32 = var31.hasAnyTemplateInternal();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var33 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var34 = var33.getDirectedGraphNodes();
    java.lang.Iterable var35 = var33.getDirectedGraphNodes();
    java.util.List var36 = var33.getGraphvizNodes();
    com.google.javascript.jscomp.CompilerOptions var37 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var38 = null;
    var37.setStripTypes(var38);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var40 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var41 = var40.getDirectedGraphNodes();
    java.util.List var42 = var40.getEdges();
    var37.setManageClosureDependencies(var42);
    boolean var44 = var37.isExternExportsEnabled();
    var37.setCheckCaja(false);
    java.util.Set var47 = null;
    var37.setReplaceStringsReservedStrings(var47);
    var37.setAliasAllStrings(true);
    var37.setAliasableGlobals("STRING hi 0 [length: 2]\n");
    com.google.javascript.jscomp.CompilerOptions var53 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var54 = null;
    var53.setStripTypes(var54);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var56 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var57 = var56.getDirectedGraphNodes();
    java.util.List var58 = var56.getEdges();
    var53.setManageClosureDependencies(var58);
    boolean var60 = var53.isExternExportsEnabled();
    var53.setCheckCaja(false);
    var53.setGroupVariableDeclarations(true);
    java.util.Map var65 = var53.getDefineReplacements();
    var37.setPropertyInvalidationErrors(var65);
    var0.defineDelegateProxyPrototypeProperties(var11, (com.google.javascript.rhino.jstype.StaticScope)var31, var36, var65);
    boolean var68 = var31.canBeCalled();
    boolean var69 = var31.hasAnyTemplateInternal();
    com.google.javascript.rhino.jstype.JSType var70 = var31.collapseUnion();
    boolean var71 = var31.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var72 = var31.getReturnType();
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    var74.unregisterPropertyOnType("Unversioned directory", var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.jscomp.JSModule var80 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var81 = var80.getDependencies();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.block(var81);
    com.google.javascript.rhino.jstype.FunctionType var83 = var74.createFunctionTypeWithVarArgs(var78, var81);
    boolean var84 = var83.hasCachedValues();
    boolean var85 = var83.isFunctionPrototypeType();
    com.google.javascript.rhino.jstype.JSType.TypePair var86 = var31.getTypesUnderShallowEquality((com.google.javascript.rhino.jstype.JSType)var83);
    java.lang.Iterable var87 = var31.getCtorImplementedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test481"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    boolean var11 = var4.isNE();
    boolean var12 = var4.isExprResult();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test482"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = var3.getNext();
    com.google.javascript.rhino.Node var5 = var1.srcrefTree(var3);
    boolean var6 = var3.isVarArgs();
    com.google.javascript.rhino.Node var8 = var3.getChildAtIndex(1);
    com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var13 = var12.getNext();
    com.google.javascript.rhino.Node var14 = var10.srcrefTree(var12);
    com.google.javascript.rhino.JSDocInfo var15 = var12.getJSDocInfo();
    com.google.javascript.rhino.Node var16 = var3.copyInformationFrom(var12);
    java.lang.Object var18 = null;
    var3.putProp(0, var18);
    com.google.javascript.rhino.JSTypeExpression var21 = new com.google.javascript.rhino.JSTypeExpression(var3, "()");
    com.google.javascript.rhino.jstype.StaticScope var22 = null;
    com.google.javascript.rhino.ErrorReporter var23 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var24.unregisterPropertyOnType("Unversioned directory", var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    boolean var30 = var24.canPropertyBeDefined(var28, "BANG");
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var31};
    com.google.javascript.rhino.Node var33 = var24.createParameters(var32);
    com.google.javascript.rhino.jstype.JSType var34 = var21.evaluate(var22, var24);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var38 = null;
    var37.setResolveMode(var38);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var40 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var43 = null;
    var42.setResolveMode(var43);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var45 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.jstype.FunctionParamBuilder var46 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    com.google.javascript.rhino.JSTypeExpression var68 = new com.google.javascript.rhino.JSTypeExpression(var50, "()");
    com.google.javascript.rhino.jstype.StaticScope var69 = null;
    com.google.javascript.rhino.ErrorReporter var70 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var71 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var70);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var71.unregisterPropertyOnType("Unversioned directory", var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    boolean var77 = var71.canPropertyBeDefined(var75, "BANG");
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.jstype.JSType[] var79 = new com.google.javascript.rhino.jstype.JSType[] { var78};
    com.google.javascript.rhino.Node var80 = var71.createParameters(var79);
    com.google.javascript.rhino.jstype.JSType var81 = var68.evaluate(var69, var71);
    com.google.javascript.rhino.jstype.JSType var82 = var81.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var83 = var82.dereference();
    java.util.Collection var84 = var42.getDirectImplementors(var83);
    com.google.javascript.rhino.jstype.JSType var89 = var37.getType((com.google.javascript.rhino.jstype.StaticScope)var83, "hi!", "BANG 0\n    STRING hi 0 [length: 2]\n", 10, 10);
    boolean var90 = var24.declareType("goog.abstractMethod", (com.google.javascript.rhino.jstype.JSType)var83);
    com.google.javascript.rhino.jstype.FunctionBuilder var91 = new com.google.javascript.rhino.jstype.FunctionBuilder(var24);
    com.google.javascript.rhino.jstype.JSType var96 = var24.createNamedType("hi", "(LABEL_NAME hi!)", 306, 0);
    com.google.javascript.rhino.jstype.TemplateType var97 = com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test483"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.block(var17);
    boolean var19 = var18.isFalse();
    boolean var20 = var18.isStringKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test484() {}
//   public void test484() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test484"); }
// 
// 
//     com.google.javascript.jscomp.AstValidator.ViolationHandler var0 = null;
//     com.google.javascript.jscomp.AstValidator var1 = new com.google.javascript.jscomp.AstValidator(var0);
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.stringKey("Unversioned directory");
//     boolean var5 = var3.getBooleanProp((-1));
//     var3.setSourceEncodedPosition(10);
//     var1.validateStatement(var3);
// 
//   }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test485"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("function (): {2033023906}", ' ');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test486"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    com.google.javascript.jscomp.ErrorFormat var7 = null;
    var0.setErrorFormat(var7);
    var0.setRenamePrefix("hi");
    var0.setAcceptConstKeyword(true);
    boolean var13 = var0.isRemoveUnusedClassProperties();
    com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
    java.util.List var16 = var15.getProvides();
    com.google.javascript.jscomp.CompilerInput var18 = var15.getByName("()");
    com.google.javascript.jscomp.SourceAst var19 = null;
    com.google.javascript.rhino.InputId var20 = null;
    com.google.javascript.jscomp.CompilerInput var22 = new com.google.javascript.jscomp.CompilerInput(var19, var20, true);
    com.google.javascript.jscomp.SourceAst var23 = var22.getAst();
    var15.add(var22);
    java.util.List var25 = var15.getDependencies();
    var0.setReplaceStringsFunctionDescriptions(var25);
    var0.setLabelRenaming(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test487"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var4 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var5 = var4.getNext();
    com.google.javascript.rhino.Node var6 = var2.srcrefTree(var4);
    boolean var7 = var4.isVarArgs();
    boolean var8 = var4.isOptionalArg();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(0, var4, var9);
    var9.setSourceEncodedPositionForTree(0);
    com.google.javascript.rhino.Node var13 = var9.cloneNode();
    boolean var14 = var9.isNumber();
    var9.setOptionalArg(false);
    boolean var17 = var9.isQuotedString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test488() {}
//   public void test488() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test488"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.JSModule var5 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var6 = var5.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var7 = new com.google.javascript.jscomp.ComposeWarningsGuard(var6);
//     com.google.javascript.jscomp.JSModule var9 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var10 = var9.getDependencies();
//     com.google.javascript.jscomp.ComposeWarningsGuard var11 = new com.google.javascript.jscomp.ComposeWarningsGuard(var10);
//     com.google.javascript.jscomp.CompilerOptions var12 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.Set var13 = null;
//     var12.setStripTypes(var13);
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var15 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     java.lang.Iterable var16 = var15.getDirectedGraphNodes();
//     java.util.List var17 = var15.getEdges();
//     var12.setManageClosureDependencies(var17);
//     boolean var19 = var12.isExternExportsEnabled();
//     var12.setCollapsePropertiesOnExternTypes(false);
//     var3.<com.google.javascript.jscomp.SourceFile>initModules(var6, var10, var12);
//     com.google.javascript.rhino.jstype.JSTypeRegistry var23 = var3.getTypeRegistry();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     var25.unregisterPropertyOnType("Unversioned directory", var27);
//     com.google.javascript.rhino.jstype.JSType var29 = null;
//     com.google.javascript.jscomp.JSModule var31 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var32 = var31.getDependencies();
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.block(var32);
//     com.google.javascript.rhino.jstype.FunctionType var34 = var25.createFunctionTypeWithVarArgs(var29, var32);
//     boolean var35 = var34.hasAnyTemplateInternal();
//     java.lang.Iterable var36 = var34.getAllExtendedInterfaces();
//     boolean var37 = var34.isEmptyType();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     var39.unregisterPropertyOnType("Unversioned directory", var41);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.jscomp.JSModule var45 = new com.google.javascript.jscomp.JSModule("Unversioned directory");
//     java.util.List var46 = var45.getDependencies();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.block(var46);
//     com.google.javascript.rhino.jstype.FunctionType var48 = var39.createFunctionTypeWithVarArgs(var43, var46);
//     boolean var50 = var48.removeProperty("null(null)");
//     var34.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var48);
//     int var52 = var48.getExtendedInterfacesCount();
//     java.util.Set var53 = var48.getOwnPropertyNames();
//     java.lang.Iterable var54 = var48.getCtorImplementedInterfaces();
//     com.google.javascript.rhino.ErrorReporter var55 = null;
//     com.google.javascript.rhino.jstype.StaticScope var56 = null;
//     com.google.javascript.rhino.jstype.JSType var57 = var48.resolve(var55, var56);
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var60 = null;
//     var59.setResolveMode(var60);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var62 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var59);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var63 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var59);
//     com.google.javascript.rhino.Node var64 = var63.build();
//     com.google.javascript.rhino.ErrorReporter var65 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var67 = null;
//     var66.setResolveMode(var67);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var69 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var66);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var70 = new com.google.javascript.rhino.jstype.FunctionParamBuilder(var66);
//     com.google.javascript.rhino.ErrorReporter var71 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var71);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     var72.unregisterPropertyOnType("Unversioned directory", var74);
//     com.google.javascript.rhino.jstype.JSType var76 = null;
//     boolean var78 = var72.canPropertyBeDefined(var76, "BANG");
//     com.google.javascript.rhino.jstype.JSType var79 = null;
//     com.google.javascript.rhino.jstype.JSType[] var80 = new com.google.javascript.rhino.jstype.JSType[] { var79};
//     com.google.javascript.rhino.Node var81 = var72.createParameters(var80);
//     boolean var82 = var70.addRequiredParams(var80);
//     boolean var83 = var63.addRequiredParams(var80);
//     com.google.javascript.rhino.jstype.FunctionType var84 = var23.createConstructorTypeWithVarArgs(var57, var80);
// 
//   }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test489"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.CheckLevel var1 = null;
    var0.setBrokenClosureRequiresLevel(var1);
    var0.setPrintInputDelimiter(false);
    var0.setRemoveAbstractMethods(true);
    var0.enableRuntimeTypeCheck("BANG");
    var0.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.Format var11 = null;
    var0.setSourceMapFormat(var11);
    var0.setGatherCssNames(false);

  }

  public void test490() {}
//   public void test490() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test490"); }
// 
// 
//     com.google.javascript.jscomp.MessageFormatter var0 = null;
//     java.util.logging.Logger var1 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var2 = new com.google.javascript.jscomp.LoggerErrorManager(var0, var1);
//     com.google.javascript.jscomp.Compiler var3 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var2);
//     com.google.javascript.jscomp.Scope var4 = var3.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
//     com.google.javascript.jscomp.NodeTraversal var6 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var3, var5);
//     com.google.javascript.jscomp.Scope var7 = var6.getScope();
//     int var8 = var6.getLineNumber();
//     com.google.javascript.rhino.Node var9 = var6.getCurrentNode();
//     com.google.javascript.rhino.Node var10 = var6.getEnclosingFunction();
//     com.google.javascript.rhino.Node var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.disabled("{proxy:{599688852}}", "Unversioned directory");
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.make("hi!", var19, "Unversioned directory");
//     com.google.javascript.rhino.Node var24 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     com.google.javascript.rhino.Node var28 = var24.srcrefTree(var26);
//     boolean var30 = var26.getBooleanProp(100);
//     int var31 = var26.getSideEffectFlags();
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.DiagnosticType var35 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var33, "");
//     com.google.javascript.jscomp.CheckLevel var37 = null;
//     com.google.javascript.jscomp.DiagnosticType var39 = com.google.javascript.jscomp.DiagnosticType.make("Unversioned directory", var37, "");
//     int var40 = var35.compareTo(var39);
//     com.google.javascript.rhino.Node var43 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var45 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var46 = var45.getNext();
//     boolean var47 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var45);
//     int var48 = var45.getLength();
//     com.google.javascript.rhino.Node var49 = null;
//     boolean var50 = var45.hasChild(var49);
//     com.google.javascript.rhino.Node var51 = var43.useSourceInfoIfMissingFromForTree(var45);
//     var45.setSourceFileForTesting("Unversioned directory");
//     boolean var54 = var45.isWith();
//     com.google.javascript.rhino.jstype.StaticSourceFile var55 = var45.getStaticSourceFile();
//     com.google.javascript.jscomp.DiagnosticType var58 = com.google.javascript.jscomp.DiagnosticType.disabled("null(null)", "2014/12/24 11:10");
//     com.google.javascript.jscomp.MessageFormatter var59 = null;
//     java.util.logging.Logger var60 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var61 = new com.google.javascript.jscomp.LoggerErrorManager(var59, var60);
//     com.google.javascript.jscomp.Compiler var62 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var61);
//     com.google.javascript.jscomp.Scope var63 = var62.getTopScope();
//     com.google.javascript.jscomp.NodeTraversal.Callback var64 = null;
//     com.google.javascript.jscomp.NodeTraversal var65 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var62, var64);
//     com.google.javascript.jscomp.Scope var66 = var65.getScope();
//     com.google.javascript.rhino.Node var67 = null;
//     com.google.javascript.jscomp.DiagnosticType var70 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
//     java.lang.String[] var72 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make(var70, var72);
//     com.google.javascript.jscomp.DiagnosticType var74 = var73.getType();
//     java.lang.String[] var76 = new java.lang.String[] { "LABEL_NAME hi!"};
//     com.google.javascript.jscomp.JSError var77 = var65.makeError(var67, var74, var76);
//     com.google.javascript.jscomp.JSError var78 = com.google.javascript.jscomp.JSError.make("goog.exportProperty", var45, var58, var76);
//     com.google.javascript.jscomp.JSError var79 = com.google.javascript.jscomp.JSError.make("Unversioned directory", var26, var35, var76);
//     com.google.javascript.jscomp.JSError var80 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", (-1), 100, var21, var76);
//     var6.report(var11, var14, var76);
//     com.google.javascript.jscomp.CompilerInput var82 = var6.getInput();
// 
//   }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test491"); }


    com.google.javascript.jscomp.parsing.Config.LanguageMode var1 = null;
    java.util.Set var3 = null;
    com.google.javascript.jscomp.parsing.Config var4 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var1, false, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test492"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var2 = var1.getNext();
    int var3 = var1.getSourceOffset();
    com.google.javascript.rhino.Node var4 = var1.cloneNode();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var7 = var6.getNext();
    int var8 = var6.getSourceOffset();
    com.google.javascript.rhino.Node var9 = var6.cloneNode();
    var4.addChildrenToFront(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var15 = var14.getNext();
    com.google.javascript.rhino.Node var16 = var12.srcrefTree(var14);
    com.google.javascript.rhino.InputId var17 = com.google.javascript.jscomp.NodeUtil.getInputId(var14);
    com.google.javascript.rhino.Node var18 = var4.useSourceInfoFrom(var14);
    boolean var19 = var18.isCatch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test493"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var1 = null;
    var0.setStripTypes(var1);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var4 = var3.getDirectedGraphNodes();
    java.util.List var5 = var3.getEdges();
    var0.setManageClosureDependencies(var5);
    var0.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var0.setReserveRawExports(true);
    com.google.javascript.jscomp.VariableRenamingPolicy var12 = null;
    com.google.javascript.jscomp.PropertyRenamingPolicy var13 = null;
    var0.setRenamingPolicy(var12, var13);
    com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var16 = null;
    var15.setStripTypes(var16);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var18 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var19 = var18.getDirectedGraphNodes();
    java.util.List var20 = var18.getEdges();
    var15.setManageClosureDependencies(var20);
    boolean var22 = var15.isExternExportsEnabled();
    var15.setCheckCaja(false);
    java.util.Set var25 = null;
    var15.setReplaceStringsReservedStrings(var25);
    com.google.javascript.rhino.JSDocInfoBuilder var28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var29 = var28.recordExpose();
    boolean var31 = var28.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var33 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var35 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var36 = var35.getNext();
    com.google.javascript.rhino.Node var37 = var33.srcrefTree(var35);
    com.google.javascript.rhino.InputId var38 = com.google.javascript.jscomp.NodeUtil.getInputId(var35);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    var35.setJSType(var39);
    com.google.javascript.rhino.JSDocInfo var41 = var28.build(var35);
    java.lang.String var42 = var41.getFileOverview();
    java.util.Set var43 = var41.getModifies();
    var15.setReplaceStringsReservedStrings(var43);
    var15.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var49 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var51 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var52 = com.google.javascript.jscomp.JSError.make(var49, var51);
    int var53 = var52.getCharno();
    com.google.javascript.jscomp.CheckLevel var54 = var52.getDefaultLevel();
    var15.setCheckGlobalThisLevel(var54);
    com.google.javascript.jscomp.CompilerOptions var56 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var57 = null;
    var56.setStripTypes(var57);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var59 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var60 = var59.getDirectedGraphNodes();
    java.util.List var61 = var59.getEdges();
    var56.setManageClosureDependencies(var61);
    boolean var63 = var56.isExternExportsEnabled();
    var56.setCheckCaja(false);
    java.util.Set var66 = null;
    var56.setReplaceStringsReservedStrings(var66);
    com.google.javascript.rhino.JSDocInfoBuilder var69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var70 = var69.recordExpose();
    boolean var72 = var69.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var74 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var76 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var77 = var76.getNext();
    com.google.javascript.rhino.Node var78 = var74.srcrefTree(var76);
    com.google.javascript.rhino.InputId var79 = com.google.javascript.jscomp.NodeUtil.getInputId(var76);
    com.google.javascript.rhino.jstype.JSType var80 = null;
    var76.setJSType(var80);
    com.google.javascript.rhino.JSDocInfo var82 = var69.build(var76);
    java.lang.String var83 = var82.getFileOverview();
    java.util.Set var84 = var82.getModifies();
    var56.setReplaceStringsReservedStrings(var84);
    var56.setUnaliasableGlobals("");
    com.google.javascript.jscomp.DiagnosticType var90 = com.google.javascript.jscomp.DiagnosticType.error("hi!", "BANG 0\n    STRING hi 0 [length: 2]\n");
    java.lang.String[] var92 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var93 = com.google.javascript.jscomp.JSError.make(var90, var92);
    int var94 = var93.getCharno();
    com.google.javascript.jscomp.CheckLevel var95 = var93.getDefaultLevel();
    var56.setCheckGlobalThisLevel(var95);
    var15.setBrokenClosureRequiresLevel(var95);
    var0.setCheckGlobalThisLevel(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test494"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    java.util.Set var16 = var14.getModifies();
    java.util.List var17 = var14.getImplementedInterfaces();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.block(var17);
    boolean var19 = var18.isFalse();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.empty();
    com.google.javascript.rhino.Node var21 = var20.cloneTree();
    com.google.javascript.rhino.Node var22 = var18.useSourceInfoFrom(var20);
    boolean var23 = var18.isSwitch();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test495"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordExpose();
    boolean var4 = var1.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var8 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var9 = var8.getNext();
    com.google.javascript.rhino.Node var10 = var6.srcrefTree(var8);
    com.google.javascript.rhino.InputId var11 = com.google.javascript.jscomp.NodeUtil.getInputId(var8);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var8.setJSType(var12);
    com.google.javascript.rhino.JSDocInfo var14 = var1.build(var8);
    java.lang.String var15 = var14.getFileOverview();
    boolean var16 = var14.hasType();
    boolean var17 = var14.isOverride();
    var14.addSuppression("{proxy:{1743833346}}");
    com.google.javascript.rhino.JSDocInfoBuilder var21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var22 = var21.recordExpose();
    boolean var24 = var21.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var29 = var28.getNext();
    com.google.javascript.rhino.Node var30 = var26.srcrefTree(var28);
    com.google.javascript.rhino.InputId var31 = com.google.javascript.jscomp.NodeUtil.getInputId(var28);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    var28.setJSType(var32);
    com.google.javascript.rhino.JSDocInfo var34 = var21.build(var28);
    java.lang.String var35 = var34.getFileOverview();
    boolean var37 = var34.hasParameter("LABEL_NAME hi!");
    com.google.javascript.rhino.JSDocInfo.Visibility var38 = var34.getVisibility();
    var14.setVisibility(var38);
    boolean var40 = var14.isExport();
    boolean var41 = var14.isIdGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test496() {}
//   public void test496() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test496"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     boolean var2 = var0.isConstantKey("2014/12/24 11:10");
//     java.util.Collection var3 = var0.getAssertionFunctions();
//     boolean var5 = var0.isConstant("Unversioned directory");
//     com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var10 = var9.getNext();
//     com.google.javascript.rhino.Node var11 = var7.srcrefTree(var9);
//     boolean var12 = var9.isVarArgs();
//     boolean var13 = var9.isOptionalArg();
//     java.lang.String var17 = var9.toString(false, false, true);
//     java.util.List var18 = var0.identifyTypeDeclarationCall(var9);
//     java.lang.String var19 = var0.getDelegateSuperclassName();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var22 = var21.getNext();
//     int var23 = var21.getSourceOffset();
//     com.google.javascript.rhino.Node var24 = var21.cloneNode();
//     com.google.javascript.rhino.Node var26 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var27 = var26.getNext();
//     int var28 = var26.getSourceOffset();
//     com.google.javascript.rhino.Node var29 = var26.cloneNode();
//     var24.addChildrenToFront(var29);
//     com.google.javascript.jscomp.CodingConvention.Bind var32 = var0.describeFunctionBind(var24, true);
//     com.google.javascript.jscomp.GoogleCodingConvention var33 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     boolean var35 = var33.isConstant("module$2014$12$24 11:10");
//     boolean var38 = var33.isExported("Unversioned directory", false);
//     boolean var40 = var33.isConstantKey("function (): {540092593}");
//     boolean var42 = var33.isPrivate("LABEL_NAME hi!");
//     boolean var44 = var33.isPrivate("");
//     boolean var46 = var33.isValidEnumKey("");
//     java.lang.String var47 = var33.getGlobalObject();
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.falseNode();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var51 = var48.copyInformationFrom(var50);
//     com.google.javascript.rhino.Node var53 = var50.getAncestor(1);
//     com.google.javascript.jscomp.CodingConvention.Bind var55 = var33.describeFunctionBind(var50, true);
//     boolean var57 = var33.isConstant("function (): {1204057807}");
//     com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.falseNode();
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.labelName("hi!");
//     com.google.javascript.rhino.Node var61 = var58.copyInformationFrom(var60);
//     com.google.javascript.rhino.Node var63 = var60.getAncestor(1);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var64 = var33.getClassesDefinedByCall(var60);
// 
//   }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test497"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    com.google.javascript.rhino.JSDocInfo var57 = var56.getJSDocInfo();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var59 = var58.isNominalType();
    java.lang.String var60 = var58.toString();
    java.lang.String var61 = var58.getReferenceName();
    boolean var62 = var58.matchesObjectContext();
    com.google.javascript.rhino.jstype.JSType var64 = var58.getPropertyType("function (): {2142004661}");
    java.lang.Iterable var65 = var58.getCtorImplementedInterfaces();
    var58.clearResolved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "STRING hi 0 [length: 2]\n.<hi>"+ "'", var60.equals("STRING hi 0 [length: 2]\n.<hi>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var61.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test498() {}
//   public void test498() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest7.test498"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
//     com.google.javascript.rhino.Node var6 = var5.getNext();
//     com.google.javascript.rhino.Node var7 = var3.srcrefTree(var5);
//     com.google.javascript.rhino.InputId var8 = com.google.javascript.jscomp.NodeUtil.getInputId(var5);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     var5.setJSType(var9);
//     boolean var11 = var5.isBlock();
//     com.google.javascript.rhino.Node var12 = var5.getNext();
//     boolean var13 = var5.isFromExterns();
//     boolean var14 = var5.isGetProp();
//     boolean var15 = var5.isArrayLit();
//     com.google.javascript.rhino.Node var16 = new com.google.javascript.rhino.Node(2147483647, var1, var5);
// 
//   }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test499"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    var1.unregisterPropertyOnType("Unversioned directory", var3);
    var1.identifyNonNullableName("2014/12/24 11:10");
    com.google.javascript.rhino.Node var9 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var12 = var11.getNext();
    com.google.javascript.rhino.Node var13 = var9.srcrefTree(var11);
    boolean var14 = var11.isVarArgs();
    boolean var15 = var11.isFor();
    boolean var16 = var11.isNumber();
    com.google.javascript.rhino.Node var17 = var11.getNext();
    com.google.javascript.rhino.Node var19 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var21 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = var21.getNext();
    com.google.javascript.rhino.Node var23 = var19.srcrefTree(var21);
    boolean var24 = var21.isVarArgs();
    com.google.javascript.rhino.Node var26 = var21.getChildAtIndex(1);
    com.google.javascript.rhino.Node var28 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var30 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var31 = var30.getNext();
    com.google.javascript.rhino.Node var32 = var28.srcrefTree(var30);
    com.google.javascript.rhino.JSDocInfo var33 = var30.getJSDocInfo();
    com.google.javascript.rhino.Node var34 = var21.copyInformationFrom(var30);
    java.lang.Object var36 = null;
    var21.putProp(0, var36);
    com.google.javascript.rhino.JSTypeExpression var39 = new com.google.javascript.rhino.JSTypeExpression(var21, "()");
    com.google.javascript.rhino.jstype.StaticScope var40 = null;
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    var42.unregisterPropertyOnType("Unversioned directory", var44);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    boolean var48 = var42.canPropertyBeDefined(var46, "BANG");
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.jstype.JSType[] var50 = new com.google.javascript.rhino.jstype.JSType[] { var49};
    com.google.javascript.rhino.Node var51 = var42.createParameters(var50);
    com.google.javascript.rhino.jstype.JSType var52 = var39.evaluate(var40, var42);
    com.google.javascript.rhino.jstype.JSType var53 = var52.restrictByNotNullOrUndefined();
    com.google.javascript.rhino.jstype.ObjectType var54 = var53.dereference();
    boolean var55 = var53.isConstructor();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("STRING hi 0 [length: 2]\n", var11, var53);
    java.lang.String var57 = var56.getDisplayName();
    boolean var58 = var56.isFunctionPrototypeType();
    boolean var59 = var56.isGlobalThisType();
    boolean var60 = var56.matchesObjectContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "STRING hi 0 [length: 2]\n"+ "'", var57.equals("STRING hi 0 [length: 2]\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest7.test500"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    var0.clearEdgeAnnotations();
    java.lang.Iterable var2 = var0.getDirectedGraphNodes();
    java.util.List var3 = var0.getEdges();
    var0.clearNodeAnnotations();
    java.io.PrintStream var5 = null;
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler(var5);
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var8 = null;
    var7.setStripTypes(var8);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var10 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var11 = var10.getDirectedGraphNodes();
    java.util.List var12 = var10.getEdges();
    var7.setManageClosureDependencies(var12);
    com.google.javascript.rhino.JSDocInfoBuilder var15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var16 = var15.recordExpose();
    boolean var18 = var15.recordDeprecationReason("2014/12/24 11:10");
    com.google.javascript.rhino.Node var20 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var22 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var23 = var22.getNext();
    com.google.javascript.rhino.Node var24 = var20.srcrefTree(var22);
    com.google.javascript.rhino.InputId var25 = com.google.javascript.jscomp.NodeUtil.getInputId(var22);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var22.setJSType(var26);
    com.google.javascript.rhino.JSDocInfo var28 = var15.build(var22);
    java.lang.String var29 = var28.getFileOverview();
    java.util.Set var30 = var28.getModifies();
    java.util.List var31 = var28.getImplementedInterfaces();
    com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.Set var33 = null;
    var32.setStripTypes(var33);
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var35 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    java.lang.Iterable var36 = var35.getDirectedGraphNodes();
    java.util.List var37 = var35.getEdges();
    var32.setManageClosureDependencies(var37);
    var32.setDefineToStringLiteral("Unversioned directory", "BANG 0\n    STRING hi 0 [length: 2]\n");
    var32.setColorizeErrorOutput(true);
    com.google.javascript.jscomp.SourceMap.DetailLevel var44 = null;
    var32.setSourceMapDetailLevel(var44);
    var6.<com.google.javascript.jscomp.SourceFile>initModules(var12, var31, var32);
    com.google.javascript.rhino.Node var48 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var50 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var51 = var50.getNext();
    com.google.javascript.rhino.Node var52 = var48.srcrefTree(var50);
    boolean var53 = var50.isVarArgs();
    com.google.javascript.rhino.Node var55 = var50.getChildAtIndex(1);
    com.google.javascript.rhino.Node var57 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var59 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("hi!");
    com.google.javascript.rhino.Node var60 = var59.getNext();
    com.google.javascript.rhino.Node var61 = var57.srcrefTree(var59);
    com.google.javascript.rhino.JSDocInfo var62 = var59.getJSDocInfo();
    com.google.javascript.rhino.Node var63 = var50.copyInformationFrom(var59);
    java.lang.Object var65 = null;
    var50.putProp(0, var65);
    int var67 = var50.getLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var68 = var0.getDirectedGraphEdges((java.lang.Object)var6, (java.lang.Object)var67);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

}
