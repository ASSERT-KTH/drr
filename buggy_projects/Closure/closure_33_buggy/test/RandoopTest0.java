
import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() {}
//   public void test1() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test1"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var0 = null;
//     com.google.javascript.jscomp.JSModule[] var1 = new com.google.javascript.jscomp.JSModule[] { var0};
//     com.google.javascript.jscomp.JSModuleGraph var2 = new com.google.javascript.jscomp.JSModuleGraph(var1);
// 
//   }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test2"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setSideEffectFlags(0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test3"); }


    com.google.javascript.jscomp.VariableRenamingPolicy[] var0 = com.google.javascript.jscomp.VariableRenamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test4"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var1 = com.google.javascript.jscomp.SourceFile.fromFile("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test5() {}
//   public void test5() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test5"); }
// 
// 
//     com.google.javascript.jscomp.WarningsGuard var0 = null;
//     com.google.javascript.jscomp.WarningsGuard[] var1 = new com.google.javascript.jscomp.WarningsGuard[] { var0};
//     com.google.javascript.jscomp.ComposeWarningsGuard var2 = new com.google.javascript.jscomp.ComposeWarningsGuard(var1);
// 
//   }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test6"); }


    java.lang.String var2 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("hi!", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "module$hi!"+ "'", var2.equals("module$hi!"));

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test7"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.throwNode(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.voidNode(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test8"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var2);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    boolean var20 = var17.isNE();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = new com.google.javascript.rhino.Node(10, var2, var8, var13, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test9() {}
//   public void test9() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test9"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.DiagnosticGroup[] var1 = new com.google.javascript.jscomp.DiagnosticGroup[] { var0};
//     com.google.javascript.jscomp.DiagnosticGroup var2 = new com.google.javascript.jscomp.DiagnosticGroup(var1);
// 
//   }

  public void test10() {}
//   public void test10() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test10"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.deps.SortedDependencies var1 = new com.google.javascript.jscomp.deps.SortedDependencies(var0);
// 
//   }

  public void test11() {}
//   public void test11() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test11"); }
// 
// 
//     com.google.javascript.jscomp.SourceExcerptProvider var0 = null;
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var1 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var2 = new com.google.javascript.jscomp.LightweightMessageFormatter(var0, var1);
// 
//   }

  public void test12() {}
//   public void test12() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test12"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.ComposeWarningsGuard var1 = new com.google.javascript.jscomp.ComposeWarningsGuard(var0);
// 
//   }

  public void test13() {}
//   public void test13() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test13"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("hi!", var1);
// 
//   }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test14"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.throwNode(var1);
    boolean var6 = var1.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.jscomp.NodeUtil.newExpr(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test15"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSTypeNative var1 = com.google.javascript.rhino.jstype.JSTypeNative.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test16"); }


    java.util.logging.Level var0 = null;
    com.google.javascript.jscomp.Compiler.setLoggingLevel(var0);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test17"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.throwNode(var1);
    boolean var6 = var1.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.pos(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test18"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test19() {}
//   public void test19() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test19"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
//     java.lang.String var12 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var1);
// 
//   }

  public void test20() {}
//   public void test20() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test20"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("", "", var2);
// 
//   }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test21"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
    boolean var4 = var3.isGetElem();
    boolean var5 = var3.isNull();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var7 = var3.srcref(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var13 = var9.srcref(var12);
    com.google.javascript.rhino.Node var14 = var7.useSourceInfoFromForTree(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var17 = null;
    var16.setJSDocInfo(var17);
    boolean var19 = var16.isAssignAdd();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.throwNode(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addChildAfter(var14, var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test22() {}
//   public void test22() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test22"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isNE();
//     boolean var5 = var1.isFor();
//     com.google.javascript.rhino.jstype.StaticSourceFile var6 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var1);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var9 = null;
//     var8.setJSDocInfo(var9);
//     boolean var11 = var8.isAssignAdd();
//     boolean var12 = var8.isGetElem();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     boolean var15 = var14.isGetElem();
//     boolean var16 = var14.isNull();
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var18 = var14.srcref(var17);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("");
//     boolean var21 = var20.isGetElem();
//     boolean var22 = var20.isNull();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var24 = var20.srcref(var23);
//     com.google.javascript.rhino.Node var25 = var18.useSourceInfoFromForTree(var24);
//     var1.replaceChild(var8, var24);
// 
//   }

  public void test23() {}
//   public void test23() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test23"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isNE();
//     boolean var5 = var1.isAdd();
//     java.lang.String var6 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(var1);
// 
//   }

  public void test24() {}
//   public void test24() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test24"); }
// 
// 
//     com.google.javascript.jscomp.AbstractCompiler var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.jscomp.NodeTraversal.Callback var13 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverse(var0, var2, var13);
// 
//   }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test25"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", false);
    java.util.Collection var30 = var0.getAssertionFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.JSModule[] var31 = com.google.javascript.jscomp.JSModule.sortJsModules(var30);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test26() {}
//   public void test26() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test26"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("hi!", "", var2);
// 
//   }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test27"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    boolean var1 = var0.isDirected();
    com.google.javascript.jscomp.SourceFile var3 = new com.google.javascript.jscomp.SourceFile("module$hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var5 = var0.getFirstEdge((java.lang.Object)var3, (java.lang.Object)1L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test28"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    java.lang.Iterable var12 = var1.children();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    com.google.javascript.jscomp.ClosureCodingConvention var25 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var28 = null;
    var27.setJSDocInfo(var28);
    boolean var30 = var27.isAssignAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    boolean var35 = var32.isAssignAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.throwNode(var32);
    com.google.javascript.rhino.Node var37 = var27.srcrefTree(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var40 = null;
    var39.setJSDocInfo(var40);
    boolean var42 = var39.isAssignAdd();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var45 = null;
    var44.setJSDocInfo(var45);
    boolean var47 = var44.isAssignAdd();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.throwNode(var44);
    com.google.javascript.rhino.Node var49 = var39.srcrefTree(var48);
    var27.addChildrenToFront(var39);
    java.util.List var51 = var25.identifyTypeDeclarationCall(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addChildAfter(var14, var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test29() {}
//   public void test29() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test29"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     java.lang.String var4 = var3.toString();
// 
//   }

  public void test30() {}
//   public void test30() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test30"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.comma(var0, var2);
// 
//   }

  public void test31() {}
//   public void test31() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test31"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var14 = null;
//     var13.setJSDocInfo(var14);
//     boolean var16 = var13.isAssignAdd();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     boolean var21 = var18.isAssignAdd();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
//     com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
//     var1.addChildrenToFront(var13);
//     com.google.javascript.rhino.Node.SideEffectFlags var25 = null;
//     var1.setSideEffectFlags(var25);
// 
//   }

  public void test32() {}
//   public void test32() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test32"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     boolean var3 = var2.isGetElem();
//     java.util.List var4 = var0.getNeighborNodes((java.lang.Object)var2);
// 
//   }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test33"); }


    com.google.javascript.jscomp.CodingConvention var0 = com.google.javascript.jscomp.CodingConventions.getDefault();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test34"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.jstype.FunctionType var1 = null;
    com.google.javascript.rhino.jstype.FunctionType var2 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var3 = null;
    var0.applySubclassRelationship(var1, var2, var3);
    com.google.javascript.jscomp.NodeTraversal var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    boolean var15 = var12.isAssignAdd();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.throwNode(var12);
    com.google.javascript.rhino.Node var17 = var7.srcrefTree(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var25 = null;
    var24.setJSDocInfo(var25);
    boolean var27 = var24.isAssignAdd();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.throwNode(var24);
    com.google.javascript.rhino.Node var29 = var19.srcrefTree(var28);
    var7.addChildrenToFront(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var31 = var0.getObjectLiteralCast(var5, var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test35() {}
//   public void test35() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test35"); }
// 
// 
//     java.io.Reader var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromReader("hi!", var1);
// 
//   }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test36"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    var1.addChildrenToFront(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.regexp(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test37"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.Object var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = var0.getWeight(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test38"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = var5.useSourceInfoFromForTree(var11);
    com.google.javascript.rhino.Node var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.tryCatch(var5, var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test39() {}
//   public void test39() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test39"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     int var5 = var3.getLineOffset(1);
// 
//   }

  public void test40() {}
//   public void test40() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test40"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
//     var0.popEdgeAnnotations();
// 
//   }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test41"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var2.isGetElem();
    boolean var4 = var2.isNull();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var6 = var2.srcref(var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    boolean var9 = var8.isGetElem();
    boolean var10 = var8.isNull();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var12 = var8.srcref(var11);
    com.google.javascript.rhino.Node var13 = var6.useSourceInfoFromForTree(var12);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
    boolean var16 = var15.isGetElem();
    boolean var17 = var15.isNull();
    boolean var18 = var15.isDebugger();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.or(var13, var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.sheq(var0, var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test42"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = var5.useSourceInfoFromForTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    boolean var15 = var14.isGetElem();
    boolean var16 = var14.isNull();
    boolean var17 = var14.isDebugger();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.or(var12, var14);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var21 = null;
    var20.setJSDocInfo(var21);
    boolean var23 = var20.isAssignAdd();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.throwNode(var25);
    com.google.javascript.rhino.Node var30 = var20.srcrefTree(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    boolean var35 = var32.isAssignAdd();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.throwNode(var37);
    com.google.javascript.rhino.Node var42 = var32.srcrefTree(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var45 = null;
    var44.setJSDocInfo(var45);
    boolean var47 = var44.isAssignAdd();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var50 = null;
    var49.setJSDocInfo(var50);
    boolean var52 = var49.isAssignAdd();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.throwNode(var49);
    com.google.javascript.rhino.Node var54 = var44.srcrefTree(var53);
    var32.addChildrenToFront(var44);
    boolean var56 = var30.hasChild(var32);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.name("");
    boolean var59 = var58.isGetElem();
    boolean var60 = var58.isNull();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var62 = var58.srcref(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.function(var14, var32, var61);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test43"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.throwNode(var1);
    boolean var6 = var1.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.voidNode(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test44() {}
//   public void test44() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test44"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceFile var5 = com.google.javascript.jscomp.SourceFile.fromFile("module$hi!");
//     boolean var6 = var5.isExtern();
//     var3.setSourceFile(var5);
// 
//   }

  public void test45() {}
//   public void test45() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test45"); }
// 
// 
//     com.google.javascript.rhino.Node[] var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.block(var0);
// 
//   }

  public void test46() {}
//   public void test46() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test46"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     boolean var1 = var0.isDirected();
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
//     boolean var4 = var3.isGetElem();
//     boolean var5 = var3.isNull();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var7 = var3.srcref(var6);
//     java.util.Iterator var8 = var0.getNeighborNodesIterator((java.lang.Object)var7);
// 
//   }

  public void test47() {}
//   public void test47() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test47"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     var2.rebuildInputsFromModules();
// 
//   }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test48"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.throwNode(var1);
    boolean var6 = var1.isVoid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.exprResult(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test49"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    int var3 = var1.getIntProp((-1));
    boolean var4 = var1.isTypeOf();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    boolean var7 = var6.isGetElem();
    boolean var8 = var6.isNull();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = var6.srcref(var9);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var10);
    com.google.javascript.rhino.Node[] var12 = new com.google.javascript.rhino.Node[] { var11};
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.block(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.switchNode(var1, var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test50() {}
//   public void test50() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test50"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     java.lang.String var5 = var3.getCode();
// 
//   }

  public void test51() {}
//   public void test51() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test51"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     boolean var17 = var14.isAssignAdd();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     boolean var22 = var19.isAssignAdd();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
//     com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
//     var2.addChildrenToFront(var14);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var26 = var0.getClassesDefinedByCall(var2);
//     com.google.javascript.rhino.Node var27 = null;
//     java.util.List var28 = var0.identifyTypeDeclarationCall(var27);
// 
//   }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test52"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var0.hasNode((java.lang.Object)"");
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    boolean var6 = var5.isGetElem();
    boolean var7 = var5.isNull();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var9 = var5.srcref(var8);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
    var9.addChildrenToFront(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    boolean var29 = var26.isAssignAdd();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.throwNode(var31);
    com.google.javascript.rhino.Node var36 = var26.srcrefTree(var35);
    var14.addChildrenToFront(var26);
    boolean var38 = var14.isContinue();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var39 = var0.getEdges((java.lang.Object)var9, (java.lang.Object)var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test53() {}
//   public void test53() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test53"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError var3 = null;
//     var2.report(var3);
// 
//   }

  public void test54() {}
//   public void test54() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test54"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.paramList(var0);
// 
//   }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test55"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    boolean var26 = var2.isContinue();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    boolean var29 = var28.isGetElem();
    boolean var30 = var28.isNull();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var32 = var28.srcref(var31);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    var32.addChildrenToFront(var34);
    boolean var36 = var2.isEquivalentToTyped(var32);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    boolean var41 = var38.isAssignAdd();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var44 = null;
    var43.setJSDocInfo(var44);
    boolean var46 = var43.isAssignAdd();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.throwNode(var43);
    com.google.javascript.rhino.Node var48 = var38.srcrefTree(var47);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var51 = null;
    var50.setJSDocInfo(var51);
    boolean var53 = var50.isAssignAdd();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var56 = null;
    var55.setJSDocInfo(var56);
    boolean var58 = var55.isAssignAdd();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.throwNode(var55);
    com.google.javascript.rhino.Node var60 = var50.srcrefTree(var59);
    var38.addChildrenToFront(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var64 = new com.google.javascript.rhino.Node(1, var32, var50, 10, 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test56() {}
//   public void test56() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test56"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DependencyOptions var1 = null;
//     var0.setDependencyOptions(var1);
// 
//   }

  public void test57() {}
//   public void test57() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test57"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroup[] var2 = new com.google.javascript.jscomp.DiagnosticGroup[] { var1};
//     com.google.javascript.jscomp.DiagnosticGroup var3 = new com.google.javascript.jscomp.DiagnosticGroup("NAME ", var2);
// 
//   }

  public void test58() {}
//   public void test58() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test58"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     com.google.javascript.rhino.jstype.FunctionType var9 = var3.createFunctionType(var4, var6);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     com.google.javascript.rhino.jstype.FunctionType var17 = var11.createFunctionType(var12, var14);
//     boolean var18 = var17.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var24 = null;
//     var23.setJSDocInfo(var24);
//     com.google.javascript.rhino.jstype.FunctionType var26 = var20.createFunctionType(var21, var23);
//     com.google.javascript.rhino.jstype.JSType[] var27 = new com.google.javascript.rhino.jstype.JSType[] { var21};
//     com.google.javascript.rhino.jstype.FunctionType var28 = var3.createConstructorType((com.google.javascript.rhino.jstype.JSType)var17, var27);
//     com.google.javascript.rhino.jstype.FunctionType var29 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var28);
//     boolean var30 = var28.isInstanceType();
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var31);
//     com.google.javascript.rhino.jstype.JSType var33 = null;
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var36 = null;
//     var35.setJSDocInfo(var36);
//     com.google.javascript.rhino.jstype.FunctionType var38 = var32.createFunctionType(var33, var35);
//     boolean var39 = var38.matchesInt32Context();
//     com.google.javascript.rhino.jstype.ObjectType var40 = var38.toObjectType();
//     java.util.List var41 = null;
//     com.google.javascript.rhino.jstype.JSType var42 = var1.createFunctionType((com.google.javascript.rhino.jstype.ObjectType)var28, (com.google.javascript.rhino.jstype.JSType)var38, var41);
// 
//   }

  public void test59() {}
//   public void test59() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test59"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.JSModule var6 = null;
//     com.google.javascript.jscomp.JSModule[] var7 = new com.google.javascript.jscomp.JSModule[] { var6};
//     com.google.javascript.jscomp.CompilerOptions var8 = null;
//     var2.init(var5, var7, var8);
// 
//   }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test60"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var1);
    com.google.javascript.jscomp.parsing.Config.LanguageMode var5 = null;
    com.google.javascript.jscomp.parsing.Config var7 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var5, false);
    com.google.javascript.rhino.head.ErrorReporter var8 = null;
    java.util.logging.Logger var9 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.parsing.ParserRunner.parse((com.google.javascript.rhino.jstype.StaticSourceFile)var2, "", var7, var8, var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test61"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.VariableRenamingPolicy var1 = com.google.javascript.jscomp.VariableRenamingPolicy.valueOf("LinkedGraph");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test62() {}
//   public void test62() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test62"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSModule var5 = null;
//     com.google.javascript.jscomp.JSModule[] var6 = new com.google.javascript.jscomp.JSModule[] { var5};
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.List var8 = null;
//     var7.setReplaceStringsFunctionDescriptions(var8);
//     com.google.javascript.jscomp.Result var10 = var2.compile(var4, var6, var7);
// 
//   }

  public void test63() {}
//   public void test63() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test63"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError var3 = null;
//     com.google.javascript.jscomp.CheckLevel var4 = var2.getErrorLevel(var3);
// 
//   }

  public void test64() {}
//   public void test64() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test64"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     java.util.List var4 = null;
//     java.util.List var5 = null;
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var7 = null;
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     var6.setWarningLevel(var7, var8);
//     var6.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     var6.setCheckUnreachableCode(var12);
//     com.google.javascript.jscomp.Result var14 = var2.<com.google.javascript.jscomp.SourceFile>compileModules(var4, var5, var6);
// 
//   }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test65"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.String var1 = var0.getName();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    com.google.javascript.rhino.jstype.FunctionType var9 = var3.createFunctionType(var4, var6);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var3.unregisterPropertyOnType("hi!", var11);
    java.lang.Iterable var14 = var3.getTypesWithProperty("hi!");
    java.lang.Iterable var16 = var3.getTypesWithProperty("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var17 = var0.getDirectedPredNodes((java.lang.Object)"hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "LinkedGraph"+ "'", var1.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test66"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var10 = null;
    var9.setJSDocInfo(var10);
    com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var14.createFunctionType(var15, var17);
    boolean var21 = var20.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var23.createFunctionType(var24, var26);
    com.google.javascript.rhino.jstype.JSType[] var30 = new com.google.javascript.rhino.jstype.JSType[] { var24};
    com.google.javascript.rhino.jstype.FunctionType var31 = var6.createConstructorType((com.google.javascript.rhino.jstype.JSType)var20, var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("LinkedGraph", (com.google.javascript.rhino.jstype.JSType)var31);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test67"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isAdd();
    boolean var6 = var1.isLabel();
    boolean var7 = var1.isNE();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var13 = var9.srcref(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.throwNode(var13);
    com.google.javascript.rhino.Node[] var15 = new com.google.javascript.rhino.Node[] { var14};
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.block(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.call(var1, var15);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test68() {}
//   public void test68() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test68"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     var0.popNodeAnnotations();
// 
//   }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test69"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isFor();
    com.google.javascript.rhino.jstype.StaticSourceFile var6 = com.google.javascript.jscomp.NodeUtil.getSourceFile(var1);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
    boolean var11 = var10.isGetElem();
    boolean var12 = var10.isNull();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var14 = var10.srcref(var13);
    com.google.javascript.rhino.Node var17 = new com.google.javascript.rhino.Node(100, var8, var13, 0, 0);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.replaceChild(var17, var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test70"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.rhino.JSDocInfo var1 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var2 = var1.getTypeNodes();
    boolean var3 = var1.isInterface();
    boolean var4 = var1.isHidden();
    com.google.javascript.rhino.Node var5 = var1.getAssociatedNode();
    boolean var6 = var1.isConstructor();
    java.util.Collection var7 = var1.getReferences();
    java.util.Collection var8 = var1.getTypeNodes();
    com.google.javascript.rhino.JSDocInfo var9 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var10 = var9.getTypeNodes();
    boolean var11 = var9.isInterface();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var0.isConnectedInDirection((java.lang.Object)var8, (java.lang.Object)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test71() {}
//   public void test71() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test71"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     java.util.Collection var4 = var3.getRequires();
// 
//   }

  public void test72() {}
//   public void test72() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test72"); }
// 
// 
//     java.util.List var0 = null;
//     com.google.javascript.jscomp.JSModuleGraph var1 = new com.google.javascript.jscomp.JSModuleGraph(var0);
// 
//   }

  public void test73() {}
//   public void test73() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test73"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     var2.optimize();
// 
//   }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test74"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    boolean var5 = var1.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = var6.withSourceNode(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var14 = var6.build();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test75() {}
//   public void test75() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test75"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     var1.unregisterPropertyOnType("hi!", var9);
//     com.google.javascript.rhino.ErrorReporter var11 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var11);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var16 = null;
//     var15.setJSDocInfo(var16);
//     com.google.javascript.rhino.jstype.FunctionType var18 = var12.createFunctionType(var13, var15);
//     com.google.javascript.rhino.jstype.JSType var20 = null;
//     var12.unregisterPropertyOnType("hi!", var20);
//     java.lang.Iterable var23 = var12.getTypesWithProperty("hi!");
//     java.lang.Iterable var25 = var12.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var26 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
//     com.google.javascript.rhino.jstype.JSType var28 = null;
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var31 = null;
//     var30.setJSDocInfo(var31);
//     com.google.javascript.rhino.jstype.FunctionType var33 = var27.createFunctionType(var28, var30);
//     com.google.javascript.rhino.jstype.ObjectType var34 = var33.getParentScope();
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var40 = null;
//     var39.setJSDocInfo(var40);
//     com.google.javascript.rhino.jstype.FunctionType var42 = var36.createFunctionType(var37, var39);
//     boolean var43 = var42.matchesInt32Context();
//     com.google.javascript.rhino.jstype.ObjectType var44 = var42.toObjectType();
//     com.google.javascript.rhino.jstype.FunctionType var45 = var12.createFunctionTypeWithNewThisType(var33, (com.google.javascript.rhino.jstype.ObjectType)var42);
//     java.lang.String var46 = var42.getTemplateTypeName();
//     var42.clearCachedValues();
//     com.google.javascript.rhino.jstype.FunctionType var48 = var42.toMaybeFunctionType();
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     java.util.List var50 = null;
//     com.google.javascript.rhino.jstype.JSType var51 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.ObjectType)var48, var49, var50);
// 
//   }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test76"); }


    com.google.javascript.jscomp.parsing.Config var1 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test77"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test78"); }


    com.google.javascript.jscomp.SourceFile.Generator var1 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test79() {}
//   public void test79() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test79"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     boolean var4 = var2.isIdeMode();
// 
//   }

  public void test80() {}
//   public void test80() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test80"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.JsAst var1 = new com.google.javascript.jscomp.JsAst(var0);
// 
//   }

  public void test81() {}
//   public void test81() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test81"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     java.util.List var6 = var0.identifyTypeDeclarationCall(var2);
// 
//   }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test82"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    boolean var4 = var1.isNull();
    com.google.javascript.rhino.JSDocInfo var5 = new com.google.javascript.rhino.JSDocInfo();
    boolean var6 = var5.isNoShadow();
    var1.setJSDocInfo(var5);
    var5.setLicense("LinkedGraph");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test83() {}
//   public void test83() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test83"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     var2.rebuildInputsFromModules();
// 
//   }

  public void test84() {}
//   public void test84() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test84"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.jstype.TernaryValue var9 = var7.testForEquality(var8);
// 
//   }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test85"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isAdd();
    boolean var7 = var1.getBooleanProp(100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    boolean var12 = var9.isDebugger();
    boolean var13 = var9.isArrayLit();
    var1.addChildToBack(var9);
    com.google.javascript.jscomp.ClosureCodingConvention var15 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    boolean var20 = var17.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var23 = null;
    var22.setJSDocInfo(var23);
    boolean var25 = var22.isAssignAdd();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.throwNode(var22);
    com.google.javascript.rhino.Node var27 = var17.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    boolean var32 = var29.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var35 = null;
    var34.setJSDocInfo(var35);
    boolean var37 = var34.isAssignAdd();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.throwNode(var34);
    com.google.javascript.rhino.Node var39 = var29.srcrefTree(var38);
    var17.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var41 = var15.getClassesDefinedByCall(var17);
    com.google.javascript.rhino.Node[] var42 = new com.google.javascript.rhino.Node[] { var17};
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.newNode(var1, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var44 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test86() {}
//   public void test86() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test86"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     java.util.Collection var5 = var3.getProvides();
// 
//   }

  public void test87() {}
//   public void test87() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test87"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var0 = null;
//     com.google.javascript.jscomp.CompilerInput var2 = new com.google.javascript.jscomp.CompilerInput(var0, false);
// 
//   }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test88"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    var1.setLastGeneration(true);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    boolean var15 = var12.isAssignAdd();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    boolean var20 = var17.isAssignAdd();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.throwNode(var17);
    com.google.javascript.rhino.Node var22 = var12.srcrefTree(var21);
    boolean var23 = var22.isRegExp();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    boolean var26 = var25.isGetElem();
    boolean var27 = var25.isNull();
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var41 = null;
    var40.setJSDocInfo(var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var37.createFunctionType(var38, var40);
    boolean var44 = var43.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var50 = null;
    var49.setJSDocInfo(var50);
    com.google.javascript.rhino.jstype.FunctionType var52 = var46.createFunctionType(var47, var49);
    com.google.javascript.rhino.jstype.JSType[] var53 = new com.google.javascript.rhino.jstype.JSType[] { var47};
    com.google.javascript.rhino.jstype.FunctionType var54 = var29.createConstructorType((com.google.javascript.rhino.jstype.JSType)var43, var53);
    boolean var55 = var54.isReturnTypeInferred();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var56 = var1.createConstructorType("LinkedGraph", var22, var25, (com.google.javascript.rhino.jstype.JSType)var54);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test89"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("LinkedGraph");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "LinkedGraph"+ "'", var1.equals("LinkedGraph"));

  }

  public void test90() {}
//   public void test90() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test90"); }
// 
// 
//     com.google.javascript.rhino.Node[] var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.objectlit(var0);
// 
//   }

  public void test91() {}
//   public void test91() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test91"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.jstype.JSTypeNative var6 = null;
//     com.google.javascript.rhino.jstype.ObjectType var7 = var1.getNativeObjectType(var6);
// 
//   }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test92"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    var1.addChildrenToFront(var13);
    boolean var25 = var1.isContinue();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    boolean var28 = var27.isGetElem();
    boolean var29 = var27.isNull();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var31 = var27.srcref(var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    var31.addChildrenToFront(var33);
    boolean var35 = var1.isEquivalentToTyped(var31);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var43 = null;
    var42.setJSDocInfo(var43);
    boolean var45 = var42.isAssignAdd();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.throwNode(var42);
    com.google.javascript.rhino.Node var47 = var37.srcrefTree(var46);
    java.lang.Iterable var48 = var37.children();
    boolean var49 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var37);
    var31.addChildToFront(var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var52 = var31.getExistingIntProp(0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test93() {}
//   public void test93() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test93"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var6 = null;
//     var5.setJSDocInfo(var6);
//     boolean var8 = var5.isAssignAdd();
//     boolean var9 = var5.isGetElem();
//     boolean var10 = var5.isNumber();
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var16 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("hi!", var5, var11, var14, var16);
//     com.google.javascript.jscomp.CheckLevel var18 = var2.level(var17);
// 
//   }

  public void test94() {}
//   public void test94() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test94"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     com.google.javascript.rhino.Node var8 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var6);
// 
//   }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test95"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var17 = var13.srcref(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    boolean var20 = var19.isGetElem();
    boolean var21 = var19.isNull();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var23 = var19.srcref(var22);
    com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var26.createFunctionType(var27, var29);
    com.google.javascript.rhino.jstype.ObjectType var33 = var1.createObjectType("goog.abstractMethod", var24, (com.google.javascript.rhino.jstype.ObjectType)var32);
    boolean var34 = var33.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test96() {}
//   public void test96() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test96"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var12 = null;
//     var11.setJSDocInfo(var12);
//     com.google.javascript.rhino.jstype.FunctionType var14 = var8.createFunctionType(var9, var11);
//     com.google.javascript.rhino.jstype.SimpleSlot var16 = new com.google.javascript.rhino.jstype.SimpleSlot("module$hi!", (com.google.javascript.rhino.jstype.JSType)var14, false);
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var22 = null;
//     var21.setJSDocInfo(var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     var18.unregisterPropertyOnType("hi!", var26);
//     java.lang.Iterable var29 = var18.getTypesWithProperty("hi!");
//     java.lang.Iterable var31 = var18.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var32 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var36.setJSDocInfo(var37);
//     com.google.javascript.rhino.jstype.FunctionType var39 = var33.createFunctionType(var34, var36);
//     com.google.javascript.rhino.jstype.ObjectType var40 = var39.getParentScope();
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var46 = null;
//     var45.setJSDocInfo(var46);
//     com.google.javascript.rhino.jstype.FunctionType var48 = var42.createFunctionType(var43, var45);
//     boolean var49 = var48.matchesInt32Context();
//     com.google.javascript.rhino.jstype.ObjectType var50 = var48.toObjectType();
//     com.google.javascript.rhino.jstype.FunctionType var51 = var18.createFunctionTypeWithNewThisType(var39, (com.google.javascript.rhino.jstype.ObjectType)var48);
//     java.lang.String var52 = var48.getTemplateTypeName();
//     var48.clearCachedValues();
//     com.google.javascript.rhino.jstype.FunctionType var54 = var48.toMaybeFunctionType();
//     com.google.javascript.rhino.jstype.FunctionType var55 = var1.createFunctionTypeWithNewReturnType(var14, (com.google.javascript.rhino.jstype.JSType)var48);
//     com.google.javascript.rhino.jstype.Visitor var56 = null;
//     java.lang.Object var57 = var55.visit(var56);
// 
//   }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test97"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var5);
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var6};
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.arraylit(var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test98() {}
//   public void test98() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test98"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     int var3 = var1.getIntProp((-1));
//     boolean var4 = var1.isTypeOf();
//     com.google.javascript.rhino.Node var5 = null;
//     com.google.javascript.rhino.Node var6 = var1.copyInformationFrom(var5);
// 
//   }

  public void test99() {}
//   public void test99() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test99"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var9 = null;
//     var8.setJSDocInfo(var9);
//     boolean var11 = var8.isAssignAdd();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var6.withSourceNode(var8);
//     com.google.javascript.rhino.jstype.FunctionBuilder var14 = var6.forConstructor();
//     com.google.javascript.rhino.jstype.FunctionBuilder var16 = var6.withName("");
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var17 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var18 = var6.withParams(var17);
// 
//   }

  public void test100() {}
//   public void test100() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test100"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.CompilerOptions.LanguageMode var3 = var2.languageMode();
// 
//   }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test101"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var29 = null;
    var28.setJSDocInfo(var29);
    boolean var31 = var28.isNE();
    boolean var32 = var28.isAdd();
    boolean var34 = var28.getBooleanProp(100);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    boolean var37 = var36.isGetElem();
    boolean var38 = var36.isNull();
    boolean var39 = var36.isDebugger();
    boolean var40 = var36.isArrayLit();
    var28.addChildToBack(var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var42 = var0.isPropertyTestFunction(var36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test102() {}
//   public void test102() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test102"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     var2.check();
// 
//   }

  public void test103() {}
//   public void test103() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test103"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     int var4 = var3.getNumLines();
// 
//   }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test104"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test105() {}
//   public void test105() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test105"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var13 = null;
//     var12.setJSDocInfo(var13);
//     com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
//     boolean var16 = var15.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var22 = null;
//     var21.setJSDocInfo(var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
//     boolean var27 = var26.isReturnTypeInferred();
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var33 = null;
//     var32.setJSDocInfo(var33);
//     com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
//     boolean var36 = var35.isGlobalThisType();
//     com.google.javascript.rhino.jstype.ObjectType var37 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var35);
//     com.google.javascript.rhino.jstype.JSType var38 = var37.collapseUnion();
//     boolean var39 = var26.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var37);
//     com.google.javascript.rhino.ErrorReporter var41 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var46 = null;
//     var45.setJSDocInfo(var46);
//     com.google.javascript.rhino.jstype.FunctionType var48 = var42.createFunctionType(var43, var45);
//     com.google.javascript.rhino.ErrorReporter var49 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var49);
//     com.google.javascript.rhino.jstype.JSType var51 = null;
//     com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var54 = null;
//     var53.setJSDocInfo(var54);
//     com.google.javascript.rhino.jstype.FunctionType var56 = var50.createFunctionType(var51, var53);
//     boolean var57 = var56.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var58 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var58);
//     com.google.javascript.rhino.jstype.JSType var60 = null;
//     com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var63 = null;
//     var62.setJSDocInfo(var63);
//     com.google.javascript.rhino.jstype.FunctionType var65 = var59.createFunctionType(var60, var62);
//     com.google.javascript.rhino.jstype.JSType[] var66 = new com.google.javascript.rhino.jstype.JSType[] { var60};
//     com.google.javascript.rhino.jstype.FunctionType var67 = var42.createConstructorType((com.google.javascript.rhino.jstype.JSType)var56, var66);
//     com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var70 = null;
//     var69.setJSDocInfo(var70);
//     boolean var72 = var69.isNE();
//     boolean var73 = var37.defineInferredProperty("hi!", (com.google.javascript.rhino.jstype.JSType)var67, var69);
//     com.google.javascript.rhino.jstype.JSType var74 = null;
//     boolean var75 = var67.differsFrom(var74);
// 
//   }

  public void test106() {}
//   public void test106() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test106"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     java.util.Map var2 = null;
//     var0.checkForCallingConventionDefiningCalls(var1, var2);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var6 = null;
//     var5.setJSDocInfo(var6);
//     boolean var8 = var5.isAssignAdd();
//     boolean var9 = var5.isGetElem();
//     int var10 = var5.getSourceOffset();
//     java.util.List var11 = var0.identifyTypeDeclarationCall(var5);
// 
//   }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test107"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    boolean var37 = var11.hasChild(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.breakNode(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test108"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    boolean var8 = var7.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var9 = var7.toObjectType();
    boolean var10 = var9.isStringObjectType();
    boolean var11 = var9.isObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test109"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    boolean var27 = var26.isNoResolvedType();
    java.util.List var28 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var26.setExtendedInterfaces(var28);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test110() {}
//   public void test110() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test110"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.util.List var9 = null;
//     java.util.List var10 = null;
//     com.google.javascript.jscomp.CompilerOptions var11 = null;
//     var6.<com.google.javascript.jscomp.SourceFile>initModules(var9, var10, var11);
// 
//   }

  public void test111() {}
//   public void test111() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test111"); }
// 
// 
//     com.google.javascript.rhino.JSTypeExpression var0 = null;
//     com.google.javascript.rhino.JSTypeExpression var1 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(var0);
// 
//   }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test112"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    java.lang.String var4 = var1.getCode();
    com.google.javascript.jscomp.parsing.Config.LanguageMode var7 = null;
    com.google.javascript.jscomp.parsing.Config var9 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var7, false);
    com.google.javascript.rhino.head.ErrorReporter var10 = null;
    java.util.logging.Logger var11 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = com.google.javascript.jscomp.parsing.ParserRunner.parse((com.google.javascript.rhino.jstype.StaticSourceFile)var1, "hi!. hi! at hi! line (unknown line) : (unknown column)", var9, var10, var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test113() {}
//   public void test113() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test113"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     java.util.List var4 = null;
//     java.util.List var5 = null;
//     com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var7 = null;
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     var6.setWarningLevel(var7, var8);
//     var6.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     var6.setCheckUnreachableCode(var12);
//     var6.setCollapseProperties(false);
//     var6.setInputDelimiter("hi!");
//     com.google.javascript.jscomp.Result var18 = var2.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>compile(var4, var5, var6);
// 
//   }

  public void test114() {}
//   public void test114() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test114"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.jscomp.CompilerInput var1 = new com.google.javascript.jscomp.CompilerInput(var0);
// 
//   }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test115"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var6 = null;
    var5.setJSDocInfo(var6);
    com.google.javascript.rhino.jstype.FunctionType var8 = var2.createFunctionType(var3, var5);
    com.google.javascript.rhino.jstype.SimpleSlot var10 = new com.google.javascript.rhino.jstype.SimpleSlot("module$hi!", (com.google.javascript.rhino.jstype.JSType)var8, false);
    boolean var11 = var10.isTypeInferred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test116"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.String var1 = var0.getName();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    var3.identifyNonNullableName("");
    boolean var7 = var3.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var10.createFunctionType(var11, var13);
    com.google.javascript.rhino.jstype.SimpleSlot var18 = new com.google.javascript.rhino.jstype.SimpleSlot("module$hi!", (com.google.javascript.rhino.jstype.JSType)var16, false);
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var24 = null;
    var23.setJSDocInfo(var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var20.createFunctionType(var21, var23);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    var20.unregisterPropertyOnType("hi!", var28);
    java.lang.Iterable var31 = var20.getTypesWithProperty("hi!");
    java.lang.Iterable var33 = var20.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var35.createFunctionType(var36, var38);
    com.google.javascript.rhino.jstype.ObjectType var42 = var41.getParentScope();
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var48 = null;
    var47.setJSDocInfo(var48);
    com.google.javascript.rhino.jstype.FunctionType var50 = var44.createFunctionType(var45, var47);
    boolean var51 = var50.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var52 = var50.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var53 = var20.createFunctionTypeWithNewThisType(var41, (com.google.javascript.rhino.jstype.ObjectType)var50);
    java.lang.String var54 = var50.getTemplateTypeName();
    var50.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var56 = var50.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.FunctionType var57 = var3.createFunctionTypeWithNewReturnType(var16, (com.google.javascript.rhino.jstype.JSType)var50);
    com.google.javascript.jscomp.ClosureCodingConvention var58 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var61 = null;
    var60.setJSDocInfo(var61);
    boolean var63 = var60.isAssignAdd();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var66 = null;
    var65.setJSDocInfo(var66);
    boolean var68 = var65.isAssignAdd();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.throwNode(var65);
    com.google.javascript.rhino.Node var70 = var60.srcrefTree(var69);
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var73 = null;
    var72.setJSDocInfo(var73);
    boolean var75 = var72.isAssignAdd();
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var78 = null;
    var77.setJSDocInfo(var78);
    boolean var80 = var77.isAssignAdd();
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.throwNode(var77);
    com.google.javascript.rhino.Node var82 = var72.srcrefTree(var81);
    var60.addChildrenToFront(var72);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var84 = var58.getClassesDefinedByCall(var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnect((java.lang.Object)var16, (java.lang.Object)var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "LinkedGraph"+ "'", var1.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test117() {}
//   public void test117() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test117"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.JSModule var6 = null;
//     com.google.javascript.jscomp.JSModule[] var7 = new com.google.javascript.jscomp.JSModule[] { var6};
//     com.google.javascript.jscomp.CompilerOptions var8 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var12 = com.google.javascript.jscomp.DiagnosticGroup.forType(var11);
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     var8.setWarningLevel(var12, var13);
//     var2.init(var5, var7, var8);
// 
//   }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test118"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    var1.addChildrenToFront(var13);
    boolean var25 = var1.isContinue();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    boolean var28 = var27.isGetElem();
    boolean var29 = var27.isNull();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var31 = var27.srcref(var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    var31.addChildrenToFront(var33);
    boolean var35 = var1.isEquivalentToTyped(var31);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var43 = null;
    var42.setJSDocInfo(var43);
    boolean var45 = var42.isAssignAdd();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.throwNode(var42);
    com.google.javascript.rhino.Node var47 = var37.srcrefTree(var46);
    java.lang.Iterable var48 = var37.children();
    boolean var49 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var37);
    var31.addChildToFront(var37);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.name("");
    boolean var53 = var52.isGetElem();
    boolean var54 = var52.isNull();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var56 = var52.srcref(var55);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.name("");
    boolean var59 = var58.isGetElem();
    boolean var60 = var58.isNull();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var62 = var58.srcref(var61);
    com.google.javascript.rhino.Node var63 = var56.useSourceInfoFromForTree(var62);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.name("");
    boolean var66 = var65.isGetElem();
    boolean var67 = var65.isNull();
    boolean var68 = var65.isDebugger();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.or(var63, var65);
    boolean var70 = var63.isInc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.addChildToBack(var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test119() {}
//   public void test119() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test119"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var1 = null;
//     com.google.javascript.jscomp.CheckLevel var2 = null;
//     var0.setWarningLevel(var1, var2);
//     var0.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var6 = null;
//     var0.setCheckUnreachableCode(var6);
//     var0.setCollapseProperties(false);
//     com.google.javascript.rhino.JSDocInfo var10 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var11 = var10.getTypeNodes();
//     boolean var12 = var10.isInterface();
//     var10.addSuppression("");
//     boolean var15 = var10.isNoCompile();
//     java.util.Set var16 = var10.getParameterNames();
//     var0.setStripTypePrefixes(var16);
//     boolean var18 = var0.isExternExportsEnabled();
//     var0.setCheckControlStructures(true);
//     java.util.Map var21 = null;
//     var0.setPropertyInvalidationErrors(var21);
// 
//   }

  public void test120() {}
//   public void test120() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test120"); }
// 
// 
//     java.io.File var0 = null;
//     java.nio.charset.Charset var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromFile(var0, var1);
// 
//   }

  public void test121() {}
//   public void test121() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test121"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     var1.unregisterPropertyOnType("hi!", var9);
//     java.lang.Iterable var12 = var1.getTypesWithProperty("hi!");
//     java.lang.Iterable var14 = var1.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     com.google.javascript.rhino.jstype.FunctionType var22 = var16.createFunctionType(var17, var19);
//     com.google.javascript.rhino.jstype.ObjectType var23 = var22.getParentScope();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var29 = null;
//     var28.setJSDocInfo(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var25.createFunctionType(var26, var28);
//     boolean var32 = var31.matchesInt32Context();
//     com.google.javascript.rhino.jstype.ObjectType var33 = var31.toObjectType();
//     com.google.javascript.rhino.jstype.FunctionType var34 = var1.createFunctionTypeWithNewThisType(var22, (com.google.javascript.rhino.jstype.ObjectType)var31);
//     java.lang.String var35 = var31.getTemplateTypeName();
//     var31.clearCachedValues();
//     java.util.Set var37 = var31.getPropertyNames();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var43 = null;
//     var42.setJSDocInfo(var43);
//     com.google.javascript.rhino.jstype.FunctionType var45 = var39.createFunctionType(var40, var42);
//     com.google.javascript.rhino.ErrorReporter var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
//     com.google.javascript.rhino.jstype.JSType var48 = null;
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var51 = null;
//     var50.setJSDocInfo(var51);
//     com.google.javascript.rhino.jstype.FunctionType var53 = var47.createFunctionType(var48, var50);
//     boolean var54 = var53.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var55 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var55);
//     com.google.javascript.rhino.jstype.JSType var57 = null;
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var60 = null;
//     var59.setJSDocInfo(var60);
//     com.google.javascript.rhino.jstype.FunctionType var62 = var56.createFunctionType(var57, var59);
//     com.google.javascript.rhino.jstype.JSType[] var63 = new com.google.javascript.rhino.jstype.JSType[] { var57};
//     com.google.javascript.rhino.jstype.FunctionType var64 = var39.createConstructorType((com.google.javascript.rhino.jstype.JSType)var53, var63);
//     boolean var65 = var31.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType)var64);
//     java.lang.String var66 = var64.toDebugHashCodeString();
// 
//   }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test122"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    boolean var2 = var1.isDirected();
    java.lang.Object var3 = null;
    java.lang.Object var4 = new java.lang.Object();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)var1, var3, var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test123() {}
//   public void test123() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test123"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     java.lang.String var5 = var3.getName();
// 
//   }

  public void test124() {}
//   public void test124() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test124"); }
// 
// 
//     java.io.InputStream var2 = null;
//     com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromInputStream("", "hi!", var2);
// 
//   }

  public void test125() {}
//   public void test125() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test125"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.Region var11 = var6.getSourceRegion("hi!. hi! at hi! line (unknown line) : (unknown column)", 0);
//     boolean var12 = var6.isIdeMode();
// 
//   }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test126"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    boolean var12 = var11.isLocalResultCall();
    int var13 = var11.getSideEffectFlags();
    com.google.javascript.rhino.InputId var15 = new com.google.javascript.rhino.InputId("");
    var11.setInputId(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    boolean var19 = var18.isGetElem();
    boolean var20 = var18.isNull();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var22 = var18.srcref(var21);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var22);
    com.google.javascript.rhino.Node[] var24 = new com.google.javascript.rhino.Node[] { var23};
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.block(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.newNode(var11, var24);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test127() {}
//   public void test127() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test127"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     boolean var2 = var1.isGetElem();
//     boolean var3 = var1.isNull();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var5 = var1.srcref(var4);
//     boolean var6 = var5.isAnd();
//     java.lang.String var7 = var5.toString();
//     boolean var8 = var5.isDebugger();
//     com.google.javascript.rhino.Node var9 = null;
//     com.google.javascript.rhino.Node var10 = var5.copyInformationFrom(var9);
// 
//   }

  public void test128() {}
//   public void test128() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test128"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     boolean var4 = var3.isExtern();
//     int var6 = var3.getLineOffset(1);
// 
//   }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test129"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    com.google.javascript.rhino.Node var3 = var2.getRoot();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    boolean var6 = var5.isGetElem();
    boolean var7 = var5.isNull();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var9 = var5.srcref(var8);
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
    boolean var12 = var11.isGetElem();
    boolean var13 = var11.isNull();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var15 = var11.srcref(var14);
    com.google.javascript.rhino.Node var16 = var9.useSourceInfoFromForTree(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    boolean var19 = var18.isGetElem();
    boolean var20 = var18.isNull();
    boolean var21 = var18.isDebugger();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.or(var16, var18);
    com.google.javascript.rhino.JSDocInfo var23 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Set var24 = var23.getParameterNames();
    var18.setDirectives(var24);
    com.google.javascript.jscomp.NodeTraversal.Callback var26 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var2, var18, var26);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test130() {}
//   public void test130() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test130"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     var6.parse();
// 
//   }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test131"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isAdd();
    boolean var7 = var1.getBooleanProp(100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    boolean var12 = var9.isDebugger();
    boolean var13 = var9.isArrayLit();
    var1.addChildToBack(var9);
    com.google.javascript.jscomp.ClosureCodingConvention var15 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    boolean var20 = var17.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var23 = null;
    var22.setJSDocInfo(var23);
    boolean var25 = var22.isAssignAdd();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.throwNode(var22);
    com.google.javascript.rhino.Node var27 = var17.srcrefTree(var26);
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    boolean var32 = var29.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var35 = null;
    var34.setJSDocInfo(var35);
    boolean var37 = var34.isAssignAdd();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.throwNode(var34);
    com.google.javascript.rhino.Node var39 = var29.srcrefTree(var38);
    var17.addChildrenToFront(var29);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var41 = var15.getClassesDefinedByCall(var17);
    com.google.javascript.rhino.Node[] var42 = new com.google.javascript.rhino.Node[] { var17};
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.newNode(var1, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.script(var42);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test132"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    boolean var1 = var0.isDirected();
    com.google.javascript.rhino.JSDocInfo var2 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var3 = var2.getTypeNodes();
    boolean var4 = var2.isInterface();
    boolean var5 = var2.isHidden();
    com.google.javascript.rhino.Node var6 = var2.getAssociatedNode();
    boolean var7 = var2.isConstructor();
    java.util.Collection var8 = var2.getReferences();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var12 = null;
    var11.setJSDocInfo(var12);
    boolean var14 = var11.isAssignAdd();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var17 = null;
    var16.setJSDocInfo(var17);
    boolean var19 = var16.isAssignAdd();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.throwNode(var16);
    com.google.javascript.rhino.Node var21 = var11.srcrefTree(var20);
    boolean var22 = var21.isLocalResultCall();
    com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    boolean var26 = var25.isGetElem();
    boolean var27 = var25.isNull();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var29 = var25.srcref(var28);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.throwNode(var29);
    java.lang.String var31 = var23.getSingletonGetterClassName(var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    boolean var34 = var33.isGetElem();
    boolean var35 = var33.isNull();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var37 = var33.srcref(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
    var37.addChildrenToFront(var39);
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var47 = null;
    var46.setJSDocInfo(var47);
    com.google.javascript.rhino.jstype.FunctionType var49 = var43.createFunctionType(var44, var46);
    boolean var50 = var49.isGlobalThisType();
    boolean var51 = var49.isConstructor();
    var37.putProp(0, (java.lang.Object)var49);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    boolean var55 = var54.isGetElem();
    boolean var56 = var54.isNull();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var58 = var54.srcref(var57);
    com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(0, var21, var30, var37, var58);
    int var60 = var58.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var61 = var0.isConnectedInDirection((java.lang.Object)var2, (java.lang.Object)var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test133() {}
//   public void test133() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test133"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     boolean var8 = var7.isGlobalThisType();
//     com.google.javascript.rhino.jstype.FunctionType var9 = var7.toMaybeFunctionType();
//     com.google.javascript.rhino.jstype.Visitor var10 = null;
//     java.lang.Object var11 = var9.visit(var10);
// 
//   }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test134"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var5);
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var6};
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    boolean var9 = var8.isQuotedString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test135"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("NAME ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test136() {}
//   public void test136() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test136"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     java.lang.String var6 = var2.getSourceLine("hi!", 100);
// 
//   }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test137"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    boolean var1 = var0.isNoShadow();
    boolean var2 = var0.isExpose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test138() {}
//   public void test138() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test138"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.CompilerInput var5 = var2.newExternInput("function (): ?");
// 
//   }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test139"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.falseNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    int var4 = var2.getIntProp((-1));
    boolean var5 = var2.wasEmptyNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.doNode(var0, var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test140() {}
//   public void test140() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test140"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.ifNode(var0, var1);
// 
//   }

  public void test141() {}
//   public void test141() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test141"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var9 = null;
//     var8.setJSDocInfo(var9);
//     boolean var11 = var8.isAssignAdd();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var6.withSourceNode(var8);
//     com.google.javascript.rhino.jstype.FunctionType var14 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var15 = var13.copyFromOtherFunction(var14);
// 
//   }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test142"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var5);
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var6};
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.objectlit(var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test143() {}
//   public void test143() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test143"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     com.google.javascript.jscomp.CodingConvention var4 = var2.getCodingConvention();
// 
//   }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test144"); }


    boolean var1 = com.google.javascript.rhino.ScriptRuntime.isJSLineTerminator(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test145"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.jscomp.CompilerOptions var1 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var2 = null;
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var1.setWarningLevel(var2, var3);
    var1.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var7 = null;
    var1.setCheckUnreachableCode(var7);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var9 = var1.getTracerMode();
    boolean var10 = var1.assumeStrictThis();
    com.google.javascript.jscomp.ClosureCodingConvention var11 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    java.util.List var37 = var11.identifyTypeDeclarationCall(var13);
    boolean var40 = var11.isExported("", false);
    boolean var42 = var11.isSuperClassReference("NAME ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnectInDirection((java.lang.Object)var10, (java.lang.Object)var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test146() {}
//   public void test146() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test146"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSTypeNative var2 = null;
//     com.google.javascript.rhino.jstype.ObjectType var3 = var1.getNativeObjectType(var2);
// 
//   }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test147"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.Object var1 = null;
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.getDirectedGraphNode(var1);
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    boolean var7 = var4.isAssignAdd();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var10 = null;
    var9.setJSDocInfo(var10);
    boolean var12 = var9.isAssignAdd();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.throwNode(var9);
    com.google.javascript.rhino.Node var14 = var4.srcrefTree(var13);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var17 = null;
    var16.setJSDocInfo(var17);
    boolean var19 = var16.isAssignAdd();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    boolean var24 = var21.isAssignAdd();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.throwNode(var21);
    com.google.javascript.rhino.Node var26 = var16.srcrefTree(var25);
    var4.addChildrenToFront(var16);
    com.google.javascript.jscomp.ClosureCodingConvention var28 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var29 = null;
    java.util.Map var30 = null;
    var28.checkForCallingConventionDefiningCalls(var29, var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var34 = null;
    var33.setJSDocInfo(var34);
    boolean var36 = var33.isAssignAdd();
    boolean var37 = var33.isGetElem();
    boolean var38 = var33.isNumber();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var39 = var28.getDelegateRelationship(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnect((java.lang.Object)var16, (java.lang.Object)var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test148"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    boolean var1 = var0.isHidden();
    java.lang.String var2 = var0.getMeaning();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test149() {}
//   public void test149() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test149"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.SymbolTable var9 = var6.buildKnownSymbolTable();
// 
//   }

  public void test150() {}
//   public void test150() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test150"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     boolean var9 = var6.isIdeMode();
// 
//   }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test151"); }


    boolean var1 = com.google.javascript.rhino.ScriptRuntime.isJSLineTerminator((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test152() {}
//   public void test152() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test152"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     boolean var5 = var1.isGetElem();
//     boolean var6 = var1.isNumber();
//     com.google.javascript.rhino.Node var7 = null;
//     var1.removeChild(var7);
// 
//   }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test153"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", false);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    boolean var32 = var31.isGetElem();
    boolean var33 = var31.isNull();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var35 = var31.srcref(var34);
    boolean var36 = var0.isPrototypeAlias(var34);
    java.util.Collection var37 = var0.getAssertionFunctions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.JSModule[] var38 = com.google.javascript.jscomp.JSModule.sortJsModules(var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test154() {}
//   public void test154() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test154"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     var1.setLastGeneration(true);
//     com.google.javascript.rhino.Node var10 = null;
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var17 = null;
//     var16.setJSDocInfo(var17);
//     com.google.javascript.rhino.jstype.FunctionType var19 = var13.createFunctionType(var14, var16);
//     com.google.javascript.rhino.ErrorReporter var20 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var25 = null;
//     var24.setJSDocInfo(var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = var21.createFunctionType(var22, var24);
//     boolean var28 = var27.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var34 = null;
//     var33.setJSDocInfo(var34);
//     com.google.javascript.rhino.jstype.FunctionType var36 = var30.createFunctionType(var31, var33);
//     com.google.javascript.rhino.jstype.JSType[] var37 = new com.google.javascript.rhino.jstype.JSType[] { var31};
//     com.google.javascript.rhino.jstype.FunctionType var38 = var13.createConstructorType((com.google.javascript.rhino.jstype.JSType)var27, var37);
//     com.google.javascript.rhino.jstype.FunctionType var39 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var38);
//     com.google.javascript.rhino.jstype.JSType var40 = var1.createFromTypeNodes(var10, "", (com.google.javascript.rhino.jstype.StaticScope)var38);
// 
//   }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test155"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", true);
    boolean var32 = var0.isExported("module$hi!", true);
    boolean var34 = var0.isValidEnumKey("function (): ?");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test156"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CheckLevel var1 = com.google.javascript.jscomp.CheckLevel.valueOf("function (): ?");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test157"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    com.google.javascript.rhino.Node var3 = var2.getRoot();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var12 = null;
    var11.setJSDocInfo(var12);
    boolean var14 = var11.isAssignAdd();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.throwNode(var11);
    com.google.javascript.rhino.Node var16 = var6.srcrefTree(var15);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var24 = null;
    var23.setJSDocInfo(var24);
    boolean var26 = var23.isAssignAdd();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.throwNode(var23);
    com.google.javascript.rhino.Node var28 = var18.srcrefTree(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var36 = null;
    var35.setJSDocInfo(var36);
    boolean var38 = var35.isAssignAdd();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.throwNode(var35);
    com.google.javascript.rhino.Node var40 = var30.srcrefTree(var39);
    var18.addChildrenToFront(var30);
    boolean var42 = var16.hasChild(var18);
    boolean var43 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var18);
    com.google.javascript.rhino.Node[] var44 = new com.google.javascript.rhino.Node[] { var18};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var4, var44);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test158"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    boolean var1 = var0.isDirected();
    java.lang.Object var2 = null;
    com.google.javascript.jscomp.graph.GraphNode var3 = var0.getNode(var2);
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var5 = var0.newSubGraph();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var11);
    var12.detachChildren();
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var15.createFunctionType(var16, var18);
    boolean var22 = var21.isGlobalThisType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var23 = var0.getDirectedGraphEdges((java.lang.Object)var12, (java.lang.Object)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test159"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("", "");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test160() {}
//   public void test160() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test160"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var10 = var6.getTypeRegistry();
// 
//   }

  public void test161() {}
//   public void test161() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test161"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.util.List var9 = null;
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     com.google.javascript.rhino.jstype.FunctionType var17 = var11.createFunctionType(var12, var14);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     var11.unregisterPropertyOnType("hi!", var19);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.JSDocInfo var22 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var23 = var22.getTypeNodes();
//     boolean var24 = var22.isInterface();
//     var22.addSuppression("");
//     boolean var27 = var22.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var28 = var22.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var29 = var22.getVisibility();
//     java.util.List var30 = var22.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var31 = var11.createFunctionType(var21, var30);
//     com.google.javascript.jscomp.CompilerOptions var32 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var33 = null;
//     com.google.javascript.jscomp.CheckLevel var34 = null;
//     var32.setWarningLevel(var33, var34);
//     var32.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var38 = null;
//     var32.setCheckUnreachableCode(var38);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var40 = null;
//     var32.setTweakProcessing(var40);
//     var32.setGroupVariableDeclarations(false);
//     com.google.javascript.jscomp.Result var44 = var6.<com.google.javascript.jscomp.SourceFile>compileModules(var9, var30, var32);
// 
//   }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test162"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
    boolean var4 = var3.isGetElem();
    boolean var5 = var3.isNull();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var7 = var3.srcref(var6);
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(100, var1, var6, 0, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setString("");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test163() {}
//   public void test163() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test163"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.List var1 = null;
//     var0.setReplaceStringsFunctionDescriptions(var1);
//     var0.setInlineFunctions(true);
//     com.google.javascript.jscomp.CompilerOptions.Reach var5 = null;
//     var0.setRemoveUnusedVariable(var5);
// 
//   }

  public void test164() {}
//   public void test164() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test164"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     com.google.javascript.rhino.JSDocInfo var4 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var5 = var4.getTypeNodes();
//     boolean var6 = var4.isInterface();
//     var4.addSuppression("");
//     boolean var9 = var4.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var10 = var4.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var11 = var4.getVisibility();
//     java.util.List var12 = var4.getThrownTypes();
//     com.google.javascript.rhino.ErrorReporter var13 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var18 = null;
//     var17.setJSDocInfo(var18);
//     com.google.javascript.rhino.jstype.FunctionType var20 = var14.createFunctionType(var15, var17);
//     com.google.javascript.rhino.jstype.JSType var22 = null;
//     var14.unregisterPropertyOnType("hi!", var22);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     com.google.javascript.rhino.JSDocInfo var25 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var26 = var25.getTypeNodes();
//     boolean var27 = var25.isInterface();
//     var25.addSuppression("");
//     boolean var30 = var25.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var31 = var25.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var32 = var25.getVisibility();
//     java.util.List var33 = var25.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var34 = var14.createFunctionType(var24, var33);
//     com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var36 = null;
//     com.google.javascript.jscomp.CheckLevel var37 = null;
//     var35.setWarningLevel(var36, var37);
//     var35.setReserveRawExports(false);
//     var35.setCollapseObjectLiterals(true);
//     var2.<com.google.javascript.jscomp.SourceFile,com.google.javascript.jscomp.SourceFile>init(var12, var33, var35);
// 
//   }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test165"); }


    boolean var1 = com.google.javascript.rhino.ScriptRuntime.isJSLineTerminator(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test166() {}
//   public void test166() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test166"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.neg(var0);
// 
//   }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test167"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
    java.util.logging.Logger var4 = null;
    com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
    com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
    com.google.javascript.jscomp.Region var11 = var6.getSourceRegion("hi!. hi! at hi! line (unknown line) : (unknown column)", 0);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    com.google.javascript.jscomp.NodeTraversal.Callback var37 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var6, var25, var37);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test168"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    var5.addChildrenToFront(var7);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var11.createFunctionType(var12, var14);
    boolean var18 = var17.isGlobalThisType();
    boolean var19 = var17.isConstructor();
    var5.putProp(0, (java.lang.Object)var17);
    int var21 = var5.getSourcePosition();
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    var23.identifyNonNullableName("");
    boolean var27 = var23.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var28 = new com.google.javascript.rhino.jstype.FunctionBuilder(var23);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.jstype.FunctionBuilder var35 = var28.withSourceNode(var30);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var43 = null;
    var42.setJSDocInfo(var43);
    boolean var45 = var42.isAssignAdd();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.throwNode(var42);
    com.google.javascript.rhino.Node var47 = var37.srcrefTree(var46);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var50 = null;
    var49.setJSDocInfo(var50);
    boolean var52 = var49.isAssignAdd();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var55 = null;
    var54.setJSDocInfo(var55);
    boolean var57 = var54.isAssignAdd();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.throwNode(var54);
    com.google.javascript.rhino.Node var59 = var49.srcrefTree(var58);
    var37.addChildrenToFront(var49);
    boolean var61 = var37.isContinue();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.name("");
    boolean var64 = var63.isGetElem();
    boolean var65 = var63.isNull();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var67 = var63.srcref(var66);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.name("");
    var67.addChildrenToFront(var69);
    boolean var71 = var37.isEquivalentToTyped(var67);
    com.google.javascript.rhino.jstype.FunctionBuilder var72 = var35.withSourceNode(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.var(var5, var67);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test169"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    boolean var7 = var6.isGetElem();
    boolean var8 = var6.isNull();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var10 = var6.srcref(var9);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    boolean var13 = var12.isGetElem();
    boolean var14 = var12.isNull();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var16 = var12.srcref(var15);
    com.google.javascript.rhino.Node var17 = var10.useSourceInfoFromForTree(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    boolean var20 = var19.isGetElem();
    boolean var21 = var19.isNull();
    boolean var22 = var19.isDebugger();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.or(var17, var19);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    boolean var29 = var26.isAssignAdd();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.throwNode(var31);
    com.google.javascript.rhino.Node var36 = var26.srcrefTree(var35);
    com.google.javascript.rhino.Node.AncestorIterable var37 = var35.getAncestors();
    boolean var38 = var24.isEquivalentTo(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addChildBefore(var23, var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test170() {}
//   public void test170() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test170"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     boolean var3 = var2.acceptConstKeyword();
// 
//   }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test171"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    boolean var5 = var1.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = var6.withSourceNode(var8);
    com.google.javascript.rhino.jstype.FunctionBuilder var14 = var6.forConstructor();
    com.google.javascript.rhino.jstype.FunctionBuilder var16 = var6.withName("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var17 = var6.build();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test172"); }


    int var1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test173"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var26);
    com.google.javascript.rhino.JSDocInfo var28 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var29 = var28.getTypeNodes();
    boolean var30 = var28.isInterface();
    boolean var31 = var28.isHidden();
    com.google.javascript.rhino.Node var32 = var28.getAssociatedNode();
    var27.setJSDocInfo(var28);
    boolean var34 = var28.isConstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test174"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isOnlyModifiesThisCall();
    com.google.javascript.rhino.Node[] var6 = new com.google.javascript.rhino.Node[] { var1};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.objectlit(var6);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test175"); }


    boolean var1 = com.google.javascript.rhino.ScriptRuntime.isJSLineTerminator(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test176() {}
//   public void test176() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test176"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSModule var9 = var3.getModule();
//     com.google.javascript.jscomp.CompilerInput var11 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, true);
// 
//   }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test177"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    var1.addChildrenToFront(var13);
    boolean var25 = var1.isContinue();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    boolean var28 = var27.isGetElem();
    boolean var29 = var27.isNull();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var31 = var27.srcref(var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    var31.addChildrenToFront(var33);
    boolean var35 = var1.isEquivalentToTyped(var31);
    boolean var36 = var31.isBlock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test178"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("", "hi!. hi! at hi! line (unknown line) : (unknown column)");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test179"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var4 = null;
    var3.setJSDocInfo(var4);
    boolean var6 = var3.isAssignAdd();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
    com.google.javascript.rhino.Node var13 = var3.srcrefTree(var12);
    boolean var14 = var13.isLocalResultCall();
    com.google.javascript.jscomp.ClosureCodingConvention var15 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    boolean var18 = var17.isGetElem();
    boolean var19 = var17.isNull();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var21 = var17.srcref(var20);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var21);
    java.lang.String var23 = var15.getSingletonGetterClassName(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    boolean var26 = var25.isGetElem();
    boolean var27 = var25.isNull();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var29 = var25.srcref(var28);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    var29.addChildrenToFront(var31);
    com.google.javascript.rhino.ErrorReporter var34 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
    com.google.javascript.rhino.jstype.JSType var36 = null;
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    com.google.javascript.rhino.jstype.FunctionType var41 = var35.createFunctionType(var36, var38);
    boolean var42 = var41.isGlobalThisType();
    boolean var43 = var41.isConstructor();
    var29.putProp(0, (java.lang.Object)var41);
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.name("");
    boolean var47 = var46.isGetElem();
    boolean var48 = var46.isNull();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var50 = var46.srcref(var49);
    com.google.javascript.rhino.Node var51 = new com.google.javascript.rhino.Node(0, var13, var22, var29, var50);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var54 = null;
    var53.setJSDocInfo(var54);
    boolean var56 = var53.isAssignAdd();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var59 = null;
    var58.setJSDocInfo(var59);
    boolean var61 = var58.isAssignAdd();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.throwNode(var58);
    com.google.javascript.rhino.Node var63 = var53.srcrefTree(var62);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var66 = null;
    var65.setJSDocInfo(var66);
    boolean var68 = var65.isAssignAdd();
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var71 = null;
    var70.setJSDocInfo(var71);
    boolean var73 = var70.isAssignAdd();
    com.google.javascript.rhino.Node var74 = com.google.javascript.rhino.IR.throwNode(var70);
    com.google.javascript.rhino.Node var75 = var65.srcrefTree(var74);
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var78 = null;
    var77.setJSDocInfo(var78);
    boolean var80 = var77.isAssignAdd();
    com.google.javascript.rhino.Node var82 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var83 = null;
    var82.setJSDocInfo(var83);
    boolean var85 = var82.isAssignAdd();
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.throwNode(var82);
    com.google.javascript.rhino.Node var87 = var77.srcrefTree(var86);
    var65.addChildrenToFront(var77);
    boolean var89 = var63.hasChild(var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var90 = new com.google.javascript.rhino.Node(100, var13, var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test180() {}
//   public void test180() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test180"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     boolean var2 = var1.isGetElem();
//     boolean var3 = var1.isNull();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var5 = var1.srcref(var4);
//     com.google.javascript.rhino.Node var6 = null;
//     com.google.javascript.rhino.Node var7 = var4.removeChildAfter(var6);
// 
//   }

  public void test181() {}
//   public void test181() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test181"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
//     com.google.javascript.jscomp.JsAst var13 = new com.google.javascript.jscomp.JsAst(var12);
//     var6.addNewScript(var13);
// 
//   }

  public void test182() {}
//   public void test182() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test182"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     boolean var5 = var1.isGetElem();
//     boolean var6 = var1.isNumber();
//     com.google.javascript.rhino.Node var7 = null;
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.or(var1, var7);
// 
//   }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test183"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.ObjectType var8 = var7.getParentScope();
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var10.createFunctionType(var11, var13);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var10.unregisterPropertyOnType("hi!", var18);
    java.lang.Iterable var21 = var10.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var23.createFunctionType(var24, var26);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var23.unregisterPropertyOnType("hi!", var31);
    java.lang.Iterable var34 = var23.getTypesWithProperty("hi!");
    java.lang.Iterable var36 = var23.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var38.createFunctionType(var39, var41);
    com.google.javascript.rhino.jstype.ObjectType var45 = var44.getParentScope();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var51 = null;
    var50.setJSDocInfo(var51);
    com.google.javascript.rhino.jstype.FunctionType var53 = var47.createFunctionType(var48, var50);
    boolean var54 = var53.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var55 = var53.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var56 = var23.createFunctionTypeWithNewThisType(var44, (com.google.javascript.rhino.jstype.ObjectType)var53);
    java.lang.String var57 = var53.getTemplateTypeName();
    var53.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var59 = var53.toMaybeFunctionType();
    var10.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var53);
    var7.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var53);
    boolean var62 = var53.isRecordType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test184() {}
//   public void test184() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test184"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     var2.rebuildInputsFromModules();
// 
//   }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test185"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.Object var1 = null;
    com.google.javascript.jscomp.graph.GraphNode var2 = var0.getNode(var1);
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.jscomp.SourceFile var5 = com.google.javascript.jscomp.SourceFile.fromFile("module$hi!");
    boolean var6 = var5.isExtern();
    com.google.javascript.jscomp.ClosureCodingConvention var7 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var13 = var9.srcref(var12);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.throwNode(var13);
    java.lang.String var15 = var7.getSingletonGetterClassName(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var16 = var0.isConnectedInDirection((java.lang.Object)var3, (java.lang.Object)var6, (java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test186"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.enableRuntimeTypeCheck("hi!");
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.setCheckControlStructures(false);
    var0.setCollapseProperties(false);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test187"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var1.recordVersion("function (): ?");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test188() {}
//   public void test188() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test188"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     boolean var10 = var6.isGetElem();
//     boolean var11 = var6.isNumber();
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.DiagnosticType var15 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var17 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var18 = com.google.javascript.jscomp.JSError.make("hi!", var6, var12, var15, var17);
//     java.util.logging.Logger var19 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var20 = new com.google.javascript.jscomp.LoggerErrorManager(var19);
//     com.google.javascript.jscomp.JSError[] var21 = var20.getWarnings();
//     boolean var22 = var18.equals((java.lang.Object)var20);
//     com.google.javascript.jscomp.CheckLevel var23 = var2.getErrorLevel(var18);
// 
//   }

  public void test189() {}
//   public void test189() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test189"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.jstype.FunctionType var1 = null;
//     com.google.javascript.rhino.jstype.FunctionType var2 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var3 = null;
//     var0.applySubclassRelationship(var1, var2, var3);
//     java.lang.String var5 = var0.getAbstractMethodName();
//     java.lang.String var6 = var0.getExportPropertyFunction();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.block();
//     boolean var8 = var7.isVoid();
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var9 = var0.getClassesDefinedByCall(var7);
// 
//   }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test190"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("module$hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test191"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var26);
    boolean var28 = var26.isInstanceType();
    boolean var29 = var26.isOrdinaryFunction();
    boolean var30 = var26.isResolved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test192() {}
//   public void test192() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test192"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSModule var5 = null;
//     com.google.javascript.jscomp.JSModule[] var6 = new com.google.javascript.jscomp.JSModule[] { var5};
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var8 = null;
//     com.google.javascript.jscomp.CheckLevel var9 = null;
//     var7.setWarningLevel(var8, var9);
//     var7.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     var7.setCheckUnreachableCode(var13);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var15 = null;
//     var7.setTweakProcessing(var15);
//     var7.setNameReferenceReportPath("hi!");
//     boolean var19 = var7.assumeStrictThis();
//     com.google.javascript.jscomp.Result var20 = var2.compile(var4, var6, var7);
// 
//   }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test193"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordInterface();
    java.util.Set var3 = null;
    boolean var4 = var1.recordModifies(var3);
    boolean var5 = var1.recordConstancy();
    boolean var6 = var1.recordConstancy();
    boolean var8 = var1.recordReturnDescription("NAME ");
    var1.markAnnotation("hi!", 3, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test194"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = com.google.javascript.rhino.ScriptRuntime.escapeString("LinkedGraph", '#');
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test195() {}
//   public void test195() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test195"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     boolean var17 = var14.isAssignAdd();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     boolean var22 = var19.isAssignAdd();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
//     com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
//     var2.addChildrenToFront(var14);
//     java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
//     boolean var29 = var0.isExported("", true);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var32 = null;
//     var31.setJSDocInfo(var32);
//     boolean var34 = var31.isAssignAdd();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var36.setJSDocInfo(var37);
//     boolean var39 = var36.isAssignAdd();
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.throwNode(var36);
//     com.google.javascript.rhino.Node var41 = var31.srcrefTree(var40);
//     com.google.javascript.rhino.Node.AncestorIterable var42 = var40.getAncestors();
//     com.google.javascript.rhino.Node var43 = var40.getLastChild();
//     java.util.Map var44 = null;
//     var0.checkForCallingConventionDefiningCalls(var40, var44);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.name("");
//     boolean var48 = var47.isGetElem();
//     boolean var49 = var47.isNull();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var51 = var47.srcref(var50);
//     com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
//     boolean var54 = var53.isGetElem();
//     boolean var55 = var53.isNull();
//     com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var57 = var53.srcref(var56);
//     com.google.javascript.rhino.Node var58 = var51.useSourceInfoFromForTree(var57);
//     com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.name("");
//     boolean var61 = var60.isGetElem();
//     boolean var62 = var60.isNull();
//     boolean var63 = var60.isDebugger();
//     com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.or(var58, var60);
//     com.google.javascript.rhino.JSDocInfo var65 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Set var66 = var65.getParameterNames();
//     var60.setDirectives(var66);
//     java.lang.String var68 = var0.getSingletonGetterClassName(var60);
// 
//   }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test196"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    var5.addChildrenToFront(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setDouble(0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test197() {}
//   public void test197() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test197"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     com.google.javascript.jscomp.SourceFile.Generator var11 = null;
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromGenerator("NAME ", var11);
//     com.google.javascript.jscomp.SourceFile var14 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var16 = new com.google.javascript.jscomp.CompilerInput(var14, true);
//     java.lang.String var17 = var14.getCode();
//     com.google.javascript.jscomp.CompilerOptions var18 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var19 = null;
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     var18.setWarningLevel(var19, var20);
//     var18.enableRuntimeTypeCheck("hi!");
//     com.google.javascript.jscomp.CheckLevel var24 = null;
//     var18.setCheckMissingGetCssNameLevel(var24);
//     com.google.javascript.jscomp.Result var26 = var6.compile(var12, var14, var18);
// 
//   }

  public void test198() {}
//   public void test198() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test198"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.JSModule var4 = var3.getModule();
//     com.google.javascript.jscomp.SourceFile var5 = var3.getSourceFile();
// 
//   }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test199"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    boolean var25 = var24.isLocalResultCall();
    com.google.javascript.jscomp.ClosureCodingConvention var26 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    boolean var29 = var28.isGetElem();
    boolean var30 = var28.isNull();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var32 = var28.srcref(var31);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.throwNode(var32);
    java.lang.String var34 = var26.getSingletonGetterClassName(var33);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    boolean var37 = var36.isGetElem();
    boolean var38 = var36.isNull();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var40 = var36.srcref(var39);
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
    var40.addChildrenToFront(var42);
    com.google.javascript.rhino.ErrorReporter var45 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var45);
    com.google.javascript.rhino.jstype.JSType var47 = null;
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var50 = null;
    var49.setJSDocInfo(var50);
    com.google.javascript.rhino.jstype.FunctionType var52 = var46.createFunctionType(var47, var49);
    boolean var53 = var52.isGlobalThisType();
    boolean var54 = var52.isConstructor();
    var40.putProp(0, (java.lang.Object)var52);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.name("");
    boolean var58 = var57.isGetElem();
    boolean var59 = var57.isNull();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var61 = var57.srcref(var60);
    com.google.javascript.rhino.Node var62 = new com.google.javascript.rhino.Node(0, var24, var33, var40, var61);
    boolean var63 = var40.isObjectLit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.addChildToBack(var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test200"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = var5.useSourceInfoFromForTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    boolean var15 = var14.isGetElem();
    boolean var16 = var14.isNull();
    boolean var17 = var14.isDebugger();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.or(var12, var14);
    boolean var19 = var18.isFor();
    com.google.javascript.rhino.InputId var20 = var18.getInputId();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var23 = null;
    var22.setJSDocInfo(var23);
    boolean var25 = var22.isAssignAdd();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var28 = null;
    var27.setJSDocInfo(var28);
    boolean var30 = var27.isAssignAdd();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.throwNode(var27);
    com.google.javascript.rhino.Node var32 = var22.srcrefTree(var31);
    java.lang.Iterable var33 = var22.children();
    boolean var34 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var22);
    boolean var36 = var22.getBooleanProp(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.tryFinally(var18, var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test201() {}
//   public void test201() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test201"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.var(var0);
// 
//   }

  public void test202() {}
//   public void test202() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test202"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     var2.optimize();
// 
//   }

  public void test203() {}
//   public void test203() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test203"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var9 = null;
//     var8.setJSDocInfo(var9);
//     boolean var11 = var8.isAssignAdd();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
//     com.google.javascript.rhino.jstype.FunctionBuilder var13 = var6.withSourceNode(var8);
//     com.google.javascript.rhino.jstype.FunctionBuilder var14 = var6.forConstructor();
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     com.google.javascript.rhino.jstype.FunctionType var22 = var16.createFunctionType(var17, var19);
//     com.google.javascript.rhino.jstype.JSType var24 = null;
//     var16.unregisterPropertyOnType("hi!", var24);
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
//     boolean var29 = var28.isGetElem();
//     boolean var30 = var28.isNull();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var32 = var28.srcref(var31);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
//     boolean var35 = var34.isGetElem();
//     boolean var36 = var34.isNull();
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var38 = var34.srcref(var37);
//     com.google.javascript.rhino.Node var39 = var32.useSourceInfoFromForTree(var38);
//     com.google.javascript.rhino.ErrorReporter var40 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var45 = null;
//     var44.setJSDocInfo(var45);
//     com.google.javascript.rhino.jstype.FunctionType var47 = var41.createFunctionType(var42, var44);
//     com.google.javascript.rhino.jstype.ObjectType var48 = var16.createObjectType("goog.abstractMethod", var39, (com.google.javascript.rhino.jstype.ObjectType)var47);
//     com.google.javascript.rhino.jstype.FunctionBuilder var49 = var6.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var47);
//     com.google.javascript.rhino.jstype.FunctionParamBuilder var50 = null;
//     com.google.javascript.rhino.jstype.FunctionBuilder var51 = var49.withParams(var50);
// 
//   }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test204"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node.AncestorIterable var13 = var11.getAncestors();
    boolean var14 = var0.isEquivalentTo(var11);
    var11.setOptionalArg(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.breakNode(var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test205"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)var1);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var4.createFunctionType(var5, var7);
    boolean var11 = var10.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var13 = null;
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var16 = null;
    var15.setJSDocInfo(var16);
    boolean var18 = var15.isNE();
    boolean var19 = var15.isAdd();
    boolean var21 = var15.getBooleanProp(100);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
    boolean var24 = var23.isGetElem();
    boolean var25 = var23.isNull();
    boolean var26 = var23.isDebugger();
    boolean var27 = var23.isArrayLit();
    var15.addChildToBack(var23);
    boolean var29 = var15.hasMoreThanOneChild();
    boolean var30 = var10.defineInferredProperty("", var13, var15);
    boolean var31 = var15.isLocalResultCall();
    boolean var32 = var15.isGetterDef();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var33 = var1.getDirectedSuccNodes((java.lang.Object)var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test206() {}
//   public void test206() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test206"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     java.util.Map var4 = var2.getInputsById();
// 
//   }

  public void test207() {}
//   public void test207() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test207"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSSourceFile var9 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var10 = new com.google.javascript.jscomp.JSSourceFile[] { var9};
//     com.google.javascript.jscomp.JSSourceFile var11 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var12 = new com.google.javascript.jscomp.JSSourceFile[] { var11};
//     com.google.javascript.jscomp.CompilerOptions var13 = null;
//     var6.init(var10, var12, var13);
// 
//   }

  public void test208() {}
//   public void test208() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test208"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var6.unregisterPropertyOnType("hi!", var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.JSDocInfo var17 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var18 = var17.getTypeNodes();
//     boolean var19 = var17.isInterface();
//     var17.addSuppression("");
//     boolean var22 = var17.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var23 = var17.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var24 = var17.getVisibility();
//     java.util.List var25 = var17.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var26 = var6.createFunctionType(var16, var25);
//     com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var25, var27);
//     boolean var29 = var2.acceptConstKeyword();
// 
//   }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test209"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var1 = null;
    java.util.Map var2 = null;
    var0.checkForCallingConventionDefiningCalls(var1, var2);
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var6 = null;
    var5.setJSDocInfo(var6);
    boolean var8 = var5.isAssignAdd();
    boolean var9 = var5.isGetElem();
    boolean var10 = var5.isNumber();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var11 = var0.getDelegateRelationship(var5);
    com.google.javascript.jscomp.NodeTraversal var12 = null;
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordInterface();
    boolean var16 = var14.isPopulated();
    boolean var18 = var14.recordDeprecationReason("");
    com.google.javascript.rhino.JSTypeExpression var19 = null;
    boolean var20 = var14.recordDefineType(var19);
    boolean var21 = var14.recordPreserveTry();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.number(0.0d);
    var14.markTypeNode(var23, 100, 100, (-1), 10, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.CodingConvention.ObjectLiteralCast var30 = var0.getObjectLiteralCast(var12, var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test210() {}
//   public void test210() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test210"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     boolean var8 = var7.isGlobalThisType();
//     com.google.javascript.rhino.jstype.ObjectType var9 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var7);
//     com.google.javascript.rhino.jstype.JSType var10 = var9.collapseUnion();
//     java.lang.String var11 = var10.toDebugHashCodeString();
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var4);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var7);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue(var8 == false);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var9);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertNotNull(var10);
//     
//     // Regression assertion (captures the current behavior of the code)
//     assertTrue("'" + var11 + "' != '" + "function (): {1260910291}"+ "'", var11.equals("function (): {1260910291}"));
// 
//   }

  public void test211() {}
//   public void test211() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test211"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSError[] var9 = var6.getErrors();
//     java.lang.String[] var10 = var6.toSourceArray();
// 
//   }

  public void test212() {}
//   public void test212() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test212"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.ErrorReporter var2 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
//     com.google.javascript.rhino.jstype.JSType var4 = null;
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     com.google.javascript.rhino.jstype.FunctionType var9 = var3.createFunctionType(var4, var6);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var9.getBindReturnType(0);
//     com.google.javascript.rhino.jstype.JSType var16 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var9, "NAME ", "module$hi!", 0, 100);
//     com.google.javascript.rhino.jstype.JSTypeNative var17 = null;
//     com.google.javascript.rhino.jstype.JSType var18 = var1.getNativeType(var17);
// 
//   }

  public void test213() {}
//   public void test213() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test213"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     com.google.javascript.jscomp.JSError[] var4 = var2.getWarnings();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     java.lang.String var6 = var2.toSource(var5);
// 
//   }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test214"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.BooleanLiteralSet var27 = var26.getPossibleToBooleanOutcomes();
    boolean var29 = var26.removeProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var35 = null;
    var34.setJSDocInfo(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var31.createFunctionType(var32, var34);
    boolean var38 = var37.isGlobalThisType();
    boolean var39 = var37.isConstructor();
    boolean var40 = var26.hasEqualCallType(var37);
    boolean var41 = var26.isNumber();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test215"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isInterface();
    var0.addSuppression("");
    boolean var5 = var0.isNoCompile();
    java.lang.String var6 = var0.getFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test216"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    boolean var6 = var5.isAnd();
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var5};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test217"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    boolean var4 = var1.isNull();
    com.google.javascript.rhino.Node var5 = com.google.javascript.jscomp.NodeUtil.newExpr(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test218"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("module$hi!");
    var0.setPropertyAffinity(false);

  }

  public void test219() {}
//   public void test219() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test219"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node.FileLevelJsDocBuilder var2 = var1.getJsDocBuilderForNode();
//     com.google.javascript.rhino.jstype.JSType var3 = null;
//     var1.setJSType(var3);
//     boolean var5 = var1.isBlock();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.ifNode(var0, var1);
// 
//   }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test220"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    boolean var8 = var7.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var9 = var7.toObjectType();
    boolean var10 = var9.isStringObjectType();
    java.lang.String var11 = var9.getDisplayName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test221"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var2.isGetElem();
    boolean var4 = var2.isNull();
    boolean var5 = var2.isNull();
    com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.NodeUtil.newExpr(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var7 = new com.google.javascript.rhino.Node(1, var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test222() {}
//   public void test222() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test222"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     boolean var17 = var14.isAssignAdd();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     boolean var22 = var19.isAssignAdd();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
//     com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
//     var2.addChildrenToFront(var14);
//     java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
//     boolean var29 = var0.isExported("", true);
//     boolean var32 = var0.isExported("module$hi!", true);
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
//     boolean var35 = var34.isGetElem();
//     boolean var36 = var34.isNull();
//     boolean var37 = var34.isNull();
//     com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.NodeUtil.newExpr(var34);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var39 = var0.getClassesDefinedByCall(var34);
// 
//   }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test223"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    boolean var1 = var0.isDirected();
    java.lang.Object var2 = null;
    com.google.javascript.jscomp.graph.GraphNode var3 = var0.getNode(var2);
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.JSDocInfo var5 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var6 = var5.getTypeNodes();
    boolean var7 = var5.isInterface();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    var9.identifyNonNullableName("");
    boolean var13 = var9.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var14 = new com.google.javascript.rhino.jstype.FunctionBuilder(var9);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var17 = null;
    var16.setJSDocInfo(var17);
    boolean var19 = var16.isAssignAdd();
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.throwNode(var16);
    com.google.javascript.rhino.jstype.FunctionBuilder var21 = var14.withSourceNode(var16);
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var24 = null;
    var23.setJSDocInfo(var24);
    boolean var26 = var23.isAssignAdd();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var29 = null;
    var28.setJSDocInfo(var29);
    boolean var31 = var28.isAssignAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.throwNode(var28);
    com.google.javascript.rhino.Node var33 = var23.srcrefTree(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var36 = null;
    var35.setJSDocInfo(var36);
    boolean var38 = var35.isAssignAdd();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var41 = null;
    var40.setJSDocInfo(var41);
    boolean var43 = var40.isAssignAdd();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.throwNode(var40);
    com.google.javascript.rhino.Node var45 = var35.srcrefTree(var44);
    var23.addChildrenToFront(var35);
    boolean var47 = var23.isContinue();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    boolean var50 = var49.isGetElem();
    boolean var51 = var49.isNull();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var53 = var49.srcref(var52);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.name("");
    var53.addChildrenToFront(var55);
    boolean var57 = var23.isEquivalentToTyped(var53);
    com.google.javascript.rhino.jstype.FunctionBuilder var58 = var21.withSourceNode(var53);
    com.google.javascript.rhino.ErrorReporter var59 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var59);
    com.google.javascript.rhino.jstype.JSType var61 = null;
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var64 = null;
    var63.setJSDocInfo(var64);
    com.google.javascript.rhino.jstype.FunctionType var66 = var60.createFunctionType(var61, var63);
    boolean var67 = var66.isGlobalThisType();
    com.google.javascript.rhino.jstype.ObjectType var68 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var66);
    com.google.javascript.rhino.jstype.FunctionBuilder var69 = var21.withTypeOfThis(var68);
    com.google.javascript.rhino.jstype.FunctionBuilder var71 = var69.setIsConstructor(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var72 = var0.getFirstEdge((java.lang.Object)var7, (java.lang.Object)var69);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test224"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var1.recordVersion("");
    boolean var4 = var1.recordDeprecated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test225"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.number((-1.0d));
    com.google.javascript.rhino.Node var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    boolean var7 = var4.isAssignAdd();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var10 = null;
    var9.setJSDocInfo(var10);
    boolean var12 = var9.isAssignAdd();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.throwNode(var9);
    com.google.javascript.rhino.Node var14 = var4.srcrefTree(var13);
    com.google.javascript.rhino.Node.AncestorIterable var15 = var13.getAncestors();
    boolean var16 = var13.hasChildren();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.addChildrenAfter(var2, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test226"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.block();
    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var6 = null;
    var5.setJSDocInfo(var6);
    com.google.javascript.rhino.jstype.FunctionType var8 = var2.createFunctionType(var3, var5);
    boolean var9 = var8.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isNE();
    boolean var17 = var13.isAdd();
    boolean var19 = var13.getBooleanProp(100);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    boolean var22 = var21.isGetElem();
    boolean var23 = var21.isNull();
    boolean var24 = var21.isDebugger();
    boolean var25 = var21.isArrayLit();
    var13.addChildToBack(var21);
    boolean var27 = var13.hasMoreThanOneChild();
    boolean var28 = var8.defineInferredProperty("", var11, var13);
    boolean var29 = var13.isLocalResultCall();
    boolean var30 = var13.isTry();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.eq(var0, var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test227"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    boolean var12 = var11.isLocalResultCall();
    int var13 = var11.getSideEffectFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setDouble(0.0d);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test228() {}
//   public void test228() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test228"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     boolean var17 = var14.isAssignAdd();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     boolean var22 = var19.isAssignAdd();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
//     com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
//     var2.addChildrenToFront(var14);
//     java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
//     boolean var29 = var0.isExported("", true);
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var32 = null;
//     var31.setJSDocInfo(var32);
//     boolean var34 = var31.isAssignAdd();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var36.setJSDocInfo(var37);
//     boolean var39 = var36.isAssignAdd();
//     com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.throwNode(var36);
//     com.google.javascript.rhino.Node var41 = var31.srcrefTree(var40);
//     com.google.javascript.rhino.Node.AncestorIterable var42 = var40.getAncestors();
//     com.google.javascript.rhino.Node var43 = var40.getLastChild();
//     java.util.Map var44 = null;
//     var0.checkForCallingConventionDefiningCalls(var40, var44);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.name("");
//     boolean var48 = var47.isGetElem();
//     boolean var49 = var47.isNull();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var51 = var47.srcref(var50);
//     com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
//     var51.addChildrenToFront(var53);
//     java.lang.String var55 = var0.getSingletonGetterClassName(var53);
// 
//   }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test229"); }


    com.google.javascript.jscomp.PropertyRenamingPolicy[] var0 = com.google.javascript.jscomp.PropertyRenamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test230"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    boolean var6 = var5.isAnd();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.throwNode(var13);
    com.google.javascript.rhino.Node var18 = var8.srcrefTree(var17);
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var21 = null;
    var20.setJSDocInfo(var21);
    boolean var23 = var20.isAssignAdd();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.throwNode(var25);
    com.google.javascript.rhino.Node var30 = var20.srcrefTree(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    boolean var35 = var32.isAssignAdd();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.throwNode(var37);
    com.google.javascript.rhino.Node var42 = var32.srcrefTree(var41);
    var20.addChildrenToFront(var32);
    boolean var44 = var18.hasChild(var20);
    boolean var45 = var20.isBlock();
    boolean var46 = var5.hasChild(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var47 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(var20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test231() {}
//   public void test231() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test231"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     boolean var4 = var2.hasErrors();
// 
//   }

  public void test232() {}
//   public void test232() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test232"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     java.util.Map var5 = var2.getInputsById();
// 
//   }

  public void test233() {}
//   public void test233() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test233"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
//     boolean var12 = var11.isLocalResultCall();
//     int var13 = var11.getSideEffectFlags();
//     com.google.javascript.rhino.Node var14 = null;
//     java.lang.String var15 = var11.checkTreeEquals(var14);
// 
//   }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test234"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    boolean var37 = var11.hasChild(var13);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
    boolean var40 = var39.isGetElem();
    boolean var41 = var39.isNull();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var43 = var39.srcref(var42);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    boolean var46 = var45.isGetElem();
    boolean var47 = var45.isNull();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var49 = var45.srcref(var48);
    com.google.javascript.rhino.Node var50 = var43.useSourceInfoFromForTree(var49);
    boolean var51 = var43.hasMoreThanOneChild();
    var11.addChildrenToBack(var43);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    boolean var55 = var54.isGetElem();
    boolean var56 = var54.isNull();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var58 = var54.srcref(var57);
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.throwNode(var58);
    com.google.javascript.rhino.Node[] var60 = new com.google.javascript.rhino.Node[] { var59};
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.block(var60);
    java.lang.Iterable var62 = var61.siblings();
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var65 = null;
    var64.setJSDocInfo(var65);
    boolean var67 = var64.isNE();
    boolean var68 = var64.isFor();
    var61.addChildrenToBack(var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.var(var11, var64);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test235"); }


    com.google.javascript.jscomp.parsing.Config var1 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test236"); }


    java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.escapeString("goog.exportProperty");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "goog.exportProperty"+ "'", var1.equals("goog.exportProperty"));

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test237"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    boolean var37 = var11.hasChild(var13);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
    boolean var40 = var39.isGetElem();
    boolean var41 = var39.isNull();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var43 = var39.srcref(var42);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    boolean var46 = var45.isGetElem();
    boolean var47 = var45.isNull();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var49 = var45.srcref(var48);
    com.google.javascript.rhino.Node var50 = var43.useSourceInfoFromForTree(var49);
    boolean var51 = var43.hasMoreThanOneChild();
    var11.addChildrenToBack(var43);
    boolean var53 = var43.isUnscopedQualifiedName();
    boolean var54 = var43.isOptionalArg();
    java.lang.Iterable var55 = var43.siblings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test238() {}
//   public void test238() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test238"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.jscomp.SourceFile var5 = null;
//     var3.setSourceFile(var5);
// 
//   }

  public void test239() {}
//   public void test239() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test239"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     java.lang.String var5 = var3.getName();
// 
//   }

  public void test240() {}
//   public void test240() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test240"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var14 = null;
//     var13.setJSDocInfo(var14);
//     boolean var16 = var13.isAssignAdd();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     boolean var21 = var18.isAssignAdd();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
//     com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
//     var1.addChildrenToFront(var13);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var27 = null;
//     var26.setJSDocInfo(var27);
//     boolean var29 = var26.isAssignAdd();
//     com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var32 = null;
//     var31.setJSDocInfo(var32);
//     boolean var34 = var31.isAssignAdd();
//     com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.throwNode(var31);
//     com.google.javascript.rhino.Node var36 = var26.srcrefTree(var35);
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var39 = null;
//     var38.setJSDocInfo(var39);
//     boolean var41 = var38.isAssignAdd();
//     com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var44 = null;
//     var43.setJSDocInfo(var44);
//     boolean var46 = var43.isAssignAdd();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.throwNode(var43);
//     com.google.javascript.rhino.Node var48 = var38.srcrefTree(var47);
//     var26.addChildrenToFront(var38);
//     boolean var50 = var13.isEquivalentTo(var26);
//     boolean var51 = var26.isLocalResultCall();
//     com.google.javascript.rhino.Node var52 = null;
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var55 = null;
//     var54.setJSDocInfo(var55);
//     boolean var57 = var54.isAssignAdd();
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var60 = null;
//     var59.setJSDocInfo(var60);
//     boolean var62 = var59.isAssignAdd();
//     com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.throwNode(var59);
//     com.google.javascript.rhino.Node var64 = var54.srcrefTree(var63);
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var67 = null;
//     var66.setJSDocInfo(var67);
//     boolean var69 = var66.isAssignAdd();
//     com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var72 = null;
//     var71.setJSDocInfo(var72);
//     boolean var74 = var71.isAssignAdd();
//     com.google.javascript.rhino.Node var75 = com.google.javascript.rhino.IR.throwNode(var71);
//     com.google.javascript.rhino.Node var76 = var66.srcrefTree(var75);
//     com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var79 = null;
//     var78.setJSDocInfo(var79);
//     boolean var81 = var78.isAssignAdd();
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var84 = null;
//     var83.setJSDocInfo(var84);
//     boolean var86 = var83.isAssignAdd();
//     com.google.javascript.rhino.Node var87 = com.google.javascript.rhino.IR.throwNode(var83);
//     com.google.javascript.rhino.Node var88 = var78.srcrefTree(var87);
//     var66.addChildrenToFront(var78);
//     boolean var90 = var64.hasChild(var66);
//     boolean var91 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var66);
//     boolean var92 = var66.isNull();
//     var66.setVarArgs(true);
//     var26.replaceChild(var52, var66);
// 
//   }

  public void test241() {}
//   public void test241() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test241"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     var6.rebuildInputsFromModules();
// 
//   }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test242"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.Object var1 = null;
    com.google.javascript.jscomp.graph.GraphNode var2 = var0.getNode(var1);
    java.lang.String var3 = var0.getName();
    java.util.Collection var4 = var0.getNodes();
    com.google.javascript.rhino.ErrorReporter var5 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
    com.google.javascript.rhino.jstype.JSType var7 = null;
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var10 = null;
    var9.setJSDocInfo(var10);
    com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    var6.unregisterPropertyOnType("hi!", var14);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    boolean var19 = var18.isGetElem();
    boolean var20 = var18.isNull();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var22 = var18.srcref(var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    boolean var25 = var24.isGetElem();
    boolean var26 = var24.isNull();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var28 = var24.srcref(var27);
    com.google.javascript.rhino.Node var29 = var22.useSourceInfoFromForTree(var28);
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var35 = null;
    var34.setJSDocInfo(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var31.createFunctionType(var32, var34);
    com.google.javascript.rhino.jstype.ObjectType var38 = var6.createObjectType("goog.abstractMethod", var29, (com.google.javascript.rhino.jstype.ObjectType)var37);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    boolean var44 = var41.isAssignAdd();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var47 = null;
    var46.setJSDocInfo(var47);
    boolean var49 = var46.isAssignAdd();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.throwNode(var46);
    com.google.javascript.rhino.Node var51 = var41.srcrefTree(var50);
    com.google.javascript.rhino.ErrorReporter var52 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
    com.google.javascript.rhino.jstype.JSType var54 = null;
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var57 = null;
    var56.setJSDocInfo(var57);
    com.google.javascript.rhino.jstype.FunctionType var59 = var53.createFunctionType(var54, var56);
    com.google.javascript.rhino.jstype.ObjectType var60 = var59.getParentScope();
    com.google.javascript.rhino.jstype.EnumType var61 = var6.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var41, (com.google.javascript.rhino.jstype.JSType)var60);
    com.google.javascript.rhino.jstype.EnumType var62 = var61.toMaybeEnumType();
    com.google.javascript.rhino.jstype.EnumElementType var63 = var61.getElementsType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var64 = var0.getOutEdges((java.lang.Object)var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "LinkedGraph"+ "'", var3.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test243() {}
//   public void test243() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test243"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var1 = null;
//     com.google.javascript.jscomp.CheckLevel var2 = null;
//     var0.setWarningLevel(var1, var2);
//     var0.enableRuntimeTypeCheck("hi!");
//     var0.setClosurePass(true);
//     var0.setProcessObjectPropertyString(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var10 = null;
//     var0.setRemoveUnusedVariables(var10);
// 
//   }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test244"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var0.hasNode((java.lang.Object)"");
    com.google.javascript.jscomp.graph.SubGraph var4 = var0.newSubGraph();
    var0.clearNodeAnnotations();
    var0.clearNodeAnnotations();
    boolean var7 = var0.isDirected();
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    com.google.javascript.rhino.jstype.ObjectType var16 = var15.getParentScope();
    com.google.javascript.rhino.jstype.JSType var17 = var15.autoboxesTo();
    com.google.javascript.rhino.jstype.FunctionType var19 = var15.getBindReturnType(3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var20 = var0.getOutEdges((java.lang.Object)var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test245() {}
//   public void test245() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test245"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     boolean var1 = var0.isDirected();
//     java.lang.Object var2 = null;
//     com.google.javascript.jscomp.graph.GraphNode var3 = var0.getNode(var2);
//     var0.popEdgeAnnotations();
// 
//   }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test246"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var17 = var13.srcref(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    boolean var20 = var19.isGetElem();
    boolean var21 = var19.isNull();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var23 = var19.srcref(var22);
    com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var26.createFunctionType(var27, var29);
    com.google.javascript.rhino.jstype.ObjectType var33 = var1.createObjectType("goog.abstractMethod", var24, (com.google.javascript.rhino.jstype.ObjectType)var32);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    boolean var44 = var41.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
    com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var52 = null;
    var51.setJSDocInfo(var52);
    com.google.javascript.rhino.jstype.FunctionType var54 = var48.createFunctionType(var49, var51);
    com.google.javascript.rhino.jstype.ObjectType var55 = var54.getParentScope();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var36, (com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.jstype.EnumType var57 = var56.toMaybeEnumType();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.name("");
    boolean var61 = var60.isGetElem();
    boolean var62 = var60.isNull();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var64 = var60.srcref(var63);
    boolean var65 = var57.defineElement("module$hi!", var63);
    boolean var66 = var63.isCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var68 = var63.getExistingIntProp((-1));
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test247"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    var1.clearNamedTypes();
    com.google.javascript.rhino.jstype.JSType var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.overwriteDeclaredType("", var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test248"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    java.util.List var1 = null;
    var0.setReplaceStringsFunctionDescriptions(var1);
    var0.setInlineConstantVars(false);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test249"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var26);
    com.google.javascript.rhino.jstype.FunctionType var29 = var26.getBindReturnType(0);
    boolean var30 = var29.canBeCalled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test250"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    boolean var1 = var0.isDirected();
    java.lang.Object var2 = null;
    com.google.javascript.jscomp.graph.GraphNode var3 = var0.getNode(var2);
    var0.clearEdgeAnnotations();
    com.google.javascript.jscomp.graph.SubGraph var5 = var0.newSubGraph();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var11 = null;
    var10.setJSDocInfo(var11);
    boolean var13 = var10.isAssignAdd();
    boolean var14 = var10.isGetElem();
    boolean var15 = var10.isNumber();
    com.google.javascript.jscomp.CheckLevel var16 = null;
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
    java.lang.String[] var21 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var10, var16, var19, var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var25 = null;
    var24.setJSDocInfo(var25);
    boolean var27 = var24.isNE();
    boolean var28 = var24.isAdd();
    boolean var29 = var24.isLabel();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.throwNode(var36);
    com.google.javascript.rhino.Node var41 = var31.srcrefTree(var40);
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var44 = null;
    var43.setJSDocInfo(var44);
    boolean var46 = var43.isAssignAdd();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var49 = null;
    var48.setJSDocInfo(var49);
    boolean var51 = var48.isAssignAdd();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.throwNode(var48);
    com.google.javascript.rhino.Node var53 = var43.srcrefTree(var52);
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var56 = null;
    var55.setJSDocInfo(var56);
    boolean var58 = var55.isAssignAdd();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var61 = null;
    var60.setJSDocInfo(var61);
    boolean var63 = var60.isAssignAdd();
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.throwNode(var60);
    com.google.javascript.rhino.Node var65 = var55.srcrefTree(var64);
    var43.addChildrenToFront(var55);
    boolean var67 = var41.hasChild(var43);
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.rhino.Node var70 = new com.google.javascript.rhino.Node(100, var10, var24, var41, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.disconnect((java.lang.Object)(-1.0d), (java.lang.Object)100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test251"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    boolean var26 = var2.isContinue();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    boolean var29 = var28.isGetElem();
    boolean var30 = var28.isNull();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var32 = var28.srcref(var31);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    var32.addChildrenToFront(var34);
    boolean var36 = var2.isEquivalentToTyped(var32);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    boolean var41 = var38.isAssignAdd();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var44 = null;
    var43.setJSDocInfo(var44);
    boolean var46 = var43.isAssignAdd();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.throwNode(var43);
    com.google.javascript.rhino.Node var48 = var38.srcrefTree(var47);
    java.lang.Iterable var49 = var38.children();
    boolean var50 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var38);
    var32.addChildToFront(var38);
    java.util.Collection var52 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var38);
    com.google.javascript.jscomp.ClosureCodingConvention var53 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.name("");
    boolean var56 = var55.isGetElem();
    boolean var57 = var55.isNull();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var59 = var55.srcref(var58);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.throwNode(var59);
    java.lang.String var61 = var53.getSingletonGetterClassName(var60);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.name("");
    boolean var66 = var65.isGetElem();
    boolean var67 = var65.isNull();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var69 = var65.srcref(var68);
    com.google.javascript.rhino.Node var72 = new com.google.javascript.rhino.Node(100, var63, var68, 0, 0);
    boolean var73 = var72.isNoSideEffectsCall();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var76 = new com.google.javascript.rhino.Node(10, var38, var60, var72, (-1), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test252() {}
//   public void test252() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test252"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     boolean var6 = var2.isGetElem();
//     boolean var7 = var2.isNumber();
//     com.google.javascript.jscomp.CheckLevel var8 = null;
//     com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var13 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make("hi!", var2, var8, var11, var13);
//     java.lang.String var15 = var14.toString();
//     com.google.javascript.jscomp.CheckLevel var16 = null;
//     com.google.javascript.jscomp.MessageFormatter var17 = null;
//     java.lang.String var18 = var14.format(var16, var17);
// 
//   }

  public void test253() {}
//   public void test253() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test253"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     java.util.Map var2 = null;
//     var0.checkForCallingConventionDefiningCalls(var1, var2);
//     boolean var5 = var0.isSuperClassReference("LinkedGraph");
//     boolean var7 = var0.isConstant("hi!. hi! at hi! line (unknown line) : (unknown column)");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     boolean var10 = var9.isGetElem();
//     boolean var11 = var9.isNull();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var13 = var9.srcref(var12);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
//     boolean var16 = var15.isGetElem();
//     boolean var17 = var15.isNull();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var19 = var15.srcref(var18);
//     com.google.javascript.rhino.Node var20 = var13.useSourceInfoFromForTree(var19);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var21 = var0.getClassesDefinedByCall(var13);
// 
//   }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test254"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    boolean var1 = var0.isDirected();
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    com.google.javascript.rhino.jstype.FunctionType var9 = var3.createFunctionType(var4, var6);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    var3.unregisterPropertyOnType("hi!", var11);
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var14.createFunctionType(var15, var17);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var14.unregisterPropertyOnType("hi!", var22);
    java.lang.Iterable var25 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var26 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var26);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    com.google.javascript.rhino.jstype.FunctionType var33 = var27.createFunctionType(var28, var30);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    var27.unregisterPropertyOnType("hi!", var35);
    java.lang.Iterable var38 = var27.getTypesWithProperty("hi!");
    java.lang.Iterable var40 = var27.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var46 = null;
    var45.setJSDocInfo(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var42.createFunctionType(var43, var45);
    com.google.javascript.rhino.jstype.ObjectType var49 = var48.getParentScope();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var55 = null;
    var54.setJSDocInfo(var55);
    com.google.javascript.rhino.jstype.FunctionType var57 = var51.createFunctionType(var52, var54);
    boolean var58 = var57.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var59 = var57.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var60 = var27.createFunctionTypeWithNewThisType(var48, (com.google.javascript.rhino.jstype.ObjectType)var57);
    java.lang.String var61 = var57.getTemplateTypeName();
    var57.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var63 = var57.toMaybeFunctionType();
    var14.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var57);
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var70 = null;
    var69.setJSDocInfo(var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var66.createFunctionType(var67, var69);
    com.google.javascript.rhino.ErrorReporter var73 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var73);
    com.google.javascript.rhino.jstype.JSType var75 = null;
    com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var78 = null;
    var77.setJSDocInfo(var78);
    com.google.javascript.rhino.jstype.FunctionType var80 = var74.createFunctionType(var75, var77);
    boolean var81 = var80.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var82 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var83 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var82);
    com.google.javascript.rhino.jstype.JSType var84 = null;
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var87 = null;
    var86.setJSDocInfo(var87);
    com.google.javascript.rhino.jstype.FunctionType var89 = var83.createFunctionType(var84, var86);
    com.google.javascript.rhino.jstype.JSType[] var90 = new com.google.javascript.rhino.jstype.JSType[] { var84};
    com.google.javascript.rhino.jstype.FunctionType var91 = var66.createConstructorType((com.google.javascript.rhino.jstype.JSType)var80, var90);
    com.google.javascript.rhino.jstype.FunctionType var92 = var3.createFunctionType((com.google.javascript.rhino.jstype.JSType)var57, var90);
    com.google.javascript.jscomp.SourceFile var94 = com.google.javascript.jscomp.SourceFile.fromFile("module$hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var95 = var0.getDirectedGraphEdges((java.lang.Object)var57, (java.lang.Object)"module$hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test255() {}
//   public void test255() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test255"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var1);
//     java.lang.String var3 = var2.getOriginalPath();
//     var2.setOriginalPath("goog.exportProperty");
//     com.google.javascript.jscomp.JsAst var6 = new com.google.javascript.jscomp.JsAst(var2);
//     java.util.logging.Logger var7 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var7);
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var8);
//     com.google.javascript.jscomp.JSError[] var10 = var9.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var11 = var9.getState();
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var17 = null;
//     var16.setJSDocInfo(var17);
//     com.google.javascript.rhino.jstype.FunctionType var19 = var13.createFunctionType(var14, var16);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     var13.unregisterPropertyOnType("hi!", var21);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.JSDocInfo var24 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var25 = var24.getTypeNodes();
//     boolean var26 = var24.isInterface();
//     var24.addSuppression("");
//     boolean var29 = var24.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var30 = var24.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var31 = var24.getVisibility();
//     java.util.List var32 = var24.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var33 = var13.createFunctionType(var23, var32);
//     com.google.javascript.jscomp.NodeTraversal.Callback var34 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var9, var32, var34);
//     com.google.javascript.jscomp.Scope var36 = var9.getTopScope();
//     com.google.javascript.rhino.Node var37 = var9.getRoot();
//     com.google.javascript.rhino.Node var38 = var6.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var9);
// 
//   }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test256"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var8 = var0.getTracerMode();
    boolean var9 = var0.assumeStrictThis();
    var0.setDefineToStringLiteral("module$hi!", "");
    com.google.javascript.jscomp.MessageBundle var13 = null;
    var0.setMessageBundle(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test257"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var2.isGetElem();
    boolean var4 = var2.isNull();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var6 = var2.srcref(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var7};
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var17 = null;
    var16.setJSDocInfo(var17);
    com.google.javascript.rhino.jstype.FunctionType var19 = var13.createFunctionType(var14, var16);
    com.google.javascript.rhino.jstype.FunctionType var21 = var19.getBindReturnType(0);
    com.google.javascript.rhino.jstype.JSType var26 = var11.getType((com.google.javascript.rhino.jstype.StaticScope)var19, "NAME ", "module$hi!", 0, 100);
    com.google.javascript.rhino.jstype.JSType var28 = null;
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isNE();
    boolean var34 = var30.isAdd();
    boolean var36 = var30.getBooleanProp(100);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    boolean var39 = var38.isGetElem();
    boolean var40 = var38.isNull();
    boolean var41 = var38.isDebugger();
    boolean var42 = var38.isArrayLit();
    var30.addChildToBack(var38);
    com.google.javascript.jscomp.ClosureCodingConvention var44 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var47 = null;
    var46.setJSDocInfo(var47);
    boolean var49 = var46.isAssignAdd();
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var52 = null;
    var51.setJSDocInfo(var52);
    boolean var54 = var51.isAssignAdd();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.throwNode(var51);
    com.google.javascript.rhino.Node var56 = var46.srcrefTree(var55);
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var59 = null;
    var58.setJSDocInfo(var59);
    boolean var61 = var58.isAssignAdd();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var64 = null;
    var63.setJSDocInfo(var64);
    boolean var66 = var63.isAssignAdd();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.throwNode(var63);
    com.google.javascript.rhino.Node var68 = var58.srcrefTree(var67);
    var46.addChildrenToFront(var58);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var70 = var44.getClassesDefinedByCall(var46);
    com.google.javascript.rhino.Node[] var71 = new com.google.javascript.rhino.Node[] { var46};
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.newNode(var30, var71);
    boolean var73 = var19.defineDeclaredProperty("LinkedGraph", var28, var30);
    boolean var74 = var30.isDefaultCase();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var75 = new com.google.javascript.rhino.Node(0, var9, var30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test258() {}
//   public void test258() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test258"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var14 = null;
//     var13.setJSDocInfo(var14);
//     boolean var16 = var13.isAssignAdd();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     boolean var21 = var18.isAssignAdd();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
//     com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var26 = null;
//     var25.setJSDocInfo(var26);
//     boolean var28 = var25.isAssignAdd();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var31 = null;
//     var30.setJSDocInfo(var31);
//     boolean var33 = var30.isAssignAdd();
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
//     com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
//     var13.addChildrenToFront(var25);
//     boolean var37 = var11.hasChild(var13);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
//     boolean var40 = var39.isGetElem();
//     boolean var41 = var39.isNull();
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var43 = var39.srcref(var42);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
//     boolean var46 = var45.isGetElem();
//     boolean var47 = var45.isNull();
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var49 = var45.srcref(var48);
//     com.google.javascript.rhino.Node var50 = var43.useSourceInfoFromForTree(var49);
//     boolean var51 = var43.hasMoreThanOneChild();
//     var11.addChildrenToBack(var43);
//     boolean var53 = var43.isUnscopedQualifiedName();
//     com.google.javascript.rhino.Node var54 = null;
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.ifNode(var43, var54);
// 
//   }

  public void test259() {}
//   public void test259() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test259"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticGroup var0 = null;
//     com.google.javascript.jscomp.CheckLevel var1 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var2 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var0, var1);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var6 = null;
//     var5.setJSDocInfo(var6);
//     boolean var8 = var5.isAssignAdd();
//     boolean var9 = var5.isGetElem();
//     boolean var10 = var5.isNumber();
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     com.google.javascript.jscomp.DiagnosticType var14 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var16 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var17 = com.google.javascript.jscomp.JSError.make("hi!", var5, var11, var14, var16);
//     java.lang.String var18 = var17.toString();
//     com.google.javascript.jscomp.CheckLevel var19 = var2.level(var17);
// 
//   }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test260"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
    com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
    boolean var6 = var5.isLabelName();
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var5};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var4, var7);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test261"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    boolean var8 = var7.isGlobalThisType();
    boolean var9 = var7.isConstructor();
    com.google.javascript.rhino.ErrorReporter var10 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    com.google.javascript.rhino.jstype.FunctionType var17 = var11.createFunctionType(var12, var14);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var23 = null;
    var22.setJSDocInfo(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var19.createFunctionType(var20, var22);
    boolean var26 = var25.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    com.google.javascript.rhino.jstype.FunctionType var34 = var28.createFunctionType(var29, var31);
    com.google.javascript.rhino.jstype.JSType[] var35 = new com.google.javascript.rhino.jstype.JSType[] { var29};
    com.google.javascript.rhino.jstype.FunctionType var36 = var11.createConstructorType((com.google.javascript.rhino.jstype.JSType)var25, var35);
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var38.createFunctionType(var39, var41);
    com.google.javascript.rhino.jstype.JSType var46 = null;
    var38.unregisterPropertyOnType("hi!", var46);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.JSDocInfo var49 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var50 = var49.getTypeNodes();
    boolean var51 = var49.isInterface();
    var49.addSuppression("");
    boolean var54 = var49.isNoCompile();
    com.google.javascript.rhino.JSTypeExpression var55 = var49.getTypedefType();
    com.google.javascript.rhino.JSDocInfo.Visibility var56 = var49.getVisibility();
    java.util.List var57 = var49.getThrownTypes();
    com.google.javascript.rhino.jstype.FunctionType var58 = var38.createFunctionType(var48, var57);
    var36.setImplementedInterfaces(var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setExtendedInterfaces(var57);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test262() {}
//   public void test262() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test262"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var4 = com.google.javascript.jscomp.DiagnosticGroup.forType(var3);
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     var0.setWarningLevel(var4, var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     var0.setBrokenClosureRequiresLevel(var7);
//     com.google.javascript.jscomp.CompilerOptions.Reach var9 = null;
//     var0.setInlineVariables(var9);
// 
//   }

  public void test263() {}
//   public void test263() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test263"); }
// 
// 
//     java.io.InputStream var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromInputStream("hi!. hi! at hi! line (unknown line) : (unknown column)", var1);
// 
//   }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test264"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    boolean var6 = var2.isGetElem();
    boolean var7 = var2.isNumber();
    com.google.javascript.jscomp.CheckLevel var8 = null;
    com.google.javascript.jscomp.DiagnosticType var11 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
    java.lang.String[] var13 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var14 = com.google.javascript.jscomp.JSError.make("hi!", var2, var8, var11, var13);
    java.lang.String var15 = var14.toString();
    java.lang.String var16 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!. hi! at hi! line (unknown line) : (unknown column)"+ "'", var15.equals("hi!. hi! at hi! line (unknown line) : (unknown column)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!. hi! at hi! line (unknown line) : (unknown column)"+ "'", var16.equals("hi!. hi! at hi! line (unknown line) : (unknown column)"));

  }

  public void test265() {}
//   public void test265() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test265"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var1 = null;
//     com.google.javascript.jscomp.CheckLevel var2 = null;
//     var0.setWarningLevel(var1, var2);
//     var0.setRecordFunctionInformation(true);
//     com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler var6 = var0.getAliasTransformationHandler();
//     com.google.javascript.jscomp.CompilerOptions.Reach var7 = null;
//     var0.setInlineFunctions(var7);
// 
//   }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test266"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var5);
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var6};
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var12 = null;
    var11.setJSDocInfo(var12);
    boolean var14 = var11.isNE();
    boolean var15 = var11.isFor();
    var8.addChildrenToBack(var11);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var24 = null;
    var23.setJSDocInfo(var24);
    boolean var26 = var23.isAssignAdd();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.throwNode(var23);
    com.google.javascript.rhino.Node var28 = var18.srcrefTree(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var36 = null;
    var35.setJSDocInfo(var36);
    boolean var38 = var35.isAssignAdd();
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.throwNode(var35);
    com.google.javascript.rhino.Node var40 = var30.srcrefTree(var39);
    var18.addChildrenToFront(var30);
    boolean var42 = var18.isContinue();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    boolean var45 = var44.isGetElem();
    boolean var46 = var44.isNull();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var48 = var44.srcref(var47);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
    var48.addChildrenToFront(var50);
    boolean var52 = var18.isEquivalentToTyped(var48);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var55 = null;
    var54.setJSDocInfo(var55);
    boolean var57 = var54.isAssignAdd();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var60 = null;
    var59.setJSDocInfo(var60);
    boolean var62 = var59.isAssignAdd();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.throwNode(var59);
    com.google.javascript.rhino.Node var64 = var54.srcrefTree(var63);
    java.lang.Iterable var65 = var54.children();
    boolean var66 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var54);
    var48.addChildToFront(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.and(var11, var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test267() {}
//   public void test267() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test267"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     com.google.javascript.jscomp.JSSourceFile var4 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var5 = new com.google.javascript.jscomp.JSSourceFile[] { var4};
//     com.google.javascript.jscomp.JSModule var7 = new com.google.javascript.jscomp.JSModule("TRUE");
//     com.google.javascript.jscomp.JSModule[] var8 = new com.google.javascript.jscomp.JSModule[] { var7};
//     com.google.javascript.jscomp.CompilerOptions var9 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var10 = null;
//     com.google.javascript.jscomp.CheckLevel var11 = null;
//     var9.setWarningLevel(var10, var11);
//     var9.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     var9.setCheckUnreachableCode(var15);
//     var9.setCollapseProperties(false);
//     com.google.javascript.rhino.JSDocInfo var19 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var20 = var19.getTypeNodes();
//     boolean var21 = var19.isInterface();
//     var19.addSuppression("");
//     boolean var24 = var19.isNoCompile();
//     java.util.Set var25 = var19.getParameterNames();
//     var9.setStripTypePrefixes(var25);
//     boolean var27 = var9.isExternExportsEnabled();
//     var9.setCheckControlStructures(true);
//     var9.setSmartNameRemoval(false);
//     var2.init(var5, var8, var9);
// 
//   }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test268"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.ErrorReporter var27 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var27);
    com.google.javascript.rhino.jstype.JSType var29 = null;
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    com.google.javascript.rhino.jstype.FunctionType var34 = var28.createFunctionType(var29, var31);
    com.google.javascript.rhino.jstype.ObjectType var35 = var34.getParentScope();
    boolean var36 = var35.isOrdinaryFunction();
    boolean var37 = var15.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var35);
    boolean var38 = var15.isNoResolvedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test269"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isInterface();
    var0.addSuppression("");
    boolean var5 = var0.isNoCompile();
    java.util.Set var6 = var0.getParameterNames();
    boolean var7 = var0.isExterns();
    boolean var8 = var0.shouldPreserveTry();
    int var9 = var0.getParameterCount();
    boolean var10 = var0.isDeprecated();
    java.util.List var11 = var0.getThrownTypes();
    boolean var12 = var0.hasThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test270() {}
//   public void test270() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test270"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     com.google.javascript.jscomp.Compiler.IntermediateState var10 = var6.getState();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = var6.getTypeRegistry();
// 
//   }

  public void test271() {}
//   public void test271() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test271"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     var2.rebuildInputsFromModules();
// 
//   }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test272"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = var5.useSourceInfoFromForTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    boolean var15 = var14.isGetElem();
    boolean var16 = var14.isNull();
    boolean var17 = var14.isDebugger();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.or(var12, var14);
    boolean var19 = var18.isFor();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    boolean var24 = var21.isAssignAdd();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    boolean var29 = var26.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.throwNode(var26);
    com.google.javascript.rhino.Node var31 = var21.srcrefTree(var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var34 = null;
    var33.setJSDocInfo(var34);
    boolean var36 = var33.isAssignAdd();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    boolean var41 = var38.isAssignAdd();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.throwNode(var38);
    com.google.javascript.rhino.Node var43 = var33.srcrefTree(var42);
    var21.addChildrenToFront(var33);
    boolean var45 = var21.isContinue();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.name("");
    boolean var48 = var47.isGetElem();
    boolean var49 = var47.isNull();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var51 = var47.srcref(var50);
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
    var51.addChildrenToFront(var53);
    boolean var55 = var21.isEquivalentToTyped(var51);
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var58 = null;
    var57.setJSDocInfo(var58);
    boolean var60 = var57.isAssignAdd();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var63 = null;
    var62.setJSDocInfo(var63);
    boolean var65 = var62.isAssignAdd();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.throwNode(var62);
    com.google.javascript.rhino.Node var67 = var57.srcrefTree(var66);
    java.lang.Iterable var68 = var57.children();
    boolean var69 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var57);
    var51.addChildToFront(var57);
    java.util.Collection var71 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var57);
    boolean var72 = var57.isInc();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.tryFinally(var18, var57);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test273() {}
//   public void test273() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test273"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     com.google.javascript.jscomp.Compiler.IntermediateState var10 = var6.getState();
//     com.google.javascript.jscomp.JSError[] var11 = var6.getMessages();
//     com.google.javascript.jscomp.SourceFile.Generator var13 = null;
//     com.google.javascript.jscomp.SourceFile var14 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var13);
//     java.lang.String var15 = var14.getOriginalPath();
//     var14.setOriginalPath("goog.exportProperty");
//     com.google.javascript.jscomp.JsAst var18 = new com.google.javascript.jscomp.JsAst(var14);
//     var6.replaceScript(var18);
// 
//   }

  public void test274() {}
//   public void test274() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test274"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     com.google.javascript.jscomp.SymbolTable var4 = var2.buildKnownSymbolTable();
// 
//   }

  public void test275() {}
//   public void test275() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test275"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     var0.setSourceMapOutputPath("module$hi!");
//     var0.setGeneratePseudoNames(true);
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     var0.setBrokenClosureRequiresLevel(var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     var0.setCheckGlobalThisLevel(var7);
//     com.google.javascript.jscomp.CompilerOptions.Reach var9 = null;
//     var0.setRemoveUnusedVariable(var9);
// 
//   }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test276"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("LinkedGraph");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test277"); }


    com.google.javascript.jscomp.AnonymousFunctionNamingPolicy[] var0 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test278"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var1 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var2 = var0.createDirectedGraphNode((java.lang.Object)var1);
    java.lang.String var3 = var0.getName();
    com.google.javascript.jscomp.ClosureCodingConvention var5 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isNE();
    boolean var11 = var7.isAdd();
    boolean var13 = var7.getBooleanProp(100);
    boolean var14 = var7.isNull();
    boolean var15 = var7.isNull();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.voidNode(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.connectIfNotFound((java.lang.Object)(byte)(-1), (java.lang.Object)var5, (java.lang.Object)var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "LinkedGraph"+ "'", var3.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test279() {}
//   public void test279() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test279"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
//     com.google.javascript.jscomp.JsAst var13 = new com.google.javascript.jscomp.JsAst(var12);
//     var6.replaceScript(var13);
// 
//   }

  public void test280() {}
//   public void test280() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test280"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     var1.setLastGeneration(true);
//     java.lang.Iterable var11 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod");
//     com.google.javascript.rhino.ErrorReporter var12 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var17 = null;
//     var16.setJSDocInfo(var17);
//     com.google.javascript.rhino.jstype.FunctionType var19 = var13.createFunctionType(var14, var16);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     var13.unregisterPropertyOnType("hi!", var21);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.JSDocInfo var24 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var25 = var24.getTypeNodes();
//     boolean var26 = var24.isInterface();
//     var24.addSuppression("");
//     boolean var29 = var24.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var30 = var24.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var31 = var24.getVisibility();
//     java.util.List var32 = var24.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var33 = var13.createFunctionType(var23, var32);
//     com.google.javascript.rhino.Node var34 = var1.createParametersWithVarArgs(var32);
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var40 = null;
//     var39.setJSDocInfo(var40);
//     com.google.javascript.rhino.jstype.FunctionType var42 = var36.createFunctionType(var37, var39);
//     com.google.javascript.rhino.ErrorReporter var43 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var48 = null;
//     var47.setJSDocInfo(var48);
//     com.google.javascript.rhino.jstype.FunctionType var50 = var44.createFunctionType(var45, var47);
//     boolean var51 = var50.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var52 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var52);
//     com.google.javascript.rhino.jstype.JSType var54 = null;
//     com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var57 = null;
//     var56.setJSDocInfo(var57);
//     com.google.javascript.rhino.jstype.FunctionType var59 = var53.createFunctionType(var54, var56);
//     com.google.javascript.rhino.jstype.JSType[] var60 = new com.google.javascript.rhino.jstype.JSType[] { var54};
//     com.google.javascript.rhino.jstype.FunctionType var61 = var36.createConstructorType((com.google.javascript.rhino.jstype.JSType)var50, var60);
//     com.google.javascript.rhino.ErrorReporter var62 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
//     com.google.javascript.rhino.jstype.JSType var64 = null;
//     com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var67 = null;
//     var66.setJSDocInfo(var67);
//     com.google.javascript.rhino.jstype.FunctionType var69 = var63.createFunctionType(var64, var66);
//     com.google.javascript.rhino.jstype.ObjectType var70 = var69.getParentScope();
//     boolean var71 = var70.isOrdinaryFunction();
//     boolean var72 = var50.isEquivalentTo((com.google.javascript.rhino.jstype.JSType)var70);
//     com.google.javascript.rhino.jstype.JSType[] var73 = null;
//     com.google.javascript.rhino.jstype.FunctionType var74 = var1.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType)var70, var73);
// 
//   }

  public void test281() {}
//   public void test281() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test281"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     int var10 = var3.getLineOffset(100);
// 
//   }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test282"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("goog.exportProperty");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test283() {}
//   public void test283() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test283"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.rhino.Node var9 = var6.getRoot();
//     com.google.javascript.jscomp.SourceFile var12 = com.google.javascript.jscomp.SourceFile.fromCode("module$hi!", "hi!");
//     com.google.javascript.jscomp.JSSourceFile var13 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var14 = new com.google.javascript.jscomp.JSSourceFile[] { var13};
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var16 = null;
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     var15.setWarningLevel(var16, var17);
//     var15.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     var15.setCheckUnreachableCode(var21);
//     var15.setCollapseProperties(false);
//     var15.setInputDelimiter("hi!");
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var27 = null;
//     var15.setTracer(var27);
//     var15.setCrossModuleMethodMotion(false);
//     com.google.javascript.jscomp.Result var31 = var6.compile(var12, var14, var15);
// 
//   }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test284"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var2.isGetElem();
    boolean var4 = var2.isNull();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var6 = var2.srcref(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var7};
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(10, var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test285"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = var1.detachFromParent();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test286() {}
//   public void test286() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test286"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
//     com.google.javascript.rhino.ErrorReporter var7 = var1.getErrorReporter();
//     com.google.javascript.rhino.jstype.ObjectType var8 = var1.createAnonymousObjectType();
//     com.google.javascript.rhino.jstype.JSTypeNative[] var9 = null;
//     com.google.javascript.rhino.jstype.JSType var10 = var1.createUnionType(var9);
// 
//   }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test287"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    com.google.javascript.rhino.jstype.FunctionType var9 = var3.createFunctionType(var4, var6);
    com.google.javascript.rhino.jstype.FunctionType var11 = var9.getBindReturnType(0);
    com.google.javascript.rhino.jstype.JSType var16 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var9, "NAME ", "module$hi!", 0, 100);
    boolean var17 = var16.isEmptyType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test288() {}
//   public void test288() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test288"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     boolean var4 = var3.isExtern();
//     java.lang.String var5 = var3.toString();
// 
//   }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test289"); }


    int var1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1));

  }

  public void test290() {}
//   public void test290() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test290"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionType var6 = null;
//     com.google.javascript.rhino.ErrorReporter var7 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var12 = null;
//     var11.setJSDocInfo(var12);
//     com.google.javascript.rhino.jstype.FunctionType var14 = var8.createFunctionType(var9, var11);
//     com.google.javascript.rhino.ErrorReporter var15 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     com.google.javascript.rhino.jstype.FunctionType var22 = var16.createFunctionType(var17, var19);
//     boolean var23 = var22.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var24 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
//     com.google.javascript.rhino.jstype.JSType var26 = null;
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var29 = null;
//     var28.setJSDocInfo(var29);
//     com.google.javascript.rhino.jstype.FunctionType var31 = var25.createFunctionType(var26, var28);
//     com.google.javascript.rhino.jstype.JSType[] var32 = new com.google.javascript.rhino.jstype.JSType[] { var26};
//     com.google.javascript.rhino.jstype.FunctionType var33 = var8.createConstructorType((com.google.javascript.rhino.jstype.JSType)var22, var32);
//     com.google.javascript.rhino.ErrorReporter var34 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var34);
//     com.google.javascript.rhino.jstype.JSType var36 = null;
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var39 = null;
//     var38.setJSDocInfo(var39);
//     com.google.javascript.rhino.jstype.FunctionType var41 = var35.createFunctionType(var36, var38);
//     com.google.javascript.rhino.jstype.JSType var43 = null;
//     var35.unregisterPropertyOnType("hi!", var43);
//     com.google.javascript.rhino.jstype.JSType var45 = null;
//     com.google.javascript.rhino.JSDocInfo var46 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var47 = var46.getTypeNodes();
//     boolean var48 = var46.isInterface();
//     var46.addSuppression("");
//     boolean var51 = var46.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var52 = var46.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var53 = var46.getVisibility();
//     java.util.List var54 = var46.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var55 = var35.createFunctionType(var45, var54);
//     var33.setImplementedInterfaces(var54);
//     com.google.javascript.rhino.jstype.FunctionType var57 = var1.createFunctionTypeWithNewThisType(var6, (com.google.javascript.rhino.jstype.ObjectType)var33);
// 
//   }

  public void test291() {}
//   public void test291() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test291"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     int var4 = var2.getWarningCount();
//     var2.optimize();
// 
//   }

  public void test292() {}
//   public void test292() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test292"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var1 = var0.getTypeNodes();
//     boolean var2 = var0.isInterface();
//     boolean var3 = var0.isHidden();
//     java.util.List var4 = var0.getImplementedInterfaces();
//     com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var11 = null;
//     var10.setJSDocInfo(var11);
//     com.google.javascript.rhino.jstype.FunctionType var13 = var7.createFunctionType(var8, var10);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     com.google.javascript.rhino.jstype.FunctionType var21 = var15.createFunctionType(var16, var18);
//     boolean var22 = var21.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var23 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var23);
//     com.google.javascript.rhino.jstype.JSType var25 = null;
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var28 = null;
//     var27.setJSDocInfo(var28);
//     com.google.javascript.rhino.jstype.FunctionType var30 = var24.createFunctionType(var25, var27);
//     com.google.javascript.rhino.jstype.JSType[] var31 = new com.google.javascript.rhino.jstype.JSType[] { var25};
//     com.google.javascript.rhino.jstype.FunctionType var32 = var7.createConstructorType((com.google.javascript.rhino.jstype.JSType)var21, var31);
//     com.google.javascript.rhino.ErrorReporter var33 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
//     com.google.javascript.rhino.jstype.JSType var35 = null;
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var38 = null;
//     var37.setJSDocInfo(var38);
//     com.google.javascript.rhino.jstype.FunctionType var40 = var34.createFunctionType(var35, var37);
//     com.google.javascript.rhino.jstype.JSType var42 = null;
//     var34.unregisterPropertyOnType("hi!", var42);
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.JSDocInfo var45 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var46 = var45.getTypeNodes();
//     boolean var47 = var45.isInterface();
//     var45.addSuppression("");
//     boolean var50 = var45.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var51 = var45.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var52 = var45.getVisibility();
//     java.util.List var53 = var45.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var54 = var34.createFunctionType(var44, var53);
//     var32.setImplementedInterfaces(var53);
//     com.google.javascript.rhino.JSDocInfo var56 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var57 = var56.getTypeNodes();
//     boolean var58 = var56.isInterface();
//     var56.addSuppression("");
//     boolean var61 = var56.isNoCompile();
//     java.util.Set var62 = var56.getParameterNames();
//     boolean var63 = var56.isExterns();
//     boolean var64 = var56.shouldPreserveTry();
//     int var65 = var56.getParameterCount();
//     boolean var66 = var56.isDeprecated();
//     java.util.List var67 = var56.getThrownTypes();
//     java.util.List var68 = var5.manageDependencies(var53, var67);
//     com.google.javascript.jscomp.JSModule var70 = new com.google.javascript.jscomp.JSModule("TRUE");
//     com.google.javascript.jscomp.JSModule var71 = null;
//     com.google.javascript.jscomp.JSModule var72 = var5.getDeepestCommonDependencyInclusive(var70, var71);
// 
//   }

  public void test293() {}
//   public void test293() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test293"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     boolean var3 = var2.isGetElem();
//     boolean var4 = var2.isNull();
//     boolean var5 = var2.isNull();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.jscomp.NodeUtil.newExpr(var2);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticType var8 = null;
//     com.google.javascript.jscomp.CheckLevel var12 = null;
//     com.google.javascript.jscomp.DiagnosticType var15 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var16 = com.google.javascript.jscomp.DiagnosticGroup.forType(var15);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     boolean var22 = var19.isAssignAdd();
//     boolean var23 = var19.isGetElem();
//     boolean var24 = var19.isNumber();
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     com.google.javascript.jscomp.DiagnosticType var28 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var30 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var31 = com.google.javascript.jscomp.JSError.make("hi!", var19, var25, var28, var30);
//     com.google.javascript.jscomp.JSError var32 = com.google.javascript.jscomp.JSError.make("function (): {1260910291}", 0, 100, var12, var15, var30);
//     com.google.javascript.jscomp.JSError var33 = com.google.javascript.jscomp.JSError.make("TRUE", var2, var7, var8, var30);
// 
//   }

  public void test294() {}
//   public void test294() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test294"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     var2.normalize();
// 
//   }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test295"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var6 = null;
    var5.setJSDocInfo(var6);
    com.google.javascript.rhino.jstype.FunctionType var8 = var2.createFunctionType(var3, var5);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    var2.unregisterPropertyOnType("hi!", var10);
    java.lang.Iterable var13 = var2.getTypesWithProperty("hi!");
    var2.setTemplateTypeName("");
    var2.resetForTypeCheck();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var17 = com.google.javascript.rhino.ScriptRuntime.getMessage1("LinkedGraph", (java.lang.Object)var2);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test296() {}
//   public void test296() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test296"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     var1.setLastGeneration(true);
//     java.lang.Iterable var11 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod");
//     var1.resetForTypeCheck();
//     com.google.javascript.rhino.jstype.ObjectType var13 = var1.createAnonymousObjectType();
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     com.google.javascript.rhino.jstype.JSType.TypePair var15 = var13.getTypesUnderEquality(var14);
// 
//   }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test297"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
    java.util.logging.Logger var4 = null;
    com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
    com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
    java.lang.String var9 = var6.getAstDotGraph();
    com.google.javascript.jscomp.Compiler.IntermediateState var10 = var6.getState();
    com.google.javascript.jscomp.JSError[] var11 = var6.getMessages();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var17 = var13.srcref(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    boolean var20 = var19.isGetElem();
    boolean var21 = var19.isNull();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var23 = var19.srcref(var22);
    com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
    com.google.javascript.jscomp.ClosureCodingConvention var25 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var28 = null;
    var27.setJSDocInfo(var28);
    boolean var30 = var27.isAssignAdd();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    boolean var35 = var32.isAssignAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.throwNode(var32);
    com.google.javascript.rhino.Node var37 = var27.srcrefTree(var36);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var40 = null;
    var39.setJSDocInfo(var40);
    boolean var42 = var39.isAssignAdd();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var45 = null;
    var44.setJSDocInfo(var45);
    boolean var47 = var44.isAssignAdd();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.throwNode(var44);
    com.google.javascript.rhino.Node var49 = var39.srcrefTree(var48);
    var27.addChildrenToFront(var39);
    java.util.List var51 = var25.identifyTypeDeclarationCall(var27);
    boolean var54 = var25.isExported("", true);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var57 = null;
    var56.setJSDocInfo(var57);
    boolean var59 = var56.isAssignAdd();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var62 = null;
    var61.setJSDocInfo(var62);
    boolean var64 = var61.isAssignAdd();
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.throwNode(var61);
    com.google.javascript.rhino.Node var66 = var56.srcrefTree(var65);
    com.google.javascript.rhino.Node.AncestorIterable var67 = var65.getAncestors();
    com.google.javascript.rhino.Node var68 = var65.getLastChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var69 = var25.getDelegateRelationship(var65);
    com.google.javascript.rhino.Node var70 = var23.clonePropsFrom(var65);
    com.google.javascript.jscomp.NodeTraversal.Callback var71 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var6, var23, var71);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test298"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", true);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.throwNode(var36);
    com.google.javascript.rhino.Node var41 = var31.srcrefTree(var40);
    com.google.javascript.rhino.Node.AncestorIterable var42 = var40.getAncestors();
    com.google.javascript.rhino.Node var43 = var40.getLastChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var44 = var0.getDelegateRelationship(var40);
    com.google.javascript.jscomp.GoogleCodingConvention var45 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var48 = var45.isExported("goog.abstractMethod", true);
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var50 = var49.getJsDocBuilderForNode();
    com.google.javascript.rhino.jstype.JSType var51 = null;
    var49.setJSType(var51);
    boolean var53 = var49.isBlock();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var54 = var45.isOptionalParameter(var49);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test299"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var26);
    com.google.javascript.rhino.jstype.ObjectType var28 = var26.dereference();
    boolean var29 = var28.isRecordType();
    boolean var30 = var28.isNoResolvedType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test300"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var0.hasNode((java.lang.Object)"");
    com.google.javascript.jscomp.graph.SubGraph var4 = var0.newSubGraph();
    var0.clearNodeAnnotations();
    var0.clearNodeAnnotations();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var10 = null;
    var9.setJSDocInfo(var10);
    boolean var12 = var9.isAssignAdd();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.throwNode(var14);
    com.google.javascript.rhino.Node var19 = var9.srcrefTree(var18);
    com.google.javascript.rhino.Node.AncestorIterable var20 = var18.getAncestors();
    boolean var21 = var7.isEquivalentTo(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var22 = var0.getDirectedSuccNodes((java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test301"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.BooleanLiteralSet var27 = var26.getPossibleToBooleanOutcomes();
    java.lang.String var28 = var27.toString();
    java.lang.String var29 = var27.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "TRUE"+ "'", var28.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "TRUE"+ "'", var29.equals("TRUE"));

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test302"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.enableRuntimeTypeCheck("hi!");
    var0.setPreferLineBreakAtEndOfFile(true);
    var0.setLineBreak(false);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test303"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
    com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
    com.google.javascript.jscomp.NodeTraversal.Callback var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var11);
    com.google.javascript.rhino.Node[] var13 = new com.google.javascript.rhino.Node[] { var12};
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.block(var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var5, var13);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test304() {}
//   public void test304() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test304"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.CompilerInput var9 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3);
// 
//   }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test305"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = var5.useSourceInfoFromForTree(var11);
    boolean var13 = var5.hasMoreThanOneChild();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    boolean var20 = var17.isAssignAdd();
    boolean var21 = var17.isGetElem();
    boolean var22 = var17.isNumber();
    com.google.javascript.jscomp.CheckLevel var23 = null;
    com.google.javascript.jscomp.DiagnosticType var26 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
    java.lang.String[] var28 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var29 = com.google.javascript.jscomp.JSError.make("hi!", var17, var23, var26, var28);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isNE();
    boolean var35 = var31.isAdd();
    boolean var36 = var31.isLabel();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    boolean var41 = var38.isAssignAdd();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var44 = null;
    var43.setJSDocInfo(var44);
    boolean var46 = var43.isAssignAdd();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.throwNode(var43);
    com.google.javascript.rhino.Node var48 = var38.srcrefTree(var47);
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var51 = null;
    var50.setJSDocInfo(var51);
    boolean var53 = var50.isAssignAdd();
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var56 = null;
    var55.setJSDocInfo(var56);
    boolean var58 = var55.isAssignAdd();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.throwNode(var55);
    com.google.javascript.rhino.Node var60 = var50.srcrefTree(var59);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var63 = null;
    var62.setJSDocInfo(var63);
    boolean var65 = var62.isAssignAdd();
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var68 = null;
    var67.setJSDocInfo(var68);
    boolean var70 = var67.isAssignAdd();
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.throwNode(var67);
    com.google.javascript.rhino.Node var72 = var62.srcrefTree(var71);
    var50.addChildrenToFront(var62);
    boolean var74 = var48.hasChild(var50);
    com.google.javascript.rhino.Node var76 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.rhino.Node var77 = new com.google.javascript.rhino.Node(100, var17, var31, var48, var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.sub(var5, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test306() {}
//   public void test306() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test306"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
//     com.google.javascript.jscomp.JsAst var3 = new com.google.javascript.jscomp.JsAst(var2);
//     com.google.javascript.jscomp.SourceAst var4 = null;
//     com.google.javascript.rhino.InputId var5 = null;
//     com.google.javascript.jscomp.CompilerInput var7 = new com.google.javascript.jscomp.CompilerInput(var4, var5, false);
//     java.util.logging.Logger var8 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var9 = new com.google.javascript.jscomp.LoggerErrorManager(var8);
//     com.google.javascript.jscomp.Compiler var10 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var9);
//     com.google.javascript.jscomp.JSError[] var11 = var10.getErrors();
//     var7.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var10);
//     com.google.javascript.jscomp.JSError[] var13 = var10.getErrors();
//     com.google.javascript.rhino.Node var14 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var10);
// 
//   }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test307"); }


    com.google.javascript.jscomp.SourceFile var3 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "hi!", "NAME ");
    com.google.javascript.jscomp.parsing.Config.LanguageMode var6 = null;
    com.google.javascript.jscomp.parsing.Config var8 = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(false, var6, true);
    com.google.javascript.rhino.head.ErrorReporter var9 = null;
    java.util.logging.Logger var10 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var11 = com.google.javascript.jscomp.parsing.ParserRunner.parse((com.google.javascript.rhino.jstype.StaticSourceFile)var3, "", var8, var9, var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test308() {}
//   public void test308() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test308"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.lang.String var4 = var3.getCode();
//     com.google.javascript.rhino.InputId var5 = var3.getInputId();
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var6, false);
//     java.util.Collection var9 = var8.getRequires();
// 
//   }

  public void test309() {}
//   public void test309() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test309"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.ErrorReporter var1 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
//     var2.identifyNonNullableName("");
//     boolean var6 = var2.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var7 = new com.google.javascript.rhino.jstype.FunctionBuilder(var2);
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     boolean var12 = var9.isAssignAdd();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.throwNode(var9);
//     com.google.javascript.rhino.jstype.FunctionBuilder var14 = var7.withSourceNode(var9);
//     boolean var15 = var9.isNumber();
//     com.google.javascript.rhino.Node[] var16 = new com.google.javascript.rhino.Node[] { var9};
//     com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.switchNode(var0, var16);
// 
//   }

  public void test310() {}
//   public void test310() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test310"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     boolean var5 = var1.hasNamespace("");
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     com.google.javascript.rhino.jstype.JSType var8 = null;
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var11 = null;
//     var10.setJSDocInfo(var11);
//     com.google.javascript.rhino.jstype.FunctionType var13 = var7.createFunctionType(var8, var10);
//     com.google.javascript.rhino.jstype.JSType var15 = null;
//     var7.unregisterPropertyOnType("hi!", var15);
//     java.lang.Iterable var18 = var7.getTypesWithProperty("hi!");
//     java.lang.Iterable var20 = var7.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var21 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var26 = null;
//     var25.setJSDocInfo(var26);
//     com.google.javascript.rhino.jstype.FunctionType var28 = var22.createFunctionType(var23, var25);
//     com.google.javascript.rhino.jstype.ObjectType var29 = var28.getParentScope();
//     com.google.javascript.rhino.ErrorReporter var30 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
//     com.google.javascript.rhino.jstype.JSType var32 = null;
//     com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var35 = null;
//     var34.setJSDocInfo(var35);
//     com.google.javascript.rhino.jstype.FunctionType var37 = var31.createFunctionType(var32, var34);
//     boolean var38 = var37.matchesInt32Context();
//     com.google.javascript.rhino.jstype.ObjectType var39 = var37.toObjectType();
//     com.google.javascript.rhino.jstype.FunctionType var40 = var7.createFunctionTypeWithNewThisType(var28, (com.google.javascript.rhino.jstype.ObjectType)var37);
//     java.lang.String var41 = var37.getTemplateTypeName();
//     var37.clearCachedValues();
//     com.google.javascript.rhino.jstype.FunctionType var43 = var37.toMaybeFunctionType();
//     java.lang.String var44 = var37.toString();
//     boolean var45 = var37.isRegexpType();
//     com.google.javascript.rhino.jstype.ObjectType var46 = var1.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var37);
//     com.google.javascript.rhino.jstype.JSTypeNative var47 = null;
//     com.google.javascript.rhino.jstype.ObjectType var48 = var1.getNativeObjectType(var47);
// 
//   }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test311"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    var0.setCollapseProperties(false);
    var0.setInputDelimiter("hi!");
    com.google.javascript.jscomp.CompilerOptions.TracerMode var12 = null;
    var0.setTracer(var12);
    var0.setCrossModuleMethodMotion(true);
    com.google.javascript.jscomp.DependencyOptions var16 = new com.google.javascript.jscomp.DependencyOptions();
    com.google.javascript.jscomp.DependencyOptions var18 = var16.setMoocherDropping(false);
    var0.setDependencyOptions(var18);
    com.google.javascript.rhino.ErrorReporter var20 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var20);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var25 = null;
    var24.setJSDocInfo(var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var21.createFunctionType(var22, var24);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
    boolean var36 = var35.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var38.createFunctionType(var39, var41);
    com.google.javascript.rhino.jstype.JSType[] var45 = new com.google.javascript.rhino.jstype.JSType[] { var39};
    com.google.javascript.rhino.jstype.FunctionType var46 = var21.createConstructorType((com.google.javascript.rhino.jstype.JSType)var35, var45);
    com.google.javascript.rhino.jstype.FunctionType var47 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var46);
    boolean var48 = var46.isInstanceType();
    boolean var49 = var46.isOrdinaryFunction();
    java.util.Set var50 = var46.getPropertyNames();
    com.google.javascript.jscomp.DependencyOptions var51 = var18.setEntryPoints((java.util.Collection)var50);
    com.google.javascript.jscomp.DependencyOptions var53 = var18.setMoocherDropping(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test312"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.ErrorReporter var2 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var3 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var2);
    com.google.javascript.rhino.jstype.JSType var4 = null;
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    com.google.javascript.rhino.jstype.FunctionType var9 = var3.createFunctionType(var4, var6);
    com.google.javascript.rhino.jstype.FunctionType var11 = var9.getBindReturnType(0);
    com.google.javascript.rhino.jstype.JSType var16 = var1.getType((com.google.javascript.rhino.jstype.StaticScope)var9, "NAME ", "module$hi!", 0, 100);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var21 = null;
    var20.setJSDocInfo(var21);
    boolean var23 = var20.isNE();
    boolean var24 = var20.isAdd();
    boolean var26 = var20.getBooleanProp(100);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    boolean var29 = var28.isGetElem();
    boolean var30 = var28.isNull();
    boolean var31 = var28.isDebugger();
    boolean var32 = var28.isArrayLit();
    var20.addChildToBack(var28);
    com.google.javascript.jscomp.ClosureCodingConvention var34 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    boolean var44 = var41.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
    com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var49 = null;
    var48.setJSDocInfo(var49);
    boolean var51 = var48.isAssignAdd();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var54 = null;
    var53.setJSDocInfo(var54);
    boolean var56 = var53.isAssignAdd();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.throwNode(var53);
    com.google.javascript.rhino.Node var58 = var48.srcrefTree(var57);
    var36.addChildrenToFront(var48);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var60 = var34.getClassesDefinedByCall(var36);
    com.google.javascript.rhino.Node[] var61 = new com.google.javascript.rhino.Node[] { var36};
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.newNode(var20, var61);
    boolean var63 = var9.defineDeclaredProperty("LinkedGraph", var18, var20);
    boolean var64 = var9.isNativeObjectType();
    com.google.javascript.rhino.jstype.EnumElementType var65 = var9.toMaybeEnumElementType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.FunctionType var66 = var9.getSuperClassConstructor();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test313() {}
//   public void test313() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test313"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     var1.setLastGeneration(true);
//     java.lang.Iterable var11 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod");
//     com.google.javascript.rhino.jstype.JSTypeNative var12 = null;
//     com.google.javascript.rhino.jstype.JSType var13 = var1.getNativeType(var12);
// 
//   }

  public void test314() {}
//   public void test314() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test314"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.lang.String var4 = var3.getCode();
//     java.util.logging.Logger var5 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var6 = new com.google.javascript.jscomp.LoggerErrorManager(var5);
//     com.google.javascript.jscomp.Compiler var7 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var6);
//     com.google.javascript.jscomp.JSError[] var8 = var7.getErrors();
//     int var9 = var7.getWarningCount();
//     com.google.javascript.rhino.Node var10 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var7);
// 
//   }

  public void test315() {}
//   public void test315() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test315"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getAst();
//     com.google.javascript.rhino.InputId var5 = var3.getInputId();
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, "hi!", true);
// 
//   }

  public void test316() {}
//   public void test316() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test316"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.breakNode(var0);
// 
//   }

  public void test317() {}
//   public void test317() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test317"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.JSTypeExpression var2 = new com.google.javascript.rhino.JSTypeExpression(var0, "hi!");
//     
//     // Checks the contract:  var2.equals(var2)
//     assertTrue("Contract failed: var2.equals(var2)", var2.equals(var2));
// 
//   }

  public void test318() {}
//   public void test318() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test318"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     com.google.javascript.jscomp.JSError[] var4 = var2.getWarnings();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var12 = null;
//     var11.setJSDocInfo(var12);
//     boolean var14 = var11.isAssignAdd();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.throwNode(var11);
//     com.google.javascript.rhino.Node var16 = var6.srcrefTree(var15);
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     boolean var21 = var18.isAssignAdd();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var24 = null;
//     var23.setJSDocInfo(var24);
//     boolean var26 = var23.isAssignAdd();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.throwNode(var23);
//     com.google.javascript.rhino.Node var28 = var18.srcrefTree(var27);
//     boolean var29 = var28.isLocalResultCall();
//     int var30 = var28.getSideEffectFlags();
//     com.google.javascript.rhino.InputId var32 = new com.google.javascript.rhino.InputId("");
//     var28.setInputId(var32);
//     var16.setInputId(var32);
//     com.google.javascript.jscomp.CompilerInput var35 = var2.getInput(var32);
// 
//   }

  public void test319() {}
//   public void test319() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test319"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSError[] var9 = var6.getErrors();
//     var6.parse();
// 
//   }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test320"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var5);
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var6};
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    java.lang.Iterable var9 = var8.siblings();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var12 = null;
    var11.setJSDocInfo(var12);
    boolean var14 = var11.isNE();
    boolean var15 = var11.isFor();
    var8.addChildrenToBack(var11);
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.Node.newString("function (): {1260910291}");
    com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var21 = null;
    var20.setJSDocInfo(var21);
    boolean var23 = var20.isAssignAdd();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.throwNode(var25);
    com.google.javascript.rhino.Node var30 = var20.srcrefTree(var29);
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    boolean var35 = var32.isAssignAdd();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.throwNode(var37);
    com.google.javascript.rhino.Node var42 = var32.srcrefTree(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var45 = null;
    var44.setJSDocInfo(var45);
    boolean var47 = var44.isAssignAdd();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var50 = null;
    var49.setJSDocInfo(var50);
    boolean var52 = var49.isAssignAdd();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.throwNode(var49);
    com.google.javascript.rhino.Node var54 = var44.srcrefTree(var53);
    var32.addChildrenToFront(var44);
    boolean var56 = var30.hasChild(var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.hook(var11, var18, var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test321"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var17 = var13.srcref(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    boolean var20 = var19.isGetElem();
    boolean var21 = var19.isNull();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var23 = var19.srcref(var22);
    com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var26.createFunctionType(var27, var29);
    com.google.javascript.rhino.jstype.ObjectType var33 = var1.createObjectType("goog.abstractMethod", var24, (com.google.javascript.rhino.jstype.ObjectType)var32);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    boolean var44 = var41.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
    com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var52 = null;
    var51.setJSDocInfo(var52);
    com.google.javascript.rhino.jstype.FunctionType var54 = var48.createFunctionType(var49, var51);
    com.google.javascript.rhino.jstype.ObjectType var55 = var54.getParentScope();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var36, (com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.jstype.EnumType var57 = var56.toMaybeEnumType();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var60 = var58.isPropertyTypeDeclared("module$hi!");
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.jstype.JSType var63 = null;
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var66 = null;
    var65.setJSDocInfo(var66);
    com.google.javascript.rhino.jstype.FunctionType var68 = var62.createFunctionType(var63, var65);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    var62.unregisterPropertyOnType("hi!", var70);
    java.lang.Iterable var73 = var62.getTypesWithProperty("hi!");
    java.lang.Iterable var75 = var62.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var81 = null;
    var80.setJSDocInfo(var81);
    com.google.javascript.rhino.jstype.FunctionType var83 = var77.createFunctionType(var78, var80);
    com.google.javascript.rhino.jstype.ObjectType var84 = var83.getParentScope();
    com.google.javascript.rhino.ErrorReporter var85 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var85);
    com.google.javascript.rhino.jstype.JSType var87 = null;
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var90 = null;
    var89.setJSDocInfo(var90);
    com.google.javascript.rhino.jstype.FunctionType var92 = var86.createFunctionType(var87, var89);
    boolean var93 = var92.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var94 = var92.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var95 = var62.createFunctionTypeWithNewThisType(var83, (com.google.javascript.rhino.jstype.ObjectType)var92);
    com.google.javascript.rhino.jstype.JSType.TypePair var96 = var58.getTypesUnderInequality((com.google.javascript.rhino.jstype.JSType)var95);
    com.google.javascript.rhino.jstype.ObjectType.Property var98 = var58.getSlot("NAME ");
    com.google.javascript.rhino.jstype.JSType var99 = var58.autoboxesTo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test322() {}
//   public void test322() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test322"); }
// 
// 
//     java.util.Collection var0 = null;
//     com.google.javascript.jscomp.JSModule[] var1 = com.google.javascript.jscomp.JSModule.sortJsModules(var0);
// 
//   }

  public void test323() {}
//   public void test323() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test323"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var6 = null;
//     var5.setJSDocInfo(var6);
//     boolean var8 = var5.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var11 = null;
//     var10.setJSDocInfo(var11);
//     boolean var13 = var10.isAssignAdd();
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.throwNode(var10);
//     com.google.javascript.rhino.Node var15 = var5.srcrefTree(var14);
//     boolean var16 = var15.isLocalResultCall();
//     int var17 = var15.getSideEffectFlags();
//     com.google.javascript.rhino.InputId var19 = new com.google.javascript.rhino.InputId("");
//     var15.setInputId(var19);
//     com.google.javascript.jscomp.CompilerInput var22 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var19, false);
//     com.google.javascript.jscomp.Region var24 = var3.getRegion(3);
// 
//   }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test324"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.string("");
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
    boolean var4 = var3.isGetElem();
    boolean var5 = var3.isNull();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var7 = var3.srcref(var6);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var13 = var9.srcref(var12);
    com.google.javascript.rhino.Node var14 = var7.useSourceInfoFromForTree(var13);
    boolean var15 = var7.hasMoreThanOneChild();
    com.google.javascript.rhino.InputId var16 = var7.getInputId();
    int var17 = var7.getChildCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.tryCatch(var1, var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test325"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    var0.setCollapseProperties(false);
    com.google.javascript.rhino.JSDocInfo var10 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var11 = var10.getTypeNodes();
    boolean var12 = var10.isInterface();
    var10.addSuppression("");
    boolean var15 = var10.isNoCompile();
    java.util.Set var16 = var10.getParameterNames();
    var0.setStripTypePrefixes(var16);
    boolean var18 = var0.isExternExportsEnabled();
    var0.setCheckControlStructures(true);
    var0.setSmartNameRemoval(false);
    var0.disableRuntimeTypeCheck();
    var0.setMarkNoSideEffectCalls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test326"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", true);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.throwNode(var36);
    com.google.javascript.rhino.Node var41 = var31.srcrefTree(var40);
    com.google.javascript.rhino.Node.AncestorIterable var42 = var40.getAncestors();
    com.google.javascript.rhino.Node var43 = var40.getLastChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var44 = var0.getDelegateRelationship(var40);
    com.google.javascript.jscomp.GoogleCodingConvention var45 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var48 = var45.isExported("goog.abstractMethod", true);
    boolean var50 = var45.isConstant("function (): {1260910291}");
    boolean var52 = var45.isConstant("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test327() {}
//   public void test327() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test327"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var13 = null;
//     var12.setJSDocInfo(var13);
//     com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
//     boolean var16 = var15.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var22 = null;
//     var21.setJSDocInfo(var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var26);
//     boolean var28 = var26.isInstanceType();
//     boolean var29 = var26.isOrdinaryFunction();
//     java.util.Set var30 = var26.getPropertyNames();
//     boolean var31 = var26.isNullable();
//     com.google.javascript.rhino.Node var32 = var26.getSource();
//     java.lang.String var33 = var26.toDebugHashCodeString();
// 
//   }

  public void test328() {}
//   public void test328() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test328"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     var1.identifyNonNullableName("");
//     com.google.javascript.rhino.ErrorReporter var4 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
//     com.google.javascript.rhino.jstype.JSType var6 = null;
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var9 = null;
//     var8.setJSDocInfo(var9);
//     com.google.javascript.rhino.jstype.FunctionType var11 = var5.createFunctionType(var6, var8);
//     com.google.javascript.rhino.jstype.JSType var13 = null;
//     var5.unregisterPropertyOnType("hi!", var13);
//     java.lang.Iterable var16 = var5.getTypesWithProperty("hi!");
//     java.lang.Iterable var18 = var5.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var19 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
//     com.google.javascript.rhino.jstype.JSType var21 = null;
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var24 = null;
//     var23.setJSDocInfo(var24);
//     com.google.javascript.rhino.jstype.FunctionType var26 = var20.createFunctionType(var21, var23);
//     com.google.javascript.rhino.jstype.ObjectType var27 = var26.getParentScope();
//     com.google.javascript.rhino.ErrorReporter var28 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
//     com.google.javascript.rhino.jstype.JSType var30 = null;
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var33 = null;
//     var32.setJSDocInfo(var33);
//     com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
//     boolean var36 = var35.matchesInt32Context();
//     com.google.javascript.rhino.jstype.ObjectType var37 = var35.toObjectType();
//     com.google.javascript.rhino.jstype.FunctionType var38 = var5.createFunctionTypeWithNewThisType(var26, (com.google.javascript.rhino.jstype.ObjectType)var35);
//     java.lang.String var39 = var35.getTemplateTypeName();
//     var35.clearCachedValues();
//     com.google.javascript.rhino.jstype.FunctionType var41 = var35.toMaybeFunctionType();
//     java.lang.String var42 = var35.toString();
//     boolean var43 = var35.isRegexpType();
//     var35.clearResolved();
//     com.google.javascript.rhino.jstype.JSType var45 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var35);
//     com.google.javascript.rhino.jstype.JSTypeNative var46 = null;
//     com.google.javascript.rhino.jstype.JSTypeNative[] var47 = new com.google.javascript.rhino.jstype.JSTypeNative[] { var46};
//     com.google.javascript.rhino.jstype.JSType var48 = var1.createUnionType(var47);
// 
//   }

  public void test329() {}
//   public void test329() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test329"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
//     com.google.javascript.rhino.Node.AncestorIterable var12 = var10.getAncestors();
//     com.google.javascript.rhino.Node var13 = var10.getLastChild();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var16 = null;
//     var15.setJSDocInfo(var16);
//     boolean var18 = var15.isAssignAdd();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var21 = null;
//     var20.setJSDocInfo(var21);
//     boolean var23 = var20.isAssignAdd();
//     com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.throwNode(var20);
//     com.google.javascript.rhino.Node var25 = var15.srcrefTree(var24);
//     var13.removeChild(var24);
// 
//   }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test330"); }


    boolean var1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test331"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    var0.setCollapseProperties(false);
    com.google.javascript.rhino.JSDocInfo var10 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var11 = var10.getTypeNodes();
    boolean var12 = var10.isInterface();
    var10.addSuppression("");
    boolean var15 = var10.isNoCompile();
    java.util.Set var16 = var10.getParameterNames();
    var0.setStripTypePrefixes(var16);
    var0.setOptimizeParameters(true);
    var0.setExternExports(false);
    java.util.Map var22 = null;
    var0.setDefineReplacements(var22);
    var0.setInlineVariables(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test332() {}
//   public void test332() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test332"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     var1.setLastGeneration(true);
//     java.lang.Iterable var11 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod");
//     java.util.List var12 = null;
//     com.google.javascript.rhino.Node var13 = var1.createParametersWithVarArgs(var12);
// 
//   }

  public void test333() {}
//   public void test333() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test333"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.rhino.jstype.JSTypeRegistry var4 = var2.getTypeRegistry();
// 
//   }

  public void test334() {}
//   public void test334() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test334"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.ErrorReporter var8 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
//     com.google.javascript.rhino.jstype.JSType var10 = null;
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var13 = null;
//     var12.setJSDocInfo(var13);
//     com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
//     boolean var16 = var15.matchesInt32Context();
//     com.google.javascript.rhino.ErrorReporter var17 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
//     com.google.javascript.rhino.jstype.JSType var19 = null;
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var22 = null;
//     var21.setJSDocInfo(var22);
//     com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
//     com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
//     com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
//     com.google.javascript.rhino.jstype.FunctionType var27 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var26);
//     com.google.javascript.rhino.jstype.FunctionType var29 = var26.getBindReturnType(0);
//     com.google.javascript.rhino.jstype.ObjectType var30 = var26.getPrototype();
//     com.google.javascript.rhino.ErrorReporter var31 = null;
//     com.google.javascript.rhino.ErrorReporter var32 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
//     com.google.javascript.rhino.jstype.JSType var34 = null;
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var36.setJSDocInfo(var37);
//     com.google.javascript.rhino.jstype.FunctionType var39 = var33.createFunctionType(var34, var36);
//     com.google.javascript.rhino.jstype.JSType var41 = null;
//     var33.unregisterPropertyOnType("hi!", var41);
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
//     boolean var46 = var45.isGetElem();
//     boolean var47 = var45.isNull();
//     com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var49 = var45.srcref(var48);
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
//     boolean var52 = var51.isGetElem();
//     boolean var53 = var51.isNull();
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var55 = var51.srcref(var54);
//     com.google.javascript.rhino.Node var56 = var49.useSourceInfoFromForTree(var55);
//     com.google.javascript.rhino.ErrorReporter var57 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var57);
//     com.google.javascript.rhino.jstype.JSType var59 = null;
//     com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var62 = null;
//     var61.setJSDocInfo(var62);
//     com.google.javascript.rhino.jstype.FunctionType var64 = var58.createFunctionType(var59, var61);
//     com.google.javascript.rhino.jstype.ObjectType var65 = var33.createObjectType("goog.abstractMethod", var56, (com.google.javascript.rhino.jstype.ObjectType)var64);
//     com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var69 = null;
//     var68.setJSDocInfo(var69);
//     boolean var71 = var68.isAssignAdd();
//     com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var74 = null;
//     var73.setJSDocInfo(var74);
//     boolean var76 = var73.isAssignAdd();
//     com.google.javascript.rhino.Node var77 = com.google.javascript.rhino.IR.throwNode(var73);
//     com.google.javascript.rhino.Node var78 = var68.srcrefTree(var77);
//     com.google.javascript.rhino.ErrorReporter var79 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var79);
//     com.google.javascript.rhino.jstype.JSType var81 = null;
//     com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var84 = null;
//     var83.setJSDocInfo(var84);
//     com.google.javascript.rhino.jstype.FunctionType var86 = var80.createFunctionType(var81, var83);
//     com.google.javascript.rhino.jstype.ObjectType var87 = var86.getParentScope();
//     com.google.javascript.rhino.jstype.EnumType var88 = var33.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var68, (com.google.javascript.rhino.jstype.JSType)var87);
//     com.google.javascript.rhino.jstype.FunctionType var89 = var88.getConstructor();
//     var88.clearResolved();
//     boolean var91 = var88.isCheckedUnknownType();
//     com.google.javascript.rhino.jstype.JSType var92 = var26.forceResolve(var31, (com.google.javascript.rhino.jstype.StaticScope)var88);
// 
//   }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test335"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("hi!. hi! at hi! line ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test336"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.BooleanLiteralSet var27 = var26.getPossibleToBooleanOutcomes();
    boolean var29 = var26.removeProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var35 = null;
    var34.setJSDocInfo(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var31.createFunctionType(var32, var34);
    boolean var38 = var37.isGlobalThisType();
    boolean var39 = var37.isConstructor();
    boolean var40 = var26.hasEqualCallType(var37);
    com.google.javascript.rhino.jstype.UnionType var41 = var26.toMaybeUnionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test337"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node.AncestorIterable var13 = var11.getAncestors();
    boolean var14 = var0.isEquivalentTo(var11);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.Node.newNumber(0.0d);
    boolean var17 = var16.isDefaultCase();
    com.google.javascript.rhino.Node var18 = var11.clonePropsFrom(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.defaultCase(var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test338"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    boolean var29 = var26.isAssignAdd();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.throwNode(var31);
    com.google.javascript.rhino.Node var36 = var26.srcrefTree(var35);
    var14.addChildrenToFront(var26);
    boolean var38 = var12.hasChild(var14);
    boolean var40 = var14.getBooleanProp((-1));
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var44 = null;
    var43.setJSDocInfo(var44);
    boolean var46 = var43.isAssignAdd();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var49 = null;
    var48.setJSDocInfo(var49);
    boolean var51 = var48.isAssignAdd();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.throwNode(var48);
    com.google.javascript.rhino.Node var53 = var43.srcrefTree(var52);
    boolean var54 = var53.isLocalResultCall();
    com.google.javascript.jscomp.ClosureCodingConvention var55 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.name("");
    boolean var58 = var57.isGetElem();
    boolean var59 = var57.isNull();
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var61 = var57.srcref(var60);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.throwNode(var61);
    java.lang.String var63 = var55.getSingletonGetterClassName(var62);
    com.google.javascript.rhino.Node var65 = com.google.javascript.rhino.IR.name("");
    boolean var66 = var65.isGetElem();
    boolean var67 = var65.isNull();
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var69 = var65.srcref(var68);
    com.google.javascript.rhino.Node var71 = com.google.javascript.rhino.IR.name("");
    var69.addChildrenToFront(var71);
    com.google.javascript.rhino.ErrorReporter var74 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var74);
    com.google.javascript.rhino.jstype.JSType var76 = null;
    com.google.javascript.rhino.Node var78 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var79 = null;
    var78.setJSDocInfo(var79);
    com.google.javascript.rhino.jstype.FunctionType var81 = var75.createFunctionType(var76, var78);
    boolean var82 = var81.isGlobalThisType();
    boolean var83 = var81.isConstructor();
    var69.putProp(0, (java.lang.Object)var81);
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.name("");
    boolean var87 = var86.isGetElem();
    boolean var88 = var86.isNull();
    com.google.javascript.rhino.Node var89 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var90 = var86.srcref(var89);
    com.google.javascript.rhino.Node var91 = new com.google.javascript.rhino.Node(0, var53, var62, var69, var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var92 = new com.google.javascript.rhino.Node(1, var14, var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test339() {}
//   public void test339() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test339"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var1 = null;
//     com.google.javascript.jscomp.CheckLevel var2 = null;
//     var0.setWarningLevel(var1, var2);
//     var0.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var6 = null;
//     var0.setCheckUnreachableCode(var6);
//     var0.setCollapseProperties(false);
//     com.google.javascript.rhino.JSDocInfo var10 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var11 = var10.getTypeNodes();
//     boolean var12 = var10.isInterface();
//     var10.addSuppression("");
//     boolean var15 = var10.isNoCompile();
//     java.util.Set var16 = var10.getParameterNames();
//     var0.setStripTypePrefixes(var16);
//     var0.setClosurePass(false);
//     com.google.javascript.jscomp.CompilerOptions.Reach var20 = null;
//     var0.setInlineVariables(var20);
// 
//   }

  public void test340() {}
//   public void test340() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test340"); }
// 
// 
//     com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var4 = com.google.javascript.jscomp.DiagnosticGroup.forType(var3);
//     com.google.javascript.jscomp.DiagnosticGroup[] var5 = new com.google.javascript.jscomp.DiagnosticGroup[] { var4};
//     com.google.javascript.jscomp.DiagnosticGroup var6 = new com.google.javascript.jscomp.DiagnosticGroup("module$hi!", var5);
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticGroupWarningsGuard var8 = new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(var6, var7);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var12 = null;
//     var11.setJSDocInfo(var12);
//     boolean var14 = var11.isAssignAdd();
//     boolean var15 = var11.isGetElem();
//     boolean var16 = var11.isNumber();
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var22 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make("hi!", var11, var17, var20, var22);
//     com.google.javascript.jscomp.DiagnosticGroup var24 = com.google.javascript.jscomp.DiagnosticGroup.forType(var20);
//     com.google.javascript.jscomp.DiagnosticType[] var25 = new com.google.javascript.jscomp.DiagnosticType[] { var20};
//     com.google.javascript.jscomp.DiagnosticGroup var26 = new com.google.javascript.jscomp.DiagnosticGroup(var25);
//     com.google.javascript.jscomp.DiagnosticGroup var27 = new com.google.javascript.jscomp.DiagnosticGroup(var25);
//     boolean var28 = var8.enables(var27);
// 
//   }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test341"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.jscomp.ClosureCodingConvention var2 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.jstype.FunctionType var3 = null;
    com.google.javascript.rhino.jstype.FunctionType var4 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var5 = null;
    var2.applySubclassRelationship(var3, var4, var5);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.throwNode(var13);
    com.google.javascript.rhino.Node var18 = var8.srcrefTree(var17);
    com.google.javascript.rhino.Node.AncestorIterable var19 = var17.getAncestors();
    boolean var20 = var17.hasChildren();
    boolean var21 = var17.isFunction();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
    boolean var24 = var23.isGetElem();
    boolean var25 = var23.isNull();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var27 = var23.srcref(var26);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.throwNode(var27);
    com.google.javascript.rhino.Node[] var29 = new com.google.javascript.rhino.Node[] { var28};
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.block(var29);
    java.lang.String var31 = var2.extractClassNameIfRequire(var17, var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.or(var1, var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test342() {}
//   public void test342() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test342"); }
// 
// 
//     com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("TRUE");
//     java.util.List var2 = var1.getInputs();
//     java.util.List var3 = var1.getDependencies();
//     com.google.javascript.jscomp.CompilerInput var4 = null;
//     var1.add(var4);
// 
//   }

  public void test343() {}
//   public void test343() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test343"); }
// 
// 
//     com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
//     boolean var2 = var1.recordInterface();
//     boolean var3 = var1.isPopulated();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var6 = null;
//     var5.setJSDocInfo(var6);
//     boolean var8 = var5.isNE();
//     boolean var9 = var5.isFor();
//     com.google.javascript.rhino.JSDocInfo var10 = var1.build(var5);
//     var5.setCharno(10);
//     com.google.javascript.rhino.JSDocInfo var13 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var14 = var13.getTypeNodes();
//     boolean var15 = var13.isInterface();
//     var13.addSuppression("");
//     boolean var18 = var13.isNoCompile();
//     java.util.Set var19 = var13.getParameterNames();
//     boolean var20 = var13.isExterns();
//     java.util.Set var21 = var13.getSuppressions();
//     var5.setDirectives(var21);
//     java.lang.Appendable var23 = null;
//     var5.appendStringTree(var23);
// 
//   }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test344"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    int var27 = var15.getMinArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test345() {}
//   public void test345() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test345"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     var1.setLastGeneration(true);
//     java.util.List var10 = null;
//     com.google.javascript.rhino.Node var11 = var1.createParametersWithVarArgs(var10);
// 
//   }

  public void test346() {}
//   public void test346() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test346"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.Node.newNumber(10.0d);
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     boolean var7 = var4.isAssignAdd();
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     boolean var12 = var9.isAssignAdd();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.throwNode(var9);
//     com.google.javascript.rhino.Node var14 = var4.srcrefTree(var13);
//     boolean var15 = var14.isLocalResultCall();
//     com.google.javascript.jscomp.ClosureCodingConvention var16 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     boolean var19 = var18.isGetElem();
//     boolean var20 = var18.isNull();
//     com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var22 = var18.srcref(var21);
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var22);
//     java.lang.String var24 = var16.getSingletonGetterClassName(var23);
//     com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
//     boolean var27 = var26.isGetElem();
//     boolean var28 = var26.isNull();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var30 = var26.srcref(var29);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
//     var30.addChildrenToFront(var32);
//     com.google.javascript.rhino.ErrorReporter var35 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var35);
//     com.google.javascript.rhino.jstype.JSType var37 = null;
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var40 = null;
//     var39.setJSDocInfo(var40);
//     com.google.javascript.rhino.jstype.FunctionType var42 = var36.createFunctionType(var37, var39);
//     boolean var43 = var42.isGlobalThisType();
//     boolean var44 = var42.isConstructor();
//     var30.putProp(0, (java.lang.Object)var42);
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.name("");
//     boolean var48 = var47.isGetElem();
//     boolean var49 = var47.isNull();
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var51 = var47.srcref(var50);
//     com.google.javascript.rhino.Node var52 = new com.google.javascript.rhino.Node(0, var14, var23, var30, var51);
//     boolean var53 = var30.isObjectLit();
//     com.google.javascript.rhino.Node var54 = var1.getChildBefore(var30);
// 
//   }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test347"); }


    com.google.javascript.jscomp.SourceAst var0 = null;
    com.google.javascript.rhino.InputId var1 = null;
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
    java.util.logging.Logger var4 = null;
    com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
    com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
    com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
    var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
    com.google.javascript.jscomp.JSError[] var9 = var6.getErrors();
    com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
    com.google.javascript.jscomp.NodeTraversal var11 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var6, var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    boolean var16 = var13.isNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.traverse(var13);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test348"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var17 = var13.srcref(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    boolean var20 = var19.isGetElem();
    boolean var21 = var19.isNull();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var23 = var19.srcref(var22);
    com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var26.createFunctionType(var27, var29);
    com.google.javascript.rhino.jstype.ObjectType var33 = var1.createObjectType("goog.abstractMethod", var24, (com.google.javascript.rhino.jstype.ObjectType)var32);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    boolean var44 = var41.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
    com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var52 = null;
    var51.setJSDocInfo(var52);
    com.google.javascript.rhino.jstype.FunctionType var54 = var48.createFunctionType(var49, var51);
    com.google.javascript.rhino.jstype.ObjectType var55 = var54.getParentScope();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var36, (com.google.javascript.rhino.jstype.JSType)var55);
    boolean var57 = var55.isInterface();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test349() {}
//   public void test349() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test349"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSError[] var9 = var6.getErrors();
//     com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
//     com.google.javascript.jscomp.NodeTraversal var11 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var6, var10);
//     boolean var12 = var11.hasScope();
//     com.google.javascript.jscomp.CompilerInput var13 = var11.getInput();
// 
//   }

  public void test350() {}
//   public void test350() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test350"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var6.unregisterPropertyOnType("hi!", var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.JSDocInfo var17 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var18 = var17.getTypeNodes();
//     boolean var19 = var17.isInterface();
//     var17.addSuppression("");
//     boolean var22 = var17.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var23 = var17.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var24 = var17.getVisibility();
//     java.util.List var25 = var17.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var26 = var6.createFunctionType(var16, var25);
//     com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var25, var27);
//     java.lang.String var29 = var2.getAstDotGraph();
//     com.google.javascript.jscomp.SourceFile.Generator var31 = null;
//     com.google.javascript.jscomp.SourceFile var32 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var31);
//     java.lang.String var33 = var32.getOriginalPath();
//     java.lang.String var34 = var32.getName();
//     var32.clearCachedSource();
//     com.google.javascript.jscomp.SourceFile.Generator var37 = null;
//     com.google.javascript.jscomp.SourceFile var38 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var37);
//     java.lang.String var39 = var38.getOriginalPath();
//     var38.setOriginalPath("goog.exportProperty");
//     com.google.javascript.jscomp.CompilerOptions var42 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var43 = null;
//     com.google.javascript.jscomp.CheckLevel var44 = null;
//     var42.setWarningLevel(var43, var44);
//     var42.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var48 = null;
//     var42.setCheckUnreachableCode(var48);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var50 = var42.getTracerMode();
//     boolean var51 = var42.assumeStrictThis();
//     var42.setDefineToStringLiteral("module$hi!", "");
//     com.google.javascript.jscomp.CheckLevel var55 = null;
//     var42.setCheckUnreachableCode(var55);
//     com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var57 = null;
//     var42.setAnonymousFunctionNaming(var57);
//     com.google.javascript.jscomp.Result var59 = var2.compile(var32, var38, var42);
// 
//   }

  public void test351() {}
//   public void test351() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test351"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var6.unregisterPropertyOnType("hi!", var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.JSDocInfo var17 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var18 = var17.getTypeNodes();
//     boolean var19 = var17.isInterface();
//     var17.addSuppression("");
//     boolean var22 = var17.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var23 = var17.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var24 = var17.getVisibility();
//     java.util.List var25 = var17.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var26 = var6.createFunctionType(var16, var25);
//     com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var25, var27);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var29 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var30 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2, var29);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var36.setJSDocInfo(var37);
//     boolean var39 = var36.isAssignAdd();
//     boolean var40 = var36.isGetElem();
//     boolean var41 = var36.isNumber();
//     com.google.javascript.jscomp.CheckLevel var42 = null;
//     com.google.javascript.jscomp.DiagnosticType var45 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var47 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var48 = com.google.javascript.jscomp.JSError.make("hi!", var36, var42, var45, var47);
//     com.google.javascript.jscomp.CheckLevel var52 = null;
//     com.google.javascript.jscomp.DiagnosticType var55 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var56 = com.google.javascript.jscomp.DiagnosticGroup.forType(var55);
//     com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var60 = null;
//     var59.setJSDocInfo(var60);
//     boolean var62 = var59.isAssignAdd();
//     boolean var63 = var59.isGetElem();
//     boolean var64 = var59.isNumber();
//     com.google.javascript.jscomp.CheckLevel var65 = null;
//     com.google.javascript.jscomp.DiagnosticType var68 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var70 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var71 = com.google.javascript.jscomp.JSError.make("hi!", var59, var65, var68, var70);
//     com.google.javascript.jscomp.JSError var72 = com.google.javascript.jscomp.JSError.make("function (): {1260910291}", 0, 100, var52, var55, var70);
//     com.google.javascript.jscomp.JSError var73 = com.google.javascript.jscomp.JSError.make("hi!", 100, (-1), var45, var70);
//     java.lang.String var74 = var30.formatWarning(var73);
// 
//   }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test352"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    boolean var1 = var0.isDirected();
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var4.createFunctionType(var5, var7);
    com.google.javascript.rhino.jstype.SimpleSlot var12 = new com.google.javascript.rhino.jstype.SimpleSlot("module$hi!", (com.google.javascript.rhino.jstype.JSType)var10, false);
    java.lang.String var13 = var12.getName();
    com.google.javascript.rhino.JSDocInfo var14 = var12.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var15 = var0.getNodeDegree((java.lang.Object)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "module$hi!"+ "'", var13.equals("module$hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test353"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    boolean var1 = var0.isHidden();
    boolean var2 = var0.hasFileOverview();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test354"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isNoShadow();
    java.lang.String var3 = var0.getDeprecationReason();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test355"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    var1.addChildrenToFront(var13);
    java.lang.String var25 = var1.toStringTree();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "NAME \n    NAME \n"+ "'", var25.equals("NAME \n    NAME \n"));

  }

  public void test356() {}
//   public void test356() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test356"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     boolean var3 = var2.isGetElem();
//     boolean var4 = var2.isNull();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var6 = var2.srcref(var5);
//     com.google.javascript.rhino.Node var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     boolean var10 = var9.isGetElem();
//     boolean var11 = var9.isNull();
//     boolean var12 = var9.isNull();
//     com.google.javascript.rhino.Node var13 = com.google.javascript.jscomp.NodeUtil.newExpr(var9);
//     int var14 = var13.getChildCount();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
//     boolean var17 = var16.isGetElem();
//     boolean var18 = var16.isNull();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var20 = var16.srcref(var19);
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
//     boolean var23 = var22.isGetElem();
//     boolean var24 = var22.isNull();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var26 = var22.srcref(var25);
//     com.google.javascript.rhino.Node var27 = var20.useSourceInfoFromForTree(var26);
//     boolean var28 = var20.hasMoreThanOneChild();
//     com.google.javascript.rhino.Node var29 = var20.getNext();
//     com.google.javascript.rhino.Node var32 = new com.google.javascript.rhino.Node((-1), var2, var7, var13, var20, 1, 0);
// 
//   }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test357"); }


    com.google.javascript.rhino.ErrorReporter var1 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var1);
    com.google.javascript.rhino.jstype.JSType var3 = null;
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var6 = null;
    var5.setJSDocInfo(var6);
    com.google.javascript.rhino.jstype.FunctionType var8 = var2.createFunctionType(var3, var5);
    com.google.javascript.rhino.jstype.SimpleSlot var10 = new com.google.javascript.rhino.jstype.SimpleSlot("module$hi!", (com.google.javascript.rhino.jstype.JSType)var8, false);
    com.google.javascript.rhino.jstype.JSType var11 = var10.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test358"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isSyntheticBlock();
    int var5 = var1.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 38);

  }

  public void test359() {}
//   public void test359() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test359"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSSourceFile var9 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var10 = new com.google.javascript.jscomp.JSSourceFile[] { var9};
//     com.google.javascript.jscomp.CompilerOptions var11 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var12 = null;
//     com.google.javascript.jscomp.CheckLevel var13 = null;
//     var11.setWarningLevel(var12, var13);
//     var11.setReserveRawExports(false);
//     var11.setSpecializeInitialModule(false);
//     com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var20 = null;
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     var19.setWarningLevel(var20, var21);
//     var19.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     var19.setCheckUnreachableCode(var25);
//     var19.setCollapseProperties(false);
//     com.google.javascript.rhino.JSDocInfo var29 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var30 = var29.getTypeNodes();
//     boolean var31 = var29.isInterface();
//     var29.addSuppression("");
//     boolean var34 = var29.isNoCompile();
//     java.util.Set var35 = var29.getParameterNames();
//     var19.setStripTypePrefixes(var35);
//     var11.setStripTypePrefixes(var35);
//     com.google.javascript.jscomp.JSModule[] var38 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var35);
//     com.google.javascript.jscomp.CompilerOptions var39 = new com.google.javascript.jscomp.CompilerOptions();
//     var39.setSourceMapOutputPath("module$hi!");
//     com.google.javascript.jscomp.CheckLevel var42 = null;
//     var39.setCheckMissingReturn(var42);
//     var39.setCollapsePropertiesOnExternTypes(false);
//     var39.setRemoveUnusedPrototypePropertiesInExterns(false);
//     var39.setShadowVariables(false);
//     var6.init(var10, var38, var39);
// 
//   }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test360"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    boolean var37 = var11.hasChild(var13);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
    boolean var40 = var39.isGetElem();
    boolean var41 = var39.isNull();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var43 = var39.srcref(var42);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    boolean var46 = var45.isGetElem();
    boolean var47 = var45.isNull();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var49 = var45.srcref(var48);
    com.google.javascript.rhino.Node var50 = var43.useSourceInfoFromForTree(var49);
    boolean var51 = var43.hasMoreThanOneChild();
    var11.addChildrenToBack(var43);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.tryCatch(var43, var54);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test361"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", true);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    boolean var34 = var33.isGetElem();
    boolean var35 = var33.isNull();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var37 = var33.srcref(var36);
    com.google.javascript.rhino.Node var40 = new com.google.javascript.rhino.Node(100, var31, var36, 0, 0);
    com.google.javascript.rhino.JSDocInfo var41 = var36.getJSDocInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var42 = var0.isPropertyTestFunction(var36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test362"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    var3.clearAst();
    com.google.javascript.jscomp.SourceFile var6 = new com.google.javascript.jscomp.SourceFile("module$hi!");
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var6, true);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var11 = null;
    var10.setJSDocInfo(var11);
    boolean var13 = var10.isAssignAdd();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var16 = null;
    var15.setJSDocInfo(var16);
    boolean var18 = var15.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.throwNode(var15);
    com.google.javascript.rhino.Node var20 = var10.srcrefTree(var19);
    boolean var21 = var20.isLocalResultCall();
    int var22 = var20.getSideEffectFlags();
    com.google.javascript.rhino.InputId var24 = new com.google.javascript.rhino.InputId("");
    var20.setInputId(var24);
    com.google.javascript.jscomp.CompilerInput var27 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var8, var24, false);
    java.lang.String var28 = var24.toString();
    com.google.javascript.jscomp.CompilerInput var30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var24, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var31 = var30.getPathRelativeToClosureBase();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "InputId: "+ "'", var28.equals("InputId: "));

  }

  public void test363() {}
//   public void test363() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test363"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     int var9 = var6.getWarningCount();
//     com.google.javascript.jscomp.Compiler.IntermediateState var10 = var6.getState();
//     boolean var11 = var6.isIdeMode();
// 
//   }

  public void test364() {}
//   public void test364() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test364"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSError[] var9 = var6.getErrors();
//     com.google.javascript.jscomp.NodeTraversal.Callback var10 = null;
//     com.google.javascript.jscomp.NodeTraversal var11 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var6, var10);
//     com.google.javascript.rhino.JSDocInfo var12 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var13 = var12.getTypeNodes();
//     boolean var14 = var12.isInterface();
//     boolean var15 = var12.isHidden();
//     com.google.javascript.rhino.Node var16 = var12.getAssociatedNode();
//     boolean var17 = var12.isConstructor();
//     java.util.Collection var18 = var12.getReferences();
//     java.util.List var19 = var12.getThrownTypes();
//     var11.traverseRoots(var19);
//     com.google.javascript.jscomp.Compiler var21 = var11.getCompiler();
//     com.google.javascript.jscomp.JSSourceFile var22 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var23 = new com.google.javascript.jscomp.JSSourceFile[] { var22};
//     com.google.javascript.jscomp.JSSourceFile var24 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var25 = new com.google.javascript.jscomp.JSSourceFile[] { var24};
//     com.google.javascript.jscomp.CompilerOptions var26 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticType var29 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var30 = com.google.javascript.jscomp.DiagnosticGroup.forType(var29);
//     com.google.javascript.jscomp.CheckLevel var31 = null;
//     var26.setWarningLevel(var30, var31);
//     var26.setReplaceStringsPlaceholderToken("goog.abstractMethod");
//     var21.init(var23, var25, var26);
// 
//   }

  public void test365() {}
//   public void test365() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test365"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     boolean var1 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var0);
// 
//   }

  public void test366() {}
//   public void test366() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test366"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     java.util.Collection var5 = var3.getRequires();
// 
//   }

  public void test367() {}
//   public void test367() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test367"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSError[] var9 = var6.getErrors();
//     com.google.javascript.jscomp.JSSourceFile var10 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var11 = new com.google.javascript.jscomp.JSSourceFile[] { var10};
//     com.google.javascript.jscomp.JSModule[] var12 = null;
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticType var16 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var17 = com.google.javascript.jscomp.DiagnosticGroup.forType(var16);
//     com.google.javascript.jscomp.CheckLevel var18 = null;
//     var13.setWarningLevel(var17, var18);
//     com.google.javascript.jscomp.CheckLevel var20 = null;
//     var13.setBrokenClosureRequiresLevel(var20);
//     var6.init(var11, var12, var13);
// 
//   }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test368"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isInterface();
    java.lang.String var3 = var0.getLicense();
    java.lang.String var4 = var0.getMeaning();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test369"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.ObjectType var8 = var7.getParentScope();
    com.google.javascript.rhino.ErrorReporter var9 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var9);
    com.google.javascript.rhino.jstype.JSType var11 = null;
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    com.google.javascript.rhino.jstype.FunctionType var16 = var10.createFunctionType(var11, var13);
    com.google.javascript.rhino.jstype.JSType var18 = null;
    var10.unregisterPropertyOnType("hi!", var18);
    java.lang.Iterable var21 = var10.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var22 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var22);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    com.google.javascript.rhino.jstype.FunctionType var29 = var23.createFunctionType(var24, var26);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    var23.unregisterPropertyOnType("hi!", var31);
    java.lang.Iterable var34 = var23.getTypesWithProperty("hi!");
    java.lang.Iterable var36 = var23.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var38.createFunctionType(var39, var41);
    com.google.javascript.rhino.jstype.ObjectType var45 = var44.getParentScope();
    com.google.javascript.rhino.ErrorReporter var46 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var46);
    com.google.javascript.rhino.jstype.JSType var48 = null;
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var51 = null;
    var50.setJSDocInfo(var51);
    com.google.javascript.rhino.jstype.FunctionType var53 = var47.createFunctionType(var48, var50);
    boolean var54 = var53.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var55 = var53.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var56 = var23.createFunctionTypeWithNewThisType(var44, (com.google.javascript.rhino.jstype.ObjectType)var53);
    java.lang.String var57 = var53.getTemplateTypeName();
    var53.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var59 = var53.toMaybeFunctionType();
    var10.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var53);
    var7.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var53);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    boolean var63 = var7.isEquivalentTo(var62);
    com.google.javascript.rhino.ErrorReporter var64 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var64);
    com.google.javascript.rhino.jstype.JSType var66 = null;
    com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var69 = null;
    var68.setJSDocInfo(var69);
    com.google.javascript.rhino.jstype.FunctionType var71 = var65.createFunctionType(var66, var68);
    com.google.javascript.rhino.jstype.JSType var73 = null;
    var65.unregisterPropertyOnType("hi!", var73);
    java.lang.Iterable var76 = var65.getTypesWithProperty("hi!");
    java.lang.Iterable var78 = var65.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var79 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var80 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var79);
    com.google.javascript.rhino.jstype.JSType var81 = null;
    com.google.javascript.rhino.Node var83 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var84 = null;
    var83.setJSDocInfo(var84);
    com.google.javascript.rhino.jstype.FunctionType var86 = var80.createFunctionType(var81, var83);
    com.google.javascript.rhino.jstype.ObjectType var87 = var86.getParentScope();
    com.google.javascript.rhino.ErrorReporter var88 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var89 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var88);
    com.google.javascript.rhino.jstype.JSType var90 = null;
    com.google.javascript.rhino.Node var92 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var93 = null;
    var92.setJSDocInfo(var93);
    com.google.javascript.rhino.jstype.FunctionType var95 = var89.createFunctionType(var90, var92);
    boolean var96 = var95.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var97 = var95.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var98 = var65.createFunctionTypeWithNewThisType(var86, (com.google.javascript.rhino.jstype.ObjectType)var95);
    var7.setPrototypeBasedOn((com.google.javascript.rhino.jstype.ObjectType)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test370"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("NAME \n    NAME \n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(NAME \n    NAME \n)"+ "'", var1.equals("(NAME \n    NAME \n)"));

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test371"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    boolean var15 = var13.isNull();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var17 = var13.srcref(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    boolean var20 = var19.isGetElem();
    boolean var21 = var19.isNull();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var23 = var19.srcref(var22);
    com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
    com.google.javascript.rhino.ErrorReporter var25 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    com.google.javascript.rhino.jstype.FunctionType var32 = var26.createFunctionType(var27, var29);
    com.google.javascript.rhino.jstype.ObjectType var33 = var1.createObjectType("goog.abstractMethod", var24, (com.google.javascript.rhino.jstype.ObjectType)var32);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    boolean var44 = var41.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
    com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
    com.google.javascript.rhino.ErrorReporter var47 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
    com.google.javascript.rhino.jstype.JSType var49 = null;
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var52 = null;
    var51.setJSDocInfo(var52);
    com.google.javascript.rhino.jstype.FunctionType var54 = var48.createFunctionType(var49, var51);
    com.google.javascript.rhino.jstype.ObjectType var55 = var54.getParentScope();
    com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var36, (com.google.javascript.rhino.jstype.JSType)var55);
    com.google.javascript.rhino.jstype.EnumType var57 = var56.toMaybeEnumType();
    com.google.javascript.rhino.jstype.EnumElementType var58 = var56.getElementsType();
    boolean var60 = var58.hasProperty("LinkedGraph");
    com.google.javascript.rhino.ErrorReporter var61 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var61);
    com.google.javascript.rhino.ErrorReporter var63 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var63);
    com.google.javascript.rhino.jstype.JSType var65 = null;
    com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var68 = null;
    var67.setJSDocInfo(var68);
    com.google.javascript.rhino.jstype.FunctionType var70 = var64.createFunctionType(var65, var67);
    com.google.javascript.rhino.jstype.FunctionType var72 = var70.getBindReturnType(0);
    com.google.javascript.rhino.jstype.JSType var77 = var62.getType((com.google.javascript.rhino.jstype.StaticScope)var70, "NAME ", "module$hi!", 0, 100);
    boolean var78 = var77.isStringObjectType();
    boolean var79 = var58.isSubtype(var77);
    boolean var80 = var58.canBeCalled();
    boolean var81 = var58.isNullable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test372"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    var0.setSourceMapOutputPath("module$hi!");
    com.google.javascript.jscomp.CheckLevel var3 = null;
    var0.setCheckMissingReturn(var3);
    var0.setCollapsePropertiesOnExternTypes(false);
    var0.setDefineToDoubleLiteral("goog.exportProperty", (-1.0d));

  }

  public void test373() {}
//   public void test373() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test373"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var6.unregisterPropertyOnType("hi!", var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.JSDocInfo var17 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var18 = var17.getTypeNodes();
//     boolean var19 = var17.isInterface();
//     var17.addSuppression("");
//     boolean var22 = var17.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var23 = var17.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var24 = var17.getVisibility();
//     java.util.List var25 = var17.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var26 = var6.createFunctionType(var16, var25);
//     com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var25, var27);
//     java.lang.String var29 = var2.getAstDotGraph();
//     boolean var30 = var2.isTypeCheckingEnabled();
// 
//   }

  public void test374() {}
//   public void test374() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test374"); }
// 
// 
//     java.io.PrintStream var0 = null;
//     com.google.javascript.jscomp.Compiler var1 = new com.google.javascript.jscomp.Compiler(var0);
//     var1.check();
// 
//   }

  public void test375() {}
//   public void test375() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test375"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     boolean var7 = var3.isExtern();
//     com.google.javascript.jscomp.CompilerInput var10 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, "TRUE", false);
// 
//   }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test376"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var3 = var1.recordBlockDescription("module$hi!");
    boolean var4 = var1.recordJavaDispatch();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test377"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.Node.newString(38, "NAME \n    NAME \n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test378() {}
//   public void test378() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test378"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     boolean var2 = var1.isGetElem();
//     boolean var3 = var1.isNull();
//     boolean var4 = var1.isDebugger();
//     var1.setString("");
//     com.google.javascript.rhino.Node var7 = null;
//     boolean var8 = var1.isEquivalentTo(var7);
// 
//   }

  public void test379() {}
//   public void test379() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test379"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     java.util.Map var2 = null;
//     var0.checkForCallingConventionDefiningCalls(var1, var2);
//     boolean var5 = var0.isSuperClassReference("LinkedGraph");
//     com.google.javascript.rhino.ErrorReporter var6 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
//     var7.identifyNonNullableName("");
//     boolean var11 = var7.hasNamespace("");
//     com.google.javascript.rhino.jstype.FunctionBuilder var12 = new com.google.javascript.rhino.jstype.FunctionBuilder(var7);
//     com.google.javascript.jscomp.Scope var13 = null;
//     java.util.List var14 = null;
//     java.util.Map var15 = null;
//     var0.defineDelegateProxyPrototypeProperties(var7, var13, var14, var15);
//     com.google.javascript.rhino.jstype.JSType var17 = null;
//     java.util.List var18 = null;
//     com.google.javascript.rhino.jstype.FunctionType var19 = var7.createFunctionTypeWithVarArgs(var17, var18);
// 
//   }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test380"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    boolean var24 = var23.isLocalResultCall();
    int var25 = var23.getSideEffectFlags();
    com.google.javascript.rhino.InputId var27 = new com.google.javascript.rhino.InputId("");
    var23.setInputId(var27);
    var11.setInputId(var27);
    boolean var30 = var11.isCatch();
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    boolean var35 = var32.isAssignAdd();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.throwNode(var37);
    com.google.javascript.rhino.Node var42 = var32.srcrefTree(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var45 = null;
    var44.setJSDocInfo(var45);
    boolean var47 = var44.isAssignAdd();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var50 = null;
    var49.setJSDocInfo(var50);
    boolean var52 = var49.isAssignAdd();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.throwNode(var49);
    com.google.javascript.rhino.Node var54 = var44.srcrefTree(var53);
    var32.addChildrenToFront(var44);
    boolean var56 = var32.isContinue();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.name("");
    boolean var59 = var58.isGetElem();
    boolean var60 = var58.isNull();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var62 = var58.srcref(var61);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.name("");
    var62.addChildrenToFront(var64);
    boolean var66 = var32.isEquivalentToTyped(var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var67 = com.google.javascript.rhino.IR.getprop(var11, var62);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test381"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
    boolean var4 = var3.isGetElem();
    boolean var5 = var3.isNull();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var7 = var3.srcref(var6);
    com.google.javascript.rhino.Node var10 = new com.google.javascript.rhino.Node(100, var1, var6, 0, 0);
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    boolean var15 = var12.isAssignAdd();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    boolean var20 = var17.isAssignAdd();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.throwNode(var17);
    com.google.javascript.rhino.Node var22 = var12.srcrefTree(var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var25 = null;
    var24.setJSDocInfo(var25);
    boolean var27 = var24.isAssignAdd();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    boolean var32 = var29.isAssignAdd();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.throwNode(var29);
    com.google.javascript.rhino.Node var34 = var24.srcrefTree(var33);
    var12.addChildrenToFront(var24);
    boolean var36 = var12.isContinue();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    boolean var39 = var38.isGetElem();
    boolean var40 = var38.isNull();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var42 = var38.srcref(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    var42.addChildrenToFront(var44);
    boolean var46 = var12.isEquivalentToTyped(var42);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var49 = null;
    var48.setJSDocInfo(var49);
    boolean var51 = var48.isAssignAdd();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var54 = null;
    var53.setJSDocInfo(var54);
    boolean var56 = var53.isAssignAdd();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.throwNode(var53);
    com.google.javascript.rhino.Node var58 = var48.srcrefTree(var57);
    java.lang.Iterable var59 = var48.children();
    boolean var60 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var48);
    var42.addChildToFront(var48);
    java.util.Collection var62 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var48);
    com.google.javascript.rhino.Node var63 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.addChildBefore(var48, var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test382() {}
//   public void test382() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test382"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.lang.String var4 = var3.getCode();
//     com.google.javascript.rhino.InputId var5 = var3.getInputId();
//     com.google.javascript.rhino.InputId var6 = null;
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var6, false);
//     java.lang.String var10 = var8.getLine(10);
// 
//   }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test383"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.PropertyRenamingPolicy var1 = com.google.javascript.jscomp.PropertyRenamingPolicy.valueOf("NAME \n    NAME \n");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test384() {}
//   public void test384() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test384"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = null;
//     com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var4 = null;
//     var3.setJSDocInfo(var4);
//     boolean var6 = var3.isAssignAdd();
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var9 = null;
//     var8.setJSDocInfo(var9);
//     boolean var11 = var8.isAssignAdd();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
//     com.google.javascript.rhino.Node var13 = var3.srcrefTree(var12);
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
//     boolean var16 = var15.isGetElem();
//     var15.detachChildren();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.add(var3, var15);
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var21 = null;
//     var20.setJSDocInfo(var21);
//     boolean var23 = var20.isAssignAdd();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var26 = null;
//     var25.setJSDocInfo(var26);
//     boolean var28 = var25.isAssignAdd();
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.throwNode(var25);
//     com.google.javascript.rhino.Node var30 = var20.srcrefTree(var29);
//     com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var33 = null;
//     var32.setJSDocInfo(var33);
//     boolean var35 = var32.isAssignAdd();
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var38 = null;
//     var37.setJSDocInfo(var38);
//     boolean var40 = var37.isAssignAdd();
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.throwNode(var37);
//     com.google.javascript.rhino.Node var42 = var32.srcrefTree(var41);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var45 = null;
//     var44.setJSDocInfo(var45);
//     boolean var47 = var44.isAssignAdd();
//     com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var50 = null;
//     var49.setJSDocInfo(var50);
//     boolean var52 = var49.isAssignAdd();
//     com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.throwNode(var49);
//     com.google.javascript.rhino.Node var54 = var44.srcrefTree(var53);
//     var32.addChildrenToFront(var44);
//     boolean var56 = var30.hasChild(var32);
//     boolean var57 = var32.isBlock();
//     com.google.javascript.rhino.Node var60 = new com.google.javascript.rhino.Node(10, var1, var15, var32, 10, 38);
// 
//   }

  public void test385() {}
//   public void test385() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test385"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.Region var11 = var6.getSourceRegion("hi!. hi! at hi! line (unknown line) : (unknown column)", 0);
//     com.google.javascript.jscomp.SymbolTable var12 = var6.buildKnownSymbolTable();
// 
//   }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test386"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    com.google.javascript.rhino.ErrorReporter var4 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var4);
    com.google.javascript.rhino.jstype.JSType var6 = null;
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    com.google.javascript.rhino.jstype.FunctionType var11 = var5.createFunctionType(var6, var8);
    com.google.javascript.rhino.jstype.JSType var13 = null;
    var5.unregisterPropertyOnType("hi!", var13);
    java.lang.Iterable var16 = var5.getTypesWithProperty("hi!");
    java.lang.Iterable var18 = var5.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var19 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var19);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var24 = null;
    var23.setJSDocInfo(var24);
    com.google.javascript.rhino.jstype.FunctionType var26 = var20.createFunctionType(var21, var23);
    com.google.javascript.rhino.jstype.ObjectType var27 = var26.getParentScope();
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
    boolean var36 = var35.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var37 = var35.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var38 = var5.createFunctionTypeWithNewThisType(var26, (com.google.javascript.rhino.jstype.ObjectType)var35);
    java.lang.String var39 = var35.getTemplateTypeName();
    var35.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var41 = var35.toMaybeFunctionType();
    java.lang.String var42 = var35.toString();
    boolean var43 = var35.isRegexpType();
    var35.clearResolved();
    com.google.javascript.rhino.jstype.JSType var45 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var35);
    boolean var46 = var45.isRegexpType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "function (): ?"+ "'", var42.equals("function (): ?"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test387() {}
//   public void test387() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test387"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     var2.parse();
// 
//   }

  public void test388() {}
//   public void test388() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test388"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var2, var4);
//     com.google.javascript.jscomp.PassConfig var6 = null;
//     var2.setPassConfig(var6);
// 
//   }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test389"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var26);
    com.google.javascript.rhino.jstype.ObjectType var28 = var26.dereference();
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    var30.identifyNonNullableName("");
    boolean var34 = var30.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var35 = new com.google.javascript.rhino.jstype.FunctionBuilder(var30);
    com.google.javascript.rhino.ErrorReporter var36 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var36);
    com.google.javascript.rhino.jstype.JSType var38 = null;
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var41 = null;
    var40.setJSDocInfo(var41);
    com.google.javascript.rhino.jstype.FunctionType var43 = var37.createFunctionType(var38, var40);
    boolean var44 = var43.isGlobalThisType();
    com.google.javascript.rhino.jstype.ObjectType var45 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType)var43);
    com.google.javascript.rhino.jstype.JSType var46 = var45.collapseUnion();
    com.google.javascript.rhino.jstype.FunctionBuilder var47 = var35.withReturnType(var46);
    boolean var48 = var28.differsFrom(var46);
    boolean var49 = var46.matchesNumberContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test390"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordInterface();
    boolean var3 = var1.isPopulated();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var6 = null;
    var5.setJSDocInfo(var6);
    boolean var8 = var5.isNE();
    boolean var9 = var5.isFor();
    com.google.javascript.rhino.JSDocInfo var10 = var1.build(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = var5.getExistingIntProp(38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test391"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    com.google.javascript.jscomp.CodingConvention.SubclassRelationship var26 = var0.getClassesDefinedByCall(var2);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var29 = null;
    var28.setJSDocInfo(var29);
    boolean var31 = var28.isAssignAdd();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var34 = null;
    var33.setJSDocInfo(var34);
    boolean var36 = var33.isAssignAdd();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.throwNode(var33);
    com.google.javascript.rhino.Node var38 = var28.srcrefTree(var37);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var41 = null;
    var40.setJSDocInfo(var41);
    boolean var43 = var40.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var46 = null;
    var45.setJSDocInfo(var46);
    boolean var48 = var45.isAssignAdd();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.throwNode(var45);
    com.google.javascript.rhino.Node var50 = var40.srcrefTree(var49);
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var53 = null;
    var52.setJSDocInfo(var53);
    boolean var55 = var52.isAssignAdd();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var58 = null;
    var57.setJSDocInfo(var58);
    boolean var60 = var57.isAssignAdd();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.throwNode(var57);
    com.google.javascript.rhino.Node var62 = var52.srcrefTree(var61);
    var40.addChildrenToFront(var52);
    boolean var64 = var38.hasChild(var40);
    boolean var65 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var40);
    boolean var66 = var40.isNull();
    com.google.javascript.rhino.JSDocInfo var67 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var68 = var67.getTypeNodes();
    boolean var69 = var67.isInterface();
    boolean var70 = var67.isHidden();
    com.google.javascript.rhino.Node var71 = var67.getAssociatedNode();
    boolean var72 = var67.isConstructor();
    int var73 = var67.getParameterCount();
    var40.setJSDocInfo(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var75 = var0.isPropertyTestFunction(var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test392"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isInterface();
    boolean var3 = var0.isImplicitCast();
    java.lang.String var4 = var0.getLicense();
    com.google.javascript.rhino.JSTypeExpression var5 = var0.getThisType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test393"); }


    java.util.logging.Logger var0 = null;
    com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
    com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
    com.google.javascript.rhino.ErrorReporter var3 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var3);
    com.google.javascript.rhino.jstype.JSType var5 = null;
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    com.google.javascript.rhino.jstype.FunctionType var10 = var4.createFunctionType(var5, var7);
    com.google.javascript.rhino.jstype.JSType var12 = null;
    var4.unregisterPropertyOnType("hi!", var12);
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    boolean var17 = var16.isGetElem();
    boolean var18 = var16.isNull();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var20 = var16.srcref(var19);
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
    boolean var23 = var22.isGetElem();
    boolean var24 = var22.isNull();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var26 = var22.srcref(var25);
    com.google.javascript.rhino.Node var27 = var20.useSourceInfoFromForTree(var26);
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
    com.google.javascript.rhino.jstype.ObjectType var36 = var4.createObjectType("goog.abstractMethod", var27, (com.google.javascript.rhino.jstype.ObjectType)var35);
    com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var40 = null;
    var39.setJSDocInfo(var40);
    boolean var42 = var39.isAssignAdd();
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var45 = null;
    var44.setJSDocInfo(var45);
    boolean var47 = var44.isAssignAdd();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.throwNode(var44);
    com.google.javascript.rhino.Node var49 = var39.srcrefTree(var48);
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var55 = null;
    var54.setJSDocInfo(var55);
    com.google.javascript.rhino.jstype.FunctionType var57 = var51.createFunctionType(var52, var54);
    com.google.javascript.rhino.jstype.ObjectType var58 = var57.getParentScope();
    com.google.javascript.rhino.jstype.EnumType var59 = var4.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var39, (com.google.javascript.rhino.jstype.JSType)var58);
    com.google.javascript.rhino.jstype.EnumType var60 = var59.toMaybeEnumType();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.name("");
    boolean var64 = var63.isGetElem();
    boolean var65 = var63.isNull();
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var67 = var63.srcref(var66);
    boolean var68 = var60.defineElement("module$hi!", var66);
    com.google.javascript.jscomp.NodeTraversal.Callback var69 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.NodeTraversal.traverse((com.google.javascript.jscomp.AbstractCompiler)var2, var66, var69);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test394"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isAdd();
    boolean var7 = var1.getBooleanProp(100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    boolean var12 = var9.isDebugger();
    boolean var13 = var9.isArrayLit();
    var1.addChildToBack(var9);
    var9.setSourceEncodedPositionForTree(0);
    boolean var17 = var9.isReturn();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.breakNode(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test395() {}
//   public void test395() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test395"); }
// 
// 
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     boolean var3 = var2.isGetElem();
//     boolean var4 = var2.isNull();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var6 = var2.srcref(var5);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var7};
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
//     java.lang.Iterable var10 = var9.siblings();
//     com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var13 = null;
//     var12.setJSDocInfo(var13);
//     boolean var15 = var12.isNE();
//     boolean var16 = var12.isFor();
//     var9.addChildrenToBack(var12);
//     com.google.javascript.jscomp.DiagnosticType var20 = com.google.javascript.jscomp.DiagnosticType.error("", "goog.abstractMethod");
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var24 = null;
//     var23.setJSDocInfo(var24);
//     boolean var26 = var23.isAssignAdd();
//     boolean var27 = var23.isGetElem();
//     boolean var28 = var23.isNumber();
//     com.google.javascript.jscomp.CheckLevel var29 = null;
//     com.google.javascript.jscomp.DiagnosticType var32 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var34 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var35 = com.google.javascript.jscomp.JSError.make("hi!", var23, var29, var32, var34);
//     com.google.javascript.jscomp.JSError var36 = com.google.javascript.jscomp.JSError.make("hi!. hi! at hi! line ", var9, var20, var34);
//     com.google.javascript.rhino.Node var37 = null;
//     var9.removeChild(var37);
// 
//   }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test396"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    var1.setLastGeneration(true);
    java.lang.Iterable var11 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod");
    com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var12 = null;
    var1.setResolveMode(var12);
    com.google.javascript.rhino.ErrorReporter var14 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    com.google.javascript.rhino.jstype.FunctionType var21 = var15.createFunctionType(var16, var18);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    var15.unregisterPropertyOnType("hi!", var23);
    java.lang.Iterable var26 = var15.getTypesWithProperty("hi!");
    java.lang.Iterable var28 = var15.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var29 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
    com.google.javascript.rhino.jstype.JSType var31 = null;
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var34 = null;
    var33.setJSDocInfo(var34);
    com.google.javascript.rhino.jstype.FunctionType var36 = var30.createFunctionType(var31, var33);
    com.google.javascript.rhino.jstype.ObjectType var37 = var36.getParentScope();
    com.google.javascript.rhino.ErrorReporter var38 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
    com.google.javascript.rhino.jstype.JSType var40 = null;
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var43 = null;
    var42.setJSDocInfo(var43);
    com.google.javascript.rhino.jstype.FunctionType var45 = var39.createFunctionType(var40, var42);
    boolean var46 = var45.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var47 = var45.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var48 = var15.createFunctionTypeWithNewThisType(var36, (com.google.javascript.rhino.jstype.ObjectType)var45);
    java.lang.String var49 = var45.getTemplateTypeName();
    var45.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var51 = var45.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.JSType var53 = var51.getPropertyType("hi!. hi! at hi! line (unknown line) : (unknown column)");
    com.google.javascript.rhino.jstype.JSType var54 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var51);
    com.google.javascript.rhino.jstype.FunctionType var56 = var51.getBindReturnType(1);
    java.lang.Iterable var57 = var56.getExtendedInterfaces();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test397"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.AnonymousFunctionNamingPolicy var1 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.valueOf("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test398() {}
//   public void test398() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test398"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     boolean var3 = var2.isGetElem();
//     boolean var4 = var2.isNull();
//     com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var6 = var2.srcref(var5);
//     com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
//     boolean var9 = var8.isGetElem();
//     boolean var10 = var8.isNull();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var12 = var8.srcref(var11);
//     com.google.javascript.rhino.Node var13 = var6.useSourceInfoFromForTree(var12);
//     boolean var14 = var6.hasMoreThanOneChild();
//     com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.regexp(var0, var6);
// 
//   }

  public void test399() {}
//   public void test399() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test399"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var2, var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     boolean var8 = var7.isGetElem();
//     boolean var9 = var7.isNull();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var11 = var7.srcref(var10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
//     var11.addChildrenToFront(var13);
//     com.google.javascript.rhino.JSTypeExpression var16 = new com.google.javascript.rhino.JSTypeExpression(var13, "hi!");
//     com.google.javascript.rhino.Node var17 = var16.getRoot();
//     boolean var18 = var17.isDec();
//     com.google.javascript.jscomp.DiagnosticType var21 = com.google.javascript.jscomp.DiagnosticType.error("function (): {1260910291}", "");
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var28 = null;
//     var27.setJSDocInfo(var28);
//     boolean var30 = var27.isAssignAdd();
//     boolean var31 = var27.isGetElem();
//     boolean var32 = var27.isNumber();
//     com.google.javascript.jscomp.CheckLevel var33 = null;
//     com.google.javascript.jscomp.DiagnosticType var36 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var38 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var39 = com.google.javascript.jscomp.JSError.make("hi!", var27, var33, var36, var38);
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     com.google.javascript.jscomp.DiagnosticType var46 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var47 = com.google.javascript.jscomp.DiagnosticGroup.forType(var46);
//     com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var51 = null;
//     var50.setJSDocInfo(var51);
//     boolean var53 = var50.isAssignAdd();
//     boolean var54 = var50.isGetElem();
//     boolean var55 = var50.isNumber();
//     com.google.javascript.jscomp.CheckLevel var56 = null;
//     com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var61 = new java.lang.String[] { ""};
//     com.google.javascript.jscomp.JSError var62 = com.google.javascript.jscomp.JSError.make("hi!", var50, var56, var59, var61);
//     com.google.javascript.jscomp.JSError var63 = com.google.javascript.jscomp.JSError.make("function (): {1260910291}", 0, 100, var43, var46, var61);
//     com.google.javascript.jscomp.JSError var64 = com.google.javascript.jscomp.JSError.make("hi!", 100, (-1), var36, var61);
//     var5.report(var17, var21, var61);
// 
//   }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test400"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", true);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.throwNode(var36);
    com.google.javascript.rhino.Node var41 = var31.srcrefTree(var40);
    com.google.javascript.rhino.Node.AncestorIterable var42 = var40.getAncestors();
    com.google.javascript.rhino.Node var43 = var40.getLastChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var44 = var0.getDelegateRelationship(var40);
    com.google.javascript.jscomp.GoogleCodingConvention var45 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var48 = var45.isExported("goog.abstractMethod", true);
    boolean var50 = var45.isConstant("function (): {1260910291}");
    boolean var52 = var45.isPrivate("LinkedGraph");
    java.lang.String var53 = var45.getGlobalObject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "goog.global"+ "'", var53.equals("goog.global"));

  }

  public void test401() {}
//   public void test401() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test401"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     boolean var4 = var2.isTypeCheckingEnabled();
// 
//   }

  public void test402() {}
//   public void test402() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test402"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.JSError[] var9 = var6.getErrors();
//     int var10 = var6.getWarningCount();
//     java.util.Map var11 = var6.getInputsById();
// 
//   }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test403"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.falseNode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setString("goog.abstractMethod");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test404() {}
//   public void test404() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test404"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var6.unregisterPropertyOnType("hi!", var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.JSDocInfo var17 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var18 = var17.getTypeNodes();
//     boolean var19 = var17.isInterface();
//     var17.addSuppression("");
//     boolean var22 = var17.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var23 = var17.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var24 = var17.getVisibility();
//     java.util.List var25 = var17.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var26 = var6.createFunctionType(var16, var25);
//     com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var25, var27);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var29 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var30 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2, var29);
//     com.google.javascript.jscomp.CodingConvention var31 = var2.getCodingConvention();
// 
//   }

  public void test405() {}
//   public void test405() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test405"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     var2.disableThreads();
//     com.google.javascript.jscomp.JSSourceFile var5 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var6 = new com.google.javascript.jscomp.JSSourceFile[] { var5};
//     com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var8 = null;
//     com.google.javascript.jscomp.CheckLevel var9 = null;
//     var7.setWarningLevel(var8, var9);
//     var7.setReserveRawExports(false);
//     var7.setSpecializeInitialModule(false);
//     com.google.javascript.jscomp.CompilerOptions var15 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var16 = null;
//     com.google.javascript.jscomp.CheckLevel var17 = null;
//     var15.setWarningLevel(var16, var17);
//     var15.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     var15.setCheckUnreachableCode(var21);
//     var15.setCollapseProperties(false);
//     com.google.javascript.rhino.JSDocInfo var25 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var26 = var25.getTypeNodes();
//     boolean var27 = var25.isInterface();
//     var25.addSuppression("");
//     boolean var30 = var25.isNoCompile();
//     java.util.Set var31 = var25.getParameterNames();
//     var15.setStripTypePrefixes(var31);
//     var7.setStripTypePrefixes(var31);
//     com.google.javascript.jscomp.JSModule[] var34 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var31);
//     com.google.javascript.jscomp.CompilerOptions var35 = new com.google.javascript.jscomp.CompilerOptions();
//     java.util.List var36 = null;
//     var35.setReplaceStringsFunctionDescriptions(var36);
//     var35.setInlineFunctions(true);
//     com.google.javascript.jscomp.Result var40 = var2.compile(var6, var34, var35);
// 
//   }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test406"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    var13.detachChildren();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.add(var1, var13);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    boolean var25 = var24.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var27 = null;
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    boolean var32 = var29.isNE();
    boolean var33 = var29.isAdd();
    boolean var35 = var29.getBooleanProp(100);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    boolean var38 = var37.isGetElem();
    boolean var39 = var37.isNull();
    boolean var40 = var37.isDebugger();
    boolean var41 = var37.isArrayLit();
    var29.addChildToBack(var37);
    boolean var43 = var29.hasMoreThanOneChild();
    boolean var44 = var24.defineInferredProperty("", var27, var29);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.exprResult(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.caseNode(var1, var45);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test407"); }


    java.lang.String var1 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$"+ "'", var1.equals("module$"));

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test408"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    java.lang.Iterable var12 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var14.createFunctionType(var15, var17);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var14.unregisterPropertyOnType("hi!", var22);
    java.lang.Iterable var25 = var14.getTypesWithProperty("hi!");
    java.lang.Iterable var27 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.getParentScope();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var38.createFunctionType(var39, var41);
    boolean var45 = var44.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var46 = var44.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var47 = var14.createFunctionTypeWithNewThisType(var35, (com.google.javascript.rhino.jstype.ObjectType)var44);
    java.lang.String var48 = var44.getTemplateTypeName();
    var44.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var50 = var44.toMaybeFunctionType();
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var44);
    var1.setTemplateTypeName("");
    com.google.javascript.rhino.ErrorReporter var54 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var54);
    com.google.javascript.rhino.jstype.JSType var56 = null;
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var59 = null;
    var58.setJSDocInfo(var59);
    com.google.javascript.rhino.jstype.FunctionType var61 = var55.createFunctionType(var56, var58);
    boolean var62 = var61.isGlobalThisType();
    com.google.javascript.rhino.jstype.FunctionType var63 = var61.toMaybeFunctionType();
    java.lang.String var64 = var63.getDisplayName();
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var63);
    int var66 = var63.getMinArguments();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test409() {}
//   public void test409() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test409"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = null;
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.defaultCase(var0);
// 
//   }

  public void test410() {}
//   public void test410() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test410"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     int var9 = var6.getWarningCount();
//     com.google.javascript.jscomp.Region var12 = var6.getSourceRegion("NAME \n    NAME \n", 100);
// 
//   }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test411"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.JSModule var2 = new com.google.javascript.jscomp.JSModule("TRUE");
    java.util.List var3 = var2.getInputs();
    java.util.Set var4 = var2.getAllDependencies();
    java.lang.String var5 = var2.toString();
    com.google.javascript.rhino.JSDocInfo var6 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var7 = var6.getTypeNodes();
    boolean var8 = var6.isInterface();
    boolean var9 = var6.isHidden();
    com.google.javascript.rhino.Node var10 = var6.getAssociatedNode();
    boolean var11 = var6.isConstructor();
    int var12 = var6.getParameterCount();
    int var13 = var6.getParameterCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.graph.Graph.GraphEdge var14 = var0.getFirstEdge((java.lang.Object)var5, (java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "TRUE"+ "'", var5.equals("TRUE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test412"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = var5.useSourceInfoFromForTree(var11);
    boolean var13 = var5.hasMoreThanOneChild();
    com.google.javascript.rhino.InputId var14 = var5.getInputId();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var17 = null;
    var16.setJSDocInfo(var17);
    boolean var19 = var16.isAssignAdd();
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    boolean var24 = var21.isAssignAdd();
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.throwNode(var21);
    com.google.javascript.rhino.Node var26 = var16.srcrefTree(var25);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var29 = null;
    var28.setJSDocInfo(var29);
    boolean var31 = var28.isAssignAdd();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var34 = null;
    var33.setJSDocInfo(var34);
    boolean var36 = var33.isAssignAdd();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.throwNode(var33);
    com.google.javascript.rhino.Node var38 = var28.srcrefTree(var37);
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var41 = null;
    var40.setJSDocInfo(var41);
    boolean var43 = var40.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var46 = null;
    var45.setJSDocInfo(var46);
    boolean var48 = var45.isAssignAdd();
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.throwNode(var45);
    com.google.javascript.rhino.Node var50 = var40.srcrefTree(var49);
    var28.addChildrenToFront(var40);
    boolean var52 = var26.hasChild(var28);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    boolean var55 = var54.isGetElem();
    boolean var56 = var54.isNull();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var58 = var54.srcref(var57);
    com.google.javascript.rhino.Node var60 = com.google.javascript.rhino.IR.name("");
    boolean var61 = var60.isGetElem();
    boolean var62 = var60.isNull();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var64 = var60.srcref(var63);
    com.google.javascript.rhino.Node var65 = var58.useSourceInfoFromForTree(var64);
    boolean var66 = var58.hasMoreThanOneChild();
    var26.addChildrenToBack(var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var68 = com.google.javascript.rhino.IR.catchNode(var5, var58);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test413"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    var0.setSyntheticBlockEndMarker("module$hi!");
    var0.setCollapseObjectLiterals(false);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test414"); }


    com.google.javascript.jscomp.CheckLevel var3 = null;
    com.google.javascript.jscomp.DiagnosticType var6 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
    com.google.javascript.jscomp.DiagnosticGroup var7 = com.google.javascript.jscomp.DiagnosticGroup.forType(var6);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var11 = null;
    var10.setJSDocInfo(var11);
    boolean var13 = var10.isAssignAdd();
    boolean var14 = var10.isGetElem();
    boolean var15 = var10.isNumber();
    com.google.javascript.jscomp.CheckLevel var16 = null;
    com.google.javascript.jscomp.DiagnosticType var19 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
    java.lang.String[] var21 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var22 = com.google.javascript.jscomp.JSError.make("hi!", var10, var16, var19, var21);
    com.google.javascript.jscomp.JSError var23 = com.google.javascript.jscomp.JSError.make("function (): {1260910291}", 0, 100, var3, var6, var21);
    com.google.javascript.jscomp.ClosureCodingConvention var24 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    boolean var29 = var26.isAssignAdd();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.throwNode(var31);
    com.google.javascript.rhino.Node var36 = var26.srcrefTree(var35);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    boolean var41 = var38.isAssignAdd();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var44 = null;
    var43.setJSDocInfo(var44);
    boolean var46 = var43.isAssignAdd();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.throwNode(var43);
    com.google.javascript.rhino.Node var48 = var38.srcrefTree(var47);
    var26.addChildrenToFront(var38);
    java.util.List var50 = var24.identifyTypeDeclarationCall(var26);
    boolean var53 = var24.isExported("", true);
    boolean var55 = var24.isConstantKey("goog.exportProperty");
    boolean var56 = var6.equals((java.lang.Object)var55);
    com.google.javascript.jscomp.DiagnosticType var59 = com.google.javascript.jscomp.DiagnosticType.error("NAME ", "function (): ?");
    int var60 = var6.compareTo(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 26);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test415"); }


    com.google.javascript.jscomp.JSModule var1 = new com.google.javascript.jscomp.JSModule("TRUE");
    java.util.List var2 = var1.getInputs();
    int var3 = var1.getDepth();
    com.google.javascript.jscomp.SourceFile.Generator var5 = null;
    com.google.javascript.jscomp.SourceFile var6 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var5);
    java.lang.String var7 = var6.getOriginalPath();
    java.lang.String var8 = var6.getName();
    var1.addFirst(var6);
    com.google.javascript.jscomp.parsing.Config var11 = null;
    com.google.javascript.rhino.head.ErrorReporter var12 = null;
    java.util.logging.Logger var13 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var14 = com.google.javascript.jscomp.parsing.ParserRunner.parse((com.google.javascript.rhino.jstype.StaticSourceFile)var6, "BLOCK", var11, var12, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "module$hi!"+ "'", var7.equals("module$hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "module$hi!"+ "'", var8.equals("module$hi!"));

  }

  public void test416() {}
//   public void test416() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test416"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var1);
//     java.lang.String var3 = var2.getName();
//     java.io.Reader var4 = var2.getCodeReader();
// 
//   }

  public void test417() {}
//   public void test417() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test417"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     boolean var2 = var1.isGetElem();
//     boolean var3 = var1.isNull();
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var5 = var1.srcref(var4);
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     var5.addChildrenToFront(var7);
//     com.google.javascript.rhino.ErrorReporter var10 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var10);
//     com.google.javascript.rhino.jstype.JSType var12 = null;
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     com.google.javascript.rhino.jstype.FunctionType var17 = var11.createFunctionType(var12, var14);
//     boolean var18 = var17.isGlobalThisType();
//     boolean var19 = var17.isConstructor();
//     var5.putProp(0, (java.lang.Object)var17);
//     boolean var21 = var17.matchesNumberContext();
//     com.google.javascript.rhino.jstype.FunctionType var22 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var17);
//     com.google.javascript.rhino.jstype.Visitor var23 = null;
//     java.lang.Object var24 = var22.visit(var23);
// 
//   }

  public void test418() {}
//   public void test418() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test418"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     var1.unregisterPropertyOnType("hi!", var9);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
//     boolean var14 = var13.isGetElem();
//     boolean var15 = var13.isNull();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var17 = var13.srcref(var16);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     boolean var20 = var19.isGetElem();
//     boolean var21 = var19.isNull();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var23 = var19.srcref(var22);
//     com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var30 = null;
//     var29.setJSDocInfo(var30);
//     com.google.javascript.rhino.jstype.FunctionType var32 = var26.createFunctionType(var27, var29);
//     com.google.javascript.rhino.jstype.ObjectType var33 = var1.createObjectType("goog.abstractMethod", var24, (com.google.javascript.rhino.jstype.ObjectType)var32);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var36.setJSDocInfo(var37);
//     boolean var39 = var36.isAssignAdd();
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var42 = null;
//     var41.setJSDocInfo(var42);
//     boolean var44 = var41.isAssignAdd();
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
//     com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var52 = null;
//     var51.setJSDocInfo(var52);
//     com.google.javascript.rhino.jstype.FunctionType var54 = var48.createFunctionType(var49, var51);
//     com.google.javascript.rhino.jstype.ObjectType var55 = var54.getParentScope();
//     com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var36, (com.google.javascript.rhino.jstype.JSType)var55);
//     boolean var57 = var56.isUnionType();
//     com.google.javascript.rhino.jstype.Visitor var58 = null;
//     java.lang.Object var59 = var56.visit(var58);
// 
//   }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test419"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    var3.clearAst();
    com.google.javascript.jscomp.SourceFile var6 = new com.google.javascript.jscomp.SourceFile("module$hi!");
    com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput(var6, true);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var11 = null;
    var10.setJSDocInfo(var11);
    boolean var13 = var10.isAssignAdd();
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var16 = null;
    var15.setJSDocInfo(var16);
    boolean var18 = var15.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.throwNode(var15);
    com.google.javascript.rhino.Node var20 = var10.srcrefTree(var19);
    boolean var21 = var20.isLocalResultCall();
    int var22 = var20.getSideEffectFlags();
    com.google.javascript.rhino.InputId var24 = new com.google.javascript.rhino.InputId("");
    var20.setInputId(var24);
    com.google.javascript.jscomp.CompilerInput var27 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var8, var24, false);
    java.lang.String var28 = var24.toString();
    com.google.javascript.jscomp.CompilerInput var30 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, var24, true);
    java.lang.String var31 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "InputId: "+ "'", var28.equals("InputId: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "InputId: "+ "'", var31.equals("InputId: "));

  }

  public void test420() {}
//   public void test420() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test420"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.CompilerInput var8 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, true);
// 
//   }

  public void test421() {}
//   public void test421() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test421"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     var3.clearAst();
// 
//   }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test422"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    boolean var5 = var1.isGetElem();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    boolean var15 = var12.isAssignAdd();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.throwNode(var12);
    com.google.javascript.rhino.Node var17 = var7.srcrefTree(var16);
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var25 = null;
    var24.setJSDocInfo(var25);
    boolean var27 = var24.isAssignAdd();
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.throwNode(var24);
    com.google.javascript.rhino.Node var29 = var19.srcrefTree(var28);
    boolean var30 = var29.isLocalResultCall();
    int var31 = var29.getSideEffectFlags();
    com.google.javascript.rhino.InputId var33 = new com.google.javascript.rhino.InputId("");
    var29.setInputId(var33);
    var17.setInputId(var33);
    boolean var36 = var17.isCatch();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    boolean var39 = var38.isGetElem();
    boolean var40 = var38.isNull();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var42 = var38.srcref(var41);
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    boolean var45 = var44.isGetElem();
    boolean var46 = var44.isNull();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var48 = var44.srcref(var47);
    com.google.javascript.rhino.Node var49 = var42.useSourceInfoFromForTree(var48);
    com.google.javascript.jscomp.ClosureCodingConvention var50 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var52 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var53 = null;
    var52.setJSDocInfo(var53);
    boolean var55 = var52.isAssignAdd();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var58 = null;
    var57.setJSDocInfo(var58);
    boolean var60 = var57.isAssignAdd();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.throwNode(var57);
    com.google.javascript.rhino.Node var62 = var52.srcrefTree(var61);
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var65 = null;
    var64.setJSDocInfo(var65);
    boolean var67 = var64.isAssignAdd();
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var70 = null;
    var69.setJSDocInfo(var70);
    boolean var72 = var69.isAssignAdd();
    com.google.javascript.rhino.Node var73 = com.google.javascript.rhino.IR.throwNode(var69);
    com.google.javascript.rhino.Node var74 = var64.srcrefTree(var73);
    var52.addChildrenToFront(var64);
    java.util.List var76 = var50.identifyTypeDeclarationCall(var52);
    boolean var79 = var50.isExported("", true);
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var82 = null;
    var81.setJSDocInfo(var82);
    boolean var84 = var81.isAssignAdd();
    com.google.javascript.rhino.Node var86 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var87 = null;
    var86.setJSDocInfo(var87);
    boolean var89 = var86.isAssignAdd();
    com.google.javascript.rhino.Node var90 = com.google.javascript.rhino.IR.throwNode(var86);
    com.google.javascript.rhino.Node var91 = var81.srcrefTree(var90);
    com.google.javascript.rhino.Node.AncestorIterable var92 = var90.getAncestors();
    com.google.javascript.rhino.Node var93 = var90.getLastChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var94 = var50.getDelegateRelationship(var90);
    com.google.javascript.rhino.Node var95 = var48.clonePropsFrom(var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.replaceChildAfter(var17, var95);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test423() {}
//   public void test423() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test423"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     com.google.javascript.rhino.jstype.JSType var9 = null;
//     var1.unregisterPropertyOnType("hi!", var9);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
//     boolean var14 = var13.isGetElem();
//     boolean var15 = var13.isNull();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var17 = var13.srcref(var16);
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     boolean var20 = var19.isGetElem();
//     boolean var21 = var19.isNull();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var23 = var19.srcref(var22);
//     com.google.javascript.rhino.Node var24 = var17.useSourceInfoFromForTree(var23);
//     com.google.javascript.rhino.ErrorReporter var25 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var25);
//     com.google.javascript.rhino.jstype.JSType var27 = null;
//     com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var30 = null;
//     var29.setJSDocInfo(var30);
//     com.google.javascript.rhino.jstype.FunctionType var32 = var26.createFunctionType(var27, var29);
//     com.google.javascript.rhino.jstype.ObjectType var33 = var1.createObjectType("goog.abstractMethod", var24, (com.google.javascript.rhino.jstype.ObjectType)var32);
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var37 = null;
//     var36.setJSDocInfo(var37);
//     boolean var39 = var36.isAssignAdd();
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var42 = null;
//     var41.setJSDocInfo(var42);
//     boolean var44 = var41.isAssignAdd();
//     com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
//     com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
//     com.google.javascript.rhino.ErrorReporter var47 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var47);
//     com.google.javascript.rhino.jstype.JSType var49 = null;
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var52 = null;
//     var51.setJSDocInfo(var52);
//     com.google.javascript.rhino.jstype.FunctionType var54 = var48.createFunctionType(var49, var51);
//     com.google.javascript.rhino.jstype.ObjectType var55 = var54.getParentScope();
//     com.google.javascript.rhino.jstype.EnumType var56 = var1.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var36, (com.google.javascript.rhino.jstype.JSType)var55);
//     com.google.javascript.rhino.jstype.FunctionType var57 = var56.getConstructor();
//     var56.clearResolved();
//     com.google.javascript.rhino.jstype.EnumType var59 = var56.toMaybeEnumType();
//     com.google.javascript.rhino.jstype.Visitor var60 = null;
//     java.lang.Object var61 = var56.visit(var60);
// 
//   }

  public void test424() {}
//   public void test424() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test424"); }
// 
// 
//     com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticType var3 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     com.google.javascript.jscomp.DiagnosticGroup var4 = com.google.javascript.jscomp.DiagnosticGroup.forType(var3);
//     com.google.javascript.jscomp.CheckLevel var5 = null;
//     var0.setWarningLevel(var4, var5);
//     com.google.javascript.jscomp.CompilerOptions.Reach var7 = null;
//     var0.setInlineFunctions(var7);
// 
//   }

  public void test425() {}
//   public void test425() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test425"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, true);
//     boolean var4 = var3.isExtern();
//     com.google.javascript.jscomp.Region var6 = var3.getRegion(1);
// 
//   }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test426"); }


    com.google.javascript.rhino.Node var1 = new com.google.javascript.rhino.Node(0);
    com.google.javascript.rhino.Node[] var2 = new com.google.javascript.rhino.Node[] { var1};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.arraylit(var2);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test427() {}
//   public void test427() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test427"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.lang.String var4 = var3.getCode();
//     java.util.Collection var5 = var3.getRequires();
// 
//   }

  public void test428() {}
//   public void test428() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test428"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     java.lang.String var9 = var6.getAstDotGraph();
//     com.google.javascript.jscomp.Compiler.IntermediateState var10 = var6.getState();
//     boolean var11 = var6.acceptEcmaScript5();
// 
//   }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test429"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.jstype.FunctionType var1 = null;
    com.google.javascript.rhino.jstype.FunctionType var2 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var3 = null;
    var0.applySubclassRelationship(var1, var2, var3);
    java.lang.String var5 = var0.getAbstractMethodName();
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var11 = null;
    var10.setJSDocInfo(var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var7.createFunctionType(var8, var10);
    boolean var14 = var13.matchesInt32Context();
    com.google.javascript.rhino.jstype.JSType var16 = null;
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isNE();
    boolean var22 = var18.isAdd();
    boolean var24 = var18.getBooleanProp(100);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    boolean var27 = var26.isGetElem();
    boolean var28 = var26.isNull();
    boolean var29 = var26.isDebugger();
    boolean var30 = var26.isArrayLit();
    var18.addChildToBack(var26);
    boolean var32 = var18.hasMoreThanOneChild();
    boolean var33 = var13.defineInferredProperty("", var16, var18);
    boolean var34 = var18.isLocalResultCall();
    boolean var35 = var18.isTry();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var36 = var0.isPropertyTestFunction(var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "goog.abstractMethod"+ "'", var5.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test430"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isAdd();
    boolean var7 = var1.getBooleanProp(100);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isNull();
    boolean var12 = var9.isDebugger();
    boolean var13 = var9.isArrayLit();
    var1.addChildToBack(var9);
    boolean var15 = var9.isRegExp();
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    int var19 = var17.getIntProp((-1));
    boolean var20 = var17.isTypeOf();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.catchNode(var9, var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test431"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test432"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var8 = var0.getTracerMode();
    boolean var9 = var0.assumeStrictThis();
    var0.setCheckSuspiciousCode(false);
    com.google.javascript.rhino.JSDocInfo var12 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var13 = var12.getTypeNodes();
    boolean var14 = var12.isInterface();
    var12.addSuppression("");
    boolean var17 = var12.isNoCompile();
    java.util.Set var18 = var12.getParameterNames();
    boolean var19 = var12.isExterns();
    boolean var20 = var12.shouldPreserveTry();
    int var21 = var12.getParameterCount();
    boolean var22 = var12.isDeprecated();
    java.util.List var23 = var12.getThrownTypes();
    var0.setSourceMapLocationMappings(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.paramList(var23);
    com.google.javascript.jscomp.deps.SortedDependencies var26 = new com.google.javascript.jscomp.deps.SortedDependencies(var23);
    java.util.List var27 = var26.getInputsWithoutProvides();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.DependencyInfo var29 = var26.getInputProviding("function (): {1260910291}");
      fail("Expected exception of type com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException");
    } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test433() {}
//   public void test433() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test433"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     com.google.javascript.jscomp.NodeTraversal.Callback var4 = null;
//     com.google.javascript.jscomp.NodeTraversal var5 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var2, var4);
//     java.lang.String var6 = var5.getSourceName();
//     com.google.javascript.jscomp.Compiler var7 = var5.getCompiler();
//     com.google.javascript.jscomp.JSModule var8 = var5.getModule();
// 
//   }

  public void test434() {}
//   public void test434() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test434"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var1 = null;
//     java.util.Map var2 = null;
//     var0.checkForCallingConventionDefiningCalls(var1, var2);
//     boolean var5 = var0.isSuperClassReference("LinkedGraph");
//     boolean var7 = var0.isConstant("hi!. hi! at hi! line (unknown line) : (unknown column)");
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     boolean var12 = var9.isNE();
//     boolean var13 = var9.isAdd();
//     boolean var14 = var9.isLabel();
//     var9.setSourceFileForTesting("module$hi!");
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var17 = var0.getClassesDefinedByCall(var9);
// 
//   }

  public void test435() {}
//   public void test435() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test435"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     boolean var17 = var14.isAssignAdd();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     boolean var22 = var19.isAssignAdd();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
//     com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
//     var2.addChildrenToFront(var14);
//     java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
//     boolean var29 = var0.isExported("", true);
//     boolean var31 = var0.isConstantKey("goog.exportProperty");
//     boolean var33 = var0.isPrivate("NAME ");
//     java.lang.String var34 = var0.getAbstractMethodName();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode((com.google.javascript.jscomp.CodingConvention)var0, "hi!. hi! at hi! line ");
//     com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
//     boolean var39 = var38.isGetElem();
//     boolean var40 = var38.isNull();
//     com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var42 = var38.srcref(var41);
//     com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
//     boolean var45 = var44.isGetElem();
//     boolean var46 = var44.isNull();
//     com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var48 = var44.srcref(var47);
//     com.google.javascript.rhino.Node var49 = var42.useSourceInfoFromForTree(var48);
//     com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.name("");
//     boolean var52 = var51.isGetElem();
//     boolean var53 = var51.isNull();
//     boolean var54 = var51.isDebugger();
//     com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.or(var49, var51);
//     com.google.javascript.jscomp.CodingConvention.SubclassRelationship var56 = var0.getClassesDefinedByCall(var49);
// 
//   }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test436"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    var1.addChildrenToFront(var13);
    boolean var25 = var1.isContinue();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    boolean var28 = var27.isGetElem();
    boolean var29 = var27.isNull();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var31 = var27.srcref(var30);
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
    var31.addChildrenToFront(var33);
    boolean var35 = var1.isEquivalentToTyped(var31);
    int var36 = var1.getLength();
    com.google.javascript.rhino.Node var38 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("LinkedGraph");
    boolean var39 = var38.isDebugger();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    boolean var42 = var41.isGetElem();
    boolean var43 = var41.isNull();
    boolean var44 = var41.isDebugger();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.replaceChild(var38, var41);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test437() {}
//   public void test437() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test437"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     com.google.javascript.jscomp.Region var11 = var6.getSourceRegion("hi!. hi! at hi! line (unknown line) : (unknown column)", 0);
//     com.google.javascript.jscomp.JSSourceFile var12 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var13 = new com.google.javascript.jscomp.JSSourceFile[] { var12};
//     com.google.javascript.jscomp.JSModule var15 = new com.google.javascript.jscomp.JSModule("TRUE");
//     java.util.List var16 = var15.getInputs();
//     var15.clearAsts();
//     com.google.javascript.jscomp.JSModule[] var18 = new com.google.javascript.jscomp.JSModule[] { var15};
//     com.google.javascript.jscomp.CompilerOptions var19 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var20 = null;
//     com.google.javascript.jscomp.CheckLevel var21 = null;
//     var19.setWarningLevel(var20, var21);
//     var19.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var25 = null;
//     var19.setCheckUnreachableCode(var25);
//     com.google.javascript.jscomp.CompilerOptions.TracerMode var27 = var19.getTracerMode();
//     boolean var28 = var19.assumeStrictThis();
//     var19.setCheckSuspiciousCode(false);
//     var19.setCheckControlStructures(false);
//     var6.init(var13, var18, var19);
// 
//   }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test438"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var0.hasNode((java.lang.Object)"");
    com.google.javascript.jscomp.graph.SubGraph var4 = var0.newSubGraph();
    boolean var5 = var0.isDirected();
    com.google.javascript.jscomp.CompilerOptions var6 = new com.google.javascript.jscomp.CompilerOptions();
    var6.setSourceMapOutputPath("module$hi!");
    var6.setGeneratePseudoNames(true);
    com.google.javascript.jscomp.CheckLevel var11 = null;
    var6.setBrokenClosureRequiresLevel(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var13 = var0.getInEdges((java.lang.Object)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test439() {}
//   public void test439() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test439"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.lang.String var4 = var3.getCode();
//     com.google.javascript.rhino.InputId var5 = var3.getInputId();
//     var3.clearAst();
//     java.util.logging.Logger var7 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var8 = new com.google.javascript.jscomp.LoggerErrorManager(var7);
//     com.google.javascript.jscomp.Compiler var9 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var8);
//     com.google.javascript.jscomp.Compiler.IntermediateState var10 = var9.getState();
//     com.google.javascript.jscomp.NodeTraversal.Callback var11 = null;
//     com.google.javascript.jscomp.NodeTraversal var12 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler)var9, var11);
//     com.google.javascript.rhino.Node var13 = var3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler)var9);
// 
//   }

  public void test440() {}
//   public void test440() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test440"); }
// 
// 
//     com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var2 = null;
//     var1.setJSDocInfo(var2);
//     boolean var4 = var1.isAssignAdd();
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var7 = null;
//     var6.setJSDocInfo(var7);
//     boolean var9 = var6.isAssignAdd();
//     com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
//     com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
//     com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var14 = null;
//     var13.setJSDocInfo(var14);
//     boolean var16 = var13.isAssignAdd();
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     boolean var21 = var18.isAssignAdd();
//     com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
//     com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
//     var1.addChildrenToFront(var13);
//     boolean var25 = var1.isContinue();
//     com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
//     boolean var28 = var27.isGetElem();
//     boolean var29 = var27.isNull();
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var31 = var27.srcref(var30);
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
//     var31.addChildrenToFront(var33);
//     boolean var35 = var1.isEquivalentToTyped(var31);
//     com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var38 = null;
//     var37.setJSDocInfo(var38);
//     boolean var40 = var37.isAssignAdd();
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var43 = null;
//     var42.setJSDocInfo(var43);
//     boolean var45 = var42.isAssignAdd();
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.throwNode(var42);
//     com.google.javascript.rhino.Node var47 = var37.srcrefTree(var46);
//     java.lang.Iterable var48 = var37.children();
//     boolean var49 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var37);
//     var31.addChildToFront(var37);
//     com.google.javascript.rhino.Node var52 = var37.getChildAtIndex(38);
// 
//   }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test441"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordInterface();
    java.util.Set var3 = null;
    boolean var4 = var1.recordModifies(var3);
    boolean var5 = var1.recordJavaDispatch();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    var11.addChildrenToFront(var13);
    com.google.javascript.rhino.JSTypeExpression var16 = new com.google.javascript.rhino.JSTypeExpression(var13, "hi!");
    boolean var17 = var1.recordBaseType(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var23 = null;
    var22.setJSDocInfo(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var19.createFunctionType(var20, var22);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var19.unregisterPropertyOnType("hi!", var27);
    java.lang.Iterable var30 = var19.getTypesWithProperty("hi!");
    java.lang.Iterable var32 = var19.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var34.createFunctionType(var35, var37);
    com.google.javascript.rhino.jstype.ObjectType var41 = var40.getParentScope();
    com.google.javascript.rhino.ErrorReporter var42 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
    com.google.javascript.rhino.jstype.JSType var44 = null;
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var47 = null;
    var46.setJSDocInfo(var47);
    com.google.javascript.rhino.jstype.FunctionType var49 = var43.createFunctionType(var44, var46);
    boolean var50 = var49.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var51 = var49.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var52 = var19.createFunctionTypeWithNewThisType(var40, (com.google.javascript.rhino.jstype.ObjectType)var49);
    java.lang.String var53 = var49.getTemplateTypeName();
    var49.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var55 = var49.toMaybeFunctionType();
    com.google.javascript.rhino.JSDocInfo var57 = new com.google.javascript.rhino.JSDocInfo();
    boolean var58 = var57.isHidden();
    boolean var59 = var57.hasBaseType();
    var55.setPropertyJSDocInfo("hi!", var57);
    com.google.javascript.rhino.jstype.ObjectType var61 = var55.toObjectType();
    com.google.javascript.rhino.ErrorReporter var62 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var62);
    com.google.javascript.rhino.jstype.JSType var64 = null;
    com.google.javascript.rhino.Node var66 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var67 = null;
    var66.setJSDocInfo(var67);
    com.google.javascript.rhino.jstype.FunctionType var69 = var63.createFunctionType(var64, var66);
    var63.setLastGeneration(true);
    java.lang.Iterable var73 = var63.getEachReferenceTypeWithProperty("goog.abstractMethod");
    var63.clearTemplateTypeName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSType var75 = var16.evaluate((com.google.javascript.rhino.jstype.StaticScope)var61, var63);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test442"); }


    com.google.javascript.rhino.Node var3 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var4 = null;
    var3.setJSDocInfo(var4);
    boolean var6 = var3.isAssignAdd();
    boolean var7 = var3.isGetElem();
    boolean var8 = var3.isNumber();
    com.google.javascript.jscomp.CheckLevel var9 = null;
    com.google.javascript.jscomp.DiagnosticType var12 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
    java.lang.String[] var14 = new java.lang.String[] { ""};
    com.google.javascript.jscomp.JSError var15 = com.google.javascript.jscomp.JSError.make("hi!", var3, var9, var12, var14);
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    boolean var20 = var17.isNE();
    boolean var21 = var17.isAdd();
    boolean var22 = var17.isLabel();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var25 = null;
    var24.setJSDocInfo(var25);
    boolean var27 = var24.isAssignAdd();
    com.google.javascript.rhino.Node var29 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var30 = null;
    var29.setJSDocInfo(var30);
    boolean var32 = var29.isAssignAdd();
    com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.throwNode(var29);
    com.google.javascript.rhino.Node var34 = var24.srcrefTree(var33);
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    boolean var44 = var41.isAssignAdd();
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.throwNode(var41);
    com.google.javascript.rhino.Node var46 = var36.srcrefTree(var45);
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var49 = null;
    var48.setJSDocInfo(var49);
    boolean var51 = var48.isAssignAdd();
    com.google.javascript.rhino.Node var53 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var54 = null;
    var53.setJSDocInfo(var54);
    boolean var56 = var53.isAssignAdd();
    com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.throwNode(var53);
    com.google.javascript.rhino.Node var58 = var48.srcrefTree(var57);
    var36.addChildrenToFront(var48);
    boolean var60 = var34.hasChild(var36);
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.Node.newNumber(0.0d);
    com.google.javascript.rhino.Node var63 = new com.google.javascript.rhino.Node(100, var3, var17, var34, var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var64 = var3.getDouble();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test443() {}
//   public void test443() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test443"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     int var9 = var6.getWarningCount();
//     com.google.javascript.jscomp.Compiler.IntermediateState var10 = var6.getState();
//     com.google.javascript.jscomp.JSSourceFile var11 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var12 = new com.google.javascript.jscomp.JSSourceFile[] { var11};
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var14 = null;
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     var13.setWarningLevel(var14, var15);
//     var13.setReserveRawExports(false);
//     var13.setSpecializeInitialModule(false);
//     com.google.javascript.jscomp.CompilerOptions var21 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var22 = null;
//     com.google.javascript.jscomp.CheckLevel var23 = null;
//     var21.setWarningLevel(var22, var23);
//     var21.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var27 = null;
//     var21.setCheckUnreachableCode(var27);
//     var21.setCollapseProperties(false);
//     com.google.javascript.rhino.JSDocInfo var31 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var32 = var31.getTypeNodes();
//     boolean var33 = var31.isInterface();
//     var31.addSuppression("");
//     boolean var36 = var31.isNoCompile();
//     java.util.Set var37 = var31.getParameterNames();
//     var21.setStripTypePrefixes(var37);
//     var13.setStripTypePrefixes(var37);
//     com.google.javascript.jscomp.JSModule[] var40 = com.google.javascript.jscomp.JSModule.sortJsModules((java.util.Collection)var37);
//     com.google.javascript.jscomp.CompilerOptions var41 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var42 = null;
//     com.google.javascript.jscomp.CheckLevel var43 = null;
//     var41.setWarningLevel(var42, var43);
//     var41.setReserveRawExports(false);
//     var41.setSpecializeInitialModule(false);
//     com.google.javascript.jscomp.Result var49 = var6.compile(var12, var40, var41);
// 
//   }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test444"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.String var1 = var0.getName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var2.createDirectedGraphNode((java.lang.Object)var3);
    java.util.List var5 = var0.getDirectedPredNodes(var4);
    var0.clearEdgeAnnotations();
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    boolean var10 = var9.isGetElem();
    boolean var11 = var9.isComma();
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var14.createFunctionType(var15, var17);
    boolean var21 = var20.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var22 = var20.getTypeOfThis();
    var9.putProp(0, (java.lang.Object)var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var24 = var0.isConnected((java.lang.Object)"function (): ?", (java.lang.Object)var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "LinkedGraph"+ "'", var1.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test445"); }


    com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
    com.google.javascript.jscomp.JsAst var3 = new com.google.javascript.jscomp.JsAst(var2);
    com.google.javascript.jscomp.CompilerInput var6 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst)var3, "goog.exportProperty", false);
    com.google.javascript.jscomp.SourceFile.Generator var8 = null;
    com.google.javascript.jscomp.SourceFile var9 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var8);
    java.lang.String var10 = var9.getOriginalPath();
    var9.setOriginalPath("goog.exportProperty");
    java.lang.String var13 = var9.getOriginalPath();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setSourceFile(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "module$hi!"+ "'", var10.equals("module$hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "goog.exportProperty"+ "'", var13.equals("goog.exportProperty"));

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test446"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.breakNode();
    int var1 = var0.getLength();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.exprResult(var0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test447() {}
//   public void test447() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test447"); }
// 
// 
//     com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.breakNode();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.rhino.Node var13 = var0.getChildBefore(var12);
// 
//   }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test448"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    var1.setLastGeneration(true);
    java.lang.Iterable var11 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod");
    com.google.javascript.rhino.ErrorReporter var12 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var12);
    com.google.javascript.rhino.jstype.JSType var14 = null;
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var17 = null;
    var16.setJSDocInfo(var17);
    com.google.javascript.rhino.jstype.FunctionType var19 = var13.createFunctionType(var14, var16);
    com.google.javascript.rhino.jstype.JSType var21 = null;
    var13.unregisterPropertyOnType("hi!", var21);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.JSDocInfo var24 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var25 = var24.getTypeNodes();
    boolean var26 = var24.isInterface();
    var24.addSuppression("");
    boolean var29 = var24.isNoCompile();
    com.google.javascript.rhino.JSTypeExpression var30 = var24.getTypedefType();
    com.google.javascript.rhino.JSDocInfo.Visibility var31 = var24.getVisibility();
    java.util.List var32 = var24.getThrownTypes();
    com.google.javascript.rhino.jstype.FunctionType var33 = var13.createFunctionType(var23, var32);
    com.google.javascript.rhino.Node var34 = var1.createParametersWithVarArgs(var32);
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    boolean var40 = var37.isAssignAdd();
    com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var43 = null;
    var42.setJSDocInfo(var43);
    boolean var45 = var42.isAssignAdd();
    com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.throwNode(var42);
    com.google.javascript.rhino.Node var47 = var37.srcrefTree(var46);
    com.google.javascript.rhino.Node.AncestorIterable var48 = var46.getAncestors();
    boolean var49 = var35.isEquivalentTo(var46);
    com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.Node.newNumber(0.0d);
    boolean var52 = var51.isDefaultCase();
    com.google.javascript.rhino.Node var53 = var46.clonePropsFrom(var51);
    com.google.javascript.rhino.Node.FileLevelJsDocBuilder var54 = var51.getJsDocBuilderForNode();
    com.google.javascript.rhino.Node var55 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.hook(var34, var51, var55);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test449() {}
//   public void test449() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test449"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var1);
//     java.lang.String var3 = var2.getOriginalPath();
//     var2.setOriginalPath("goog.exportProperty");
//     com.google.javascript.jscomp.JsAst var6 = new com.google.javascript.jscomp.JsAst(var2);
//     int var8 = var2.getLineOffset(1);
// 
//   }

  public void test450() {}
//   public void test450() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test450"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.lang.String var4 = var3.getCode();
//     com.google.javascript.rhino.InputId var5 = var3.getInputId();
//     java.util.Collection var6 = var3.getProvides();
// 
//   }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test451"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var1 = com.google.javascript.rhino.ScriptRuntime.getMessage0("NAME ");
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test452"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.throwNode(var5);
    com.google.javascript.rhino.Node[] var7 = new com.google.javascript.rhino.Node[] { var6};
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.block(var7);
    java.lang.Iterable var9 = var8.siblings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.continueNode(var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test453"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    boolean var5 = var1.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = var6.withSourceNode(var8);
    com.google.javascript.rhino.jstype.FunctionBuilder var14 = var6.forConstructor();
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var16.createFunctionType(var17, var19);
    com.google.javascript.rhino.jstype.JSType var24 = null;
    var16.unregisterPropertyOnType("hi!", var24);
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    boolean var29 = var28.isGetElem();
    boolean var30 = var28.isNull();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var32 = var28.srcref(var31);
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    boolean var35 = var34.isGetElem();
    boolean var36 = var34.isNull();
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var38 = var34.srcref(var37);
    com.google.javascript.rhino.Node var39 = var32.useSourceInfoFromForTree(var38);
    com.google.javascript.rhino.ErrorReporter var40 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var40);
    com.google.javascript.rhino.jstype.JSType var42 = null;
    com.google.javascript.rhino.Node var44 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var45 = null;
    var44.setJSDocInfo(var45);
    com.google.javascript.rhino.jstype.FunctionType var47 = var41.createFunctionType(var42, var44);
    com.google.javascript.rhino.jstype.ObjectType var48 = var16.createObjectType("goog.abstractMethod", var39, (com.google.javascript.rhino.jstype.ObjectType)var47);
    com.google.javascript.rhino.jstype.FunctionBuilder var49 = var6.withInferredReturnType((com.google.javascript.rhino.jstype.JSType)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var51 = var47.getTopMostDefiningType("hi!. hi! at hi! line ");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test454"); }


    com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
    com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
    java.lang.String var4 = var3.getCode();
    com.google.javascript.rhino.InputId var5 = var3.getInputId();
    var3.clearAst();
    com.google.javascript.jscomp.SourceFile var9 = com.google.javascript.jscomp.SourceFile.fromCode("hi!. hi! at hi! line ", "goog.abstractMethod");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setSourceFile(var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test455() {}
//   public void test455() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test455"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
//     boolean var1 = var0.isDirected();
//     java.lang.String var2 = var0.getName();
//     com.google.javascript.jscomp.DiagnosticType var5 = com.google.javascript.jscomp.DiagnosticType.error("", "hi!. hi! at hi! line (unknown line) : (unknown column)");
//     java.util.Iterator var6 = var0.getNeighborNodesIterator((java.lang.Object)"hi!. hi! at hi! line (unknown line) : (unknown column)");
// 
//   }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test456"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isInterface();
    var0.addSuppression("");
    boolean var5 = var0.isNoCompile();
    java.util.Set var6 = var0.getParameterNames();
    boolean var7 = var0.isExterns();
    boolean var8 = var0.shouldPreserveTry();
    int var9 = var0.getParameterCount();
    boolean var10 = var0.isDeprecated();
    var0.addSuppression("module$hi!");
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    boolean var29 = var26.isAssignAdd();
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.throwNode(var31);
    com.google.javascript.rhino.Node var36 = var26.srcrefTree(var35);
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var39 = null;
    var38.setJSDocInfo(var39);
    boolean var41 = var38.isAssignAdd();
    com.google.javascript.rhino.Node var43 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var44 = null;
    var43.setJSDocInfo(var44);
    boolean var46 = var43.isAssignAdd();
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.throwNode(var43);
    com.google.javascript.rhino.Node var48 = var38.srcrefTree(var47);
    var26.addChildrenToFront(var38);
    boolean var50 = var24.hasChild(var26);
    boolean var52 = var26.getBooleanProp((-1));
    boolean var53 = var26.isCase();
    var0.setAssociatedNode(var26);
    boolean var55 = var26.isDec();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test457"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isDefine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test458() {}
//   public void test458() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test458"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     java.util.logging.Logger var4 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var5 = new com.google.javascript.jscomp.LoggerErrorManager(var4);
//     com.google.javascript.jscomp.Compiler var6 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var5);
//     com.google.javascript.jscomp.JSError[] var7 = var6.getErrors();
//     var3.setCompiler((com.google.javascript.jscomp.AbstractCompiler)var6);
//     int var9 = var6.getWarningCount();
//     com.google.javascript.jscomp.SourceFile var10 = null;
//     com.google.javascript.jscomp.JSSourceFile var11 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var12 = new com.google.javascript.jscomp.JSSourceFile[] { var11};
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var14 = null;
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     var13.setWarningLevel(var14, var15);
//     var13.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     var13.setCheckUnreachableCode(var19);
//     var13.setCollapseProperties(false);
//     com.google.javascript.rhino.JSDocInfo var23 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var24 = var23.getTypeNodes();
//     boolean var25 = var23.isInterface();
//     var23.addSuppression("");
//     boolean var28 = var23.isNoCompile();
//     java.util.Set var29 = var23.getParameterNames();
//     var13.setStripTypePrefixes(var29);
//     var13.setOptimizeParameters(true);
//     var13.setExternExports(false);
//     java.util.Map var35 = null;
//     var13.setDefineReplacements(var35);
//     com.google.javascript.jscomp.Result var37 = var6.compile(var10, var12, var13);
// 
//   }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test459"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node.AncestorIterable var12 = var10.getAncestors();
    com.google.javascript.rhino.Node var13 = var10.getLastChild();
    boolean var14 = var13.isObjectLit();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.setSideEffectFlags(3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test460"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    java.lang.Iterable var12 = var1.getTypesWithProperty("hi!");
    java.lang.Iterable var14 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var15 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var15);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    com.google.javascript.rhino.jstype.FunctionType var22 = var16.createFunctionType(var17, var19);
    com.google.javascript.rhino.jstype.ObjectType var23 = var22.getParentScope();
    com.google.javascript.rhino.ErrorReporter var24 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var24);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var29 = null;
    var28.setJSDocInfo(var29);
    com.google.javascript.rhino.jstype.FunctionType var31 = var25.createFunctionType(var26, var28);
    boolean var32 = var31.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var33 = var31.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var34 = var1.createFunctionTypeWithNewThisType(var22, (com.google.javascript.rhino.jstype.ObjectType)var31);
    java.lang.String var35 = var31.getTemplateTypeName();
    var31.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var37 = var31.toMaybeFunctionType();
    com.google.javascript.rhino.JSDocInfo var39 = new com.google.javascript.rhino.JSDocInfo();
    boolean var40 = var39.isHidden();
    boolean var41 = var39.hasBaseType();
    var37.setPropertyJSDocInfo("hi!", var39);
    com.google.javascript.rhino.Node var43 = var37.getRootNode();
    boolean var44 = var37.isNominalType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test461() {}
//   public void test461() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test461"); }
// 
// 
//     com.google.javascript.jscomp.SourceAst var0 = null;
//     com.google.javascript.rhino.InputId var1 = null;
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var0, var1, false);
//     com.google.javascript.jscomp.SourceAst var4 = var3.getSourceAst();
//     com.google.javascript.jscomp.JSModule var5 = null;
//     var3.setModule(var5);
//     com.google.javascript.jscomp.SourceFile var7 = var3.getSourceFile();
// 
//   }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test462"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    boolean var13 = var12.isLocalResultCall();
    com.google.javascript.jscomp.ClosureCodingConvention var14 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
    boolean var17 = var16.isGetElem();
    boolean var18 = var16.isNull();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var20 = var16.srcref(var19);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.throwNode(var20);
    java.lang.String var22 = var14.getSingletonGetterClassName(var21);
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.name("");
    boolean var25 = var24.isGetElem();
    boolean var26 = var24.isNull();
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var28 = var24.srcref(var27);
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    var28.addChildrenToFront(var30);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var34.createFunctionType(var35, var37);
    boolean var41 = var40.isGlobalThisType();
    boolean var42 = var40.isConstructor();
    var28.putProp(0, (java.lang.Object)var40);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    boolean var46 = var45.isGetElem();
    boolean var47 = var45.isNull();
    com.google.javascript.rhino.Node var48 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var49 = var45.srcref(var48);
    com.google.javascript.rhino.Node var50 = new com.google.javascript.rhino.Node(0, var12, var21, var28, var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var51 = com.google.javascript.rhino.IR.neg(var49);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test463"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var20 = null;
    var19.setJSDocInfo(var20);
    boolean var22 = var19.isAssignAdd();
    com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
    com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
    var2.addChildrenToFront(var14);
    java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
    boolean var29 = var0.isExported("", true);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var32 = null;
    var31.setJSDocInfo(var32);
    boolean var34 = var31.isAssignAdd();
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    boolean var39 = var36.isAssignAdd();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.throwNode(var36);
    com.google.javascript.rhino.Node var41 = var31.srcrefTree(var40);
    com.google.javascript.rhino.Node.AncestorIterable var42 = var40.getAncestors();
    com.google.javascript.rhino.Node var43 = var40.getLastChild();
    com.google.javascript.jscomp.CodingConvention.DelegateRelationship var44 = var0.getDelegateRelationship(var40);
    com.google.javascript.jscomp.GoogleCodingConvention var45 = new com.google.javascript.jscomp.GoogleCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
    boolean var47 = var45.isValidEnumKey("module$hi!");
    com.google.javascript.rhino.Node var49 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var50 = null;
    var49.setJSDocInfo(var50);
    boolean var52 = var49.isNE();
    boolean var53 = var49.isOnlyModifiesThisCall();
    boolean var54 = var45.isOptionalParameter(var49);
    com.google.javascript.rhino.Node var56 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var58 = com.google.javascript.rhino.IR.name("");
    boolean var59 = var58.isGetElem();
    boolean var60 = var58.isNull();
    com.google.javascript.rhino.Node var61 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var62 = var58.srcref(var61);
    com.google.javascript.rhino.Node var65 = new com.google.javascript.rhino.Node(100, var56, var61, 0, 0);
    boolean var66 = var65.isBreak();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var67 = var45.isVarArgsParameter(var65);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test464"); }


    java.lang.String var1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("InputId: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "(InputId: )"+ "'", var1.equals("(InputId: )"));

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test465"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isNE();
    boolean var5 = var1.isAdd();
    var1.setWasEmptyNode(false);
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var10 = null;
    var9.setJSDocInfo(var10);
    boolean var12 = var9.isAssignAdd();
    com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var15 = null;
    var14.setJSDocInfo(var15);
    boolean var17 = var14.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.throwNode(var14);
    com.google.javascript.rhino.Node var19 = var9.srcrefTree(var18);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    boolean var24 = var21.isAssignAdd();
    com.google.javascript.rhino.Node var26 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var27 = null;
    var26.setJSDocInfo(var27);
    boolean var29 = var26.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.throwNode(var26);
    com.google.javascript.rhino.Node var31 = var21.srcrefTree(var30);
    var9.addChildrenToFront(var21);
    boolean var33 = var9.isContinue();
    com.google.javascript.rhino.Node var35 = com.google.javascript.rhino.IR.name("");
    boolean var36 = var35.isGetElem();
    boolean var37 = var35.isNull();
    com.google.javascript.rhino.Node var38 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var39 = var35.srcref(var38);
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    var39.addChildrenToFront(var41);
    boolean var43 = var9.isEquivalentToTyped(var39);
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var46 = null;
    var45.setJSDocInfo(var46);
    boolean var48 = var45.isAssignAdd();
    com.google.javascript.rhino.Node var50 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var51 = null;
    var50.setJSDocInfo(var51);
    boolean var53 = var50.isAssignAdd();
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.throwNode(var50);
    com.google.javascript.rhino.Node var55 = var45.srcrefTree(var54);
    java.lang.Iterable var56 = var45.children();
    boolean var57 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(var45);
    var39.addChildToFront(var45);
    java.util.Collection var59 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(var45);
    boolean var60 = var45.isInc();
    com.google.javascript.rhino.Node var62 = com.google.javascript.rhino.IR.number((-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.function(var1, var45, var62);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test466() {}
//   public void test466() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test466"); }
// 
// 
//     com.google.javascript.jscomp.CodingConvention var0 = null;
//     com.google.javascript.rhino.Node var2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(var0, "function (): ?");
// 
//   }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test467"); }


    com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
    com.google.javascript.rhino.jstype.FunctionType var1 = null;
    com.google.javascript.rhino.jstype.FunctionType var2 = null;
    com.google.javascript.jscomp.CodingConvention.SubclassType var3 = null;
    var0.applySubclassRelationship(var1, var2, var3);
    java.lang.String var5 = var0.getAbstractMethodName();
    boolean var7 = var0.isSuperClassReference("function (): ?");
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    com.google.javascript.rhino.jstype.JSType var17 = null;
    var9.unregisterPropertyOnType("hi!", var17);
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    boolean var22 = var21.isGetElem();
    boolean var23 = var21.isNull();
    com.google.javascript.rhino.Node var24 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var25 = var21.srcref(var24);
    com.google.javascript.rhino.Node var27 = com.google.javascript.rhino.IR.name("");
    boolean var28 = var27.isGetElem();
    boolean var29 = var27.isNull();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var31 = var27.srcref(var30);
    com.google.javascript.rhino.Node var32 = var25.useSourceInfoFromForTree(var31);
    com.google.javascript.rhino.ErrorReporter var33 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var33);
    com.google.javascript.rhino.jstype.JSType var35 = null;
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var38 = null;
    var37.setJSDocInfo(var38);
    com.google.javascript.rhino.jstype.FunctionType var40 = var34.createFunctionType(var35, var37);
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var46 = null;
    var45.setJSDocInfo(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var42.createFunctionType(var43, var45);
    boolean var49 = var48.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var50 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var51 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var50);
    com.google.javascript.rhino.jstype.JSType var52 = null;
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var55 = null;
    var54.setJSDocInfo(var55);
    com.google.javascript.rhino.jstype.FunctionType var57 = var51.createFunctionType(var52, var54);
    com.google.javascript.rhino.jstype.JSType[] var58 = new com.google.javascript.rhino.jstype.JSType[] { var52};
    com.google.javascript.rhino.jstype.FunctionType var59 = var34.createConstructorType((com.google.javascript.rhino.jstype.JSType)var48, var58);
    com.google.javascript.rhino.jstype.FunctionType var60 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var59);
    com.google.javascript.rhino.jstype.FunctionType var62 = var59.getBindReturnType(0);
    com.google.javascript.rhino.jstype.EnumType var63 = var9.createEnumType("", var25, (com.google.javascript.rhino.jstype.JSType)var59);
    int var64 = var25.getSourceOffset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var65 = var0.isPropertyTestFunction(var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "goog.abstractMethod"+ "'", var5.equals("goog.abstractMethod"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test468"); }


    com.google.javascript.rhino.JSDocInfo var0 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var1 = var0.getTypeNodes();
    boolean var2 = var0.isInterface();
    boolean var3 = var0.isHidden();
    java.util.List var4 = var0.getImplementedInterfaces();
    com.google.javascript.jscomp.JSModuleGraph var5 = new com.google.javascript.jscomp.JSModuleGraph(var4);
    com.google.javascript.rhino.JSDocInfo var6 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Set var7 = var6.getParameterNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.JSModule var8 = var5.getDeepestCommonDependencyInclusive((java.util.Collection)var7);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test469() {}
//   public void test469() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test469"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile.Generator var1 = null;
//     com.google.javascript.jscomp.SourceFile var2 = com.google.javascript.jscomp.SourceFile.fromGenerator("module$hi!", var1);
//     com.google.javascript.jscomp.Region var4 = var2.getRegion(1);
// 
//   }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test470"); }


    java.lang.String var2 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("(InputId: )", "(InputId: )");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "module$(InputId: )"+ "'", var2.equals("module$(InputId: )"));

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test471"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    var0.setCollapseProperties(false);
    com.google.javascript.rhino.JSDocInfo var10 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var11 = var10.getTypeNodes();
    boolean var12 = var10.isInterface();
    var10.addSuppression("");
    boolean var15 = var10.isNoCompile();
    java.util.Set var16 = var10.getParameterNames();
    var0.setStripTypePrefixes(var16);
    var0.setClosurePass(false);
    var0.setCommonJSModulePathPrefix("(InputId: )");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test472() {}
//   public void test472() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test472"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.Compiler.IntermediateState var4 = var2.getState();
//     com.google.javascript.rhino.ErrorReporter var5 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var6 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var5);
//     com.google.javascript.rhino.jstype.JSType var7 = null;
//     com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var10 = null;
//     var9.setJSDocInfo(var10);
//     com.google.javascript.rhino.jstype.FunctionType var12 = var6.createFunctionType(var7, var9);
//     com.google.javascript.rhino.jstype.JSType var14 = null;
//     var6.unregisterPropertyOnType("hi!", var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.JSDocInfo var17 = new com.google.javascript.rhino.JSDocInfo();
//     java.util.Collection var18 = var17.getTypeNodes();
//     boolean var19 = var17.isInterface();
//     var17.addSuppression("");
//     boolean var22 = var17.isNoCompile();
//     com.google.javascript.rhino.JSTypeExpression var23 = var17.getTypedefType();
//     com.google.javascript.rhino.JSDocInfo.Visibility var24 = var17.getVisibility();
//     java.util.List var25 = var17.getThrownTypes();
//     com.google.javascript.rhino.jstype.FunctionType var26 = var6.createFunctionType(var16, var25);
//     com.google.javascript.jscomp.NodeTraversal.Callback var27 = null;
//     com.google.javascript.jscomp.NodeTraversal.traverseRoots((com.google.javascript.jscomp.AbstractCompiler)var2, var25, var27);
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var29 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var30 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2, var29);
//     com.google.javascript.jscomp.SourceFile var33 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
//     com.google.javascript.jscomp.JsAst var34 = new com.google.javascript.jscomp.JsAst(var33);
//     com.google.javascript.rhino.InputId var35 = var34.getInputId();
//     var2.replaceScript(var34);
// 
//   }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test473"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var8 = var0.getTracerMode();
    boolean var9 = var0.assumeStrictThis();
    var0.setDefineToStringLiteral("module$hi!", "");
    var0.setCheckTypes(true);
    var0.setDefineToStringLiteral("module$hi!", "NAME \n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test474"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    var1.unregisterPropertyOnType("hi!", var9);
    java.lang.Iterable var12 = var1.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var13 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var13);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var18 = null;
    var17.setJSDocInfo(var18);
    com.google.javascript.rhino.jstype.FunctionType var20 = var14.createFunctionType(var15, var17);
    com.google.javascript.rhino.jstype.JSType var22 = null;
    var14.unregisterPropertyOnType("hi!", var22);
    java.lang.Iterable var25 = var14.getTypesWithProperty("hi!");
    java.lang.Iterable var27 = var14.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var28 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var28);
    com.google.javascript.rhino.jstype.JSType var30 = null;
    com.google.javascript.rhino.Node var32 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var33 = null;
    var32.setJSDocInfo(var33);
    com.google.javascript.rhino.jstype.FunctionType var35 = var29.createFunctionType(var30, var32);
    com.google.javascript.rhino.jstype.ObjectType var36 = var35.getParentScope();
    com.google.javascript.rhino.ErrorReporter var37 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var37);
    com.google.javascript.rhino.jstype.JSType var39 = null;
    com.google.javascript.rhino.Node var41 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var42 = null;
    var41.setJSDocInfo(var42);
    com.google.javascript.rhino.jstype.FunctionType var44 = var38.createFunctionType(var39, var41);
    boolean var45 = var44.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var46 = var44.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var47 = var14.createFunctionTypeWithNewThisType(var35, (com.google.javascript.rhino.jstype.ObjectType)var44);
    java.lang.String var48 = var44.getTemplateTypeName();
    var44.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var50 = var44.toMaybeFunctionType();
    var1.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope)var44);
    java.lang.Iterable var53 = var1.getEachReferenceTypeWithProperty("module$hi!");
    com.google.javascript.rhino.Node var55 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var56 = null;
    var55.setJSDocInfo(var56);
    boolean var58 = var55.isNE();
    boolean var59 = var55.isAdd();
    boolean var61 = var55.getBooleanProp(100);
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.name("");
    boolean var64 = var63.isGetElem();
    boolean var65 = var63.isNull();
    boolean var66 = var63.isDebugger();
    boolean var67 = var63.isArrayLit();
    var55.addChildToBack(var63);
    boolean var69 = var55.hasMoreThanOneChild();
    com.google.javascript.rhino.Node var70 = com.google.javascript.rhino.IR.neg(var55);
    com.google.javascript.rhino.jstype.StaticScope var72 = null;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSType var73 = var1.createFromTypeNodes(var55, "NAME ", var72);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test475() {}
//   public void test475() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test475"); }
// 
// 
//     com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
//     java.lang.Object var1 = null;
//     com.google.javascript.jscomp.graph.GraphNode var2 = var0.getNode(var1);
//     var0.popNodeAnnotations();
// 
//   }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test476"); }


    com.google.javascript.rhino.JSDocInfoBuilder var1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var2 = var1.recordInterface();
    boolean var3 = var1.isPopulated();
    boolean var4 = var1.recordNoAlias();
    boolean var5 = var1.recordInterface();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    var11.addChildrenToFront(var13);
    com.google.javascript.rhino.JSTypeExpression var16 = new com.google.javascript.rhino.JSTypeExpression(var13, "hi!");
    boolean var17 = var1.recordImplementedInterface(var16);
    com.google.javascript.rhino.ErrorReporter var18 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var18);
    com.google.javascript.rhino.jstype.JSType var20 = null;
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var23 = null;
    var22.setJSDocInfo(var23);
    com.google.javascript.rhino.jstype.FunctionType var25 = var19.createFunctionType(var20, var22);
    com.google.javascript.rhino.jstype.JSType var27 = null;
    var19.unregisterPropertyOnType("hi!", var27);
    com.google.javascript.rhino.Node var31 = com.google.javascript.rhino.IR.name("");
    boolean var32 = var31.isGetElem();
    boolean var33 = var31.isNull();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var35 = var31.srcref(var34);
    com.google.javascript.rhino.Node var37 = com.google.javascript.rhino.IR.name("");
    boolean var38 = var37.isGetElem();
    boolean var39 = var37.isNull();
    com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var41 = var37.srcref(var40);
    com.google.javascript.rhino.Node var42 = var35.useSourceInfoFromForTree(var41);
    com.google.javascript.rhino.ErrorReporter var43 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var43);
    com.google.javascript.rhino.jstype.JSType var45 = null;
    com.google.javascript.rhino.Node var47 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var48 = null;
    var47.setJSDocInfo(var48);
    com.google.javascript.rhino.jstype.FunctionType var50 = var44.createFunctionType(var45, var47);
    com.google.javascript.rhino.jstype.ObjectType var51 = var19.createObjectType("goog.abstractMethod", var42, (com.google.javascript.rhino.jstype.ObjectType)var50);
    com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var55 = null;
    var54.setJSDocInfo(var55);
    boolean var57 = var54.isAssignAdd();
    com.google.javascript.rhino.Node var59 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var60 = null;
    var59.setJSDocInfo(var60);
    boolean var62 = var59.isAssignAdd();
    com.google.javascript.rhino.Node var63 = com.google.javascript.rhino.IR.throwNode(var59);
    com.google.javascript.rhino.Node var64 = var54.srcrefTree(var63);
    com.google.javascript.rhino.ErrorReporter var65 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var66 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var65);
    com.google.javascript.rhino.jstype.JSType var67 = null;
    com.google.javascript.rhino.Node var69 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var70 = null;
    var69.setJSDocInfo(var70);
    com.google.javascript.rhino.jstype.FunctionType var72 = var66.createFunctionType(var67, var69);
    com.google.javascript.rhino.jstype.ObjectType var73 = var72.getParentScope();
    com.google.javascript.rhino.jstype.EnumType var74 = var19.createEnumType("hi!. hi! at hi! line (unknown line) : (unknown column)", var54, (com.google.javascript.rhino.jstype.JSType)var73);
    boolean var75 = var74.isEnumType();
    com.google.javascript.rhino.ErrorReporter var76 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var76);
    com.google.javascript.rhino.jstype.JSType var78 = null;
    com.google.javascript.rhino.Node var80 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var81 = null;
    var80.setJSDocInfo(var81);
    com.google.javascript.rhino.jstype.FunctionType var83 = var77.createFunctionType(var78, var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.JSType var84 = var16.evaluate((com.google.javascript.rhino.jstype.StaticScope)var74, var77);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test477"); }


    com.google.javascript.jscomp.CompilerOptions var0 = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.DiagnosticGroup var1 = null;
    com.google.javascript.jscomp.CheckLevel var2 = null;
    var0.setWarningLevel(var1, var2);
    var0.setLocale("hi!");
    com.google.javascript.jscomp.CheckLevel var6 = null;
    var0.setCheckUnreachableCode(var6);
    com.google.javascript.jscomp.CompilerOptions.TracerMode var8 = var0.getTracerMode();
    boolean var9 = var0.assumeStrictThis();
    var0.setCheckSuspiciousCode(false);
    com.google.javascript.rhino.JSDocInfo var12 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var13 = var12.getTypeNodes();
    boolean var14 = var12.isInterface();
    var12.addSuppression("");
    boolean var17 = var12.isNoCompile();
    java.util.Set var18 = var12.getParameterNames();
    boolean var19 = var12.isExterns();
    boolean var20 = var12.shouldPreserveTry();
    int var21 = var12.getParameterCount();
    boolean var22 = var12.isDeprecated();
    java.util.List var23 = var12.getThrownTypes();
    var0.setSourceMapLocationMappings(var23);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.paramList(var23);
    com.google.javascript.jscomp.deps.SortedDependencies var26 = new com.google.javascript.jscomp.deps.SortedDependencies(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.jscomp.deps.DependencyInfo var28 = var26.getInputProviding("(NAME \n    NAME \n)");
      fail("Expected exception of type com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException");
    } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test478() {}
//   public void test478() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test478"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var3 = null;
//     var2.setJSDocInfo(var3);
//     boolean var5 = var2.isAssignAdd();
//     com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var8 = null;
//     var7.setJSDocInfo(var8);
//     boolean var10 = var7.isAssignAdd();
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
//     com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
//     com.google.javascript.rhino.Node var14 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var15 = null;
//     var14.setJSDocInfo(var15);
//     boolean var17 = var14.isAssignAdd();
//     com.google.javascript.rhino.Node var19 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var20 = null;
//     var19.setJSDocInfo(var20);
//     boolean var22 = var19.isAssignAdd();
//     com.google.javascript.rhino.Node var23 = com.google.javascript.rhino.IR.throwNode(var19);
//     com.google.javascript.rhino.Node var24 = var14.srcrefTree(var23);
//     var2.addChildrenToFront(var14);
//     java.util.List var26 = var0.identifyTypeDeclarationCall(var2);
//     boolean var29 = var0.isExported("", true);
//     boolean var32 = var0.isExported("module$hi!", true);
//     java.lang.String var33 = var0.getExportPropertyFunction();
//     com.google.javascript.rhino.Node var35 = new com.google.javascript.rhino.Node(0);
//     java.lang.String var36 = var0.getSingletonGetterClassName(var35);
// 
//   }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test479"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isNull();
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var5 = var1.srcref(var4);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    boolean var8 = var7.isGetElem();
    boolean var9 = var7.isNull();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var11 = var7.srcref(var10);
    com.google.javascript.rhino.Node var12 = var5.useSourceInfoFromForTree(var11);
    boolean var13 = var5.hasMoreThanOneChild();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.JSDocInfo var14 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test480"); }


    com.google.javascript.jscomp.graph.LinkedDirectedGraph var0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    java.lang.String var1 = var0.getName();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var2 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithoutAnnotations();
    com.google.javascript.jscomp.graph.LinkedDirectedGraph var3 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.create();
    com.google.javascript.jscomp.graph.DiGraph.DiGraphNode var4 = var2.createDirectedGraphNode((java.lang.Object)var3);
    java.util.List var5 = var0.getDirectedPredNodes(var4);
    java.lang.Object var6 = null;
    com.google.javascript.jscomp.CompilerOptions var7 = new com.google.javascript.jscomp.CompilerOptions();
    var7.setSourceMapOutputPath("module$hi!");
    com.google.javascript.jscomp.CheckLevel var10 = null;
    var7.setCheckMissingReturn(var10);
    var7.setInputDelimiter("TRUE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var14 = var0.isConnected(var6, (java.lang.Object)"TRUE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "LinkedGraph"+ "'", var1.equals("LinkedGraph"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test481"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    boolean var5 = var1.hasNamespace("");
    com.google.javascript.rhino.jstype.FunctionBuilder var6 = new com.google.javascript.rhino.jstype.FunctionBuilder(var1);
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var9 = null;
    var8.setJSDocInfo(var9);
    boolean var11 = var8.isAssignAdd();
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.throwNode(var8);
    com.google.javascript.rhino.jstype.FunctionBuilder var13 = var6.withSourceNode(var8);
    com.google.javascript.rhino.Node var15 = com.google.javascript.rhino.IR.name("");
    boolean var16 = var15.isGetElem();
    boolean var17 = var15.isNull();
    boolean var18 = var15.isDebugger();
    com.google.javascript.rhino.jstype.FunctionBuilder var19 = var13.withParamsNode(var15);
    boolean var20 = var15.isNE();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test482() {}
//   public void test482() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test482"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.JSError[] var3 = var2.getErrors();
//     com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt var4 = null;
//     com.google.javascript.jscomp.LightweightMessageFormatter var5 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider)var2, var4);
//     java.lang.String var6 = var2.toSource();
// 
//   }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test483"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    boolean var5 = var1.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var6 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var6);
    com.google.javascript.rhino.jstype.JSType var8 = null;
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var11 = null;
    var10.setJSDocInfo(var11);
    com.google.javascript.rhino.jstype.FunctionType var13 = var7.createFunctionType(var8, var10);
    com.google.javascript.rhino.jstype.JSType var15 = null;
    var7.unregisterPropertyOnType("hi!", var15);
    java.lang.Iterable var18 = var7.getTypesWithProperty("hi!");
    java.lang.Iterable var20 = var7.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var21 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var21);
    com.google.javascript.rhino.jstype.JSType var23 = null;
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    com.google.javascript.rhino.jstype.FunctionType var28 = var22.createFunctionType(var23, var25);
    com.google.javascript.rhino.jstype.ObjectType var29 = var28.getParentScope();
    com.google.javascript.rhino.ErrorReporter var30 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var30);
    com.google.javascript.rhino.jstype.JSType var32 = null;
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var35 = null;
    var34.setJSDocInfo(var35);
    com.google.javascript.rhino.jstype.FunctionType var37 = var31.createFunctionType(var32, var34);
    boolean var38 = var37.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var39 = var37.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var40 = var7.createFunctionTypeWithNewThisType(var28, (com.google.javascript.rhino.jstype.ObjectType)var37);
    java.lang.String var41 = var37.getTemplateTypeName();
    var37.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var43 = var37.toMaybeFunctionType();
    java.lang.String var44 = var37.toString();
    boolean var45 = var37.isRegexpType();
    com.google.javascript.rhino.jstype.ObjectType var46 = var1.createObjectType((com.google.javascript.rhino.jstype.ObjectType)var37);
    var1.setLastGeneration(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "function (): ?"+ "'", var44.equals("function (): ?"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test484"); }


    java.lang.String var1 = com.google.javascript.jscomp.ProcessCommonJSModules.toModuleName("NAME ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "module$NAME "+ "'", var1.equals("module$NAME "));

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test485"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    boolean var14 = var13.isGetElem();
    var13.detachChildren();
    com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.add(var1, var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var17 = com.google.javascript.rhino.IR.throwNode(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test486"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    boolean var37 = var11.hasChild(var13);
    boolean var38 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var13);
    boolean var39 = var13.isNull();
    com.google.javascript.rhino.JSDocInfo var40 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var41 = var40.getTypeNodes();
    boolean var42 = var40.isInterface();
    boolean var43 = var40.isHidden();
    com.google.javascript.rhino.Node var44 = var40.getAssociatedNode();
    boolean var45 = var40.isConstructor();
    int var46 = var40.getParameterCount();
    var13.setJSDocInfo(var40);
    java.util.Set var48 = var40.getSuppressions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test487() {}
//   public void test487() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test487"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     var2.disableThreads();
//     com.google.javascript.jscomp.JSSourceFile var5 = null;
//     com.google.javascript.jscomp.JSSourceFile[] var6 = new com.google.javascript.jscomp.JSSourceFile[] { var5};
//     com.google.javascript.jscomp.JSModule var8 = new com.google.javascript.jscomp.JSModule("TRUE");
//     java.util.List var9 = var8.getInputs();
//     java.util.Set var10 = var8.getAllDependencies();
//     java.lang.String var11 = var8.toString();
//     com.google.javascript.jscomp.JSModule[] var12 = new com.google.javascript.jscomp.JSModule[] { var8};
//     com.google.javascript.jscomp.CompilerOptions var13 = new com.google.javascript.jscomp.CompilerOptions();
//     com.google.javascript.jscomp.DiagnosticGroup var14 = null;
//     com.google.javascript.jscomp.CheckLevel var15 = null;
//     var13.setWarningLevel(var14, var15);
//     var13.setLocale("hi!");
//     com.google.javascript.jscomp.CheckLevel var19 = null;
//     var13.setCheckUnreachableCode(var19);
//     com.google.javascript.jscomp.CompilerOptions.TweakProcessing var21 = null;
//     var13.setTweakProcessing(var21);
//     var13.setNameReferenceReportPath("hi!");
//     boolean var25 = var13.assumeStrictThis();
//     var13.setRenamePrefixNamespace("");
//     var13.setCoalesceVariableNames(false);
//     var2.init(var6, var12, var13);
// 
//   }

  public void test488() {}
//   public void test488() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test488"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.rhino.Node var3 = var2.getRoot();
//     com.google.javascript.jscomp.JSError[] var4 = var2.getWarnings();
//     com.google.javascript.jscomp.SourceFile var7 = com.google.javascript.jscomp.SourceFile.fromCode("hi!", "");
//     com.google.javascript.jscomp.JsAst var8 = new com.google.javascript.jscomp.JsAst(var7);
//     com.google.javascript.rhino.InputId var9 = var8.getInputId();
//     var2.addNewScript(var8);
// 
//   }

  public void test489() {}
//   public void test489() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test489"); }
// 
// 
//     com.google.javascript.jscomp.ClosureCodingConvention var0 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.jstype.FunctionType var1 = null;
//     com.google.javascript.rhino.jstype.FunctionType var2 = null;
//     com.google.javascript.jscomp.CodingConvention.SubclassType var3 = null;
//     var0.applySubclassRelationship(var1, var2, var3);
//     com.google.javascript.jscomp.ClosureCodingConvention var5 = new com.google.javascript.jscomp.ClosureCodingConvention((com.google.javascript.jscomp.CodingConvention)var0);
//     com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.block();
//     boolean var7 = var6.isDebugger();
//     boolean var8 = var5.isVarArgsParameter(var6);
//     com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var12 = null;
//     var11.setJSDocInfo(var12);
//     boolean var14 = var11.isAssignAdd();
//     com.google.javascript.rhino.Node var16 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var17 = null;
//     var16.setJSDocInfo(var17);
//     boolean var19 = var16.isAssignAdd();
//     com.google.javascript.rhino.Node var20 = com.google.javascript.rhino.IR.throwNode(var16);
//     com.google.javascript.rhino.Node var21 = var11.srcrefTree(var20);
//     boolean var22 = var21.isLocalResultCall();
//     com.google.javascript.jscomp.ClosureCodingConvention var23 = new com.google.javascript.jscomp.ClosureCodingConvention();
//     com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
//     boolean var26 = var25.isGetElem();
//     boolean var27 = var25.isNull();
//     com.google.javascript.rhino.Node var28 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var29 = var25.srcref(var28);
//     com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.throwNode(var29);
//     java.lang.String var31 = var23.getSingletonGetterClassName(var30);
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
//     boolean var34 = var33.isGetElem();
//     boolean var35 = var33.isNull();
//     com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var37 = var33.srcref(var36);
//     com.google.javascript.rhino.Node var39 = com.google.javascript.rhino.IR.name("");
//     var37.addChildrenToFront(var39);
//     com.google.javascript.rhino.ErrorReporter var42 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var42);
//     com.google.javascript.rhino.jstype.JSType var44 = null;
//     com.google.javascript.rhino.Node var46 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var47 = null;
//     var46.setJSDocInfo(var47);
//     com.google.javascript.rhino.jstype.FunctionType var49 = var43.createFunctionType(var44, var46);
//     boolean var50 = var49.isGlobalThisType();
//     boolean var51 = var49.isConstructor();
//     var37.putProp(0, (java.lang.Object)var49);
//     com.google.javascript.rhino.Node var54 = com.google.javascript.rhino.IR.name("");
//     boolean var55 = var54.isGetElem();
//     boolean var56 = var54.isNull();
//     com.google.javascript.rhino.Node var57 = com.google.javascript.rhino.IR.returnNode();
//     com.google.javascript.rhino.Node var58 = var54.srcref(var57);
//     com.google.javascript.rhino.Node var59 = new com.google.javascript.rhino.Node(0, var21, var30, var37, var58);
//     int var60 = var58.getSideEffectFlags();
//     java.util.List var61 = var5.identifyTypeDeclarationCall(var58);
// 
//   }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test490"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    boolean var2 = var1.isGetElem();
    boolean var3 = var1.isTrue();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.name("");
    boolean var6 = var5.isGetElem();
    boolean var7 = var5.isNull();
    com.google.javascript.rhino.Node var8 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var9 = var5.srcref(var8);
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var9);
    com.google.javascript.rhino.Node[] var11 = new com.google.javascript.rhino.Node[] { var10};
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.block(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.newNode(var1, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test491"); }


    com.google.javascript.rhino.Node var0 = com.google.javascript.rhino.IR.continueNode();
    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var3 = null;
    var2.setJSDocInfo(var3);
    boolean var5 = var2.isAssignAdd();
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var8 = null;
    var7.setJSDocInfo(var8);
    boolean var10 = var7.isAssignAdd();
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.throwNode(var7);
    com.google.javascript.rhino.Node var12 = var2.srcrefTree(var11);
    com.google.javascript.rhino.Node.AncestorIterable var13 = var11.getAncestors();
    boolean var14 = var0.isEquivalentTo(var11);
    boolean var15 = var11.isWhile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test492"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node var13 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var14 = null;
    var13.setJSDocInfo(var14);
    boolean var16 = var13.isAssignAdd();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isAssignAdd();
    com.google.javascript.rhino.Node var22 = com.google.javascript.rhino.IR.throwNode(var18);
    com.google.javascript.rhino.Node var23 = var13.srcrefTree(var22);
    com.google.javascript.rhino.Node var25 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var26 = null;
    var25.setJSDocInfo(var26);
    boolean var28 = var25.isAssignAdd();
    com.google.javascript.rhino.Node var30 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var31 = null;
    var30.setJSDocInfo(var31);
    boolean var33 = var30.isAssignAdd();
    com.google.javascript.rhino.Node var34 = com.google.javascript.rhino.IR.throwNode(var30);
    com.google.javascript.rhino.Node var35 = var25.srcrefTree(var34);
    var13.addChildrenToFront(var25);
    boolean var37 = var11.hasChild(var13);
    boolean var38 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(var13);
    boolean var39 = var13.isNull();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var40 = com.google.javascript.rhino.IR.defaultCase(var13);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test493() {}
//   public void test493() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test493"); }
// 
// 
//     com.google.javascript.rhino.ErrorReporter var0 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
//     com.google.javascript.rhino.jstype.JSType var2 = null;
//     com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var5 = null;
//     var4.setJSDocInfo(var5);
//     com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
//     var1.setLastGeneration(true);
//     java.lang.Iterable var11 = var1.getEachReferenceTypeWithProperty("goog.abstractMethod");
//     com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode var12 = null;
//     var1.setResolveMode(var12);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     com.google.javascript.rhino.jstype.FunctionType var21 = var15.createFunctionType(var16, var18);
//     com.google.javascript.rhino.jstype.JSType var23 = null;
//     var15.unregisterPropertyOnType("hi!", var23);
//     java.lang.Iterable var26 = var15.getTypesWithProperty("hi!");
//     java.lang.Iterable var28 = var15.getTypesWithProperty("hi!");
//     com.google.javascript.rhino.ErrorReporter var29 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var29);
//     com.google.javascript.rhino.jstype.JSType var31 = null;
//     com.google.javascript.rhino.Node var33 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var34 = null;
//     var33.setJSDocInfo(var34);
//     com.google.javascript.rhino.jstype.FunctionType var36 = var30.createFunctionType(var31, var33);
//     com.google.javascript.rhino.jstype.ObjectType var37 = var36.getParentScope();
//     com.google.javascript.rhino.ErrorReporter var38 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var38);
//     com.google.javascript.rhino.jstype.JSType var40 = null;
//     com.google.javascript.rhino.Node var42 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var43 = null;
//     var42.setJSDocInfo(var43);
//     com.google.javascript.rhino.jstype.FunctionType var45 = var39.createFunctionType(var40, var42);
//     boolean var46 = var45.matchesInt32Context();
//     com.google.javascript.rhino.jstype.ObjectType var47 = var45.toObjectType();
//     com.google.javascript.rhino.jstype.FunctionType var48 = var15.createFunctionTypeWithNewThisType(var36, (com.google.javascript.rhino.jstype.ObjectType)var45);
//     java.lang.String var49 = var45.getTemplateTypeName();
//     var45.clearCachedValues();
//     com.google.javascript.rhino.jstype.FunctionType var51 = var45.toMaybeFunctionType();
//     com.google.javascript.rhino.jstype.JSType var53 = var51.getPropertyType("hi!. hi! at hi! line (unknown line) : (unknown column)");
//     com.google.javascript.rhino.jstype.JSType var54 = var1.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType)var51);
//     com.google.javascript.rhino.jstype.JSTypeNative var55 = null;
//     com.google.javascript.rhino.jstype.ObjectType var56 = var1.getNativeObjectType(var55);
// 
//   }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test494"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var2 = null;
    var1.setJSDocInfo(var2);
    boolean var4 = var1.isAssignAdd();
    com.google.javascript.rhino.Node var6 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var7 = null;
    var6.setJSDocInfo(var7);
    boolean var9 = var6.isAssignAdd();
    com.google.javascript.rhino.Node var10 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node var11 = var1.srcrefTree(var10);
    com.google.javascript.rhino.Node.AncestorIterable var12 = var10.getAncestors();
    com.google.javascript.rhino.JSDocInfoBuilder var14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
    boolean var15 = var14.recordInterface();
    boolean var16 = var14.isPopulated();
    com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var19 = null;
    var18.setJSDocInfo(var19);
    boolean var21 = var18.isNE();
    boolean var22 = var18.isFor();
    com.google.javascript.rhino.JSDocInfo var23 = var14.build(var18);
    var18.setCharno(10);
    com.google.javascript.rhino.JSDocInfo var26 = new com.google.javascript.rhino.JSDocInfo();
    java.util.Collection var27 = var26.getTypeNodes();
    boolean var28 = var26.isInterface();
    var26.addSuppression("");
    boolean var31 = var26.isNoCompile();
    java.util.Set var32 = var26.getParameterNames();
    boolean var33 = var26.isExterns();
    java.util.Set var34 = var26.getSuppressions();
    var18.setDirectives(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.tryFinally(var10, var18);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test495() {}
//   public void test495() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test495"); }
// 
// 
//     com.google.javascript.jscomp.SourceFile var1 = new com.google.javascript.jscomp.SourceFile("module$hi!");
//     com.google.javascript.jscomp.CompilerInput var3 = new com.google.javascript.jscomp.CompilerInput(var1, true);
//     java.lang.String var4 = var3.getCode();
//     java.lang.String var5 = var3.getName();
//     var3.removeRequire("LinkedGraph");
// 
//   }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test496"); }


    com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.name("");
    boolean var3 = var2.isGetElem();
    boolean var4 = var2.isNull();
    com.google.javascript.rhino.Node var5 = com.google.javascript.rhino.IR.returnNode();
    com.google.javascript.rhino.Node var6 = var2.srcref(var5);
    com.google.javascript.rhino.Node var7 = com.google.javascript.rhino.IR.throwNode(var6);
    com.google.javascript.rhino.Node[] var8 = new com.google.javascript.rhino.Node[] { var7};
    com.google.javascript.rhino.Node var9 = com.google.javascript.rhino.IR.block(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var12 = new com.google.javascript.rhino.Node((-1), var8, 100, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test497"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    com.google.javascript.rhino.jstype.JSType var2 = null;
    com.google.javascript.rhino.Node var4 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var5 = null;
    var4.setJSDocInfo(var5);
    com.google.javascript.rhino.jstype.FunctionType var7 = var1.createFunctionType(var2, var4);
    com.google.javascript.rhino.ErrorReporter var8 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var8);
    com.google.javascript.rhino.jstype.JSType var10 = null;
    com.google.javascript.rhino.Node var12 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var13 = null;
    var12.setJSDocInfo(var13);
    com.google.javascript.rhino.jstype.FunctionType var15 = var9.createFunctionType(var10, var12);
    boolean var16 = var15.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType[] var25 = new com.google.javascript.rhino.jstype.JSType[] { var19};
    com.google.javascript.rhino.jstype.FunctionType var26 = var1.createConstructorType((com.google.javascript.rhino.jstype.JSType)var15, var25);
    com.google.javascript.rhino.jstype.FunctionType var27 = var15.toMaybeFunctionType();
    java.util.Set var28 = var27.getOwnPropertyNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.jstype.ObjectType var30 = var27.getTopMostDefiningType("module$(InputId: )");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test498"); }


    com.google.javascript.rhino.ErrorReporter var0 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var0);
    var1.identifyNonNullableName("");
    boolean var5 = var1.hasNamespace("");
    com.google.javascript.rhino.ErrorReporter var7 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var7);
    com.google.javascript.rhino.jstype.JSType var9 = null;
    com.google.javascript.rhino.Node var11 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var12 = null;
    var11.setJSDocInfo(var12);
    com.google.javascript.rhino.jstype.FunctionType var14 = var8.createFunctionType(var9, var11);
    com.google.javascript.rhino.jstype.SimpleSlot var16 = new com.google.javascript.rhino.jstype.SimpleSlot("module$hi!", (com.google.javascript.rhino.jstype.JSType)var14, false);
    com.google.javascript.rhino.ErrorReporter var17 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var17);
    com.google.javascript.rhino.jstype.JSType var19 = null;
    com.google.javascript.rhino.Node var21 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var22 = null;
    var21.setJSDocInfo(var22);
    com.google.javascript.rhino.jstype.FunctionType var24 = var18.createFunctionType(var19, var21);
    com.google.javascript.rhino.jstype.JSType var26 = null;
    var18.unregisterPropertyOnType("hi!", var26);
    java.lang.Iterable var29 = var18.getTypesWithProperty("hi!");
    java.lang.Iterable var31 = var18.getTypesWithProperty("hi!");
    com.google.javascript.rhino.ErrorReporter var32 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var32);
    com.google.javascript.rhino.jstype.JSType var34 = null;
    com.google.javascript.rhino.Node var36 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var37 = null;
    var36.setJSDocInfo(var37);
    com.google.javascript.rhino.jstype.FunctionType var39 = var33.createFunctionType(var34, var36);
    com.google.javascript.rhino.jstype.ObjectType var40 = var39.getParentScope();
    com.google.javascript.rhino.ErrorReporter var41 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var41);
    com.google.javascript.rhino.jstype.JSType var43 = null;
    com.google.javascript.rhino.Node var45 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var46 = null;
    var45.setJSDocInfo(var46);
    com.google.javascript.rhino.jstype.FunctionType var48 = var42.createFunctionType(var43, var45);
    boolean var49 = var48.matchesInt32Context();
    com.google.javascript.rhino.jstype.ObjectType var50 = var48.toObjectType();
    com.google.javascript.rhino.jstype.FunctionType var51 = var18.createFunctionTypeWithNewThisType(var39, (com.google.javascript.rhino.jstype.ObjectType)var48);
    java.lang.String var52 = var48.getTemplateTypeName();
    var48.clearCachedValues();
    com.google.javascript.rhino.jstype.FunctionType var54 = var48.toMaybeFunctionType();
    com.google.javascript.rhino.jstype.FunctionType var55 = var1.createFunctionTypeWithNewReturnType(var14, (com.google.javascript.rhino.jstype.JSType)var48);
    com.google.javascript.rhino.jstype.JSType var57 = var48.findPropertyType("hi!");
    com.google.javascript.rhino.jstype.JSType var59 = var48.findPropertyType("module$hi!");
    com.google.javascript.rhino.ErrorReporter var60 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var60);
    com.google.javascript.rhino.jstype.JSType var62 = null;
    com.google.javascript.rhino.Node var64 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var65 = null;
    var64.setJSDocInfo(var65);
    com.google.javascript.rhino.jstype.FunctionType var67 = var61.createFunctionType(var62, var64);
    com.google.javascript.rhino.ErrorReporter var68 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var68);
    com.google.javascript.rhino.jstype.JSType var70 = null;
    com.google.javascript.rhino.Node var72 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var73 = null;
    var72.setJSDocInfo(var73);
    com.google.javascript.rhino.jstype.FunctionType var75 = var69.createFunctionType(var70, var72);
    boolean var76 = var75.matchesInt32Context();
    com.google.javascript.rhino.ErrorReporter var77 = null;
    com.google.javascript.rhino.jstype.JSTypeRegistry var78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var77);
    com.google.javascript.rhino.jstype.JSType var79 = null;
    com.google.javascript.rhino.Node var81 = com.google.javascript.rhino.IR.name("");
    com.google.javascript.rhino.JSDocInfo var82 = null;
    var81.setJSDocInfo(var82);
    com.google.javascript.rhino.jstype.FunctionType var84 = var78.createFunctionType(var79, var81);
    com.google.javascript.rhino.jstype.JSType[] var85 = new com.google.javascript.rhino.jstype.JSType[] { var79};
    com.google.javascript.rhino.jstype.FunctionType var86 = var61.createConstructorType((com.google.javascript.rhino.jstype.JSType)var75, var85);
    com.google.javascript.rhino.jstype.FunctionType var87 = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType((com.google.javascript.rhino.jstype.JSType)var86);
    boolean var88 = var87.isArrayType();
    boolean var90 = var87.hasOwnProperty("module$hi!");
    boolean var91 = var48.hasEqualCallType(var87);
    boolean var92 = var87.isCheckedUnknownType();
    com.google.javascript.rhino.jstype.JSType var94 = var87.findPropertyType("NAME \n    NAME \n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test499() {}
//   public void test499() throws Throwable {
// 
//     if (debug) { System.out.println(); System.out.print("RandoopTest0.test499"); }
// 
// 
//     java.util.logging.Logger var0 = null;
//     com.google.javascript.jscomp.LoggerErrorManager var1 = new com.google.javascript.jscomp.LoggerErrorManager(var0);
//     com.google.javascript.jscomp.Compiler var2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager)var1);
//     com.google.javascript.jscomp.Compiler.IntermediateState var3 = var2.getState();
//     com.google.javascript.jscomp.CheckLevel var7 = null;
//     com.google.javascript.jscomp.DiagnosticType var10 = com.google.javascript.jscomp.DiagnosticType.disabled("hi!", "hi!");
//     java.lang.String[] var12 = new java.lang.String[] { "hi!"};
//     com.google.javascript.jscomp.JSError var13 = com.google.javascript.jscomp.JSError.make("hi!", 100, 0, var7, var10, var12);
//     com.google.javascript.rhino.ErrorReporter var14 = null;
//     com.google.javascript.rhino.jstype.JSTypeRegistry var15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(var14);
//     com.google.javascript.rhino.jstype.JSType var16 = null;
//     com.google.javascript.rhino.Node var18 = com.google.javascript.rhino.IR.name("");
//     com.google.javascript.rhino.JSDocInfo var19 = null;
//     var18.setJSDocInfo(var19);
//     com.google.javascript.rhino.jstype.FunctionType var21 = var15.createFunctionType(var16, var18);
//     boolean var22 = var21.isGlobalThisType();
//     boolean var23 = var13.equals((java.lang.Object)var21);
//     com.google.javascript.jscomp.CheckLevel var24 = var2.getErrorLevel(var13);
// 
//   }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test500"); }


    com.google.javascript.rhino.Node var1 = com.google.javascript.rhino.IR.name("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.google.javascript.rhino.Node var2 = com.google.javascript.rhino.IR.block(var1);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

}
